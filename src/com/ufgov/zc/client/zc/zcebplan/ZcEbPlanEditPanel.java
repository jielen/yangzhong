/** * ZcEbPlanEditPanel.java * com.ufgov.gk.client.zc.zcebopenbidplan * Administrator * 2010-5-26 */package com.ufgov.zc.client.zc.zcebplan;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AuditButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcEbPlan;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.publish.IZcEbPlanServiceDelegate;import java.awt.Color;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;/** * @author Administrator * */public class ZcEbPlanEditPanel extends AbstractMainSubEditPanel {  private static final Logger logger = Logger.getLogger(ZcEbPlanEditPanel.class);  private IZcEbPlanServiceDelegate zcEbPlanServiceDelegate = (IZcEbPlanServiceDelegate) ServiceFactory  .create(IZcEbPlanServiceDelegate.class, "zcEbPlanServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_PLAN";  private FuncButton addButton = new AddButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private FuncButton auditButton = new AuditButton();  private FuncButton unAuditButton = new UnauditButton();  private final ListCursor listCursor;  private ZcEbPlan oldPlan;  private String tabStatus;  private ZcEbPlanListPanel listPanel;  private ZcEbPlanEditPanel self = this;  private GkBaseDialog parent;  private String projSqlMapSelectedId = "ZcEbPlan.getZcEbProj";  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private int editFlag = 0;  TextFieldEditor projNameEditor = new TextFieldEditor(LangTransMeta  .translate(ZcElementConstants.FIELD_TRANS_PROJ_NAME), "projName");  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId);  public ZcEbPlanEditPanel(ZcEbPlanDialog parent, ListCursor listCursor, String tabStatus,  ZcEbPlanListPanel listPanel) {    // TCJLODO Auto-generated constructor stub    super(ZcEbPlan.class, BillElementMeta.getBillElementMetaWithoutNd("ZC_EB_PLAN"));    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),    LangTransMeta.translate("项目计划管理"), TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 2;    init();    requestMeta.setCompoId(compoId);    refreshData();    setButtonStatus();    updateFieldEditorsEditable();  }  /**   * 设置工具条上按钮的可用性   *    * Administrator   * 2010-5-15   */  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs.setButton(this.addButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.auditButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.unAuditButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.exitButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.helpButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbPlan obj = (ZcEbPlan) (this.listCursor.getCurrentObject());    ZcUtil.setButtonEnable(this.btnStatusList, ZcSettingConstants.BILL_STATUS_ALL, this.pageStatus,    this.compoId, obj.getProcessInstId());  }  private void refreshData() {    ZcEbPlan plan = (ZcEbPlan) listCursor.getCurrentObject();    if (plan == null) {//新增页面      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      plan = new ZcEbPlan();      setDefualtValue(plan, ZcSettingConstants.PAGE_STATUS_NEW);      List lst = new ArrayList();      lst.add(plan);      this.listCursor.setDataList(lst, -1);    } else {      plan = zcEbPlanServiceDelegate.getZcEbPlanByID(plan.getPlanCode(), requestMeta);    }    listCursor.setCurrentObject(plan);    this.setEditingObject(plan);    setOldObject();  }  private void setDefualtValue(ZcEbPlan plan, String pageStatus) {    if (pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {      plan.setCreator(this.requestMeta.getSvUserName());      plan.setCreateDate(this.requestMeta.getSysDate());      plan.setNd(this.requestMeta.getSvNd());    }  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)    || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (editFlag == 1) {          if (fd.getFieldName() != null          && (fd.getFieldName().equals("creator") || fd.getFieldName().equals("createDate")          || fd.getFieldName().equals("status") || fd.getFieldName().equals("projName") || fd          .getFieldName().equals("projCode"))) {            fd.setEnabled(false);          } else {            fd.setEnabled(true);          }          editFlag = 0;        } else {          if (fd.getFieldName() != null          && (fd.getFieldName().equals("creator") || fd.getFieldName().equals("createDate")          || fd.getFieldName().equals("status") || fd.getFieldName().equals("projName"))) {            fd.setEnabled(false);          } else {            fd.setEnabled(true);          }        }      }    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }    }  }  private void setOldObject() {    oldPlan = (ZcEbPlan) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    String columNames[] = { "项目编号", "项目名称", "预算", "采购类型", "负责人", "立项时间" };    ZcEbProjFnHandler projHandler = new ZcEbProjFnHandler(columNames);    ElementConditionDto dto = new ElementConditionDto();    dto.setStatus("specialNumWID");    dto.setNd(WorkEnv.getInstance().getTransNd());    dto.setManageCode(requestMeta.getSvUserID());    dto.setOrgCode(requestMeta.getSvOrgCode());    ForeignEntityFieldEditor editor0 = new ForeignEntityFieldEditor(this.projSqlMapSelectedId, dto, 20,    projHandler, columNames, "采购项目编号", "projCode");    editor0.getField().setEnabled(false);    editorList.add(editor0);    editor0.addValueChangeListener(new ValueChangeListener() {      @Override      public void valueChanged(ValueChangeEvent e) {        projCodeChange();      }    });    editorList.add(projNameEditor);    Integer[] allowMinutes = { 0, 10, 20, 30, 40, 50 };    DateFieldEditor df = new DateFieldEditor("招标文件发售时间", "sellStartTime", DateFieldEditor.TimeTypeH24,    allowMinutes, true);    editorList.add(df);    df = new DateFieldEditor("招标文件停售时间", "sellEndTime", DateFieldEditor.TimeTypeH24, allowMinutes, true);    editorList.add(df);    df = new DateFieldEditor("投标截止时间", "bidEndTime", DateFieldEditor.TimeTypeH24, allowMinutes, true);    editorList.add(df);    df = new DateFieldEditor("开标时间", "openBidTime", DateFieldEditor.TimeTypeH24, allowMinutes, true);    editorList.add(df);    TextFieldEditor editor11 = new TextFieldEditor("开标地点", "openBidAddress");    editorList.add(editor11);    editor11 = new TextFieldEditor("招标文件价格", "docPrice");    editorList.add(editor11);    editor11 = new TextFieldEditor("招标文件发售联系人", "docSeller");    editorList.add(editor11);    editor11 = new TextFieldEditor("招标文件发售地址", "docSellAddress");    editorList.add(editor11);    editor11 = new TextFieldEditor("招标文件发售电话", "docSellPhone");    editorList.add(editor11);    TextFieldEditor editor12 = new TextFieldEditor("备注", "remark");    editorList.add(editor12);    TextFieldEditor editor10 = new TextFieldEditor("创建人", "creator");    editorList.add(editor10);    DateFieldEditor editor6a = new DateFieldEditor("创建日期", "createDate");    editorList.add(editor6a);    return editorList;  }  private void projCodeChange() {    ZcEbPlan plan = (ZcEbPlan) this.listCursor.getCurrentObject();    for (AbstractFieldEditor editor : this.fieldEditors) {      if (editor.getFieldName().equals("projCode")) {        Object obj = editor.getValue();        if (obj == null || obj.toString().trim().length() == 0) {          plan.setProjCode(null);          plan.setProjName(null);          this.projNameEditor.setEditObject(plan);          break;        }      }    }  }  /**   * 项目选择部件   * @author Administrator   *   */  private class ZcEbProjFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbProjFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbProj proj = (ZcEbProj) object;        ZcEbPlan plan = (ZcEbPlan) listCursor.getCurrentObject();        plan.setProjCode(proj.getProjCode());        plan.setProjName(proj.getProjName());        setEditingObject(plan);        projCodeChange();      }    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = rowData.getProjSum();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE", rowData.getPurType());        data[i][col++] = rowData.getManager();        SimpleDateFormat sdf = new SimpleDateFormat(ZcSettingConstants.SIMPLE_DATE_FORMAT_DATE_ONLY);        data[i][col++] = sdf.format(rowData.getProjDate());      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }  }  @Override  public JComponent createSubBillPanel() {    return new JPanel();  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        editFlag = 1;        doEdit();      }    });    deleteButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doSave();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });  }  private void doAdd() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;    ZcEbPlan plan = new ZcEbPlan();    setDefualtValue(plan, ZcSettingConstants.PAGE_STATUS_NEW);    listCursor.setCurrentObject(plan);    setEditingObject(plan);    refreshData();    updateFieldEditorsEditable();    setDefualtValue(plan, this.pageStatus);    setButtonStatus();  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  private void doDelete() {    ZcEbPlan plan = (ZcEbPlan) this.listCursor.getCurrentObject();    int num = JOptionPane.showConfirmDialog(this, "确认删除当前数据？", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      String errorInfo = "";      try {        success = this.zcEbPlanServiceDelegate.deletePlan(plan, this.requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(self, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;        this.listCursor.removeCurrentObject();        refreshData();        updateFieldEditorsEditable();        setButtonStatus();        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldPlan);      }    }    listCursor.previous();    refreshData();    setButtonStatus();  }  private void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldPlan);      }    }    listCursor.next();    refreshData();    setButtonStatus();  }  public void doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    this.parent.dispose();  }  public boolean doSave() {    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    ZcEbPlan plan = (ZcEbPlan) this.listCursor.getCurrentObject();    if (!checkBeforeSave())      return false;    boolean success = true;    String errorInfo = "";    try {      plan = this.zcEbPlanServiceDelegate.save(plan, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(plan);      this.oldPlan = (ZcEbPlan) ObjectUtil.deepCopy(plan);      this.listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      setButtonStatus();      setOldObject();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  private boolean checkBeforeSave() {    ZcEbPlan plan = (ZcEbPlan) this.listCursor.getCurrentObject();    //判断该项目是否已经存在计划了    ElementConditionDto dto = new ElementConditionDto();    dto.setProjCode(plan.getProjCode());    List<ZcEbPlan> planLst = this.zcEbPlanServiceDelegate.getZcEbPlan(dto, requestMeta);    if (planLst != null && planLst.size() > 0) {      for (ZcEbPlan p : planLst) {        if (!p.getPlanCode().equals(plan.getPlanCode())) {          JOptionPane.showMessageDialog(this.parent, "该项目的计划已经存在！", "提示", JOptionPane.WARNING_MESSAGE);          return false;        }      }    }    List notNullBillElementList = this.billElementMeta.getNotNullBillElement();    StringBuilder errorInfo = new StringBuilder();    String validateInfo = ZcUtil.validateBillElementNull(plan, notNullBillElementList);    if (validateInfo.length() != 0) {      errorInfo.append("").append(validateInfo.toString()).append("\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    Date sellStart = plan.getSellStartTime();    Date sellEnd = plan.getSellEndTime();    Date bidDate = plan.getBidEndTime();    Date openBidDate = plan.getOpenBidTime();    if (sellEnd.before(sellStart)) {      errorInfo.append("招标文件停售时间不能早于开始发售时间").append("\n");    }    if (bidDate.before(sellEnd)) {      errorInfo.append("投标截止时间不能早于招标文件停售时间").append("\n");    }    if (openBidDate.before(bidDate)) {      errorInfo.append("开标时间不能早于投标截止时间").append("\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  public void doHelp() {  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldPlan).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }}
package com.ufgov.zc.client.zc.question;import java.awt.BorderLayout;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Font;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTable;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZCQuestionTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JSaveableSplitPane;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.AcceptedButton;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AuditButton;import com.ufgov.zc.client.component.button.BackButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SubaddButton;import com.ufgov.zc.client.component.button.SubdelButton;import com.ufgov.zc.client.component.button.SubinsertButton;import com.ufgov.zc.client.component.button.SubmitZY;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.button.zc.CommonButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.FileFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldCellEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.NewLineFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextAreaFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.HuiyuanUnitcominfo;import com.ufgov.zc.common.zc.model.ZCQuestion;import com.ufgov.zc.common.zc.model.ZCQuestionPack;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbQues;/** * @author wuwb */public class ZcEbQuestionEditPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = 1L;  private static final Logger logger = Logger.getLogger(ZcEbQuestionEditPanel.class);  private final RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private final String compoId = "ZC_EB_QUESTIONDTS";  private final ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  ElementConditionDto packDto = new ElementConditionDto();  private final JTablePanel packTablePanel = new JTablePanel();  protected ListCursor<ZCQuestion> listCursor;  protected ZCQuestion oldZcQuestion;  private final String tabStatus;  List<AbstractFieldEditor> list = new ArrayList<AbstractFieldEditor>();  List<AbstractFieldEditor> listEdit = new ArrayList<AbstractFieldEditor>();  List<AbstractFieldEditor> listEditable = new ArrayList<AbstractFieldEditor>();  private final ZcEbQuestionListPanel listPanel;  private final ZcEbQuestionEditPanel self = this;  private final GkBaseDialog parent;  private JPanel questionPanel = null;  private JPanel answerPanel;  private final JPanel clientTabbedPane = new JPanel();  private JPanel buttomPanel;  private TextAreaFieldEditor jbReasonField;  private FileFieldEditor jbFile;  // private FileFieldEditor dwFile;  private AsValFieldEditor mode;  private DateFieldEditor answerDateField;  private String roleCode = null;  /**   * 创建按钮   */  private final FuncButton addButton = new AddButton();  private final FuncButton saveButton = new SaveButton();  // 工作流送审  private final FuncButton sendButton = new SendButton();  // 工作流收回  private final FuncButton callbackButton = new CallbackButton();  // 工作流填写意见审核通过  private final FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流审核通过  private final FuncButton auditPassButton = new AuditButton();  // 消审  private final FuncButton unAuditButton = new UnauditButton();  // 工作流退回  private final FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  private final FuncButton traceButton = new TraceButton();  // 我要投诉  // private FuncButton complainButton = new ComplainButton();  // 提交质疑  private final FuncButton submitZY = new SubmitZY();  // 提交投诉  private final FuncButton deleteButton = new DeleteButton();  private final FuncButton previousButton = new PreviousButton();  private final FuncButton editButton = new EditButton();  private final FuncButton nextButton = new NextButton();  private final FuncButton exitButton = new ExitButton();  private final FuncButton helpButton = new HelpButton();  private final FuncButton acceptedButton = new AcceptedButton();  private final FuncButton backButton = new BackButton();  private final FuncButton sendfzrButton = new CommonButton("fsendfzr", "转项目负责人", "send.jpg", true);  private final FuncButton sendcoButton = new CommonButton("fsendco", "送用户单位", "send.jpg", true);  private final FuncButton replyzyButton = new CommonButton("freplyzy", "回复质疑", "send.jpg", true);  private final FuncButton fillhandlemodeButton = new CommonButton("ffillhandlemode", "选择处理方式", "edit.jpg", true);  private final FuncButton fillreplyButton = new CommonButton("ffillreply", "回复内容", "edit.jpg", true);  private final FuncButton handeffButton = new CommonButton("fhandeff", "处理生效", "save.jpg", true);  private final String projSqlMapSelectedId = "ZCQuestion.getProjList";  private JFuncToolBar subPackTableToolbar;  /**   * 设置全局值以便获取和设置下面workpanel中的值得处理   */  private JSaveableSplitPane splitPane;  @SuppressWarnings("unchecked")  public ZcEbQuestionEditPanel(ZcEbQuestionDialog parent, ListCursor listCursor, String tabStatus, ZcEbQuestionListPanel listPanel) {    super(ZCQuestion.class, BillElementMeta.getBillElementMetaWithoutNd("ZC_EB_QUESTIONDTS"));    this.listCursor = listCursor;    this.listPanel = listPanel;    this.parent = parent;    this.tabStatus = tabStatus;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "质疑", TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    listEdit.addAll(list);    refreshData();  }  protected void init() {    this.initToolBar(toolBar);    this.setLayout(new BorderLayout());    this.add(toolBar, BorderLayout.NORTH);    this.add(workPanel, BorderLayout.CENTER);    if (this.billClass != null && this.eleMeta != null) {      initFieldEditorPanel(this.billClass, this.eleMeta);    } else {      initFieldEditorPanel();    }    workPanel.setLayout(new BorderLayout());    JPanel p = new JPanel();    p.setLayout(new BorderLayout());    JPanel p1 = new JPanel();    p1.setLayout(new BorderLayout());    p1.add(fieldEditorPanel, BorderLayout.NORTH);    p.add(p1, BorderLayout.CENTER);    // p.add(fieldEditorPanel, BorderLayout.CENTER);    JPanel p2 = initPackPanel();    p.add(p2, BorderLayout.EAST);    workPanel.add(p, BorderLayout.NORTH);    JComponent subPanel = createSubBillPanel();    if (subPanel != null) {      workPanel.add(subPanel, BorderLayout.CENTER);    }  }  /**   * 刷新字段可编辑性   */  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();  }  /**   * 项目信息栏字段   */  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    AsValFieldEditor quesType = new AsValFieldEditor(LangTransMeta.translate(ZcEbQues.COL_QUES_TYPE), "quesType", "ZC_VS_QUES_TYPE");    String columNames[] = { "项目编号", "项目名称", "采购类型", "负责人" };    ZcEbProjFnHandler projHandler = new ZcEbProjFnHandler(columNames);    ElementConditionDto dto = new ElementConditionDto();    dto.setCoCode(requestMeta.getSvCoCode());    dto.setNd(WorkEnv.getInstance().getTransNd());    dto.setUserId(WorkEnv.getInstance().getCurrUserId());    ForeignEntityFieldEditor projName = new ForeignEntityFieldEditor(this.projSqlMapSelectedId, dto, 20, projHandler, columNames, "采购项目", "zcEbProj.projName");    projName.addKeyListener(new KeyListener() {      public void keyTyped(KeyEvent e) {}      public void keyReleased(KeyEvent e) {}      public void keyPressed(KeyEvent e) {}    });    projName.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        projCodeChange();      }    });    AsValFieldEditor state = new AsValFieldEditor(LangTransMeta.translate(ZcEbQues.COL_STATE), "state", ZcEbQues.ZC_VS_QUES_STATE);    AsValFieldEditor zcPifuCgfs = new AsValFieldEditor("采购方式", "zcEbProj.purType", "ZC_VS_PITEM_OPIWAY");    TextFieldEditor zcMakeLinkman = new TextFieldEditor("招标负责人", "zcEbProj.manager");    TextFieldEditor zcMakeTel = new TextFieldEditor("负责人电话", "zcEbProj.phone");    mode = new AsValFieldEditor(LangTransMeta.translate(ZcEbQues.COL_HANDLE_MODE), "handleMode", "ZC_VS_QUES_ALL_MODE");    TextFieldEditor personOrg = new TextFieldEditor(LangTransMeta.translate(ZcEbQues.COL_PERSONORG), "personOrg");    TextFieldEditor personName = new TextFieldEditor(LangTransMeta.translate(ZcEbQues.COL_PERSON), "personName");    TextFieldEditor personTel = new TextFieldEditor(LangTransMeta.translate(ZcEbQues.COL_PERSON_TEL), "personTel");    // DateFieldEditor clientSubmitZYDate = new DateFieldEditor("质疑提交日期",    // "clientSubmitZYDate");    // editorList.add(clientSubmitZYDate);    editorList.add(quesType);    editorList.add(projName);    editorList.add(zcPifuCgfs);    editorList.add(zcMakeLinkman);    editorList.add(zcMakeTel);    editorList.add(mode);    editorList.add(personOrg);    editorList.add(personName);    editorList.add(personTel);    if (ZcUtil.isGys()) {      editorList.add(new NewLineFieldEditor());    } else {      editorList.add(state);    }    listEdit.addAll(editorList);    listEditable.add(quesType);    listEditable.add(projName);    listEditable.add(personName);    listEditable.add(personTel);    return editorList;  }  private JPanel initPackPanel() {    packTablePanel.init();    packTablePanel.getSearchBar().setVisible(false);    packTablePanel.setTablePreferencesKey(this.getClass().getName() + "pack_table");    packTablePanel.getTable().setShowCheckedColumn(false);    packTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 100));    // tablePanel.setTableModel(ZCQuestionTableModelConverter.convertPackDeToTableModel(zcQuestion.getListPack()));    //    // setTableProperty(tablePanel.getTable());    this.subPackTableToolbar = new JFuncToolBar();    JButton addBtn1 = new SubaddButton(false);    JButton insertBtn1 = new SubinsertButton(false);    JButton delBtn1 = new SubdelButton(false);    this.subPackTableToolbar.add(addBtn1);    // ((Container) this.subPackTableToolbar).add(insertBtn1);    this.subPackTableToolbar.add(delBtn1);    packTablePanel.add(this.subPackTableToolbar, BorderLayout.SOUTH);    addBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZCQuestion zcQuestion = listCursor.getCurrentObject();        if (zcQuestion.getZcEbProj().getProjCode() == null) {          JOptionPane.showMessageDialog(self, "请先选择一个采购项目 ！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        ZcEbPack bean = new ZcEbPack();        ZCQuestionPack pack = new ZCQuestionPack();        pack.setQuesId(zcQuestion.getSn() + "");        pack.setZcEbPack(bean);        // zcQuestion.getListPack().add(pack);        addSub(packTablePanel, new ZCQuestionPack());      }    });    insertBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZCQuestion zcQuestion = listCursor.getCurrentObject();        if (zcQuestion.getZcEbProj().getProjCode() == null) {          JOptionPane.showMessageDialog(self, "请先选择一个采购项目 ！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        ZcEbPack bean = new ZcEbPack();        ZCQuestionPack pack = new ZCQuestionPack();        pack.setQuesId(zcQuestion.getSn() + "");        pack.setZcEbPack(bean);        insertSub(packTablePanel, new ZCQuestionPack());      }    });    delBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        deleteSub(packTablePanel);      }    });    packTablePanel.setPreferredSize(new Dimension(300, 150));    JPanel p = new JPanel();    p.setBorder(BorderFactory.createTitledBorder("相关分包"));    p.setLayout(new BorderLayout());    p.add(packTablePanel, BorderLayout.CENTER);    return p;  }  /**   * 创建标段选择器   */  @Override  public JComponent createSubBillPanel() {    /*     * JTabbedPane tabPane = new JTabbedPane(); JScrollPane wowPanel =     * createWoPanel(); tabPane.setMinimumSize(new Dimension(240, 50));     * wowPanel.setMinimumSize(new Dimension(240, 400)); splitPane = new     * JSaveableSplitPane(JSplitPane.VERTICAL_SPLIT, tabPane, wowPanel);     * splitPane.setDividerLocation(200); splitPane.setContinuousLayout(true);     * splitPane.setOneTouchExpandable(true); splitPane.setDividerSize(10);     * splitPane.setBackground(self.getBackground()); tabPane.setVisible(true);     */    createButtomPanel();    return buttomPanel;  }  /**   * 初始化工具栏   */  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    // toolBar.add(sendButton);    toolBar.add(suggestPassButton);    // toolBar.add(auditPassButton);    toolBar.add(callbackButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(traceButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(helpButton);    toolBar.add(acceptedButton);    toolBar.add(backButton);    toolBar.add(sendfzrButton);    toolBar.add(sendcoButton);    toolBar.add(fillhandlemodeButton);    toolBar.add(handeffButton);    toolBar.add(fillreplyButton);    toolBar.add(replyzyButton);    // toolBar.add(complainButton);    toolBar.add(submitZY);    toolBar.add(exitButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopEditing();        doAdd();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit("0");      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // stopEditing();        doDelete();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // stopEditing();        doSave();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopEditing();        doSend();      }    });    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopEditing();        doCallback();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        stopEditing();        // 填写意见审核        doSuggestPass();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopEditing();        // 审核        doAudit();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopEditing();        // 销审        doUnaudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopEditing();        // 退回        doUntread();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 流程跟踪        doTrace();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });    submitZY.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSend();      }    });    acceptedButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAccepted();      }    });    backButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doBack();      }    });    sendfzrButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSendFzr();      }    });    sendcoButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSendCo();      }    });    replyzyButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doReplyZY();      }    });    fillhandlemodeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit("1");      }    });    fillreplyButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit("2");      }    });    handeffButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });  }  /**   * 受理   */  private void doAccepted() {    sendWf("1", this.acceptedButton.getFuncId());  }  /**   * 不受理   */  private void doBack() {    sendWf("2", this.backButton.getFuncId());  }  /**   * 转项目负责人   */  private void doSendFzr() {    sendWf("3", this.sendfzrButton.getFuncId());  }  /**   * 送用户单位   */  private void doSendCo() {    sendWf("4", this.sendcoButton.getFuncId());  }  /**   * 回复质疑   */  private void doReplyZY() {    sendWf("5", this.replyzyButton.getFuncId());  }  /**   * 审核公共方法   */  private void sendWf(String type, String funcId) {    ZCQuestion zcQuestion = (ZCQuestion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());    if ("5".equals(type)) {      if (zcQuestion.getJbReason() == null || "".equals(zcQuestion.getJbReason().trim())) {        JOptionPane.showMessageDialog(this, "回复质疑内容不能为空！", "提示", JOptionPane.WARNING_MESSAGE);        return;      }    }    boolean success = true;    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (!commentDialog.cancel) {      try {        requestMeta.setFuncId(funcId);        zcQuestion.setAuditorId(WorkEnv.getInstance().getCurrUserId());        zcQuestion.setComment(commentDialog.getComment());        this.listPanel.getZcQuestionServiceDelegate().suggestPassFN(zcQuestion, type, requestMeta);        refreshData();        this.listPanel.refreshCurrentTabData();      } catch (Exception ex) {        logger.error(ex.getMessage(), ex);        success = false;        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      }      if (success) {        JOptionPane.showMessageDialog(this, "操作成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      }    }  }  @SuppressWarnings("unchecked")  private void doAdd() {    ZCQuestion zcQuestion = new ZCQuestion();    this.listCursor = new ListCursor(new ArrayList(1), -1);    listCursor.setCurrentObject(zcQuestion);    setEditingObject(zcQuestion);    refreshData();    updateFieldEditorsEditable();  }  private void doEdit(String type) {    ZCQuestion zcQuestion = this.listCursor.getCurrentObject();    pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    if ("2".equals(type)) {      if (WorkEnv.getInstance().containRole("YSDWCG")) {        // dwFile.setEnabled(true);      } else {        jbFile.setEnabled(true);        jbReasonField.setEnabled(true);      }    } else if ("1".equals(type)) {      mode.setEnabled(true);    } else {      for (int i = 0; i < listEditable.size(); i++) {        AbstractFieldEditor abstractFieldEditor = listEditable.get(i);        abstractFieldEditor.setEnabled(true);      }      editButton.setEnabled(false);      pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;    }    updateEnabled();    saveButton.setEnabled(true);    // refreshData();  }  private void doDelete() {    ZCQuestion zcQuestion = this.listCursor.getCurrentObject();    if (zcQuestion != null && "0".equals(zcQuestion.getState())) {      this.listPanel.getZcQuestionServiceDelegate().deleteZcEbQuestionFN(zcQuestion, requestMeta);      JOptionPane.showMessageDialog(self, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      listCursor.removeCurrentObject();      listCursor.next();      refreshData();      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "已经处理数据不能删除.", "提示", JOptionPane.INFORMATION_MESSAGE);    }  }  @SuppressWarnings("unchecked")  private boolean doSave() {    if (!checkBeforeSave()) {    return false;    }    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    boolean success = true;    String errorInfo = "";    try {      requestMeta.setFuncId(saveButton.getFuncId());      ZCQuestion inData = (ZCQuestion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      ZCQuestion zcQuestion = this.listPanel.getZcQuestionServiceDelegate().saveZCQuestionFN(inData, requestMeta);      this.listCursor.setCurrentObject(zcQuestion);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      this.listPanel.refreshCurrentTabData();      refreshData();    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }    return true;  }  private void doSend() {    if (!checkBeforeSave()) {    return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZCQuestion zcQuestion = (ZCQuestion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      try {        requestMeta.setFuncId(this.sendButton.getFuncId());        zcQuestion.setAuditorId(WorkEnv.getInstance().getCurrUserId());        zcQuestion.setComment("");        this.listPanel.getZcQuestionServiceDelegate().sendFN(zcQuestion, requestMeta);        refreshData();        this.listPanel.refreshCurrentTabData();      } catch (Exception ex) {        logger.error(ex.getMessage(), ex);        success = false;        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      }      if (success) {        JOptionPane.showMessageDialog(this, "操作成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      }    }  }  private void doCallback() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZCQuestion afterSaveBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZCQuestion zcQuestion = (ZCQuestion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());        zcQuestion.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getZcQuestionServiceDelegate().callbackFN(zcQuestion, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        refreshData();        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doSuggestPass() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZCQuestion afterSaveBill = null;      String errorInfo = "";      GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL);      if (commentDialog.cancel) {      return;      }      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZCQuestion zcQuestion = (ZCQuestion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());        zcQuestion.setComment(commentDialog.getComment());        zcQuestion.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getZcQuestionServiceDelegate().suggestPassFN(zcQuestion, "0", requestMeta);// (zcQuestion,        // requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        refreshData();        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doAudit() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZCQuestion afterSaveBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZCQuestion zcQuestion = (ZCQuestion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());        zcQuestion.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getZcQuestionServiceDelegate().auditPassFN(zcQuestion, requestMeta);// (zcQuestion,        // requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        refreshData();        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doUnaudit() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZCQuestion afterSaveBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZCQuestion zcQuestion = (ZCQuestion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());        zcQuestion.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getZcQuestionServiceDelegate().unAuditFN(zcQuestion, requestMeta);// (zcQuestion,        // requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        refreshData();        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doUntread() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZCQuestion afterSaveBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZCQuestion zcQuestion = (ZCQuestion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());        zcQuestion.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getZcQuestionServiceDelegate().unTreadFN(zcQuestion, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        refreshData();        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doTrace() {    ZCQuestion bean = this.listCursor.getCurrentObject();    if (bean == null) {    return;    }    ZcUtil.showTraceDialog(bean, compoId);  }  private void doPrevious() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      listCursor.setCurrentObject(oldZcQuestion);      listCursor.next();      refreshData();    }  }  private void doNext() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      listCursor.setCurrentObject(oldZcQuestion);      listCursor.next();      refreshData();    }  }  private void doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {        return;        }      }    }    this.parent.dispose();  }  private void doHelp() {  }  private void stopEditing() {    for (int i = 0; i < listEdit.size(); i++) {      AbstractFieldEditor abstractFieldEditor = listEdit.get(i);      abstractFieldEditor.setEnabled(false);    }  }  @SuppressWarnings("unchecked")  private void refreshData() {    ZCQuestion zcQuestion = this.listCursor.getCurrentObject();    if (zcQuestion == null) {// 新增页面      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      zcQuestion = new ZCQuestion();      setDefaultValue(zcQuestion);      List lst = new ArrayList();      lst.add(zcQuestion);      this.listCursor.setDataList(lst, -1);    } else {      zcQuestion = listPanel.getZcQuestionServiceDelegate().getZCQuestionByKey(zcQuestion.getQuesId(), requestMeta);      listCursor.setCurrentObject(zcQuestion);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    }    if (zcQuestion.getListPack() == null) {      zcQuestion.setListPack(new ArrayList());    }    listCursor.setCurrentObject(zcQuestion);    refreshSubTableData(zcQuestion);    stopEditing();    answerPanel.setVisible(true);    this.setEditingObject(zcQuestion);    listCursor.setCurrentObject(zcQuestion);    setButtonStatus(zcQuestion, requestMeta, listCursor);    if (zcQuestion.getProcessInstId() == null || zcQuestion.getProcessInstId().longValue() < 0) {      this.acceptedButton.setVisible(false);      this.backButton.setVisible(false);      this.sendcoButton.setVisible(false);      this.sendfzrButton.setVisible(false);      this.replyzyButton.setVisible(false);    }    // fillhandlemodeButton.setEnabled(false);    //    // handeffButton.setEnabled(false);    // replyzyButton.setEnabled(false);    // sendcoButton.setEnabled(false);    // if (zcQuestion.getJbReason() == null ||    // "".equals(zcQuestion.getJbReason())) {    // if (zcQuestion.getHandleMode() == null ||    // "".equals(zcQuestion.getHandleMode()) ||    // "0".equals(zcQuestion.getHandleMode())) {    // fillhandlemodeButton.setEnabled(true);    // sendcoButton.setEnabled(true);    // } else {    // }    // } else {    // replyzyButton.setEnabled(true);    // }    // if (fillhandlemodeButton.isVisible()) {    // callbackButton.setVisible(false);    // }    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {      deleteButton.setVisible(true);      editButton.setVisible(true);      this.doEdit("0");    } else {      saveButton.setEnabled(false);      jbReasonField.setEnabled(false);      jbFile.setEnabled(false);      // dwFile.setEnabled(false);    }    updateEnabled();    setOldObject();    updateUI();    repaint();  }  private void setDefaultValue(ZCQuestion zcQuestion) {    zcQuestion.setNd(requestMeta.getSvNd());    ZcEbProj zcEbProj = new ZcEbProj();    zcQuestion.setZcEbProj(zcEbProj);    if (ZcUtil.isGys()) {      HuiyuanUnitcominfo unit = ZcUtil.getHuiYuan();      zcQuestion.setPersonOrg(unit.getDanweiname());      zcQuestion.setPersonTel(unit.getZfcgGysInfo().getLocalmobile());      zcQuestion.setPersonName(unit.getZfcgGysInfo().getLocallianxiren());      zcQuestion.setTemp3(unit.getDanweiguid());// 用temp3做供应商ID，垃圾设计    } else {      zcQuestion.setPersonOrg(requestMeta.getSvCoName());      zcQuestion.setPersonTel("");      zcQuestion.setPersonName(requestMeta.getSvUserName());      zcQuestion.setTemp3(requestMeta.getSvUserID());// 用temp3做供应商ID，垃圾设计    }    zcQuestion.setPersonOrg(requestMeta.getSvUserName());    zcQuestion.setState(ZCQuestion.ZC_VS_QUES_STATE_new);    zcQuestion.setHandleMode(ZCQuestion.ZC_VS_QUES_ALL_MODE_zhiyizhong);    zcQuestion.setCreateDate(requestMeta.getSysDate());  }  private void updateEnabled() {    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {      packTablePanel.getTable().setEnabled(true);      subPackTableToolbar.setVisible(true);    } else {      packTablePanel.getTable().setEnabled(false);      subPackTableToolbar.setVisible(false);    }  }  @SuppressWarnings("unused")  private void setOldObject() {    oldZcQuestion = (ZCQuestion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldZcQuestion).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  /**   * 创建招标部门意见   */  public void initAnswerPanel() {    jbReasonField = new TextAreaFieldEditor("回复", "jbReason");    jbFile = new FileFieldEditor("相关文件", "jbFileName", "jbFileName");    answerDateField = new DateFieldEditor("回复日期", "jbDoDate");    answerPanel = new JPanel();    answerPanel.setBorder(BorderFactory.createTitledBorder("回复意见"));    answerPanel.setLayout(new BorderLayout());    JLabel l1 = new JLabel("相关附件");    JPanel p = new JPanel();    p.setLayout(new FlowLayout(FlowLayout.LEFT));    p.add(l1);    jbFile.setPreferredSize(new Dimension(300, 25));    p.add(jbFile);    JLabel l2 = new JLabel("回复时间");    p.add(l2);    p.add(answerDateField);    answerPanel.add(p, BorderLayout.SOUTH);    answerPanel.add(jbReasonField, BorderLayout.CENTER);    list.add(jbReasonField);    list.add(jbFile);    list.add(answerDateField);  }  /**   * 创建质疑意见   */  public void initQuestionPanel() {    TextAreaFieldEditor clientReason = new TextAreaFieldEditor("质疑意见", "clientReason");    FileFieldEditor clientFile = new FileFieldEditor("clientFileName", "clientFileName", "clientFileName");    DateFieldEditor clientSubmitZYDateField = new DateFieldEditor("质疑提交日期", "clientSubmitZYDate");    questionPanel = new JPanel();    questionPanel.setBorder(BorderFactory.createTitledBorder("质疑意见"));    questionPanel.setLayout(new BorderLayout());    JLabel l1 = new JLabel("相关附件");    JPanel p = new JPanel();    p.setLayout(new FlowLayout(FlowLayout.LEFT));    p.add(l1);    clientFile.setPreferredSize(new Dimension(300, 25));    p.add(clientFile);    JLabel l2 = new JLabel("质疑提交时间");    p.add(l2);    p.add(clientSubmitZYDateField);    questionPanel.add(p, BorderLayout.SOUTH);    questionPanel.add(clientReason, BorderLayout.CENTER);    list.add(clientReason);    list.add(clientFile);    list.add(clientSubmitZYDateField);    listEditable.add(clientReason);    listEditable.add(clientFile);  }  @Override  protected void updateFieldEditors() {    for (AbstractFieldEditor editor : fieldEditors) {      editor.setEditObject(editingObject);    }    for (AbstractFieldEditor editor : list) {      editor.setEditObject(editingObject);    }  }  /**   * 创建下面三个意见栏目   */  public void createButtomPanel() {    buttomPanel = new JPanel();    GridLayout gridLayout = new GridLayout(1, 2);    buttomPanel.setLayout(gridLayout);    initAnswerPanel();    initQuestionPanel();    buttomPanel.add(questionPanel);    buttomPanel.add(answerPanel);  }  /**   * 标段外部部件选择处理类   */  private class ZcEbPackHandler implements IForeignEntityHandler {    private final String columNames[];    public ZcEbPackHandler(String columNames[]) {      this.columNames = columNames;    }    public boolean beforeSelect(ElementConditionDto dto) {      ZCQuestion zcQuestion = listCursor.getCurrentObject();      dto.setProjCode(zcQuestion.getZcEbProj().getProjCode());      dto.setZcText0(zcQuestion.getQuesType());      if ("1".equals(zcQuestion.getQuesType())) {        dto.setEndMonth(Integer.parseInt(AsOptionMeta.getOptVal("OPT_ZC_BID_FILE_QUE_DAY")));      }      if (zcQuestion.getListPack() == null) {        dto.setPackCode("");        return true;      }      StringBuffer sb = new StringBuffer("' '");      for (int i = 0; i < zcQuestion.getListPack().size(); i++) {        sb.append(",'").append(((ZCQuestionPack) zcQuestion.getListPack().get(i)).getZcEbPack().getPackCode()).append("'");      }      dto.setPackCode(sb.toString());      return true;    }    @SuppressWarnings("unchecked")    public void excute(List selectedDatas) {      ZCQuestion bean = listCursor.getCurrentObject();      JTable table = packTablePanel.getTable();      BeanTableModel model = (BeanTableModel) table.getModel();      int k = table.getSelectedRow();      if (k < 0)      return;      int k2 = table.convertRowIndexToModel(k);      ZCQuestionPack questionPack = (ZCQuestionPack) (bean.getListPack().get(k2));      if (selectedDatas.size() > 0) {        ZcEbPack zcPack = (ZcEbPack) selectedDatas.get(0);        questionPack.setZcEbPack(zcPack);      }      listCursor.setCurrentObject(bean);      refreshSubTableData(bean);    }    @SuppressWarnings({ "unchecked", "serial" })    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbPack rowData = (ZcEbPack) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getPackName();        data[i][col++] = rowData.getPackDesc();      }      MyTableModel model = new MyTableModel(data, columNames) {        @Override        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  private void setTableProperty(JTable table) {    String columNames[] = { LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE), LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME) };    ZcEbPackHandler handler = new ZcEbPackHandler(columNames);    if (packDto == null) {      this.packDto = new ElementConditionDto();    }    packDto.setCoCode(WorkEnv.getInstance().getCurrCoCode());    packDto.setUserId(WorkEnv.getInstance().getCurrUserId());    ForeignEntityFieldCellEditor packEditor = new ForeignEntityFieldCellEditor("ZcEbProj.getQuestionZcEbPack", this.packDto, 20, handler, columNames,      LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PAKE_NAME), "packName");    SwingUtil.setTableCellEditor(table, "PACK_CODE", packEditor);  }  /**   * 保存前检查   */  protected boolean checkBeforeSave() {    ZCQuestion question = this.listCursor.getCurrentObject();    List notNullField = this.eleMeta.getNotNullBillElement();    String biValidateInfo = ZcUtil.validateBillElementNull(question, notNullField);    if (biValidateInfo != null && biValidateInfo.length() > 0) {      JOptionPane.showMessageDialog(this, biValidateInfo, "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    if (question.getListPack() != null && question.getListPack().size() > 0) {      for (int i = 0; i < question.getListPack().size(); i++) {        ZCQuestionPack pack = (ZCQuestionPack) question.getListPack().get(i);        if (pack.getZcEbPack() == null || pack.getZcEbPack().getPackCode() == null || "".equals(pack.getZcEbPack().getPackCode())) {          JOptionPane.showMessageDialog(this, "质疑的包不能为空！", "提示", JOptionPane.WARNING_MESSAGE);          return false;        }      }    } else {      if (!"1".equals(question.getQuesType())) {        JOptionPane.showMessageDialog(this, "请添加质疑的包！", "提示", JOptionPane.WARNING_MESSAGE);        return false;      }    }    if (handeffButton.isVisible() && handeffButton.isEnabled()) {      if (question.getHandleMode() == null || "0".equals(question.getHandleMode()) || "".equals(question.getHandleMode())) {        JOptionPane.showMessageDialog(this, "请选择处理方式！", "提示", JOptionPane.WARNING_MESSAGE);        return false;      }    }    if (!handeffButton.isEnabled() && fillreplyButton.isVisible()) {      if (question.getJbReason() == null || "".equals(question.getJbReason().trim())) {        JOptionPane.showMessageDialog(this, "回复质疑内容不能为空！", "提示", JOptionPane.WARNING_MESSAGE);        return false;      }    }    return true;  }  /**   * 是否改变对象检查   */  protected boolean dataChange() {    return !DigestUtil.digest(oldZcQuestion).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  private class ZcEbProjFnHandler implements IForeignEntityHandler {    private final String columNames[];    public ZcEbProjFnHandler(String columNames[]) {      this.columNames = columNames;    }    public boolean beforeSelect(ElementConditionDto dto) {      ZCQuestion zcQuestion = listCursor.getCurrentObject();      if (zcQuestion.getQuesType() == null || "".equals(zcQuestion.getQuesType())) {        JOptionPane.showMessageDialog(self, "请先选择质疑类型 ！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      dto.setZcText0(zcQuestion.getQuesType());      if ("1".equals(zcQuestion.getQuesType())) {        dto.setEndMonth(Integer.parseInt(AsOptionMeta.getOptVal("OPT_ZC_BID_FILE_QUE_DAY")));      } else {        dto.setEndMonth(Integer.parseInt(AsOptionMeta.getOptVal("OPT_ZC_YZB_BUL_QUE_DAY")));      }      return true;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbProj proj = (ZcEbProj) object;        ZCQuestion zcQuestion = listCursor.getCurrentObject();        zcQuestion.setZcEbProj(proj);        zcQuestion.setCoCode(proj.getCoCode());        zcQuestion.setOrgCode(proj.getOrg());        zcQuestion.setAgency(proj.getAgency());        listCursor.setCurrentObject(zcQuestion);        setEditingObject(zcQuestion);        projCodeChange();      }    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE", rowData.getPurType());        data[i][col++] = rowData.getManager();      }      MyTableModel model = new MyTableModel(data, columNames) {        @Override        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  private void projCodeChange() {    ZCQuestion zcQuestion = this.listCursor.getCurrentObject();    if (zcQuestion.getListPack() != null) {      zcQuestion.getListPack().clear();      this.setEditingObject(zcQuestion);      refreshSubTableData(zcQuestion);    }  }  private void refreshSubTableData(ZCQuestion zcQuestion) {    packTablePanel.setTableModel(ZCQuestionTableModelConverter.convertDetailToTableModel(zcQuestion.getListPack()));    ZcUtil.translateColName(this.packTablePanel.getTable(), ZCQuestionTableModelConverter.getItemInfo());    setTableProperty(this.packTablePanel.getTable());  }}
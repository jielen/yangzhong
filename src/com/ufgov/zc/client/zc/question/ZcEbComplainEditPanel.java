package com.ufgov.zc.client.zc.question;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.Container;import java.awt.Dimension;import java.awt.Font;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.GridLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JSplitPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZCQuestionTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JSaveableSplitPane;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AuditButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.ComplainButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.FileFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldCellEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextAreaFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.emfundpay.EmFundReportEditPanel;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZCQuestion;import com.ufgov.zc.common.zc.model.ZCQuestionPack;import com.ufgov.zc.common.zc.model.ZcEbComplain;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbSignupPackDetail;public class ZcEbComplainEditPanel extends AbstractMainSubEditPanel {  /**   *    */  private static final long serialVersionUID = 1L;  private static final Logger logger = Logger  .getLogger(EmFundReportEditPanel.class);  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_COMPLAIN";  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  ElementConditionDto packDto = new ElementConditionDto();  private JTablePanel tablePanel = new JTablePanel();  protected ListCursor listCursor;  protected ZcEbComplain oldZcEbComplain;  private String tabStatus;  List<AbstractFieldEditor> list = new ArrayList<AbstractFieldEditor>();  List<AbstractFieldEditor> listEdit = new ArrayList<AbstractFieldEditor>();  protected List<AbstractFieldEditor> clientFieldEditors = createClientFieldEditors();// 客户信息编辑栏  private ZcEbComplainListPanel listPanel;  private ZcEbComplainEditPanel self = this;  private GkBaseDialog parent;  private JPanel jTabbedPane = null;  private JPanel jbTabbedPane;  private JPanel jgTabbedPane;  private JPanel clientTabbedPane = new JPanel();  private JPanel buttomPanel;  /**   * 创建按钮   */  private FuncButton addButton = new AddButton();  private FuncButton saveButton = new SaveButton();  // 工作流送审  private FuncButton sendButton = new SendButton();  // 工作流收回  private FuncButton callbackButton = new CallbackButton();  // 工作流填写意见审核通过  private FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流审核通过  private FuncButton auditPassButton = new AuditButton();  // 消审  private FuncButton unAuditButton = new UnauditButton();  // 工作流退回  private FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  private FuncButton traceButton = new TraceButton();  // 我要投诉  private FuncButton complainButton = new ComplainButton();  // 提交质疑  // private FuncButton SubmitZY = new SubmitZY();  // 提交投诉  private FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private String quesSqlMapSelectedId = "ZCComplain.getZCQuestionList";  private Object subPackTableToolbar;  /**   * 设置全局值以便获取和设置下面workpanel中的值得处理   */  private JSaveableSplitPane splitPane;  @SuppressWarnings("unchecked")  public ZcEbComplainEditPanel(ZcEbComplainDialog parent,  ListCursor listCursor, String tabStatus,  ZcEbComplainListPanel listPanel) {    super(ZCQuestion.class, BillElementMeta    .getBillElementMetaWithoutNd("ZC_EB_QUESTION"));    this.listCursor = listCursor;    this.listPanel = listPanel;    this.parent = parent;    this.tabStatus = tabStatus;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory    .createEtchedBorder(), "投诉", TitledBorder.CENTER,    TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();  }  /**   * 创建整个下面的工作面板   */  public JScrollPane createWoPanel() {    createButtomPanel();    JScrollPane jScrollPane = new JScrollPane(buttomPanel);    return jScrollPane;  }  /**   * 刷新字段可编辑性   */  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();  }  /**   * 项目信息栏字段   */  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    String columNames[] = { "质疑编号", "质疑项目", "负责人", "负责单位" };    ZcEbQuestionFnHandler projHandler = new ZcEbQuestionFnHandler(    columNames);    ElementConditionDto dto = new ElementConditionDto();    dto.setCoCode(requestMeta.getSvCoCode());    dto.setNd(WorkEnv.getInstance().getTransNd());    ForeignEntityFieldEditor editor0 = new ForeignEntityFieldEditor(    this.quesSqlMapSelectedId, dto, 20, projHandler, columNames,    "质疑编号", "zcQuestion.quesId");    editorList.add(editor0);    editor0.addKeyListener(new KeyListener() {      public void keyTyped(KeyEvent e) {      }      public void keyReleased(KeyEvent e) {      }      public void keyPressed(KeyEvent e) {      }    });    editor0.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        projCodeChange();      }    });    TextFieldEditor projName = new TextFieldEditor("项目名称",    "zcQuestion.zcEbProj.projName");    editorList.add(projName);    projName.setEnabled(false);    AsValFieldEditor zcPifuCgfs = new AsValFieldEditor("采购方式",    "zcQuestion.zcEbProj.purType", "ZC_VS_PITEM_OPIWAY");    zcPifuCgfs.setEnabled(false);    editorList.add(zcPifuCgfs);    TextFieldEditor zcMakeDoOrg = new TextFieldEditor("执行机构",    "zcQuestion.zcEbProj.manager");    zcMakeDoOrg.setEnabled(false);    editorList.add(zcMakeDoOrg);    TextFieldEditor zcMakeLinkman = new TextFieldEditor("招标负责人",    "zcQuestion.zcEbProj.manager");    zcMakeLinkman.setEnabled(false);    editorList.add(zcMakeLinkman);    TextFieldEditor zcMakeTel = new TextFieldEditor("负责人电话",    "zcQuestion.zcEbProj.phone");    zcMakeTel.setEnabled(false);    editorList.add(zcMakeTel);    listEdit.addAll(editorList);    return editorList;  }  /**   * 创建客户编辑信息栏字段   */  public List<AbstractFieldEditor> createClientFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    TextFieldEditor personOrg = new TextFieldEditor("单位名称",    "zcQuestion.personOrg");    editorList.add(personOrg);    personOrg.setEnabled(false);    TextFieldEditor personName = new TextFieldEditor("负责人",    "zcQuestion.personName");    editorList.add(personName);    personName.setEnabled(false);    TextFieldEditor personTel = new TextFieldEditor("电话",    "zcQuestion.personTel");    editorList.add(personTel);    personTel.setEnabled(false);    DateFieldEditor clientSubmitZYDate = new DateFieldEditor("质疑提交日期",    "zcQuestion.clientSubmitZYDate");    clientSubmitZYDate.setEnabled(false);    editorList.add(clientSubmitZYDate);    if (this.listCursor != null) {      ZcEbComplain complain = (ZcEbComplain) this.listCursor      .getCurrentObject();      if (complain != null && "".equals(complain.getState())) {        DateFieldEditor clientSubmitTSDate = new DateFieldEditor(        "投诉提交日期", "clientSubmitTSDate");        editorList.add(clientSubmitTSDate);        list.add(clientSubmitTSDate);      }    }    list.add(personOrg);    list.add(personName);    list.add(personTel);    list.add(clientSubmitZYDate);    return editorList;  }  /**   * 创建标段选择器   */  public JComponent createSubBillPanel() {    // 先给表对象放值    ZcEbComplain complain = (ZcEbComplain) listCursor.getCurrentObject();    JTabbedPane tabPane = new JTabbedPane();    tablePanel.init();    tablePanel.getSearchBar().setVisible(false);    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_table");    tablePanel.getTable().setShowCheckedColumn(false);    tablePanel.getTable().getTableRowHeader().setPreferredSize(    new Dimension(50, 100));    if (complain == null) {      complain = new ZcEbComplain();    }    ZCQuestionPack zcQuestionPack = new ZCQuestionPack();    // zcQuestionPack.setQues_id(zcQuestion.getId());    ZCQuestionTableModelConverter zctm = new ZCQuestionTableModelConverter();    List list = new ArrayList<ZcEbSignupPackDetail>();    tablePanel.setTableModel(zctm.convertPackDeToTableModel(complain    .getZcQuestion().getListPack()));    setTableProperty(tablePanel.getTable());    tabPane.addTab("报名标段", tablePanel);    this.subPackTableToolbar = new JFuncToolBar();    JButton addBtn1 = new JButton("添加");    JButton insertBtn1 = new JButton("插入");    JButton delBtn1 = new JButton("删除");    addBtn1.setEnabled(false);    insertBtn1.setEnabled(false);    delBtn1.setEnabled(false);    ((Container) this.subPackTableToolbar).add(addBtn1);    ((Container) this.subPackTableToolbar).add(insertBtn1);    ((Container) this.subPackTableToolbar).add(delBtn1);    tablePanel    .add((Component) this.subPackTableToolbar, BorderLayout.SOUTH);    addBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        addSub(tablePanel);      }    });    insertBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        insertSub(tablePanel);      }    });    delBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        deleteSub(tablePanel);      }    });    JScrollPane wowPanel = createWoPanel();    tabPane.setMinimumSize(new Dimension(240, 150));    wowPanel.setMinimumSize(new Dimension(240, 300));    splitPane = new JSaveableSplitPane(JSplitPane.VERTICAL_SPLIT, tabPane,    wowPanel);    splitPane.setDividerDefaultLocation(this.getClass().getName()    + "_splitPane_dividerLocation", 150);    splitPane.setContinuousLayout(true);    splitPane.setOneTouchExpandable(true);    // 只显示向下的箭头    splitPane.setDividerSize(10);    splitPane.setBackground(self.getBackground());    tabPane.setVisible(false);    return splitPane;  }  private void insertSub(JTablePanel tablePanel) {    ZCQuestion zcQuestion = (ZCQuestion) this.listCursor.getCurrentObject();    if (zcQuestion != null    && zcQuestion.getZcEbProj().getProjCode() == null) {      JOptionPane.showMessageDialog(self, "请先选择一个采购项目 ！", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }  }  @SuppressWarnings("unchecked")  protected Integer[] deleteSub(JTablePanel tablePanel) {    JPageableFixedTable table = tablePanel.getTable();    int[] selectedRows = table.getSelectedRows();    if (selectedRows.length == 0) {      JOptionPane.showMessageDialog(self, "没有选择数据！", "提示",      JOptionPane.INFORMATION_MESSAGE);      return null;    }    BeanTableModel tableModel = ((BeanTableModel) table.getModel());    int[] selRows = new int[selectedRows.length];    for (int i = 0; i < selRows.length; i++) {      selRows[i] = table.convertRowIndexToModel(selectedRows[i]);    }    Arrays.sort(selRows);    for (int i = selRows.length - 1; i >= 0; i--) {      tableModel.deleteRow(selRows[i]);    }    return null;  }  @SuppressWarnings("unchecked")  private void addSub(JTablePanel tablePanel) {    ZCQuestion zcQuestion = (ZCQuestion) this.listCursor.getCurrentObject();    if (zcQuestion.getZcEbProj().getProjCode() == null) {      JOptionPane.showMessageDialog(self, "请先选择一个采购项目 ！", "提示",      JOptionPane.INFORMATION_MESSAGE);      return;    }    tablePanel.getTable().clearSelection();    BeanTableModel editTableModel = (BeanTableModel) tablePanel.getTable()    .getModel();    ZcEbSignupPackDetail bean = new ZcEbSignupPackDetail();    ForeignEntityFieldCellEditor cellEditor = (ForeignEntityFieldCellEditor) tablePanel    .getTable().getColumn("PACK_NAME").getCellEditor();    this.packDto = new ElementConditionDto();    this.packDto.setDattr1(zcQuestion.getZcEbProj().getProjCode());    cellEditor.updateDto(packDto);    bean.setSignupId("");    bean.setSignupPackId(Guid.genID());    editTableModel.insertRow(editTableModel.getRowCount(), bean);    logger.debug("");  }  /**   * 初始化工具栏   */  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    toolBar.add(sendButton);    toolBar.add(suggestPassButton);    toolBar.add(auditPassButton);    toolBar.add(callbackButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(traceButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    // ..    toolBar.add(complainButton);    // toolBar.add(SubmitZY);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSend();      }    });    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doCallback();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核        doSuggestPass();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 审核        doAudit();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 销审        doUnaudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退回        doUntread();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 流程跟踪        doTrace();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });    // SubmitZY.addActionListener(new ActionListener() {    // public void actionPerformed(ActionEvent e) {    // doSubmitZY();    // }    // });    complainButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        docomplainButton();      }    });  }  @SuppressWarnings("unchecked")  private void doAdd() {    ZCQuestion zcQuestion = new ZCQuestion();    this.listCursor = new ListCursor(new ArrayList(1), -1);    listCursor.setCurrentObject(zcQuestion);    setEditingObject(zcQuestion);    refreshData();    updateFieldEditorsEditable();  }  private void doEdit() {  }  private void doDelete() {    ZcEbComplain zcQuestion = (ZcEbComplain) this.listCursor    .getCurrentObject();    boolean success = true;    try {      if (zcQuestion != null && "draft".equals(zcQuestion.getState())) {        this.listPanel.getComplainDelegate().deleteZcEbComplain(        zcQuestion, requestMeta);      } else {        JOptionPane.showMessageDialog(this, "已经处理数据不能删除.", "提示",        JOptionPane.INFORMATION_MESSAGE);      }    } catch (Exception ex) {      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      listCursor.removeCurrentObject();      listCursor.next();      this.listPanel.refreshCurrentTabData();      refreshData();    }  }  @SuppressWarnings("unchecked")  private boolean doSave() {    if (!checkBeforeSave()) {      return false;    }    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);      return true;    }    boolean success = true;    String errorInfo = "";    try {      requestMeta.setFuncId(saveButton.getFuncId());      ZcEbComplain inData = (ZcEbComplain) ObjectUtil      .deepCopy(this.listCursor.getCurrentObject());      ZcEbComplain zcEbComplain = this.listPanel.getComplainDelegate()      .saveZcEbComplain(inData, requestMeta);      this.listCursor.setCurrentObject(zcEbComplain);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示",      JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();      refreshData();    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误",      JOptionPane.ERROR_MESSAGE);    }    return true;  }  private void doSend() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZcEbComplain afterSaveBill = null;      String errorInfo = "";      int num = JOptionPane.YES_OPTION;      ZcEbComplain zcEbComplain = (ZcEbComplain) ObjectUtil      .deepCopy(this.listCursor.getCurrentObject());      if (num == JOptionPane.YES_OPTION) {        try {          requestMeta.setFuncId(this.sendButton.getFuncId());          zcEbComplain.setAuditorId(WorkEnv.getInstance()          .getCurrUserId());          afterSaveBill = this.listPanel.getComplainDelegate()          .sendFN(zcEbComplain, requestMeta);        } catch (Exception ex) {          errorInfo += ex.getMessage();          logger.error(ex.getMessage(), ex);          success = false;          UIUtilities.showStaickTraceDialog(ex, this, "错误", ex          .getMessage());        }        if (success) {          JOptionPane.showMessageDialog(this, "送审成功！", "提示",          JOptionPane.INFORMATION_MESSAGE);        }        refreshData();      }    }  }  private void doCallback() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZcEbComplain afterSaveBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZcEbComplain zcEbComplain = (ZcEbComplain) ObjectUtil        .deepCopy(this.listCursor.getCurrentObject());        zcEbComplain        .setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getComplainDelegate().callbackFN(        zcEbComplain, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "收回成功！", "提示",        JOptionPane.INFORMATION_MESSAGE);        refreshData();      } else {        JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误",        JOptionPane.ERROR_MESSAGE);      }    }  }  private void doSuggestPass() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZcEbComplain afterSaveBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZcEbComplain zcEbComplain = (ZcEbComplain) ObjectUtil        .deepCopy(this.listCursor.getCurrentObject());        zcEbComplain        .setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getComplainDelegate().suggestPassFN(        zcEbComplain, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "审核成功！", "提示",        JOptionPane.INFORMATION_MESSAGE);        refreshData();      } else {        JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误",        JOptionPane.ERROR_MESSAGE);      }    }  }  private void doAudit() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZcEbComplain afterSaveBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZcEbComplain zcEbComplain = (ZcEbComplain) ObjectUtil        .deepCopy(this.listCursor.getCurrentObject());        zcEbComplain        .setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getComplainDelegate().auditPassFN(        zcEbComplain, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "审核成功！", "提示",        JOptionPane.INFORMATION_MESSAGE);        refreshData();      } else {        JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误",        JOptionPane.ERROR_MESSAGE);      }    }  }  private void doUnaudit() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZcEbComplain afterSaveBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZcEbComplain zcEbComplain = (ZcEbComplain) ObjectUtil        .deepCopy(this.listCursor.getCurrentObject());        zcEbComplain        .setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getComplainDelegate().unAuditFN(        zcEbComplain, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "销审成功！", "提示",        JOptionPane.INFORMATION_MESSAGE);        refreshData();      } else {        JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误",        JOptionPane.ERROR_MESSAGE);      }    }  }  private void doUntread() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZcEbComplain afterSaveBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZcEbComplain zcEbComplain = (ZcEbComplain) ObjectUtil        .deepCopy(this.listCursor.getCurrentObject());        zcEbComplain        .setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getComplainDelegate().unTreadFN(        zcEbComplain, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "退回成功！", "提示",        JOptionPane.INFORMATION_MESSAGE);        refreshData();      } else {        JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误",        JOptionPane.ERROR_MESSAGE);      }    }  }  private void doTrace() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZcEbComplain afterSaveBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZcEbComplain zcEbComplain = (ZcEbComplain) ObjectUtil        .deepCopy(this.listCursor.getCurrentObject());        zcEbComplain        .setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getComplainDelegate().callbackFN(        zcEbComplain, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "收回成功！", "提示",        JOptionPane.INFORMATION_MESSAGE);        refreshData();      } else {        JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误",        JOptionPane.ERROR_MESSAGE);      }    }  }  private void doPrevious() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {      listCursor.previous();      refreshData();    }  }  private void doNext() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {      listCursor.next();      refreshData();    }  }  private void doExit() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {      this.parent.dispose();    }  }  private void doHelp() {  }  private void stopEditing() {    listEdit.addAll(list);    for (int i = 0; i < listEdit.size(); i++) {      AbstractFieldEditor abstractFieldEditor = listEdit.get(i);      abstractFieldEditor.setEnabled(false);    }  }  // 投诉  private void docomplainButton() {    ZcEbComplain complain = (ZcEbComplain) this.listCursor    .getCurrentObject();    Date date = new Date();    complain.setClientSubmitTSDate(date);    complain.setState("submited");    ZcEbComplain afterBill = this.listPanel.getComplainDelegate()    .saveZcEbComplain(complain, requestMeta);    if (afterBill != null) {      JOptionPane.showMessageDialog(this, "提交成功.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {      JOptionPane.showMessageDialog(this, "提交失败.", "提示",      JOptionPane.INFORMATION_MESSAGE);    }    refreshData();  }  @SuppressWarnings("unchecked")  private void refreshData() {    ZcEbComplain zcEbComplain = (ZcEbComplain) this.listCursor    .getCurrentObject();    if (zcEbComplain == null) {// 新增页面      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      zcEbComplain = new ZcEbComplain();      ZcEbProj zcEbProj = new ZcEbProj();      ZCQuestion zcQuestion = zcEbComplain.getZcQuestion();      zcQuestion.setZcEbProj(zcEbProj);      zcEbComplain.setState("draft");      List lst = new ArrayList();      lst.add(zcEbComplain);      this.listCursor.setDataList(lst, -1);      listCursor.setCurrentObject(zcEbComplain);      zcEbComplain.setZcQuestion(zcQuestion);    }    this.setEditingObject(zcEbComplain);    setOldObject();    setButtonStatus(zcEbComplain, requestMeta, listCursor);    if (!"draft".equals(zcEbComplain.getState())) {      stopEditing();    }    // workPanel.repaint();    // toolBar.repaint();  }  private void setOldObject() {    oldZcEbComplain = (ZcEbComplain) ObjectUtil.deepCopy(this.listCursor    .getCurrentObject());  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldZcEbComplain).equals(    DigestUtil.digest(listCursor.getCurrentObject()));  }  /**   * 创建经办栏   */  public void createJBPanel() {    ZcEbComplain complain = (ZcEbComplain) this.listCursor    .getCurrentObject();    jbTabbedPane = new JPanel(new BorderLayout());    jbTabbedPane.setBorder(BorderFactory.createTitledBorder("招标部门意见"));    JPanel holePanel = new JPanel(new BorderLayout());    JPanel filePanel = new JPanel();    JPanel reasonPanel = new JPanel(new BorderLayout());    TextAreaFieldEditor jbReason = new TextAreaFieldEditor("招标部门意见",    "zcQuestion.jbReason");    reasonPanel.add(jbReason, BorderLayout.CENTER);    jbReason.setEnabled(false);    JLabel jLabel = new JLabel("相关文件");    filePanel.add(jLabel);    // jbFile = new FileUploader(20);    FileFieldEditor jbFile = new FileFieldEditor("zcQuestion.jbFileName",    "zcQuestion.jbFileName", "zcQuestion.jbFileName");    jbFile.setEnabled(false);    filePanel.add(jbFile);    if (complain != null && complain.getState().equals("draft")) {      jbFile.setEnabled(false);    } else if (complain != null && complain.getState().equals("0")) {    } else {    }    holePanel.add(reasonPanel, BorderLayout.CENTER);    holePanel.add(filePanel, BorderLayout.EAST);    jbTabbedPane.add(holePanel);    list.add(jbReason);    list.add(jbFile);  }  /**   * 创建监管栏   */  public void createJGPanel() {    jgTabbedPane = new JPanel(new BorderLayout());    jgTabbedPane.setBorder(BorderFactory.createTitledBorder("招标监管部门意见"));    JPanel holePanel = new JPanel(new BorderLayout());    JPanel filePanel = new JPanel();    JPanel reasonPanel = new JPanel(new BorderLayout());    TextAreaFieldEditor jgReason = new TextAreaFieldEditor("招标监管部门意见",    "jgReason");    reasonPanel.add(jgReason, BorderLayout.CENTER);    jgReason.setEnabled(false);    JLabel jLabel = new JLabel("相关文件");    filePanel.add(jLabel);    ZcEbComplain complain = (ZcEbComplain) this.listCursor    .getCurrentObject();    FileFieldEditor jgFile = new FileFieldEditor("jgFileName",    "jgFileName", "jgFileName");    if (complain != null && "draft".equals(complain.getState())) {      filePanel.add(jgFile);    } else {      filePanel.add(jgFile);    }    holePanel.add(reasonPanel, BorderLayout.CENTER);    holePanel.add(filePanel, BorderLayout.EAST);    jgTabbedPane.add(holePanel);    list.add(jgReason);    list.add(jgFile);  }  /**   * 创建客户意见栏   */  public void createClientPanel() {    initClientFieldEditorPanel();    jTabbedPane = new JPanel(new BorderLayout());    jTabbedPane.setBorder(BorderFactory.createTitledBorder("质疑意见"));    JPanel holePanel = new JPanel(new BorderLayout());    JPanel filePanel = new JPanel();    JPanel reasonPanel = new JPanel(new BorderLayout());    TextAreaFieldEditor clientReason = new TextAreaFieldEditor("质疑意见",    "zcQuestion.clientReason");    reasonPanel.add(clientReason, BorderLayout.CENTER);    clientReason.setEnabled(false);    JLabel jLabel = new JLabel("相关文件");    filePanel.add(jLabel);    ZcEbComplain complain = (ZcEbComplain) this.listCursor    .getCurrentObject();    FileFieldEditor clientFile = new FileFieldEditor("clientFileName",    "zcQuestion.clientFileName", "zcQuestion.clientFileName");    if (complain != null && complain.getState().equals("draft")) {      filePanel.add(clientFile);    } else {      filePanel.add(clientFile);    }    clientFile.setEnabled(false);    holePanel.add(reasonPanel, BorderLayout.CENTER);    holePanel.add(filePanel, BorderLayout.EAST);    jTabbedPane.add(clientTabbedPane, BorderLayout.NORTH);    jTabbedPane.add(holePanel, BorderLayout.CENTER);    list.add(clientReason);    list.add(clientFile);  }  protected void updateFieldEditors() {    for (AbstractFieldEditor editor : fieldEditors) {      editor.setEditObject(editingObject);    }    for (AbstractFieldEditor editor : list) {      editor.setEditObject(editingObject);    }  }  /**   * 创建下面三个意见栏目   */  public void createButtomPanel() {    buttomPanel = new JPanel();    createJBPanel();    createClientPanel();    createJGPanel();    int n = 1;    ZcEbComplain complain = (ZcEbComplain) this.listCursor    .getCurrentObject();    buttomPanel.add(jTabbedPane);    // if (zcQuestion != null && zcQuestion.getState() != "draft" || 1 == 1)    // {    buttomPanel.add(jbTabbedPane);    n++;    // }    // if (zcQuestion == null || zcQuestion.getState() == "exec") {    buttomPanel.add(jgTabbedPane);    n++;    // }    GridLayout gridLayout = new GridLayout(n, 1);    buttomPanel.setLayout(gridLayout);  }  /**   * 创建客户填写栏   */  protected void initClientFieldEditorPanel() {    clientFieldEditors = createClientFieldEditors();    int row = 0;    int col = 0;    if (clientTabbedPane != null) {      clientTabbedPane.setLayout(new GridBagLayout());      for (int i = 0; i < clientFieldEditors.size(); i++) {        AbstractFieldEditor comp = clientFieldEditors.get(i);        if (comp.isVisible()) {          JLabel label = new JLabel(comp.getName());          comp.setPreferredSize(new Dimension(150, 23));          clientTabbedPane.add(label, new GridBagConstraints(col,          row, 1, 1, 1.0, 1.0, GridBagConstraints.EAST,          GridBagConstraints.NONE, new Insets(5, 0, 5, 5), 0,          0));          clientTabbedPane.add(comp, new GridBagConstraints(col + 1,          row, 1, 1, 1.0, 1.0, GridBagConstraints.WEST,          GridBagConstraints.HORIZONTAL, new Insets(5, 0, 5,          5), 0, 0));          if (col == colCount * 2 - 2) {            row++;            col = 0;          } else {            col += 2;          }        }      }    }  }  /**   * 标段外部部件选择处理类   */  private class ZcEbPackHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbPackHandler(String columNames[]) {      this.columNames = columNames;    }    @SuppressWarnings("unchecked")    public void excute(List selectedDatas) {      JTable table = tablePanel.getTable();      BeanTableModel model = (BeanTableModel) table.getModel();      int k = table.getSelectedRow();      if (k < 0)        return;      int k2 = table.convertRowIndexToModel(k);      ZcEbSignupPackDetail signpack = (ZcEbSignupPackDetail) (model      .getBean(k2));      if (selectedDatas.size() > 0) {        ZcEbPack pack = (ZcEbPack) selectedDatas.get(0);        signpack.setPackCode(pack.getPackCode());        signpack.setPackName(pack.getPackName());        signpack.setPackDesc(pack.getPackDesc());      }      if (signpack.getSignupPackId() == null      || signpack.getSignupPackId().trim().length() == 0) {        signpack.setSignupId(Guid.genID());      }      model.fireTableDataChanged();    }    @SuppressWarnings({ "unchecked", "serial" })    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbPack rowData = (ZcEbPack) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getPackCode();        data[i][col++] = rowData.getPackName();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  private void setTableProperty(JTable table) {    ZcUtil.translateColName(table, "ZC_EB_");    String columNames[] = { LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE), LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME) };    ZcEbPackHandler handler = new ZcEbPackHandler(columNames);    this.packDto = new ElementConditionDto();    ZcEbComplain complain = (ZcEbComplain) listCursor.getCurrentObject();    if (complain != null) {      this.packDto.setDattr1(complain.getZcQuestion().getZcEbProj()      .getProjCode());    }    ForeignEntityFieldCellEditor packEditor = new ForeignEntityFieldCellEditor(    "ZcEbProj.getZcEbPack", this.packDto, 20, handler, columNames,    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PAKE_NAME), "packName");    SwingUtil.setTableCellEditor(table, "PACK_NAME", packEditor);  }  /**   * 保存前检查   */  protected boolean checkBeforeSave() {    return true;  }  /**   * 是否改变对象检查   */  protected boolean dataChange() {    return !DigestUtil.digest(oldZcEbComplain).equals(    DigestUtil.digest(listCursor.getCurrentObject()));  }  private class ZcEbQuestionFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbQuestionFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZCQuestion ques = (ZCQuestion) object;        ZcEbComplain complain = (ZcEbComplain) listCursor        .getCurrentObject();        complain.setZcQuestion(ques);        setEditingObject(complain);        projCodeChange();      }    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZCQuestion question = (ZCQuestion) showDatas.get(i);        int col = 0;        data[i][col++] = question.getQuesId();        data[i][col++] = question.getZcEbProj().getProjName();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE",        question.getZcEbProj().getPurType());        data[i][col++] = question.getZcEbProj().getManager();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  private void projCodeChange() {  }}
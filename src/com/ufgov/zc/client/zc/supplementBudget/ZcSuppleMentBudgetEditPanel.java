/**   * @(#) project: zcxa* @(#) file: ZcSuppleMentBudgetEditPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.supplementBudget;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_FUND_CODE;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ORIGIN_CODE;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_CO_CODE_ND;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_CO_NAME;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_FGKZBFS_SMWJ;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_FIELD_ADD_MONEY;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_FUKUAN_TYPE;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_IS_IMP;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MAKE_LINKMAN;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MAKE_NAME;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MAKE_SEQUENCE;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MAKE_TEL;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MONEY_BI_SUM;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_PIFU_CGFS;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_PITEM_ARR_DATE;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_PITEM_OPIWAY;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_TRUST_AGEY_CODE;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_TRUST_AGEY_NAME;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_ZG_CS_CODE;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTableHeader;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcSupplementPProMakeToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.WorkflowTrace;import com.ufgov.zc.client.component.button.AuditPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.button.zc.CommonButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.celleditor.DateCellEditor;import com.ufgov.zc.client.component.table.celleditor.IntCellEditor;import com.ufgov.zc.client.component.table.celleditor.MoneyCellEditor;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.celleditor.zc.ZcBCatalogueCellEditor;import com.ufgov.zc.client.component.table.cellrenderer.DateCellRenderer;import com.ufgov.zc.client.component.table.cellrenderer.NumberCellRenderer;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecelleditor.FileCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.AutoNumFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.CompanyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.OrgFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcBAgency;import com.ufgov.zc.common.zc.model.ZcPProMake;import com.ufgov.zc.common.zc.model.ZcPProMakeExt;import com.ufgov.zc.common.zc.model.ZcPProMitemBi;import com.ufgov.zc.common.zc.model.ZcSuppleMentBi;import com.ufgov.zc.common.zc.model.ZcSupplementPProMake;import com.ufgov.zc.common.zc.publish.IZcPProMakeServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcSuppleMentPProMakeServiceDelegate;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Dimension;import java.awt.Font;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import javax.swing.table.TableModel;import org.apache.commons.lang.ObjectUtils;import org.apache.log4j.Logger;/*** @ClassName: ZcSuppleMentBudgetEditPanel* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2010-7-27 下午08:16:47* @version: V1.0 * @since: 1.0* @author: Administrator* @modify: */@SuppressWarnings("unchecked")public class ZcSuppleMentBudgetEditPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = -2779110682087878491L;  private static final Logger logger = Logger.getLogger(ZcSuppleMentBudgetEditPanel.class);  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_P_PRO_MAKE_SUPPLEMENT";  private FuncButton previousButton = new PreviousButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  // 工作流送审  private FuncButton sendButton = new SendButton();  // 工作流收回  private FuncButton callbackButton = new CallbackButton();  // 工作流填写意见审核通过  private FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流审核通过  private FuncButton auditPassButton = new AuditPassButton();  // 工作流销审  private FuncButton unAuditButton = new UnauditButton();  // 工作流退回  private FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  private FuncButton traceButton = new TraceButton();  //追加按钮  private FuncButton addMoneyButton;  private ListCursor listCursor;  private ZcSupplementPProMake oldZcSupplementPProMake;  private String tabStatus;  private ZcEbSupplementBudgetListPanel listPanel;  private JTablePanel biTablePanel = new JTablePanel();  private JTablePanel suppleMentBudgeTablePanel = new JTablePanel();  private JTablePanel itemTablePanel = new JTablePanel();  private ZcSuppleMentBudgetEditPanel self = this;  private ElementConditionDto zcPProMakeDao = new ElementConditionDto();  private ForeignEntityFieldEditor zcPProMakeSelectEdit;  private GkBaseDialog parent;  private ZcPProMake zcPProMake;  private IZcSuppleMentPProMakeServiceDelegate zcSuppleMentPProMakeServiceDelegate = (IZcSuppleMentPProMakeServiceDelegate) ServiceFactory.create(    IZcSuppleMentPProMakeServiceDelegate.class,    "zcSuppleMentPProMakeServiceDelegate");  private IZcPProMakeServiceDelegate ZcPProMakeServiceDelegate = (IZcPProMakeServiceDelegate) ServiceFactory.create(IZcPProMakeServiceDelegate.class,    "zcPProMakeServiceDelegate");  public ZcSuppleMentBudgetEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus, ZcEbSupplementBudgetListPanel listPanel) {    super(ZcPProMake.class, listPanel.getBillElementMeta());    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "追加资金项目明细", TitledBorder.CENTER, TitledBorder.TOP,      new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.parent = parent;    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();  }  MoneyFieldEditor zcMoneyBiSum;  MoneyFieldEditor zcAddMoney;  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    if (listCursor.getCurrentObject() == null) {      AutoNumFieldEditor zcSuppleMentCode = new AutoNumFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_SUPPLE_MENT_BUDGE_CODE),        "zcSuppleMentCode");      editorList.add(zcSuppleMentCode);    }    //添加一个选择项采购项目的web实体    String zcPProMakeColumNames[] = { "项目编号", "项目名称", "单位", "单位编号" };    ZcEbProMakeHandler handler2 = new ZcEbProMakeHandler(zcPProMakeColumNames);    zcPProMakeDao.setNd(requestMeta.getSvNd());    zcPProMakeDao.setZcText0("exec");    zcPProMakeDao.setCoCode(requestMeta.getSvCoCode());    zcPProMakeSelectEdit = new ForeignEntityFieldEditor("ZC_P_PRO_MAKE.getProMake", zcPProMakeDao, 20, handler2, zcPProMakeColumNames,      LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_CODE),      "zcMakeCode");    zcPProMakeSelectEdit.setEnabled(true);    editorList.add(zcPProMakeSelectEdit);    TextFieldEditor zcMakeName = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_NAME), "zcMakeName");    zcMakeName.setEnabled(false);    editorList.add(zcMakeName);    //    AsValFieldEditor zcMakeStatus = new AsValFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_STATUS),    //      "zcSuppleMentStatus", "ZC_VS_MAKE_STATUS");    //    zcMakeStatus.setEnabled(false);    //    editorList.add(zcMakeStatus);    CompanyFieldEditor zcCoCode = new CompanyFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_CO_NAME), "zcCoCode");    zcCoCode.setEnabled(false);    editorList.add(zcCoCode);    TextFieldEditor zcCoCodeNd = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_CO_CODE_ND), "zcCoCodeNd");    zcCoCodeNd.setEnabled(false);    editorList.add(zcCoCodeNd);    OrgFieldEditor zcZgCsCode = new OrgFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_ZG_CS_CODE), "zcZgCsCode", true);    zcZgCsCode.setEnabled(false);    editorList.add(zcZgCsCode);    TextFieldEditor zcMakeLinkman = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_LINKMAN), "zcMakeLinkman");    editorList.add(zcMakeLinkman);    TextFieldEditor zcMakeTel = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_TEL), "zcMakeTel");    zcMakeLinkman.setEnabled(false);    editorList.add(zcMakeTel);    zcMoneyBiSum = new MoneyFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MONEY_BI_SUM), "zcMoneyBiSum");    zcMoneyBiSum.setEnabled(false);    editorList.add(zcMoneyBiSum);    zcAddMoney = new MoneyFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_FIELD_ADD_MONEY), "addMoney");    zcAddMoney.setEnabled(false);    editorList.add(zcAddMoney);    TextFieldEditor zcAgeyCode = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_TRUST_AGEY_CODE), "zcAgeyCode");    zcAgeyCode.setEnabled(false);    editorList.add(zcAgeyCode);    TextFieldEditor zcAgeyName = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_TRUST_AGEY_NAME), "zcAgeyName");    zcAgeyName.setEnabled(false);    editorList.add(zcAgeyName);    AsValFieldEditor zcMakeSequence = new AsValFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_SEQUENCE), "zcMakeSequence", "VS_ZC_ORGTYPE");    zcMakeSequence.setEnabled(false);    editorList.add(zcMakeSequence);    AsValFieldEditor zcFukuanType = new AsValFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_FUKUAN_TYPE), "zcFukuanType", "ZC_VS_FUKUAN_TYPE");    zcFukuanType.setEnabled(false);    editorList.add(zcFukuanType);    AsValFieldEditor zcPitemOpiway = new AsValFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_PITEM_OPIWAY), "zcPitemOpiway", "ZC_VS_PITEM_OPIWAY");    zcPitemOpiway.setEnabled(false);    editorList.add(zcPitemOpiway);    AsValFieldEditor zcPifuCgfs = new AsValFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_PIFU_CGFS), "zcPifuCgfs", "ZC_VS_PITEM_OPIWAY");    zcPifuCgfs.setEnabled(false);    editorList.add(zcPifuCgfs);    TextFieldEditor zcFgkzbfsSmwj = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_FGKZBFS_SMWJ), "zcFgkzbfsSmwj");    editorList.add(zcFgkzbfsSmwj);    zcFgkzbfsSmwj.setEnabled(false);    AsValFieldEditor zcIsImp = new AsValFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_IS_IMP), "zcIsImp", "VS_Y/N");    editorList.add(zcIsImp);    zcIsImp.setEnabled(false);    AsValFieldEditor zcIsBudget = new AsValFieldEditor("是否公开预算", "zcIsBudget", "VS_Y/N");    editorList.add(zcIsBudget);    zcIsBudget.setEnabled(false);    TextFieldEditor zcInputCode = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_INPUT_CODE), "zcInputCode", false);    editorList.add(zcInputCode);    TextFieldEditor zcInputName = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_INPUT_NAME), "zcInputName", false);    editorList.add(zcInputName);    DateFieldEditor zcInputDate = new DateFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_INPUT_DATE), "zcInputDate");    editorList.add(zcInputDate);    TextFieldEditor zcRemark = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_REMARK), "zcRemark");    editorList.add(zcRemark);    return editorList;  }  @Override  public JTablePanel[] getSubTables() {    return new JTablePanel[] { biTablePanel, itemTablePanel, suppleMentBudgeTablePanel };  }  JFuncToolBar bottomToolBar1 = null;  JFuncToolBar bottomToolBar2 = null;  JFuncToolBar bottomToolBar3 = null;  private void setItemBiDefaultValue(ZcPProMitemBi zcPProMitemBi) {    zcPProMitemBi.setFundCode("1");    zcPProMitemBi.setOriginCode("1");    zcPProMitemBi.setPaytypeCode("1");  }  JTabbedPane biTabPane = null;  JTabbedPane itemTabPane = null;  @Override  public JComponent createSubBillPanel() {    biTabPane = new JTabbedPane();    biTablePanel.init();    biTablePanel.getSearchBar().setVisible(false);    biTablePanel.setTablePreferencesKey(this.getClass().getName() + "_biTable");    biTablePanel.getTable().setShowCheckedColumn(true);    biTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    suppleMentBudgeTablePanel.init();    suppleMentBudgeTablePanel.getSearchBar().setVisible(false);    suppleMentBudgeTablePanel.setTablePreferencesKey(this.getClass().getName() + "_biTable");    suppleMentBudgeTablePanel.getTable().setShowCheckedColumn(true);    suppleMentBudgeTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    biTablePanel.setPanelId("1");    suppleMentBudgeTablePanel.setPanelId("2");    biTabPane.addTab("追加资金", suppleMentBudgeTablePanel);    //    bottomToolBar3 = new JFuncToolBar();    //    JButton addBtn3 = new JButton("添加");    //    JButton insertBtn3 = new JButton("插入");    //    JButton delBtn3 = new JButton("删除");    //    bottomToolBar3.add(addBtn3);    //    bottomToolBar3.add(insertBtn3);    //    bottomToolBar3.add(delBtn3);    //    suppleMentBudgeTablePanel.add(bottomToolBar3, BorderLayout.SOUTH);    //    //    addBtn3.addActionListener(new ActionListener() {    //      public void actionPerformed(ActionEvent e) {    //        ZcPProMitemBi zcPProMitemBi = new ZcPProMitemBi();    //        zcPProMitemBi.setTempId(Guid.genID());    //        setItemBiDefaultValue(zcPProMitemBi);    //        addSub(suppleMentBudgeTablePanel, zcPProMitemBi);    //      }    //    });    //    //    insertBtn3.addActionListener(new ActionListener() {    //      public void actionPerformed(ActionEvent e) {    //        ZcPProMitemBi zcPProMitemBi = new ZcPProMitemBi();    //        zcPProMitemBi.setTempId(Guid.genID());    //        setItemBiDefaultValue(zcPProMitemBi);    //        insertSub(suppleMentBudgeTablePanel, zcPProMitemBi);    //      }    //    });    //    //    delBtn3.addActionListener(new ActionListener() {    //      public void actionPerformed(ActionEvent e) {    //        Integer[] checkedRows = deleteSub(suppleMentBudgeTablePanel);    //        // 从新计算采购预算    //        if (checkedRows.length > 0) {    //          self.caculateMoney(((BeanTableModel) biTablePanel.getTable().getModel()).getDataBeanList(),    //            ((BeanTableModel) suppleMentBudgeTablePanel.getTable().getModel()).getDataBeanList());    //        }    //      }    //    });    itemTabPane = new JTabbedPane();    itemTablePanel.init();    itemTablePanel.getSearchBar().setVisible(false);    itemTablePanel.setTablePreferencesKey(this.getClass().getName() + "_itemTable");    itemTablePanel.getTable().setShowCheckedColumn(true);    itemTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    biTablePanel.setPanelId("1");    itemTablePanel.setPanelId("2");    itemTabPane.addTab("资金构成", biTablePanel);    itemTabPane.addTab("计划明细", itemTablePanel);    JGroupableTableHeader itemTableHeader = itemTablePanel.getTable().getTableHeader();    itemTableHeader.addColumnGroup("采购预算资金", new String[] { "ZC_FIELD_ZC_ITEM_SUM", "BUDGET_BI_MONEY", "BUDGET_OTHER_MONEY" });    JPanel panel = new JPanel(new GridLayout(2, 1));    panel.add(itemTabPane);    panel.add(biTabPane);    return panel;  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(saveButton);    toolBar.add(sendButton);    toolBar.add(suggestPassButton);    toolBar.add(auditPassButton);    toolBar.add(callbackButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(traceButton);    toolBar.add(deleteButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    if (this.listCursor.getCurrentObject() != null      && "toadd".equals(((ZcSupplementPProMake) this.listCursor.getCurrentObject()).getZcSuppleMentStatus())) {      addMoneyButton = new CommonButton("f_addMoney", "追加", "default.gif");      toolBar.add(addMoneyButton);      addMoneyButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          stopTableEditing();          // 追加          doAddMoney();        }      });    }    toolBar.add(exitButton);    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 保存        doSave();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 删除        doDelete();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 送审        doSend();      }    });    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 收回        doCallback();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        stopTableEditing();        // 填写意见审核        doSuggestPass();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 审核        doAudit();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 销审        doUnaudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 退回        doUntread();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 流程跟踪        doTrace();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 上一页        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 下一页        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退出        doExit();      }    });  }  private void refreshAll(ZcSupplementPProMake afterSaveBill, boolean isRefreshButton) {    this.listCursor.setCurrentObject(afterSaveBill);    refreshData();    if (isRefreshButton) {      setButtonStatus(afterSaveBill, requestMeta, this.listCursor);    }  }  /*   * 流程跟踪   */  private void doTrace() {    if (this.listCursor.getCurrentObject() == null) {      return;    }        ZcSupplementPProMake bean = (ZcSupplementPProMake) this.listCursor.getCurrentObject();        if(bean == null){    	    	return;    }    ZcUtil.showTraceDialog(bean, compoId);  }  private void doSend() {    boolean success = true;    ZcSupplementPProMake afterSaveBill = null;    String errorInfo = "";    if (checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    try {      requestMeta.setFuncId(this.sendButton.getFuncId());      ZcSupplementPProMake bean = (ZcSupplementPProMake) this.listCursor.getCurrentObject();      bean.setAuditorId(WorkEnv.getInstance().getCurrUserId());      bean.setComment("同意");      afterSaveBill = zcSuppleMentPProMakeServiceDelegate.newCommitFN(bean, requestMeta);    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    }  }  /*   * 收回   */  private void doCallback() {    boolean success = true;    ZcSupplementPProMake afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.callbackButton.getFuncId());      ZcSupplementPProMake bean = (ZcSupplementPProMake) this.listCursor.getCurrentObject();      bean.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = zcSuppleMentPProMakeServiceDelegate.callbackFN(bean, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 填写意见审核   */  private void doSuggestPass() {    if (checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcSupplementPProMake afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.suggestPassButton.getFuncId());      ZcSupplementPProMake bean = (ZcSupplementPProMake) this.listCursor.getCurrentObject();      bean.setComment(commentDialog.getComment());      bean.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = zcSuppleMentPProMakeServiceDelegate.auditFN(bean, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 审核   */  private void doAudit() {    if (checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    ZcSupplementPProMake afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.auditPassButton.getFuncId());      ZcSupplementPProMake bean = (ZcSupplementPProMake) this.listCursor.getCurrentObject();      bean.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = zcSuppleMentPProMakeServiceDelegate.auditFN(bean, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 销审   */  private void doUnaudit() {    boolean success = true;    ZcSupplementPProMake afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unAuditButton.getFuncId());      ZcSupplementPProMake bean = (ZcSupplementPProMake) this.listCursor.getCurrentObject();      bean.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = zcSuppleMentPProMakeServiceDelegate.unAuditFN(bean, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 退回   */  private void doUntread() {    if (checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcSupplementPProMake afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unTreadButton.getFuncId());      ZcSupplementPProMake bean = (ZcSupplementPProMake) this.listCursor.getCurrentObject();      bean.setAuditorId(WorkEnv.getInstance().getCurrUserId());      bean.setComment(commentDialog.getComment());      afterSaveBill = zcSuppleMentPProMakeServiceDelegate.untreadFN(bean, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldZcSupplementPProMake);      }    }    listCursor.previous();    refreshData();  }  private void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldZcSupplementPProMake);      }    }    listCursor.next();    refreshData();  }  public boolean doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return false;        }      }    }    this.parent.dispose();    return true;  }  /**   * 保存前校验   * @param cpApply   * @return   */  private boolean checkBeforeSave() {    ZcSupplementPProMake bean = (ZcSupplementPProMake) this.listCursor.getCurrentObject();    StringBuilder errorInfo = new StringBuilder();    BigDecimal addMoney = bean.getAddMoney();    if (addMoney == null || addMoney.doubleValue() == 0.00) {      errorInfo.append("追加金额不能0.0！\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return true;    }    return false;  }  /**   *   * @Description: TODO，对通过审核的采购追加资金，将追加的金额加入到计划的采购预算中去。并且也要修改  * @return void 返回类型  * @since 1.0   */  public void doAddMoney() {    ZcSupplementPProMake bean = ((ZcSupplementPProMake) this.listCursor.getCurrentObject());    BigDecimal addMoney = bean.getAddMoney();    ZcPProMake zcPProMake = bean.getZcPProMake();    BigDecimal zcMoneyBiSum = zcPProMake.getZcMoneyBiSum();    zcPProMake.setZcMoneyBiSum(zcMoneyBiSum.add(addMoney));    boolean success = true;    String errorInfo = "";    try {      //将资金追加到采购计划中去，并修改采购计划的明细。      requestMeta.setFuncId(addMoneyButton.getFuncId());      zcSuppleMentPProMakeServiceDelegate.addMoneyFN(bean, requestMeta);      //修改追加资金的状态，为已追加。    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      refreshData();      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  public boolean doSave() {    if (checkBeforeSave()) {      return false;    }    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return true;    }    boolean success = true;    String errorInfo = "";    try {      requestMeta.setFuncId(saveButton.getFuncId());      ZcSupplementPProMake zcSupplementPProMake = (ZcSupplementPProMake) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      if (zcSupplementPProMake.getZcSuppleMentCode() == null) {        zcSupplementPProMake.setZcSuppleMentStatus("0");      }      zcSupplementPProMake = zcSuppleMentPProMakeServiceDelegate.updateZcSupplementPProMakeFN(zcSupplementPProMake, requestMeta);      listCursor.setCurrentObject(zcSupplementPProMake);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      refreshData();      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }    return true;  }  protected void doDelete() {    int num = JOptionPane.showConfirmDialog(this, "是否删除当前单据", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      ZcSupplementPProMake zcSupplementPProMake = null;      String errorInfo = "";      try {        requestMeta.setFuncId(deleteButton.getFuncId());        zcSupplementPProMake = (ZcSupplementPProMake) this.listCursor.getCurrentObject();        if (!"0".equals(zcSupplementPProMake.getZcSuppleMentStatus()))          JOptionPane.showMessageDialog(this, "非编辑状态单据，不可以删除！", "提示", JOptionPane.ERROR_MESSAGE);        this.listPanel.getZcSuppleMentPProMakeServiceDelegate().deleteZcSupplementPProMakeFN(zcSupplementPProMake, requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        this.listCursor.removeCurrentObject();        JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.refreshData();        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void stopTableEditing() {    JPageableFixedTable biTable = this.biTablePanel.getTable();    if (biTable.isEditing()) {      biTable.getCellEditor().stopCellEditing();    }    JPageableFixedTable suppleMentBudageTable = this.suppleMentBudgeTablePanel.getTable();    if (suppleMentBudageTable.isEditing()) {      suppleMentBudageTable.getCellEditor().stopCellEditing();    }    JPageableFixedTable itemTable = this.itemTablePanel.getTable();    if (itemTable.isEditing()) {      itemTable.getCellEditor().stopCellEditing();    }  }  public boolean isDataChanged() {    stopTableEditing();    return !DigestUtil.digest(oldZcSupplementPProMake).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  private void refreshData() {    ZcSupplementPProMake bean = (ZcSupplementPProMake) listCursor.getCurrentObject();    if (bean != null) {      try {        if (bean.getZcSuppleMentCode() != null) {          bean = this.listPanel.getZcSuppleMentPProMakeServiceDelegate().getZcSupplementPProMake(bean.getZcSuppleMentCode(), requestMeta);        }        zcPProMake = bean.getZcPProMake();        copyProMakeToCurrenObject(zcPProMake, bean);      } catch (Exception e) {        e.printStackTrace();      }    } else {      bean = new ZcSupplementPProMake();      bean.setZcSuppleMentStatus("0");      bean.setZcInputCode(requestMeta.getSvUserID());      bean.setZcInputName(requestMeta.getSvUserName());      bean.setZcInputDate(requestMeta.getSysDate());      listCursor.getDataList().add(bean);      bean.setSuppleMentBiList(new ArrayList());      if (zcPProMake == null) {        zcPProMake = new ZcPProMake();        zcPProMake.setBiList(new ArrayList());        zcPProMake.setItemList(new ArrayList());        bean.setZcPProMake(zcPProMake);      }    }    this.setEditingObject(bean);    listCursor.setCurrentObject(bean);    itemTablePanel.setTableModel(ZcSupplementPProMakeToTableModelConverter.convertSubItemTableData(zcPProMake.getItemList()));    biTablePanel.setTableModel(ZcSupplementPProMakeToTableModelConverter.convertSubBiTableData(zcPProMake.getBiList()));    //设置追加金额输入框是否可编辑    boolean isEdit = false;    if (this.listCursor.getCurrentObject() != null && "0".equals(((ZcSupplementPProMake) this.listCursor.getCurrentObject()).getZcSuppleMentStatus())) {      isEdit = true;    }    suppleMentBudgeTablePanel.setTableModel(ZcSupplementPProMakeToTableModelConverter.convertSubSuppleMentBudgeTableData(bean.getSuppleMentBiList(),      isEdit));    // 翻译从表表头列    ZcUtil.translateColName(itemTablePanel.getTable(), ZcSupplementPProMakeToTableModelConverter.getItemInfo());    ZcUtil.translateColName(biTablePanel.getTable(), ZcSupplementPProMakeToTableModelConverter.getBiInfo());    ZcUtil.translateColName(suppleMentBudgeTablePanel.getTable(), ZcSupplementPProMakeToTableModelConverter.getSuppleMentBudgeInfo());    // 设置从表列类型    setTableBiEditor(biTablePanel.getTable());    setTablesuppleMentBudgeEditor(suppleMentBudgeTablePanel.getTable());    setTableItemEditor(itemTablePanel.getTable());    // 根据工作流模版设置功能按钮是否可用    setButtonStatus((ZcSupplementPProMake) this.listCursor.getCurrentObject(), requestMeta, this.listCursor);    if (this.listCursor.getCurrentObject() != null      && "toadd".equals(((ZcSupplementPProMake) this.listCursor.getCurrentObject()).getZcSuppleMentStatus())) {      callbackButton.setVisible(false);    }    addSuppleMentTableLisenter(suppleMentBudgeTablePanel.getTable());    setOldObject();    this.initScrollBarValue();    biTabPane.repaint();    itemTabPane.repaint();    suppleMentBudgeTablePanel.repaint();  }  private void initScrollBarValue() {    biTablePanel.getScrollPane().getHorizontalScrollBar().setValue(0);    biTablePanel.getScrollPane().getVerticalScrollBar().setValue(0);    suppleMentBudgeTablePanel.getScrollPane().getHorizontalScrollBar().setValue(0);    suppleMentBudgeTablePanel.getScrollPane().getVerticalScrollBar().setValue(0);    itemTablePanel.getScrollPane().getHorizontalScrollBar().setValue(0);    itemTablePanel.getScrollPane().getVerticalScrollBar().setValue(0);  }  //  private void addBiTableLisenter(JPageableFixedTable table) {  //    BeanTableModel model1 = (BeanTableModel) (suppleMentBudgeTablePanel.getTable().getModel());  //    final BeanTableModel model2 = (BeanTableModel) (table.getModel());  //    model2.addTableModelListener(new TableModelListener() {  //      public void tableChanged(TableModelEvent e) {  //        if (e.getColumn() >= 0 && "ZC_BI_JHUA_SUM".equals(model2.getColumnIdentifier(e.getColumn()))) {  //          self.caculateMoney(model2.getDataBeanList());  //        }  //      }  //    });  //  }  private void addSuppleMentTableLisenter(JPageableFixedTable table) {    final BeanTableModel model = (BeanTableModel) (table.getModel());    model.addTableModelListener(new TableModelListener() {      public void tableChanged(TableModelEvent e) {        if (e.getColumn() >= 0 && "ZC_FIELD_SUPPLE_MENT_BUDGE".equals(model.getColumnIdentifier(e.getColumn()))) {          self.caculateMoney(model.getDataBeanList());        }      }    });  }  protected void caculateMoney(List<ZcSuppleMentBi> biList) {    ZcSupplementPProMake bean = ((ZcSupplementPProMake) this.listCursor.getCurrentObject());    /**     * 修改资金构成表里的追加金额     */    List<ZcPProMitemBi> list = ((BeanTableModel) (biTablePanel.getTable().getModel())).getDataBeanList();    /**     * 采购计划的预算总金额     */    //    BigDecimal sum = BigDecimal.ZERO;    /**     * 本次追加单追加的总金额     */    BigDecimal addMoney = BigDecimal.ZERO;    for (int i = 0; i < biList.size(); i++) {      ZcSuppleMentBi bi = biList.get(i);      addMoney = addMoney.add((BigDecimal) ObjectUtils.defaultIfNull(bi.getSuppleMentAmount(), new BigDecimal("0.00")));    }    bean.setAddMoney(addMoney);    //    for (int i = 0; i < list.size(); i++) {    //      ZcPProMitemBi itembi = list.get(i);    //      /**    //       *这笔资金中已经追加过的金额。    //       */    //      BigDecimal allSuppleMent;    //      /**    //       * 预算资金    //       */    //      BigDecimal JhuaMoney = itembi.getZcBiJhuaSum();    //      Map map = new HashMap();    //      map.put("zcMakeBiNo", itembi.getZcBiNo());    //      map.put("zcMakeCode", itembi.getZcMakeCode());    //      /**    //       * 获取这笔资金构成中已经追加过的金额    //       */    //      allSuppleMent = zcSuppleMentPProMakeServiceDelegate.getSumSuppleMentAmountSum(map, requestMeta);    //      if (allSuppleMent == null) {    //        allSuppleMent = new BigDecimal("0.0");    //      }    //      /**    //       * 获得这笔资金构成中本次的追加金额    //       */    //      for (int j = 0; j < biList.size(); j++) {    //        BigDecimal addBudge = biList.get(j).getSuppleMentAmount();    //        if (biList.get(j).getZcMakeBiNo().equals(itembi.getZcBiNo())) {    //          if (addBudge == null) {    //            addBudge = new BigDecimal("0.0");    //          }    //          allSuppleMent = allSuppleMent.add(addBudge);    //        }    //      }    //      //      //预算金额总计=计划金额+所有追加的金额    //      //      itembi.setYszjSum(allSuppleMent.add(JhuaMoney));    //    }    //    //    bean.getZcPProMake().setBiList(list);    //    //    //    for (ZcPProMitemBi bi : list) {    //    //      sum = sum.add((BigDecimal) ObjectUtils.defaultIfNull(bi.getYszjSum(), new BigDecimal("0.00")));    //    //    }    //    //    ZcPProMake beanData = bean.getZcPProMake();    //    //    if (sum.compareTo(beanData.getZcMoneyBiSum()) != 0) {    //    //      beanData.setZcMoneyBiSum(sum);    //    //      ZcSupplementPProMake zcSupplementPProMake = (ZcSupplementPProMake) this.listCursor.getCurrentObject();    //    //      zcSupplementPProMake.setZcPProMake(beanData);    //    //      zcSupplementPProMake.setZcMoneyBiSum(sum);    //    //    }    this.setEditingObject(bean);    this.listCursor.setCurrentObject(bean);  }  private void setTableBiEditor(JTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    SwingUtil.setTableCellEditor(table, "ZC_BI_JHUA_SUM", new MoneyCellEditor(false));    SwingUtil.setTableCellRenderer(table, "ZC_BI_JHUA_SUM", new NumberCellRenderer());    SwingUtil.setTableCellEditor(table, "ZC_BI_YJBA_SUM", new MoneyCellEditor(false));    SwingUtil.setTableCellRenderer(table, "ZC_BI_YJBA_SUM", new NumberCellRenderer());    SwingUtil.setTableCellEditor(table, FIELD_TRANS_FUND_CODE, new AsValComboBoxCellEditor("ZC_VS_FUND_NAME"));    SwingUtil.setTableCellRenderer(table, ZcElementConstants.FIELD_TRANS_FUND_CODE, new AsValCellRenderer("ZC_VS_FUND_NAME"));    SwingUtil.setTableCellEditor(table, FIELD_TRANS_ORIGIN_CODE, new AsValComboBoxCellEditor("ZC_VS_ORIGIN_NAME"));    SwingUtil.setTableCellRenderer(table, ZcElementConstants.FIELD_TRANS_ORIGIN_CODE, new AsValCellRenderer("ZC_VS_ORIGIN_NAME"));    SwingUtil.setTableCellEditor(table, ZcElementConstants.FIELD_TRANS_PAYTYPE_CODE, new AsValComboBoxCellEditor("ZC_VS_PAYTYPE_NAME"));    SwingUtil.setTableCellRenderer(table, ZcElementConstants.FIELD_TRANS_PAYTYPE_CODE, new AsValCellRenderer("ZC_VS_PAYTYPE_NAME"));    SwingUtil.setTableCellEditor(table, "ZC_FUND_FILE", new FileCellEditor("zcFundFileBlobid", (BeanTableModel) table.getModel()));  }  private void setTablesuppleMentBudgeEditor(JTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    SwingUtil.setTableCellEditor(table, "ZC_FIELD_SUPPLE_MENT_BUDGE", new MoneyCellEditor(false));    SwingUtil.setTableCellRenderer(table, "ZC_FIELD_SUPPLE_MENT_BUDGE", new NumberCellRenderer());    SwingUtil.setTableCellEditor(table, "ZC_BI_YJBA_SUM", new MoneyCellEditor(false));    SwingUtil.setTableCellRenderer(table, "ZC_BI_YJBA_SUM", new NumberCellRenderer());    SwingUtil.setTableCellEditor(table, FIELD_TRANS_FUND_CODE, new AsValComboBoxCellEditor("ZC_VS_FUND_NAME"));    SwingUtil.setTableCellRenderer(table, ZcElementConstants.FIELD_TRANS_FUND_CODE, new AsValCellRenderer("ZC_VS_FUND_NAME"));    SwingUtil.setTableCellEditor(table, FIELD_TRANS_ORIGIN_CODE, new AsValComboBoxCellEditor("ZC_VS_ORIGIN_NAME"));    SwingUtil.setTableCellRenderer(table, ZcElementConstants.FIELD_TRANS_ORIGIN_CODE, new AsValCellRenderer("ZC_VS_ORIGIN_NAME"));    SwingUtil.setTableCellEditor(table, ZcElementConstants.FIELD_TRANS_PAYTYPE_CODE, new AsValComboBoxCellEditor("ZC_VS_PAYTYPE_NAME"));    SwingUtil.setTableCellRenderer(table, ZcElementConstants.FIELD_TRANS_PAYTYPE_CODE, new AsValCellRenderer("ZC_VS_PAYTYPE_NAME"));    SwingUtil.setTableCellEditor(table, "ZC_FUND_FILE", new FileCellEditor("zcFundFileBlobid", (BeanTableModel) table.getModel()));  }  private void setTableItemEditor(JTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    SwingUtil.setTableCellEditor(table, FIELD_TRANS_ZC_PITEM_ARR_DATE, new DateCellEditor());    SwingUtil.setTableCellRenderer(table, FIELD_TRANS_ZC_PITEM_ARR_DATE, new DateCellRenderer());    SwingUtil.setTableCellEditor(table, FIELD_TRANS_ZC_CATALOGUE_CODE, new ZcBCatalogueCellEditor());    SwingUtil.setTableCellEditor(table, ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH, new FileCellEditor("zcPitemAttachBlobid",      (BeanTableModel) table.getModel()));    SwingUtil.setTableCellEditor(table, "ZC_FIELD_ZC_ITEM_SUM", new MoneyCellEditor(false));    SwingUtil.setTableCellRenderer(table, "ZC_FIELD_ZC_ITEM_SUM", new NumberCellRenderer());    SwingUtil.setTableCellEditor(table, "BUDGET_BI_MONEY", new MoneyCellEditor(false));    SwingUtil.setTableCellRenderer(table, "BUDGET_BI_MONEY", new NumberCellRenderer());    SwingUtil.setTableCellEditor(table, "BUDGET_OTHER_MONEY", new MoneyCellEditor(false));    SwingUtil.setTableCellRenderer(table, "BUDGET_OTHER_MONEY", new NumberCellRenderer());    SwingUtil.setTableCellEditor(table, "ZC_MER_PRICE", new MoneyCellEditor(false));    SwingUtil.setTableCellRenderer(table, "ZC_MER_PRICE", new NumberCellRenderer());    SwingUtil.setTableCellEditor(table, "ZC_FIELD_ZC_CAIG_NUM", new IntCellEditor(false));  }  private void setOldObject() {    oldZcSupplementPProMake = (ZcSupplementPProMake) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  private BillElementMeta biBillElementMeta = BillElementMeta.getBillElementMetaWithoutNd("ZC_P_PRO_MITEM_BI");  private BillElementMeta itemBillElementMeta = BillElementMeta.getBillElementMetaWithoutNd("ZC_P_PRO_MITEM");  private class ZcAgeyFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcAgeyFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      ZcPProMake zcPProMake = (ZcPProMake) listCursor.getCurrentObject();      for (Object object : selectedDatas) {        ZcBAgency zcBAgency = (ZcBAgency) object;        zcPProMake.setAgency(zcBAgency.getAgency());        zcPProMake.setAgencyName(zcBAgency.getAgencyName());        setEditingObject(zcPProMake);      }    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcBAgency rowData = (ZcBAgency) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getAgency();        data[i][col++] = rowData.getAgencyName();      }      MyTableModel model = new MyTableModel(data, columNames) {        private static final long serialVersionUID = 1821460782676810898L;        public boolean isCellEditable(int row, int colum) {          return false;        }        public Class getColumnClass(int column) {          if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {            for (int row = 0; row < this.getRowCount(); row++) {              if (getValueAt(row, column) != null) {                return getValueAt(row, column).getClass();              }            }          }          return Object.class;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }  }  /**   * 选择采购项目的web实体   */  private class ZcEbProMakeHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbProMakeHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcPProMake zcPProMake = (ZcPProMake) object;        ZcSupplementPProMake bean = (ZcSupplementPProMake) listCursor.getCurrentObject();        bean.setZcMakeCode(zcPProMake.getZcMakeCode());        zcPProMake = ZcPProMakeServiceDelegate.selectByPrimaryKey(zcPProMake.getZcMakeCode(), requestMeta);        copyProMakeToCurrenObject(zcPProMake, bean);        List itemBilist = zcPProMake.getBiList();        List list = new ArrayList();        for (int i = 0; i < itemBilist.size(); i++) {          ZcPProMitemBi bi = (ZcPProMitemBi) itemBilist.get(i);          ZcSuppleMentBi zcSuppleMentBi = new ZcSuppleMentBi();          BeanUtil.commonFieldsCopy(bi, zcSuppleMentBi);          zcSuppleMentBi.setZcMakeBiNo(bi.getZcBiNo());          zcSuppleMentBi.setZcMakeCode(bi.getZcMakeCode());          list.add(zcSuppleMentBi);        }        bean.setZcPProMake(zcPProMake);        bean.setSuppleMentBiList(list);        setEditingObject(bean);        refreshData();      }    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcPProMakeExt rowData = (ZcPProMakeExt) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getZcMakeCode();        data[i][col++] = rowData.getZcMakeName();        data[i][col++] = rowData.getCoCode();        data[i][col++] = rowData.getCoName();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      // TCJLODO Auto-generated method stub      return false;    }  }  private void copyProMakeToCurrenObject(ZcPProMake zcPProMake, ZcSupplementPProMake bean) {    if (zcPProMake.getZcMakeLinkman() != null) {      bean.setZcMakeLinkman(zcPProMake.getZcMakeLinkman());    }    if (zcPProMake.getZcMakeTel() != null) {      bean.setZcMakeTel(zcPProMake.getZcMakeTel());    }    if (zcPProMake.getAgency() != null) {      bean.setZcAgeyCode(zcPProMake.getAgency());    }    if (zcPProMake.getAgencyName() != null) {      bean.setZcAgeyName(zcPProMake.getAgencyName());    }    if (zcPProMake.getZcMakeSequence() != null) {      bean.setZcMakeSequence(zcPProMake.getZcMakeSequence());    }    if (zcPProMake.getZcFukuanType() != null) {      bean.setZcFukuanType(zcPProMake.getZcFukuanType());    }    if (zcPProMake.getZcPitemOpiway() != null) {      bean.setZcPitemOpiway(zcPProMake.getZcPitemOpiway());    }    if (zcPProMake.getZcPifuCgfs() != null) {      bean.setZcPifuCgfs(zcPProMake.getZcPifuCgfs());    }    if (zcPProMake.getZcFgkzbfsSmwj() != null) {      bean.setZcFgkzbfsSmwj(zcPProMake.getZcFgkzbfsSmwj());    }    if (zcPProMake.getZcIsImp() != null) {      bean.setZcIsImp(zcPProMake.getZcIsImp());    }    if (zcPProMake.getZcIsBudget() != null) {      bean.setZcIsBudget(zcPProMake.getZcIsBudget());    }    if (zcPProMake.getZcMoneyBiSum() != null) {      bean.setZcMoneyBiSum(zcPProMake.getZcMoneyBiSum());    }    if (zcPProMake.getZcMakeName() != null) {      bean.setZcMakeName(zcPProMake.getZcMakeName());    }    if (zcPProMake.getNd() != 0) {      bean.setNd(zcPProMake.getNd());    }    if (zcPProMake.getCoCode() != null) {      bean.setZcCoCode(zcPProMake.getCoCode());    }    if (zcPProMake.getOrgCode() != null) {      bean.setZcZgCsCode(zcPProMake.getOrgCode());    }  }}
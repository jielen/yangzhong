package com.ufgov.zc.client.zc.evaluation;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.ButtonGroup;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JRadioButton;import javax.swing.JScrollPane;import javax.swing.JSplitPane;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZCQuestionTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JSaveableSplitPane;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.TextAreaFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.zc.emfundpay.EmFundReportEditPanel;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbSignupPackDetail;import com.ufgov.zc.common.zc.model.ZcEvaluation;/** *  * @author wuwb *  */public class ZcEbEvaluationEditPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = 1L;  private static final Logger logger = Logger.getLogger(EmFundReportEditPanel.class);  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_EVALUATION";  ElementConditionDto packDto = new ElementConditionDto();  private JTablePanel tablePanel = new JTablePanel();  protected ListCursor<ZcEvaluation> listCursor;  protected ZcEvaluation oldZcQuestion;  private String tabStatus;  List<AbstractFieldEditor> list = new ArrayList<AbstractFieldEditor>();  List<AbstractFieldEditor> listEdit = new ArrayList<AbstractFieldEditor>();  List<AbstractFieldEditor> listEditable = new ArrayList<AbstractFieldEditor>();  private ZcEbEvaluationListPanel listPanel;  private ZcEbEvaluationEditPanel self = this;  private GkBaseDialog parent;  private JPanel jTabbedPane = null;  private JPanel jbTabbedPane;  private JPanel clientTabbedPane = new JPanel();  private JPanel buttomPanel;  private TextAreaFieldEditor jbReason;  private FuncButton saveButton = new SaveButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private Object subPackTableToolbar;  ButtonGroup group = new ButtonGroup();  JRadioButton noSatisfied, jSatisfied, satisfied, fSatisfied;  /**   * 设置全局值以便获取和设置下面workpanel中的值得处理   */  private JSaveableSplitPane splitPane;  @SuppressWarnings("unchecked")  public ZcEbEvaluationEditPanel(ZcEbEvaluationDialog parent, ListCursor listCursor, String tabStatus,  ZcEbEvaluationListPanel listPanel) {    super(ZcEvaluation.class, BillElementMeta.getBillElementMetaWithoutNd("ZC_EB_EVALUATION"));    this.listCursor = listCursor;    this.listPanel = listPanel;    this.parent = parent;    this.tabStatus = tabStatus;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "评价",    TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    listEdit.addAll(list);    refreshData();  }  /**   * 创建整个下面的工作面板   */  public JScrollPane createWoPanel() {    createButtomPanel();    JScrollPane jScrollPane = new JScrollPane(buttomPanel);    return jScrollPane;  }  /**   * 刷新字段可编辑性   */  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();  }  /**   * 项目信息栏字段   */  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    ZcEvaluation zcEvaluation = (ZcEvaluation) listCursor.getCurrentObject();    zcEvaluation.setUserName(requestMeta.getSvUserName());    TextFieldEditor projectCode = new TextFieldEditor("项目编号", "projectCode");    projectCode.setEnabled(false);    editorList.add(projectCode);    TextFieldEditor projectName = new TextFieldEditor("项目名称", "projectName");    projectName.setEnabled(false);    editorList.add(projectName);    TextFieldEditor packCode = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE), "packCode");    packCode.setEnabled(false);    editorList.add(packCode);    TextFieldEditor packName = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME), "packName");    packName.setEnabled(false);    editorList.add(packName);    TextFieldEditor orgName = new TextFieldEditor("采购单位", "userName");    orgName.setEnabled(false);    editorList.add(orgName);    //    DateFieldEditor createDate = new DateFieldEditor("评价时间", "createDate");    //    createDate.setEnabled(false);    //    editorList.add(createDate);    listEdit.addAll(editorList);    for (AbstractFieldEditor editor : editorList) {      editor.setEditObject(zcEvaluation);    }    return editorList;  }  /**   * 创建标段选择器   */  public JComponent createSubBillPanel() {    // 先给表对象放值    ZcEvaluation zcEvaluation = (ZcEvaluation) listCursor.getCurrentObject();    JTabbedPane tabPane = new JTabbedPane();    tablePanel.init();    tablePanel.getSearchBar().setVisible(false);    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_table");    tablePanel.getTable().setShowCheckedColumn(false);    tablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 100));    if (zcEvaluation == null || zcEvaluation.getProjectCode() == null) {      zcEvaluation = new ZcEvaluation();    }    ZCQuestionTableModelConverter zctm = new ZCQuestionTableModelConverter();    List list = new ArrayList<ZcEbSignupPackDetail>();    this.subPackTableToolbar = new JFuncToolBar();    JScrollPane wowPanel = createWoPanel();    tabPane.setMinimumSize(new Dimension(240, 150));    wowPanel.setMinimumSize(new Dimension(240, 300));    splitPane = new JSaveableSplitPane(JSplitPane.VERTICAL_SPLIT, tabPane, wowPanel);    splitPane.setDividerSize(10);    splitPane.setBackground(self.getBackground());    tabPane.setVisible(false);    return splitPane;  }  /**   * 初始化工具栏   */  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(saveButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    ZcEvaluation zcEvaluation = (ZcEvaluation) listCursor.getCurrentObject();    if (zcEvaluation.getUserName() != null && !zcEvaluation.getUserName().equals("")) {      saveButton.setVisible(false);    }    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });  }  private Boolean doSave() {    boolean success = true;    String errorInfo = "";    try {      ZcEvaluation zcEvaluation = this.listCursor.getCurrentObject();      int i = group.getButtonCount();      String status = "0";      if (noSatisfied.isSelected()) {        status = "1";      } else if (jSatisfied.isSelected()) {        status = "2";      } else if (satisfied.isSelected()) {        status = "3";      } else if (fSatisfied.isSelected()) {        status = "4";      }      zcEvaluation.setStatus(status);      if (jbReason.getValue() != null) {        if (jbReason.getValue().toString().length() > 1000) {          JOptionPane.showMessageDialog(this, "保存失败！\n " + "评价信息不能超过1000个文字！", "提示",          JOptionPane.ERROR_MESSAGE);        }        zcEvaluation.setEvaluationContent(jbReason.getValue().toString());      }      this.listPanel.getZcQuestionServiceDelegate().saveEvaluationList(zcEvaluation, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      saveButton.setVisible(false);      refreshData();    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }    return true;  }  private void doPrevious() {    listCursor.previous();    refreshData();  }  private void doNext() {    listCursor.next();    refreshData();  }  private void doExit() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      this.parent.dispose();    }  }  private void doHelp() {  }  private void stopEditing() {    for (int i = 0; i < listEdit.size(); i++) {      AbstractFieldEditor abstractFieldEditor = listEdit.get(i);      abstractFieldEditor.setEnabled(false);    }  }  @SuppressWarnings("unchecked")  private void refreshData() {    //    stopEditing();     ZcEvaluation zcEvaluation = (ZcEvaluation) listCursor.getCurrentObject();    if (zcEvaluation.getEvaluationContent() != null && zcEvaluation.getUserName() != null) {      jbReason.setEnabled(false);    }    listCursor.setCurrentObject(zcEvaluation);    this.setEditingObject(zcEvaluation);    jbTabbedPane.setVisible(true);    setOldObject();    updateUI();    repaint();  }  @SuppressWarnings("unused")  private void setOldObject() {    oldZcQuestion = (ZcEvaluation) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldZcQuestion).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  /**   * 创建经办栏   */  public void createJBPanel() {    ZcEvaluation zcEvaluation = (ZcEvaluation) listCursor.getCurrentObject();    jbTabbedPane = new JPanel(new BorderLayout());    jbTabbedPane.setBorder(BorderFactory.createTitledBorder("评价信息"));    JPanel holePanel = new JPanel(new BorderLayout());    JPanel reasonPanel = new JPanel(new BorderLayout());    jbReason = new TextAreaFieldEditor("评价信息", "evaluationContent");    //    jbReason.setEnabled(true);    jbReason.setValue(zcEvaluation);    reasonPanel.add(jbReason, BorderLayout.CENTER);    holePanel.add(reasonPanel, BorderLayout.CENTER);    jbTabbedPane.add(holePanel);    list.add(jbReason);    listEdit.add(jbReason);  }  /**   * 创建客户意见栏   */  public void createClientPanel() {    jTabbedPane = new JPanel(new BorderLayout());    jTabbedPane.setBorder(BorderFactory.createTitledBorder("满意度"));    JPanel holePanel = new JPanel(new BorderLayout());    JPanel reasonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 1, 0));    setJRadioButton();    reasonPanel.add(noSatisfied);    reasonPanel.add(jSatisfied);    reasonPanel.add(satisfied);    reasonPanel.add(fSatisfied);    holePanel.add(reasonPanel, BorderLayout.WEST);    clientTabbedPane.setPreferredSize(new Dimension(200, 50));    jTabbedPane.setPreferredSize(new Dimension(200, 50));    jTabbedPane.add(clientTabbedPane, BorderLayout.NORTH);    jTabbedPane.add(holePanel, BorderLayout.NORTH);    //    list.add(clientReason);    //    listEditable.add(clientReason);  }  private void setJRadioButton() {    ZcEvaluation zcEvaluation = (ZcEvaluation) this.listCursor.getCurrentObject();    noSatisfied = new JRadioButton("不满意");    jSatisfied = new JRadioButton("基本满意");    satisfied = new JRadioButton("满意");    fSatisfied = new JRadioButton("非常满意");    group.add(noSatisfied);    group.add(jSatisfied);    group.add(satisfied);    group.add(fSatisfied);    if ("1".equals(zcEvaluation.getStatus())) {      noSatisfied.setSelected(true);    } else if ("2".equals(zcEvaluation.getStatus())) {      jSatisfied.setSelected(true);    } else if ("3".equals(zcEvaluation.getStatus())) {      satisfied.setSelected(true);    } else if ("4".equals(zcEvaluation.getStatus())) {      fSatisfied.setSelected(true);    } else {      fSatisfied.setSelected(true);    }  }  protected void updateFieldEditors() {    for (AbstractFieldEditor editor : fieldEditors) {      editor.setEditObject(editingObject);    }    for (AbstractFieldEditor editor : list) {      editor.setEditObject(editingObject);    }  }  /**   * 创建下面三个意见栏目   */  public void createButtomPanel() {    buttomPanel = new JPanel(new BorderLayout());    createJBPanel();    createClientPanel();    buttomPanel.add(jTabbedPane, BorderLayout.NORTH);    buttomPanel.add(jbTabbedPane, BorderLayout.CENTER);  }  /**   * 是否改变对象检查   */  protected boolean dataChange() {    return !DigestUtil.digest(oldZcQuestion).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  private class ZcEbProjFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbProjFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbProj proj = (ZcEbProj) object;        ZcEvaluation zcQuestion = (ZcEvaluation) listCursor.getCurrentObject();        //        zcQuestion.setZcEbProj(proj);        setEditingObject(zcQuestion);        projCodeChange();      }    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjName();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE", rowData.getPurType());        data[i][col++] = rowData.getManager();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  private void projCodeChange() {  }}
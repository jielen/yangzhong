/** * ZcEbXieYiListPanelService.java * com.ufgov.gk.client.zc.zcebxy * Administrator * 2010-11-6 */package com.ufgov.zc.client.zc.zcebxy;import java.math.BigDecimal;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcPProBaoJia;import com.ufgov.zc.common.zc.model.ZcPProMake;import com.ufgov.zc.common.zc.model.ZcPProMitem;import com.ufgov.zc.common.zc.model.ZcPProMitemBaoJia;import com.ufgov.zc.common.zc.publish.IZcPProMakeServiceDelegate;/** * @author Administrator * */public class ZcEbXieYiClientService {  private static Logger log = Logger.getLogger(ZcEbXieYiClientService.class);  static {    LangTransMeta.init("ZC%");  }  protected String compoId = "ZC_EB_XIEYI";  protected ListCursor listCursor;  protected ZcPProMake oldZcPProMake;  protected RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  protected ElementConditionDto elementConditionDto = new ElementConditionDto();  //当报价时，记录填写的报价明细和原采购明细直接的关系  private HashMap<BigDecimal, ZcPProMitem> bjRelationMap = new HashMap<BigDecimal, ZcPProMitem>();  public HashMap<BigDecimal, ZcPProMitem> getBjRelationMap() {    return bjRelationMap;  }  protected IZcPProMakeServiceDelegate ZcPProMakeServiceDelegate = (IZcPProMakeServiceDelegate) ServiceFactory.create(  IZcPProMakeServiceDelegate.class, "zcPProMakeServiceDelegate");  protected IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class,  "baseDataServiceDelegate");  public ZcEbXieYiClientService() {    this.requestMeta.setCompoId(this.compoId);  }  public RequestMeta getRequestMeta() {    return requestMeta;  }  public ElementConditionDto getElementConditionDto() {    return elementConditionDto;  }  public IZcPProMakeServiceDelegate getZcPProMakeServiceDelegate() {    return ZcPProMakeServiceDelegate;  }  public IBaseDataServiceDelegate getBaseDataServiceDelegate() {    return baseDataServiceDelegate;  }  public String getCompoId() {    return compoId;  }  public void setCompoId(String compoId) {    this.compoId = compoId;  }  public void setListCursor(ListCursor listCursor) {    this.listCursor = listCursor;  }  public void setOldZcPProMake(ZcPProMake oldZcPProMake) {    this.oldZcPProMake = oldZcPProMake;  }  public void setRequestMeta(RequestMeta requestMeta) {    this.requestMeta = requestMeta;  }  public void setElementConditionDto(ElementConditionDto elementConditionDto) {    this.elementConditionDto = elementConditionDto;  }  public void setZcPProMakeServiceDelegate(IZcPProMakeServiceDelegate zcPProMakeServiceDelegate) {    ZcPProMakeServiceDelegate = zcPProMakeServiceDelegate;  }  public void setBaseDataServiceDelegate(IBaseDataServiceDelegate baseDataServiceDelegate) {    this.baseDataServiceDelegate = baseDataServiceDelegate;  }  public ListCursor getListCursor() {    return listCursor;  }  public ZcPProMake getOldZcPProMake() {    return oldZcPProMake;  }  public ZcPProMake selectXyByKey() {    ZcPProMake make = (ZcPProMake) this.listCursor.getCurrentObject();    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText0(make.getZcMakeCode());    dto.setZcText1(this.requestMeta.getSvUserID());    return this.ZcPProMakeServiceDelegate.selectXyByKeyForProvider(dto, requestMeta);  }  public void setCurrentObject(ZcPProMake zcPProMake) {    // TCJLODO Auto-generated method stub    this.listCursor.setCurrentObject(zcPProMake);  }  public ZcPProMake getCurrentObject() {    return (ZcPProMake) this.listCursor.getCurrentObject();  }  public void setOldObject() {    this.oldZcPProMake = (ZcPProMake) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());  }  public String getModuleCode() {    // TCJLODO Auto-generated method stub    return ZcSettingConstants.MODLE_CODE;  }  public WorkEnv getWorkEnv() {    return WorkEnv.getInstance();  }  /*   * 检查该协议采购是否直接订货，如果采购明细中指定了供应商，则是直接订货   */  public boolean isDingHuo() {    ZcPProMake make = this.getCurrentObject();    if (make.getBaoJiaList() == null || make.getBaoJiaList().size() == 0) {      return false;    }    for (int i = 0; i < make.getItemList().size(); i++) {      ZcPProMitem item = (ZcPProMitem) make.getItemList().get(i);      if (item.getZcSuCode() != null)        return true;    }    return false;  }  /*   * 创建一个报价model   */  public ZcPProMitemBaoJia createBaoJia() {    ZcPProMitemBaoJia bj = new ZcPProMitemBaoJia();    ZcPProMake make = this.getCurrentObject();    List baoJiaDetailList = (List) ObjectUtil.deepCopy(make.getItemList());    //edt shijia 20111020 供货商报价的时候，报价金额那一列默认为0 —— guoss    for (int i = 0; i < baoJiaDetailList.size(); i++) {      ZcPProMitem iteMitem = (ZcPProMitem) baoJiaDetailList.get(i);      iteMitem.setZcMerPrice(new BigDecimal(0));      iteMitem.setZcItemSum(new BigDecimal(0));    }    bj = new ZcPProMitemBaoJia();    setBaoJiaDetailId(baoJiaDetailList);    bj.setBaoJiaDetailList(baoJiaDetailList);    //应该为userid，否则不能查出我的报价//    bj.setSuCode(this.getRequestMeta().getEmpCode());    bj.setSuCode(this.getRequestMeta().getSvUserID());    bj.setSuName(this.getRequestMeta().getEmpName());    bj.setJinJia(true);    bj.setBaoJiaStatus(ZcPProMitemBaoJia.BAO_JIA_STATUS_DRAFT);    List baoJiaList = new ArrayList();    baoJiaList.add(bj);    make.setBaoJiaList(baoJiaList);    //记录供应商报价信息    ZcPProBaoJia baojia = new ZcPProBaoJia();    baojia.setZcMakeCode(make.getZcMakeCode());    baojia.setZcMakeName(make.getZcMakeName());    baojia.setZcSuCode(bj.getSuCode());    baojia.setZcSuName(bj.getSuName());    baojia.setZcBaoJiaDate(bj.getBaoJiaSubmitDate());    baojia.setZcBaoJiaPic(bj.getTotalPrice());    baojia.setZcBaoJiaStatus(bj.getBaoJiaStatus());    this.ZcPProMakeServiceDelegate.addBaojia(baojia, this.requestMeta);    return bj;  }  /*   * 设置新建报价明细单id号   */  void setBaoJiaDetailId(List detailList) {    if (detailList == null)      return;    for (int i = 0; i < detailList.size(); i++) {      ZcPProMitem item = (ZcPProMitem) detailList.get(i);      BigDecimal id = new BigDecimal(ZcUtil.getSequenceNextVal(ZcSettingConstants.SEQUENCE_JINGIA_BAOJIA_DETAIL));      createRelation(id, item.getZcPitemCode());      item.setZcPitemCode(id);    }  }  private void createRelation(BigDecimal baoJiaId, BigDecimal itemId) {    // TCJLODO Auto-generated method stub    ZcPProMake make = (ZcPProMake) listCursor.getCurrentObject();    List<ZcPProMitem> items = make.getItemList();    for (ZcPProMitem item : items) {      if (item.getZcPitemCode().intValue() == itemId.intValue()) {        this.bjRelationMap.put(baoJiaId, item);      }    }  }  /*   * 判断是否竞价截止时间是否到达   */  public boolean isJinJiaEndTime() {    // TCJLODO Auto-generated method stub    ZcPProMake zcPProMake = (ZcPProMake) listCursor.getCurrentObject();    if (zcPProMake.getZcXieYiEndDate() == null) {      return false;    }    if (this.requestMeta.getSysDate().after(zcPProMake.getZcXieYiEndDate())) {      return true;    }    return false;  }  public void doCancelBaoJia() {    // TCJLODO Auto-generated method stub  }  public boolean checkBeforeSave() {    // TCJLODO Auto-generated method stub    return true;  }  public boolean doSave() {    try {      ZcPProMake make = (ZcPProMake) this.listCursor.getCurrentObject();      this.ZcPProMakeServiceDelegate.updateBaoJia(make, this.requestMeta);    } catch (Exception e) {      log.error(e.getMessage(), e);      throw new BusinessException(e.getMessage(), e);    }    return true;  }  public ZcPProMitemBaoJia getBaoJia() {    ZcPProMake make = (ZcPProMake) this.listCursor.getCurrentObject();    return (ZcPProMitemBaoJia) make.getBaoJiaList().get(0);  }  public void deleteBaoJia(ZcPProMitemBaoJia bj) {    // TCJLODO Auto-generated method stub    //    this.ZcPProMakeServiceDelegate.deleteBaoJia(bj,this.requestMeta);  }}
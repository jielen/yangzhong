package com.ufgov.zc.client.zc.zcebxy;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_CO_NAME;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_EB_XY_END_DATE;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_IS_REMARK;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MAKE_CODE;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MAKE_LINKMAN;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MAKE_NAME;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MAKE_STATUS;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MAKE_TEL;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JSplitPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.Border;import javax.swing.border.TitledBorder;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.converter.zc.ZcPProMakeToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JSaveableSplitPane;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.CancelBaoJiaButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.GonghuoButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.JoinBaoJiaButton;import com.ufgov.zc.client.component.button.SubmitBaoJiaButton;import com.ufgov.zc.client.component.button.UnGonghuoButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.celleditor.DateCellEditor;import com.ufgov.zc.client.component.table.celleditor.zc.ZcBCatalogueCellEditor;import com.ufgov.zc.client.component.table.codecelleditor.FileCellEditor;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.AutoNumFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.CompanyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.zcppromake.ZcPProMakeJinJiaEditPanel;import com.ufgov.zc.common.commonbiz.model.Company;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityTreeHandler;import com.ufgov.zc.common.zc.model.ZcPProMake;import com.ufgov.zc.common.zc.model.ZcPProMitem;import com.ufgov.zc.common.zc.model.ZcPProMitemBaoJia;public class ZcEbXieYiEditPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = -5342380978139219346L;  private ZcEbXieYiClientService service;  private ZcEbXieYiEditPanel self = this;  private String tabStatus;  private ZcEbXieYiListPanel listPanel;  private GkBaseDialog parent;  MoneyFieldEditor zcMoneyBiSum;  AsValFieldEditor zcMakeSequence;  AsValFieldEditor zcPitemOpiway;  AsValFieldEditor zcPifuCgfs;  JTabbedPane itemTabPanel = null;  JTabbedPane jinJiaTabPanel = null;  private JTablePanel itemTablePanel = new JTablePanel();  JFuncToolBar bottomToolBar2 = null;  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private FuncButton joinBaoJiaButton = new JoinBaoJiaButton();  private FuncButton submitBaoJiaButton = new SubmitBaoJiaButton();  private FuncButton cancelBaoJiaButton = new CancelBaoJiaButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton gonghuoButton = new GonghuoButton();  private FuncButton ungonghuoButton = new UnGonghuoButton();  private JSaveableSplitPane splitPane;  private ZcPProMakeJinJiaEditPanel jinJiaPanel;  private static Toolkit toolkit = Toolkit.getDefaultToolkit();  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  public ZcEbXieYiEditPanel(ZcEbXieYiDialog dialog, String tabStatus, ZcEbXieYiListPanel listPanel) {    this.service = listPanel.service;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate(service.getCompoId()),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.parent = dialog;    this.colCount = 3;    init();    refreshData();  }  //根据是实际订货还是电子竞价这是编辑页面标题  private void resetTitle(Border border) {    TitledBorder b = (TitledBorder) border;    if (ZcPProMake.CAIGOU_TYPE_XIEYI.equals(getType())) {      b.setTitle(LangTransMeta.translate(ZcElementConstants.ZC_XIEYI_TITLE_FOR_SUPPLIER));    } else if (ZcPProMake.CAIGOU_TYPE_DZJJ.equals(getType())) {      b.setTitle(LangTransMeta.translate(ZcElementConstants.ZC_DIANZI_JJ_TITLE_FOR_SUPPLIER));    } else {      b.setTitle(LangTransMeta.translate(ZcElementConstants.ZC_XIEYI_DIANZI_JJ_TITLE_FOR_SUPPLIER));    }  }  private String getType() {    ZcPProMake make = (ZcPProMake) this.service.getCurrentObject();    if (make == null)      return null;    return make.getZcFukuanType();  }  private void refreshData() {    ZcPProMake make = this.service.selectXyByKey();    this.service.setCurrentObject(make);    this.setEditingObject(make);    itemTablePanel.setTableModel(ZcPProMakeToTableModelConverter.convertSubItemTableDataForJJ(make.getItemList(),    ZcPProMakeToTableModelConverter.itemXyInfoJJ));    // 翻译从表表头列    ZcUtil.translateColName(itemTablePanel.getTable(), ZcPProMakeToTableModelConverter.itemXyInfoJJ);    // 设置从表列类型    setTableItemEditor(itemTablePanel.getTable());    addTableChangeListener(itemTablePanel.getTable());    //更新报价信息 竞价提交时间    refreshBaoJia();    setOldObject();    this.fitTable();    updateFieldEditorsEditable();    itemTabPanel.repaint();    setButtonStatus();    resetTitle(this.workPanel.getBorder());    resetButton();  }  private void resetButton() {    // TCJLODO Auto-generated method stub    if (ZcPProMake.CAIGOU_TYPE_XIEYI.equals(getType())) {      this.toolBar.removeAll();    }  }  private void addTableChangeListener(final JTable table) {    final BeanTableModel model = (BeanTableModel) (table.getModel());    model.addTableModelListener(new TableModelListener() {      public void tableChanged(TableModelEvent e) {        if (e.getColumn() >= 0 && ZcElementConstants.FIELD_TRANS_ZC_MER_PRICE.equals(model.getColumnIdentifier(e.getColumn()))) {          doCalcSumPrice(model.getDataBeanList());        }      }    });  }  private void doCalcSumPrice(List<ZcPProMitem> itemList) {    BigDecimal totalPrice = new BigDecimal(0);    for (int i = 0; i < itemList.size(); i++) {      ZcPProMitem item = itemList.get(i);      BigDecimal sum = item.getZcMerPrice().multiply(item.getZcCaigNum());      item.setZcItemSum(sum);      totalPrice = totalPrice.add(sum);    }    updateBaoJia(totalPrice);  }  private void updateBaoJia(BigDecimal baojia) {    ZcPProMake make = this.service.getCurrentObject();    if (make.getBaoJiaList() == null || make.getBaoJiaList().size() == 0) {      return;    }    ZcPProMitemBaoJia bj = (ZcPProMitemBaoJia) make.getBaoJiaList().get(0);    if (bj != null) {      bj.setTotalPrice(baojia);    }    this.jinJiaPanel.getBaojia().setTotalPrice(baojia);    this.jinJiaPanel.setEditingObject(this.jinJiaPanel.getBaojia());    this.jinJiaPanel.updateUI();  }  /*   * 更新报价信息   */  private void refreshBaoJia() {    ZcPProMake make = this.service.getCurrentObject();    if (make.getBaoJiaList() == null || make.getBaoJiaList().size() == 0) {      return;    }    ZcPProMitemBaoJia bj = (ZcPProMitemBaoJia) make.getBaoJiaList().get(0);    if (bj == null) {      if (this.service.isDingHuo()) {        //直接订货，且第一次打开，直接将采购明细转换为报价明细        bj = this.service.createBaoJia();      } else {        return;      }    }    createBaoJiaPanel(bj);    this.splitPane.setBottomComponent(this.jinJiaTabPanel);    this.splitPane.setDividerLocation(0.4);  }  void createBaoJiaPanel(ZcPProMitemBaoJia bj) {    if (this.jinJiaTabPanel != null) {      this.jinJiaTabPanel.remove(this.jinJiaPanel);    } else {      this.jinJiaTabPanel = new JTabbedPane();    }    this.jinJiaPanel = new ZcPProMakeJinJiaEditPanel(bj, this.service.isDingHuo(), this.service.getCompoId());    this.jinJiaPanel.setBjRelation(this.service.getBjRelationMap());    this.jinJiaTabPanel.addTab(LangTransMeta.translate("ZC_EB_XY_MYBAOJIA"), null, this.jinJiaPanel, LangTransMeta.translate("ZC_EB_XY_MYBAOJIA"));    addTableChangeListener(jinJiaPanel.getJinjiaTablepanel().getTable());  }  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    AutoNumFieldEditor zcMakeCode = new AutoNumFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_CODE), "zcMakeCode");    editorList.add(zcMakeCode);    TextFieldEditor zcMakeName = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_NAME), "zcMakeName");    editorList.add(zcMakeName);    AsValFieldEditor zcMakeStatus = new AsValFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_STATUS), "zcMakeStatus", "ZC_VS_MAKE_STATUS");    zcMakeStatus.setEnabled(false);    editorList.add(zcMakeStatus);    IForeignEntityTreeHandler companyHandler = new IForeignEntityTreeHandler() {      @Override      public void excute(List selectedDatas) {        ZcPProMake zcPProMake = (ZcPProMake) ZcEbXieYiEditPanel.this.service.getCurrentObject();        if (selectedDatas != null && selectedDatas.size() > 0) {          Company company = (Company) selectedDatas.get(0);          zcPProMake.setOrgCode(company.getForgCode());          setEditingObject(zcPProMake);        }      }      @Override      public boolean isMultipleSelect() {        return false;      }      @Override      public boolean isSelectLeaf() {        return false;      }    };    CompanyFieldEditor zcCoCode = new CompanyFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_CO_NAME), "coCode", companyHandler);    zcCoCode.setEnabled(false);    editorList.add(zcCoCode);    zcCoCode.setEnabled(true);    TextFieldEditor zcMakeLinkman = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_LINKMAN), "zcMakeLinkman");    editorList.add(zcMakeLinkman);    TextFieldEditor zcMakeTel = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_TEL), "zcMakeTel");    editorList.add(zcMakeTel);    DateFieldEditor df = new DateFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_EB_XY_END_DATE), "zcXieYiEndDate", DateFieldEditor.TimeTypeH24);    //    df.setEnabled(false);    editorList.add(df);    /*    MoneyFieldEditor zcMoneyBiSum = new MoneyFieldEditor(          LangTransMeta.translate(FIELD_TRANS_ZC_MONEY_BI_SUM), "zcMoneyBiSum");        zcMoneyBiSum.setEnabled(false);        editorList.add(zcMoneyBiSum);*/    TextFieldEditor zcIsRemark = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_IS_REMARK), "zcIsRemark");    zcIsRemark.setEnabled(false);    editorList.add(zcIsRemark);    return editorList;  }  @Override  public JComponent createSubBillPanel() {    itemTabPanel = new JTabbedPane();    itemTablePanel.init();    itemTablePanel.getSearchBar().setVisible(false);    itemTablePanel.setTablePreferencesKey(this.getClass().getName() + "_itemTable");    itemTablePanel.getTable().setShowCheckedColumn(true);    itemTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    itemTabPanel.addTab("采购明细", itemTablePanel);    itemTabPanel.setMinimumSize(new Dimension(240, 200));    splitPane = new JSaveableSplitPane(JSplitPane.VERTICAL_SPLIT, itemTabPanel, null);    splitPane.setDividerDefaultLocation(this.getClass().getName() + "_splitPane_dividerLocation", 150);    splitPane.setContinuousLayout(true);    splitPane.setOneTouchExpandable(true);    // 只显示向下的箭头    //    splitPane.putClientProperty("toExpand", true);    splitPane.setDividerSize(10);    //    splitPane.setDividerLocation(260);    splitPane.setBackground(self.getBackground());    return this.splitPane;  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode(this.service.getModuleCode());    toolBar.setCompoId(this.service.getCompoId());    toolBar.add(joinBaoJiaButton);    toolBar.add(submitBaoJiaButton);    toolBar.add(cancelBaoJiaButton);    //    toolBar.add(deleteButton);    toolBar.add(gonghuoButton);    toolBar.add(ungonghuoButton);    toolBar.add(helpButton);    toolBar.add(exitButton);    gonghuoButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 供货        doGonghuo();      }    });    ungonghuoButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 不供货        doUnGonghuo();      }    });    joinBaoJiaButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 参与报价        doJoinBaoJia();      }    });    submitBaoJiaButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 提交报价        doSubmitBaoJia();      }    });    cancelBaoJiaButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 取消报价        doCancelBaoJia();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退出        doExit();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退出        doDelete();      }    });  }  protected void doUnGonghuo() {    // TCJLODO Auto-generated method stub  }  protected void doGonghuo() {    // TCJLODO Auto-generated method stub  }  protected void doDelete() {    if (this.service.isJinJiaEndTime()) {      JOptionPane.showMessageDialog(this, "竞价截止时间已过，不能删除报价", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int num = JOptionPane.showConfirmDialog(this, "确认删除报价吗？", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      ZcPProMake make = this.service.getCurrentObject();      ZcPProMitemBaoJia bj = (ZcPProMitemBaoJia) make.getBaoJiaList().get(0);      this.service.deleteBaoJia(bj);    }  }  protected void doCancelBaoJia() {    if (this.service.isJinJiaEndTime()) {      JOptionPane.showMessageDialog(this, "竞价截止时间已过，不能取消报价", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int num = JOptionPane.showConfirmDialog(this, "确认取消报价吗？", "取消确认", 0);    if (num == JOptionPane.YES_OPTION) {      ZcPProMake make = this.service.getCurrentObject();      ZcPProMitemBaoJia bj = (ZcPProMitemBaoJia) make.getBaoJiaList().get(0);      bj.setBaoJiaSubmitDate(null);      bj.setBaoJiaStatus(ZcPProMitemBaoJia.BAO_JIA_STATUS_DRAFT);      this.doSave();    }  }  private boolean doSave() {    if (!this.service.checkBeforeSave()) {      return false;    }    //    if (!isDataChanged()) {    //      JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    //      return true;    //    }    boolean success = true;    String errorInfo = "";    try {      this.service.doSave();    } catch (Exception e) {      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "操作成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshData();      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "操作失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }    return true;  }  protected void doSubmitBaoJia() {    if (this.service.isJinJiaEndTime()) {      JOptionPane.showMessageDialog(this, "竞价截止时间已过，不能提交报价", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int num = JOptionPane.showConfirmDialog(this, "确认提交报价吗？", "提交确认", 0);    if (num == JOptionPane.YES_OPTION) {      ZcPProMake make = this.service.getCurrentObject();      ZcPProMitemBaoJia bj = (ZcPProMitemBaoJia) make.getBaoJiaList().get(0);      bj.setBaoJiaStatus(ZcPProMitemBaoJia.BAO_JIA_STATUS_SUBMIT);      bj.setBaoJiaSubmitDate(this.service.getRequestMeta().getSysDate());      //add shijia 20111020       for (int i = 0; i < bj.getBaoJiaDetailList().size(); i++) {        ZcPProMitem item = (ZcPProMitem) bj.getBaoJiaDetailList().get(i);        StringBuffer baojiaSb = new StringBuffer();        if (!(item.getZcMerPrice().compareTo(new BigDecimal("0.00")) == 1)) {          baojiaSb.append("报价明细 第[ ").append(i).append(" ] 条记录，商品报价不可为零!\n");        }        if (baojiaSb.toString().length() > 0) {          JOptionPane.showMessageDialog(this, baojiaSb.toString(), "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }      }      this.doSave();    }  }  protected void doJoinBaoJia() {    if (this.service.isJinJiaEndTime()) {      JOptionPane.showMessageDialog(this, "竞价截止时间已过，不能参与报价", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    if (this.service.getCurrentObject().getBaoJiaList() != null && this.service.getCurrentObject().getBaoJiaList().size() > 0) {      ZcPProMitemBaoJia bj = (ZcPProMitemBaoJia) this.service.getCurrentObject().getBaoJiaList().get(0);      if (bj != null) {        toolkit.beep();        return;      }    }    this.service.createBaoJia();    refreshBaoJia();    setButtonStatus();  }  public boolean doExit() {    this.parent.dispose();    return true;  }  private void setTableItemEditor(JTable table) {    FileCellEditor fc = new FileCellEditor("zcPitemAttach", "zcPitemAttachBlobid");    fc.setUploadFileEnable(false);    fc.setDeleteFileEnable(false);    SwingUtil.setTableCellEditor(table, ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH, fc);    SwingUtil.setTableCellEditor(table, FIELD_TRANS_ZC_CATALOGUE_CODE, new ZcBCatalogueCellEditor());    SwingUtil.setTableCellEditor(table, ZcElementConstants.FIELD_TRANS_ZC_PITEM_ARR_DATE, new DateCellEditor());  }  private void setOldObject() {    this.service.setOldObject();  }  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    for (AbstractFieldEditor fd : this.fieldEditors) {      fd.setEnabled(false);    }    this.itemTablePanel.getTable().setEnabled(true);  }  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs.setButton(this.joinBaoJiaButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.submitBaoJiaButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.cancelBaoJiaButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("1");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);    }    String billStatus = "";    Long processId = new Long(-1);    ZcPProMitemBaoJia baojia = this.service.getBaoJia();    if (baojia != null && baojia.getBaoJiaStatus() != null) {      billStatus = baojia.getBaoJiaStatus();      processId = baojia.getProcessInstId();    }    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.service.getCompoId(), processId);  }}
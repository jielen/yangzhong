package com.ufgov.zc.client.zc.zcebxy;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.component.zc.dataexchange.DataExchangeListPanel;import com.ufgov.zc.client.component.zc.dataexchange.model.ABaseData;import com.ufgov.zc.client.component.zc.dataexchange.model.AttachmentFile;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.DataExchangeLog;import com.ufgov.zc.common.zc.model.ZcBMerchandise;import com.ufgov.zc.common.zc.model.ZcBXieyiGoods;import com.ufgov.zc.common.zc.publish.IZcEbXieyiServiceDelegate;/** * 协议供货数据导入导出 * @author LEO */public class ZcEbXieYiGoodsDataExchangeExecutor extends ABaseData {  private static final long serialVersionUID = 1619825736456968019L;  public transient IZcEbXieyiServiceDelegate zcEbXieyiServiceDelegate = null;  @Override  public int doExportData(ElementConditionDto dto, RequestMeta meta, String saveRootPath) {    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "正在查询需要导出的记录...");    if (this.getNeedExportDataRedoList() != null && this.getNeedExportDataRedoList().size() > 0) {      dto.setPmAdjustCodeList(this.getNeedExportDataIDList());      this.setDataList(this.getZcEbXieyiServiceDelegate().getXieyiGoodsRelationData(dto, meta));    } else {      this.setDataList(new ArrayList<ZcBXieyiGoods>());    }    DataExchangeLog log = null;    int total = this.getDataList().size();    //先处理一下没有对应数据的部分    for (int i = 0; i < this.getDataList().size(); i++) {      ZcBXieyiGoods goods = (ZcBXieyiGoods) this.getDataList().get(i);      if (goods == null) {        ZcBXieyiGoods tmp = new ZcBXieyiGoods();        String id = this.getNeedExportDataIDList().get(i);        log = new DataExchangeLog();        tmp.setZcBMerchandise(new ZcBMerchandise());        tmp.getZcBMerchandise().setZcMerCode(id);        tmp.getZcBMerchandise().setZcMerName("");        this.makeDataExchangeLog(log, meta.getSvUserID(), "导出失败", "", "未在对应的表中找相应的记录", "OUT", goods);        this.getExchangeDataLogModel().getExportDataList().add(log);        this.successRecordMap.put(id, getDataExchangeRedo(id));        total--;      }    }    doClearNullObject();    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "查询到" + total + "条有效记录...");    if (total == 0) {      this.getDataList().clear();      return 0;    }    List<DataExchangeLog> exportDataList = new ArrayList<DataExchangeLog>();    for (int i = 0; i < this.getDataList().size(); i++) {      ZcBXieyiGoods goods = (ZcBXieyiGoods) this.getDataList().get(i);      String zcMerCode = goods.getZcBMerchandise().getZcMerCode();      this.successRecordMap.put(zcMerCode, getDataExchangeRedo(zcMerCode));      log = new DataExchangeLog();      this.makeDataExchangeLog(log, meta.getSvUserID(), "导出成功", "", "", "OUT", goods);      exportDataList.add(log);    }    this.getExchangeDataLogModel().setExportDataList(exportDataList);    return this.getDataList().size();  }  @Override  public int doImportData(ElementConditionDto dto, RequestMeta meta, String readRootPath) {    String info = null;    DataExchangeLog log = null;    List<DataExchangeLog> importDataList = new ArrayList<DataExchangeLog>();    int size = this.getDataList().size();    for (int i = 0; i < size; i++) {      DataExchangeListPanel.setProgressText(this.getDataTypeName() + "正在发送数据到服务器..." + (i + 1) + "/" + size);      ZcBXieyiGoods goods = (ZcBXieyiGoods) this.getDataList().get(i);      info = this.getZcEbXieyiServiceDelegate().importGoodsData(goods, meta);      DataExchangeListPanel.setProgressText(this.getDataTypeName() + info);      log = new DataExchangeLog();      this.makeDataExchangeLog(log, meta.getSvUserID(), "导入成功", "", info, "IN", goods);      importDataList.add(log);    }    this.getExchangeDataLogModel().setImportDataList(importDataList);    return this.getDataList().size();  }  private void makeDataExchangeLog(DataExchangeLog log, String userID, String succFail, String exceptionMsg, String detail, String type,  ZcBXieyiGoods goods) {    log.setDataTypeID(this.getDataTypeID());    log.setDataTypeName(this.getDataTypeName());    log.setUserID(userID);    log.setRecStatus(succFail);    log.setDetailInfo(detail);    log.setExceptText(exceptionMsg);    log.setGentType(type);    log.setOptDateTime(new Date());    log.setRecSrcID(goods.getZcBMerchandise().getZcMerCode());    log.setRecSrcName(goods.getZcBMerchandise().getZcMerName());    log.setRecSrcTab("ZC_B_MERchandise");  }  @Override  public Map<String, Map<String, AttachmentFile>> getAttachmentDataMap() {    return new HashMap<String, Map<String, AttachmentFile>>();  }  public IZcEbXieyiServiceDelegate getZcEbXieyiServiceDelegate() {    if (zcEbXieyiServiceDelegate == null) {      zcEbXieyiServiceDelegate = (IZcEbXieyiServiceDelegate) ServiceFactory.create(IZcEbXieyiServiceDelegate.class, "zcEbXieyiServiceDelegate");    }    return zcEbXieyiServiceDelegate;  }  public void setZcPProMakeServiceDelegate(IZcEbXieyiServiceDelegate zcEbXieyiServiceDelegate) {    this.zcEbXieyiServiceDelegate = zcEbXieyiServiceDelegate;  }}
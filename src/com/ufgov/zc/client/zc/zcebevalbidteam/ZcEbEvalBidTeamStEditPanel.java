/** * 评标专家管理（省厅版） * ZcEbOpenBidTeamStEditPanel.java * com.ufgov.gk.client.zc.zcebopenbidteam * Administrator * 2010-5-26 */package com.ufgov.zc.client.zc.zcebevalbidteam;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.table.JGroupableTableHeader;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.converter.ZcEbEvalBidTeamStToTableModelConverter;import com.ufgov.zc.client.common.converter.ZcEmExpertEvaluateToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.SubaddButton;import com.ufgov.zc.client.component.button.SubdelButton;import com.ufgov.zc.client.component.button.SubinsertButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.celleditor.zc.ZcEmExpertTypeSelectionCellEditor;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldCellEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.EmExpertEvaluation;import com.ufgov.zc.common.zc.model.ZcEbEvalBidTeam;import com.ufgov.zc.common.zc.model.ZcEbEvalBidTeamMember;/** * @author Administrator * */public class ZcEbEvalBidTeamStEditPanel extends ZcEbEvalBidTeamEditPanel {  private static final Logger logger = Logger.getLogger(ZcEbEvalBidTeamStEditPanel.class);  private ZcEbEvalBidTeamStEditPanel self = this;  private ForeignEntityFieldEditor packSelectEdit;  private JButton addMemberBtn;  private JButton insertMemberBtn;  private JButton delMemberBtn;  private JTablePanel expertEvaluateTabelPanel;  public ZcEbEvalBidTeamStEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus, ZcEbEvalBidTeamListPanel listPanel) {    super(parent, listCursor, tabStatus, listPanel);  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    String pjColumNames[] = { "项目编号", "项目名称", "采购单位", "采购方式" };    String pkColumNames[] = { "项目编号", "项目名称", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE),      LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME), "年度" };    projProjSelectHandler pjHandler = new projProjSelectHandler(pjColumNames);    //项目过滤的时候添加参数    ElementConditionDto dto = new ElementConditionDto();    dto.setExecutor(requestMeta.getSvUserID());    ForeignEntityFieldEditor editor0 = new ForeignEntityFieldEditor("ZcEbEvalBidTeam.getEvalBidProjInfoByID", dto, 60, pjHandler, pjColumNames,    "项目编号", "projCode");    editorList.add(editor0);    editorList.add(projNameEditor);    packSelectHandler pkHandler = new packSelectHandler(pkColumNames);    packSelectEdit = new ForeignEntityFieldEditor("ZcEbEvalBidTeam.getEvalBidPackInfoByID", packDto, 60, pkHandler, pkColumNames,      LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE), "packName");    packSelectEdit.setEnabled(false);    editorList.add(packSelectEdit);    TextFieldEditor editor5 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME), "packDesc");    editorList.add(editor5);    return editorList;  }  @Override  public JTablePanel[] getSubTables() {    return new JTablePanel[] { memberTablePanel };  }  @Override  public JComponent createSubBillPanel() {    JPanel panel = new JPanel();    panel.setLayout(new GridLayout(2, 1));    JTabbedPane tabPane = new JTabbedPane();    tabPane = (JTabbedPane) super.createSubBillPanel();    memberTablePanel.getTable().setShowCheckedColumn(true);    this.subMemberTableToolbar = new JFuncToolBar();    addMemberBtn = new SubaddButton(false);    insertMemberBtn = new SubinsertButton(false);    delMemberBtn = new SubdelButton(false);    this.subMemberTableToolbar.add(addMemberBtn);    //    this.subMemberTableToolbar.add(insertMemberBtn);    this.subMemberTableToolbar.add(delMemberBtn);    memberTablePanel.add(this.subMemberTableToolbar, BorderLayout.SOUTH);    //专家评价页签    expertEvaluateTabelPanel = new JTablePanel("expertEvaluateTabelPanel");    expertEvaluateTabelPanel.init();    JGroupableTableHeader header = expertEvaluateTabelPanel.getTable().getTableHeader();    header.addColumnGroup("评审的公平性、公正性和准确性", new String[] { "EM_EXPERT_INDEX4", "EM_EXPERT_INDEX5", "EM_EXPERT_INDEX6", "EM_EXPERT_INDEX7" });    header.addColumnGroup("工作纪律和工作态度", new String[] { "EM_EXPERT_INDEX8", "EM_EXPERT_INDEX9", "EM_EXPERT_INDEX10", "EM_EXPERT_INDEX11",    "EM_EXPERT_INDEX12", "EM_EXPERT_INDEX13" });    expertEvaluateTabelPanel.getSearchBar().setVisible(false);    expertEvaluateTabelPanel.setTablePreferencesKey(this.getClass().getName() + "Evaluate_tabel");    expertEvaluateTabelPanel.getTable().setShowCheckedColumn(false);    expertEvaluateTabelPanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 0));    addMemberBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZcEbEvalBidTeamMember teamMember = new ZcEbEvalBidTeamMember();        EmExpertEvaluation bean = new EmExpertEvaluation();        setItemDefaultValue(teamMember);        addSub(memberTablePanel, teamMember);        setEvaluationDefaultValue(bean, teamMember);        addSub(expertEvaluateTabelPanel, bean);        expertEvaluateTabelPanel.getTable().updateUI();      }    });    delMemberBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        deleteSub(memberTablePanel);      }    });    JTabbedPane EvaluateTabelPanel = new JTabbedPane();    EvaluateTabelPanel.addTab("专家评价", expertEvaluateTabelPanel);    panel.add(tabPane);    panel.add(EvaluateTabelPanel);    return panel;  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(deleteButton);    toolBar.add(printButton);    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrint();      }    });    super.initToolBar(toolBar);  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null && (fd.getFieldName().equals("projCode"))) {          fd.setEnabled(true);        } else {          fd.setEnabled(false);        }      }      this.memberTablePanel.getTable().setEnabled(true);      this.expertEvaluateTabelPanel.getTable().setEnabled(true);    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      this.memberTablePanel.getTable().setEnabled(false);      this.expertEvaluateTabelPanel.getTable().setEnabled(false);    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      this.memberTablePanel.getTable().setEnabled(true);      this.expertEvaluateTabelPanel.getTable().setEnabled(true);    }  }  @Override  protected void setButtonStatus() {    super.setButtonStatus();    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbEvalBidTeam obj = (ZcEbEvalBidTeam) (this.listCursor.getCurrentObject());    ZcUtil.setButtonEnable(this.btnStatusList, ZcSettingConstants.BILL_STATUS_ALL, this.pageStatus, this.compoId, obj.getProcessInstId());    super.setSubTableButton();    //setPaySubButtonFlag(false);  }  @Override  protected void refreshMemberTableData(List deList) {    ZcEbEvalBidTeam team = (ZcEbEvalBidTeam) listCursor.getCurrentObject();    ZcEbEvalBidTeamStToTableModelConverter mc = new ZcEbEvalBidTeamStToTableModelConverter();    memberTablePanel.setTableModel(mc.convertMembersDataToTableModel(deList));    // 获取专家评价列表    List list = new ArrayList();    if (team != null) {      if (team.getProjCode() != null && team.getPackCode() != null) {        Map map = new HashMap();        map.put("projCode", team.getProjCode());        map.put("packCode", team.getPackCode());        list = zcEbBaseServiceDelegate.queryDataForList("EmExpertEvaluation.listByProjCode", map, requestMeta);      }    }    initExpertEvaluationList(deList, list);    team.setExpertEvaluationList(list);    expertEvaluateTabelPanel.setTableModel(ZcEmExpertEvaluateToTableModelConverter.convertEmExpertEvaluationToTableMode(team    .getExpertEvaluationList()));    setMemberTableProperty(memberTablePanel.getTable());    expertEvaluateTabelProperty(expertEvaluateTabelPanel.getTable());  }  protected void expertEvaluateTabelProperty(JTable table) {    translateSubTableColumn();    setExpertEvaluateTabelCellEditor();  }  @Override  protected void setMemberTableProperty(final JPageableFixedTable table) {    ZcUtil.translateColName(table, "ZC_EB_");    table.setDefaultEditor(String.class, new TextCellEditor());    SwingUtil.setTableCellEditor(table, "SEX", new AsValComboBoxCellEditor("VS_SEX"));    SwingUtil.setTableCellRenderer(table, "SEX", new AsValCellRenderer("VS_SEX"));    //SwingUtil.setTableCellEditor(table, "IS_LEADER", new AsValComboBoxCellEditor("ZC_VS_YN"));    //SwingUtil.setTableCellRenderer(table, "IS_LEADER", new AsValCellRenderer("ZC_VS_YN"));    SwingUtil.setTableCellEditor(table, "EXPERT_TYPE_NAME", new ZcEmExpertTypeSelectionCellEditor());    String columNames[] = { "姓名", "类别", "专家代码", "专家登陆账号", "性别", "单位", "职称" };    IForeignEntityHandler expertHandler = new ZcEbBidTeamMemberHandler(columNames) {      public void excute(List selectedDatas) {        BeanTableModel model = (BeanTableModel) table.getModel();        int k = table.getSelectedRow();        if (k < 0)          return;        int k2 = table.convertRowIndexToModel(k);        ZcEbEvalBidTeamMember member = (ZcEbEvalBidTeamMember) model.getBean(k2);        if (selectedDatas.size() > 0) {          ZcEbEvalBidTeamMember rowData = (ZcEbEvalBidTeamMember) selectedDatas.get(0);          BeanUtil.commonFieldsCopy(rowData, member);        }        model.fireTableRowsUpdated(k, k);      }    };    ElementConditionDto dto = new ElementConditionDto();    ForeignEntityFieldCellEditor expertEditor = new ForeignEntityFieldCellEditor("ZcEbEvalBidTeam.getEmExpertList", dto, 20, expertHandler,    columNames, "评审专家", "expertCode");    SwingUtil.setTableCellEditor(table, "EXPERT_CODE", expertEditor);    SwingUtil.setTableCellEditor(table, "EXPERT_EVAL_PROGRESS", new AsValComboBoxCellEditor("VS_EXPERT_EVAL_PROGRESS_STATUS"));    SwingUtil.setTableCellRenderer(table, "EXPERT_EVAL_PROGRESS", new AsValCellRenderer("VS_EXPERT_EVAL_PROGRESS_STATUS"));    addTableChangedLisenter(table);  }  private void setExpertEvaluateTabelCellEditor() {    //    SwingUtil.setTableCellRenderer(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX1,    //      new AsValCellRenderer("VS_Y/N"));    //    SwingUtil.setTableCellRenderer(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX2,    //      new AsValCellRenderer("VS_Y/N"));    //    SwingUtil.setTableCellRenderer(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX3,    //      new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX4,    new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX5,    new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX6,    new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX7,    new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX8,    new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX9,    new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX10,    new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX11,    new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX12,    new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX13,    new AsValCellRenderer("VS_Y/N"));    //    SwingUtil.setTableCellEditor(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX1,    //      new AsValComboBoxCellEditor("VS_Y/N"));    //    SwingUtil.setTableCellEditor(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX2,    //      new AsValComboBoxCellEditor("VS_Y/N"));    //    SwingUtil.setTableCellEditor(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX3,    //      new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX4,    new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX5,    new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX6,    new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX7,    new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX8,    new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX9,    new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX10,    new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX11,    new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX12,    new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX13,    new AsValComboBoxCellEditor("VS_Y/N"));  }  private void translateSubTableColumn() {    ZcUtil.translateColName(expertEvaluateTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.expertEvalColumns);  }  private void addTableChangedLisenter(final JPageableFixedTable table) {    final BeanTableModel model = (BeanTableModel) table.getModel();    model.addTableModelListener(new TableModelListener() {      public void tableChanged(TableModelEvent e) {        if (e.getType() == TableModelEvent.UPDATE) {          int row = table.getSelectedRow();          if (row < 0)            return;          int moderIndex = table.convertRowIndexToModel(row);          int evaluateModelIndex = expertEvaluateTabelPanel.getTable().convertRowIndexToModel(row);          BeanTableModel evaluateModel = (BeanTableModel) expertEvaluateTabelPanel.getTable().getModel();          ZcEbEvalBidTeamMember member = (ZcEbEvalBidTeamMember) model.getBean(moderIndex);          EmExpertEvaluation bean = (EmExpertEvaluation) evaluateModel.getBean(evaluateModelIndex);          updateExpertEvaluate(member, bean);          expertEvaluateTabelPanel.getTable().updateUI();          //          stopTableEditing(expertEvaluateTabelPanel);        }        if (e.getType() == TableModelEvent.DELETE) {          deleteExpertEvalution();        }      }    });  }  @Override  public boolean doSave() {    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    ZcEbEvalBidTeam team = (ZcEbEvalBidTeam) this.listCursor.getCurrentObject();    String checkInfo = checkDataBeforeSave();    if (checkInfo.length() > 0) {      JOptionPane.showMessageDialog(self, checkInfo, "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    String info = checkUserIdExists();    if (info.length() > 0) {      JOptionPane.showMessageDialog(self, info, "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    boolean success = true;    String errorInfo = "";    try {      team = super.getZcEbEvalBidTeamServiceDelegate().saveStFN(team, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(team);      oldEvalBidTeam = (ZcEbEvalBidTeam) ObjectUtil.deepCopy(team);      listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      super.refreshData();      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      setButtonStatus();      setOldObject();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  private void updateExpertEvaluate(ZcEbEvalBidTeamMember member, EmExpertEvaluation bean) {    ZcEbEvalBidTeam team = (ZcEbEvalBidTeam) this.listCursor.getCurrentObject();    if (team != null) {      if (team.getProjCode() != null) {        bean.setEmMakeCode(team.getProjCode());      }      if (team.getPackCode() != null) {        bean.setEmBillCode(team.getPackCode());      }    }    if (member.getExpertCode() != null) {      bean.getEmExpert().setEmExpertCode(member.getExpertCode());    }    if (member.getExpertName() != null) {      bean.getEmExpert().setEmExpertName(member.getExpertName());    }    if (member.getExpertTypeCode() != null) {      bean.getEmExpertType().setEmParentTypeCode(member.getExpertTypeCode());    }    if (member.getExpertTypeName() != null) {      bean.getEmExpertType().setEmParentTypeName(member.getExpertTypeName());    }    bean.setTeamMember(member);  }  private void deleteExpertEvalution() {    BeanTableModel beanTableModel = (BeanTableModel) expertEvaluateTabelPanel.getTable().getModel();    ZcEbEvalBidTeam team = (ZcEbEvalBidTeam) this.listCursor.getCurrentObject();    if (team.getTeamMembers().size() == 0) {      beanTableModel.getDataBeanList().clear();    } else {      for (int j = 0; j < team.getExpertEvaluationList().size(); j++) {        EmExpertEvaluation bean = (EmExpertEvaluation) team.getExpertEvaluationList().get(j);        if (team.getTeamMembers().contains(bean.getTeamMember())) {          continue;        } else {          team.getExpertEvaluationList().remove(bean);        }      }    }    expertEvaluateTabelPanel.setTableModel(ZcEmExpertEvaluateToTableModelConverter.convertEmExpertEvaluationToTableMode(team    .getExpertEvaluationList()));    expertEvaluateTabelProperty(expertEvaluateTabelPanel.getTable());  }  private void initExpertEvaluationList(List memberList, List expertEvalutionList) {    if (expertEvalutionList.size() < 1) {      if (memberList != null && memberList.size() > 0) {        for (int i = 0; i < memberList.size(); i++) {          ZcEbEvalBidTeamMember member = (ZcEbEvalBidTeamMember) memberList.get(i);          EmExpertEvaluation expertEvaluation = new EmExpertEvaluation();          updateExpertEvaluate(member, expertEvaluation);          expertEvalutionList.add(expertEvaluation);        }      }    } else {      for (int i = 0; i < memberList.size(); i++) {        ZcEbEvalBidTeamMember member = (ZcEbEvalBidTeamMember) memberList.get(i);        for (int j = 0; j < expertEvalutionList.size(); j++) {          EmExpertEvaluation bean = (EmExpertEvaluation) expertEvalutionList.get(j);          if (bean.getEmExpert().getEmExpertCode().equals(member.getExpertCode())) {            bean.setTeamMember(member);          }        }      }    }  }  @Override  protected void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    //ZcEbEvalBidTeam team = (ZcEbEvalBidTeam) listCursor.getCurrentObject();           setButtonStatus();  }  protected void doDelete() {    int num = JOptionPane.showConfirmDialog(this, "是否删除当前单据", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      ZcEbEvalBidTeam zcEbEvalBidTeam = null;      String errorInfo = "";      try {        requestMeta.setFuncId(deleteButton.getFuncId());        zcEbEvalBidTeam = (ZcEbEvalBidTeam) this.listCursor.getCurrentObject();        super.getZcEbEvalBidTeamServiceDelegate().deleteStFN(zcEbEvalBidTeam, this.requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        this.listCursor.removeCurrentObject();        JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        super.refreshData();        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  protected void setPaySubButtonFlag(boolean flag) {    addMemberBtn.setEnabled(flag);    insertMemberBtn.setEnabled(flag);    delMemberBtn.setEnabled(flag);  }  protected void setItemDefaultValue(ZcEbEvalBidTeamMember teamMember) {    //    teamMember.setSex("0");    teamMember.setIsLeader("N");  }  protected void setEvaluationDefaultValue(EmExpertEvaluation bean, ZcEbEvalBidTeamMember member) {    ZcEbEvalBidTeam team = (ZcEbEvalBidTeam) listCursor.getCurrentObject();    bean.setEmMakeCode(team.getProjCode());    bean.setEmBillCode(team.getPackCode());    bean.setTeamMember(member);    bean.setEmExpertIndex1("合格");    bean.setEmExpertIndex2("合格");    bean.setEmExpertIndex3("合格");    bean.setEmExpertIndex4("N");    bean.setEmExpertIndex5("N");    bean.setEmExpertIndex6("N");    bean.setEmExpertIndex7("N");    bean.setEmExpertIndex8("N");    bean.setEmExpertIndex9("N");    bean.setEmExpertIndex10("N");    bean.setEmExpertIndex11("N");    bean.setEmExpertIndex12("N");    bean.setEmExpertIndex13("Y");  }  public void setLeaderName(String leaderName) {    ZcEbEvalBidTeam team = (ZcEbEvalBidTeam) listCursor.getCurrentObject();    team.setEvalLeaderName(leaderName);    refreshData();  }  protected String checkDataBeforeSave() {    String info = "";    int leaderCount = 0;    //默认添加一个编码，如果没有这个编码，将不能正确获得已经存在的编码    ZcEbEvalBidTeam team = (ZcEbEvalBidTeam) listCursor.getCurrentObject();    List inData = team.getTeamMembers();    if (inData == null || inData.size() == 0) {      return "专家信息不能为空，请填写专家信息";    }    for (int i = 0; i < inData.size(); i++) {      ZcEbEvalBidTeamMember item = (ZcEbEvalBidTeamMember) inData.get(i);      if (item.getExpertIdCard() == null || item.getExpertIdCard().length() == 0) {        info = "第" + (i + 1) + "行的专家登陆账号为空，请录入正确的专家登陆账号！\n";        break;      }      if (item.getExpertName() == null || item.getExpertName().length() == 0) {        info = "第" + (i + 1) + "行的专家姓名为空，请录入专家姓名！\n";        break;      }      //判断是否选择了两个专家小组组长      //      if (item.getIsLeader() != null && item.getIsLeader().equalsIgnoreCase("Y")) {      //        leaderCount = leaderCount + 1;      //      }      //      //      if (leaderCount > 1) {      //        info = "只能选择一个专家小组组长,请修改！\n";      //        break;      //      }      String mainIdCard = item.getExpertIdCard();      for (int j = (i + 1); j < inData.size(); j++) {        ZcEbEvalBidTeamMember subItem = (ZcEbEvalBidTeamMember) inData.get(j);        String subIdCard = subItem.getExpertIdCard();        if (mainIdCard.equalsIgnoreCase(subIdCard)) {          info = "第" + (i + 1) + "行与第" + (j + 1) + "行的专家代码一致，请修改其中一位专家代码信息！\n";          break;        }      }    }    return info;  }  public String checkUserIdExists() {    ZcEbEvalBidTeam team = (ZcEbEvalBidTeam) listCursor.getCurrentObject();    List memberList = team.getTeamMembers();    StringBuffer str = new StringBuffer();    List noExistsList = new ArrayList();    for (int i = 0; i < memberList.size(); i++) {      ZcEbEvalBidTeamMember member = (ZcEbEvalBidTeamMember) memberList.get(i);      /**       * 校验录入的专家登陆账号数据库中是否已经存在，存在的话只是保存专家代码和评审分包的关联关系到ZC_EB_PACK_EXPERT表       */      if (!super.getZcEbEvalBidTeamServiceDelegate().checkExpertExists(member, requestMeta)) {        noExistsList.add(member);      }    }    for (int m = 0; m < noExistsList.size(); m++) {      ZcEbEvalBidTeamMember bean = (ZcEbEvalBidTeamMember) noExistsList.get(m);      List list = super.zcEbBaseServiceDelegate.queryDataForList("User.getAsEmpByUserId", bean.getExpertIdCard(), requestMeta);      if (list != null && list.size() > 0) {        str.append("专家编码[" + bean.getExpertName() + "]的登录代码" + "[" + bean.getExpertIdCard() + "]" + "数据库中已经存在，请重新设置登陆账号\n" + "");      }    }    return str.toString();  }  /**   * 项目部件选择处理类   * @author Administrator   *   */  private class projProjSelectHandler implements IForeignEntityHandler {    private String columNames[];    public projProjSelectHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      ZcEbEvalBidTeam team = (ZcEbEvalBidTeam) listCursor.getCurrentObject();      if (selectedDatas.size() > 0) {        ZcEbEvalBidTeam bidTeam = (ZcEbEvalBidTeam) selectedDatas.get(0);        team.setProjCode(bidTeam.getProjCode());        team.setProjName(bidTeam.getProjName());        team.setPackCode("");        team.setPackName("");        team.setNd(bidTeam.getNd());        packDto.setDattr1(bidTeam.getProjCode());        listCursor.setCurrentObject(team);        packSelectEdit.setEnabled(true);        setEditingObject(team);      }    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbEvalBidTeam rowData = (ZcEbEvalBidTeam) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = rowData.getCoName();        data[i][col++] = AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", rowData.getPurType());      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }  }  /**   * 分包选择处理类   * @author Administrator   *   */  private class packSelectHandler implements IForeignEntityHandler {    private String columNames[];    public packSelectHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      ZcEbEvalBidTeam team = (ZcEbEvalBidTeam) listCursor.getCurrentObject();      if (selectedDatas.size() > 0) {        ZcEbEvalBidTeam bidTeam = (ZcEbEvalBidTeam) selectedDatas.get(0);        team.setProjCode(bidTeam.getProjCode());        team.setProjName(bidTeam.getProjName());        team.setPackDesc(bidTeam.getPackDesc());        team.setPackCode(bidTeam.getPackCode());        team.setPackName(bidTeam.getPackName());        team.setNd(bidTeam.getNd());        listCursor.setCurrentObject(team);        setEditingObject(team);        setPaySubButtonFlag(true);      }    }    @Override    public TableModel createTableModel(List showDatas) {      ZcEbEvalBidTeam team = (ZcEbEvalBidTeam) listCursor.getCurrentObject();      if (null == team.getProjCode()) {        JOptionPane.showMessageDialog(self, "请先选择一个采购项目 ！", "提示", JOptionPane.INFORMATION_MESSAGE);        return new MyTableModel(null, columNames);      }      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbEvalBidTeam rowData = (ZcEbEvalBidTeam) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = rowData.getPackName();        data[i][col++] = rowData.getPackDesc();        data[i][col++] = rowData.getNd();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }  }  private abstract class ZcEbBidTeamMemberHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbBidTeamMemberHandler(String columNames[]) {      this.columNames = columNames;    }    public abstract void excute(List selectedDatas);    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbEvalBidTeamMember rowData = (ZcEbEvalBidTeamMember) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getExpertName();        data[i][col++] = rowData.getExpertTypeName();        data[i][col++] = rowData.getExpertCode();        data[i][col++] = rowData.getExpertIdCard();        data[i][col++] = AsValDataCache.getName("VS_SEX", rowData.getSex());        data[i][col++] = rowData.getDepartment();        data[i][col++] = rowData.getDuty();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }  }  private void doPrint() {    ZcEbEvalBidTeam team = (ZcEbEvalBidTeam) listCursor.getCurrentObject();    this.requestMeta.setFuncId(this.printButton.getFuncId());    this.requestMeta.setPageType(this.compoId + "_L");    try {      String projCode = team.getProjCode();      String packCode = team.getPackCode();      String condition = " T.PROJ_CODE='" + projCode + "'" + "AND T.PACK_CODE='" + packCode + "'";    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印预览出错！\n" + e.getMessage(), "错误", 0);    }  }}
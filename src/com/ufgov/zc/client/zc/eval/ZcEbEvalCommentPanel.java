/**   * @(#) project: GK* @(#) file: ZcEbEvalCommentPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Font;import java.awt.Window;import java.awt.Dialog.ModalityType;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.Arrays;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.SwingUtilities;import javax.swing.border.TitledBorder;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SubaddButton;import com.ufgov.zc.client.component.button.SubdelButton;import com.ufgov.zc.client.component.button.SubinsertButton;import com.ufgov.zc.client.component.button.zc.CommonButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.client.zc.formula.ParamPanel;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BaseException;import com.ufgov.zc.common.system.exception.OtherException;import com.ufgov.zc.common.zc.model.EvalExpert;import com.ufgov.zc.common.zc.model.ZcEbEvalExpertComment;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.publish.IZcEbEvalExpertCommentServiceDelegate;/*** @ClassName: ZcEbEvalCommentPanel* @Description: 评标模块专家填写质疑面板* @date: 2010-7-15 下午01:37:52* @version: V1.0 * @since: 1.0* @author: Administrator* @modify: */public class ZcEbEvalCommentPanel extends JPanel implements ParentWindowAware {  private Window parentWindow;  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  private static final Logger logger = Logger.getLogger(ParamPanel.class);  protected JFuncToolBar topToolBar = new JFuncToolBar();  protected JFuncToolBar bottomToolBar = new JFuncToolBar();  private JTablePanel tablePanel = new JTablePanel();  private JTabbedPane tabbedPane = new JTabbedPane();  private String compoId = "ZC_EB_EVAL_EXPERT_COMMENT";  private FuncButton saveButton = new SaveButton();  private FuncButton addBtn = new SubaddButton(false);  private JButton insertBtn = new SubinsertButton(false);  private JButton delBtn = new SubdelButton(false);  private FuncButton editCommentButton;  private FuncButton exitButton = new ExitButton();  private ZcEbEvalCommentPanel self = this;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private BeanTableModel<ZcEbEvalExpertComment> model;  List<ZcEbEvalExpertComment> mydataList;  List<ColumnBeanPropertyPair> columnList;  private ZcEbEvalPack evalPack;  private EvalExpert evalExpert;  private ElementConditionDto elementConditionDto = new ElementConditionDto();  private IZcEbEvalExpertCommentServiceDelegate zcEbEvalExpertCommentServiceDelegate = (IZcEbEvalExpertCommentServiceDelegate) ServiceFactory  .create(IZcEbEvalExpertCommentServiceDelegate.class, "zcEbEvalExpertCommentServiceDelegate");  static {    LangTransMeta.init("ZC%");  }  public ZcEbEvalCommentPanel(EvalExpert evalExpert, ZcEbEvalPack evalPack) {    this.evalExpert = evalExpert;    this.evalPack = evalPack;    init();  }  public void init() {    this.setLayout(new BorderLayout());    tablePanel.init();    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_table");    tablePanel.getTable().setShowCheckedColumn(false);    columnList = getPair();    model = new BeanTableModel<ZcEbEvalExpertComment>();    model.setEditable(false);    model.setOidFieldName("commentCode");    refreshData();    tablePanel.setTableModel(model);    tabbedPane.add("专家质疑", tablePanel);    JPanel workPanel = new JPanel();    workPanel.setLayout(new BorderLayout());    workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "添加专家质疑",    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    addToolBarComponent(bottomToolBar, topToolBar);    workPanel.add(bottomToolBar, BorderLayout.SOUTH);    workPanel.add(tabbedPane, BorderLayout.CENTER);    this.add(topToolBar, BorderLayout.NORTH);    this.add(workPanel, BorderLayout.CENTER);    addMouseListener();  }  public void refreshData() {    Map map = new HashMap();    map.put("projCode", evalPack.getProjCode());    map.put("packCode", evalPack.getPackCode());    map.put("expertCode", evalExpert.getExpertCode());    List list = zcEbEvalExpertCommentServiceDelegate.getExpertCommentList(map, requestMeta);    mydataList = new ArrayList<ZcEbEvalExpertComment>();    mydataList.addAll(list);    model.setDataBean(mydataList, columnList);    stopEdit();  }  private void addMouseListener() {    final JPageableFixedTable table = tablePanel.getTable();    table.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {          int row = table.getSelectedRow();          int index = table.convertRowIndexToModel(row);          List dataList = ((BeanTableModel<ZcEbEvalExpertComment>) table.getModel()).getDataBeanList();          ZcEbEvalExpertComment bean = ((ZcEbEvalExpertComment) dataList.get(index));          GkCommentDialog commentDialog = new GkCommentDialog(parentWindow, ModalityType.APPLICATION_MODAL,          bean.getCommentDesc(), "填写质疑");          commentDialog.moveToScreenCenter();          if (commentDialog.cancel) {            return;          }          ((ZcEbEvalExpertComment) dataList.get(index)).setCommentDesc(commentDialog.getComment());          model.setDataBean(mydataList, columnList);        }      }    });  }  public static List<ColumnBeanPropertyPair> getPair() {    List<ColumnBeanPropertyPair> pairList = new ArrayList<ColumnBeanPropertyPair>();    //    ColumnBeanPropertyPair parir0 = new ColumnBeanPropertyPair();    //    parir0.setBeanPropertyName("projName");    //    parir0.setColumnIdentifier("项目名称");    //    pairList.add(parir0);    //    //    ColumnBeanPropertyPair parir1 = new ColumnBeanPropertyPair();    //    parir1.setBeanPropertyName("packName");    //    parir1.setColumnIdentifier(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME));    //    pairList.add(parir1);    ColumnBeanPropertyPair parir2 = new ColumnBeanPropertyPair();    parir2.setBeanPropertyName("commentDesc");    parir2.setColumnIdentifier("质疑描述");    pairList.add(parir2);    return pairList;  }  protected void addToolBarComponent(JFuncToolBar bottomToolBar, JFuncToolBar topToolBar) {    topToolBar.setModuleCode("ZC");    topToolBar.setCompoId(compoId);    bottomToolBar.add(addBtn);    //    bottomToolBar.add(insertBtn);    bottomToolBar.add(delBtn);    topToolBar.add(saveButton);    topToolBar.add(exitButton);    editCommentButton = new CommonButton("zc_eval_feditComment", "编辑质疑", "edit.jpg");    topToolBar.add(editCommentButton);    addBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        add();      }    });    delBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        delete();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        save();      }    });    editCommentButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        editComment();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        //        doExit();      }    });  }  private void add() {    tablePanel.getTable().clearSelection();    if (tablePanel.getTable().isEditing()) {      tablePanel.getTable().getCellEditor().stopCellEditing();    }    ZcEbEvalExpertComment bean = new ZcEbEvalExpertComment();    bean.setProjCode(evalPack.getProjCode());    bean.setProjName(evalPack.getProjName());    bean.setPackCode(evalPack.getPackCode());    bean.setPackName(evalPack.getPackName());    bean.setExpertCode(evalExpert.getExpertCode());    bean.setExpertName(evalExpert.getExpertName());    model.insertRow(model.getRowCount(), bean);  }  private void delete() {    JPageableFixedTable table = tablePanel.getTable();    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }    int[] selectedRows = table.getSelectedRows();    if (selectedRows.length == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int[] selRows = new int[selectedRows.length];    for (int i = 0; i < selRows.length; i++) {      selRows[i] = table.convertRowIndexToModel(selectedRows[i]);    }    Arrays.sort(selRows);    for (int i = selRows.length - 1; i >= 0; i--) {      //      ZcEbEvalExpertComment zcEbEvalExpertComment = ((BeanTableModel<ZcEbEvalExpertComment>) table.getModel())      //        .getDataBeanList().get(selRows[i]);      //      zcEbEvalExpertCommentServiceDelegate.deleteExpertComment(zcEbEvalExpertComment, requestMeta);      model.deleteRow(selRows[i]);    }  }  //  private void doExit() {  //    if (isDataChanged()) {  //      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);  //      if (num == JOptionPane.YES_OPTION) {  //        if (!doSave()) {  //          return;  //        }  //      }  //    }  //    this.parent.dispose();  //  }  private void save() {    if (!beforeSave()) {      return;    }    JPageableFixedTable table = tablePanel.getTable();    List dataList = ((BeanTableModel<ZcEbEvalExpertComment>) table.getModel()).getDataBeanList();    List<ZcEbEvalExpertComment> ZcEbEvalExpertCommentList = new ArrayList<ZcEbEvalExpertComment>();    for (int i = 0; i < dataList.size(); i++) {      ZcEbEvalExpertCommentList.add((ZcEbEvalExpertComment) dataList.get(i));    }    boolean success = true;    try {      //这里做的保存，要先把对应该项目、标段、专家的质疑先删除再保存。      Map map = new HashMap();      map.put("projCode", evalPack.getProjCode());      map.put("packCode", evalPack.getPackCode());      map.put("expertCode", evalExpert.getExpertCode());      if (map.size() != 3) {        return;      }      for (int i = 0; i < ZcEbEvalExpertCommentList.size(); i++) {        ZcEbEvalExpertComment zcEbEvalExpertComment = (ZcEbEvalExpertComment) dataList.get(i);        if (zcEbEvalExpertComment.getCommentCode() == null) {          zcEbEvalExpertComment.setIsSummary("N");          zcEbEvalExpertCommentServiceDelegate.saveExpertComment(zcEbEvalExpertComment, requestMeta);        } else {          zcEbEvalExpertCommentServiceDelegate.updateExpertComment(zcEbEvalExpertComment, requestMeta);        }      }    } catch (BaseException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (OtherException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (Exception ex) {      success = false;      logger.error(ex.getMessage(), ex);      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "处理成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    }  }  private void editComment() {    JPageableFixedTable table = tablePanel.getTable();    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }    int[] selectedRows = table.getSelectedRows();    if (selectedRows.length == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int[] selRows = new int[selectedRows.length];    for (int i = 0; i < selRows.length; i++) {      selRows[i] = table.convertRowIndexToModel(selectedRows[i]);    }    List dataList = ((BeanTableModel<ZcEbEvalExpertComment>) table.getModel()).getDataBeanList();    ZcEbEvalExpertComment bean = ((ZcEbEvalExpertComment) dataList.get(selRows[0]));    GkCommentDialog commentDialog = new GkCommentDialog(this.getParentWindow(),    ModalityType.APPLICATION_MODAL, bean.getCommentDesc(), "填写质疑");    commentDialog.moveToScreenCenter();    if (commentDialog.cancel) {      return;    }    bean.setCommentDesc(commentDialog.getComment());    ((ZcEbEvalExpertComment) dataList.get(selRows[0])).setCommentDesc(commentDialog.getComment());    model.setDataBean(mydataList, columnList);  }  protected boolean beforeSave() {    if (null == model.getDataBeanList() || model.getDataBeanList().isEmpty()) {      return false;    }    stopEdit();    return true;  }  public void stopEdit() {    if (null != tablePanel.getTable().getCellEditor()) {      tablePanel.getTable().getCellEditor().stopCellEditing();    }  }}
/**   * @(#) project: GK* @(#) file: BaseZcEbEvalPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JSplitPane;import javax.swing.tree.TreePath;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JSaveableSplitPane;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.CalcButton;import com.ufgov.zc.client.component.button.ClearAddScoreButton;import com.ufgov.zc.client.component.button.PassButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.zc.tree.TreeNodeSelectionListener;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ComlianceItemValue;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.FormulaRootCode;import com.ufgov.zc.common.zc.model.ZcEbEvalItemResult;import com.ufgov.zc.common.zc.model.ZcEbEvalParam;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;/** * * @ClassName: ZcEbEvalBasePanel* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2010-11-30 下午02:09:29* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbEvalBasePanel extends JPanel {  private static final long serialVersionUID = -3651178025559016653L;  protected RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private static final String compoId = "ZC_EB_EVAL_PACK";  protected EvalFormulaTreePanel treePanel;  private ZcEbEvalBaseEditPanel listPanel;  private ZcEbEvalItemEditPanel editPanel;  private TreeNodeSelectionListener treeListener;  private JSaveableSplitPane evalSplitPanel;  private JSplitPane LeftSplitPanel;  private JLabel lable = new JLabel();  private SaveButton saveButton = new SaveButton();  private CalcButton calcButton = new CalcButton();  private PassButton passButton = new PassButton();  private ClearAddScoreButton clearAddScoreButton = new ClearAddScoreButton();  protected JFuncToolBar toPanel = new JFuncToolBar();  private List<ZcEbEvalItemResult> zcEbEvalItemResultList;  private EvalParamBean evalParamBean = new EvalParamBean();  private Map<String, String> evalParamSelectMap = new HashMap<String, String>();  private Map<String, String> expertEvalItemMap = new HashMap<String, String>();  private String formulaType;  private String formulaCode;  public ZcEbEvalPortalPanel portalPanel;  private EvalFormulaTreeNode lastSelectedNode;  public boolean canEdit;  //当前评标供应商的评标结果。  private List oldZcEbEvalItemResultList = new ArrayList();  public IZcEbEvalServiceDelegate zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory.create(IZcEbEvalServiceDelegate.class,  "zcEbEvalServiceDelegate");  public ZcEbEvalBasePanel(String formulaType) {    this.formulaType = formulaType;    LangTransMeta.init("ZC%");    init();  }  public ZcEbEvalBasePanel(String formulaType, EvalParamBean evalParamBean, boolean canEdit, ZcEbEvalPortalPanel portalPanel) {    this.formulaType = formulaType;    this.portalPanel = portalPanel;    this.canEdit = canEdit;    BeanUtil.commonFieldsCopy(evalParamBean, this.evalParamBean);    this.formulaCode = evalParamBean.getEvalPack().getFormulaCode();    init();  }  private void init() {    initParam();    loadFormulaTreeData();    initComponents();  }  private void initParam() {    evalParamSelectMap.put("packCode", evalParamBean.getEvalPack().getPackCode());    evalParamSelectMap.put("projCode", evalParamBean.getEvalPack().getProjCode());    evalParamSelectMap.put("formulaCode", evalParamBean.getEvalPack().getFormulaCode());  }  /**  * @Description: 评审指标项树节点鼠标点击事件处理。  * @return void 返回类型  * @since 1.0   */  private void addListener() {    treeListener = new TreeNodeSelectionListener(treePanel.getTree()) {      @Override      protected void doLeftMouseClick(TreePath path) {        if (path != null) {          EvalFormulaTreeNode node = (EvalFormulaTreeNode) path.getLastPathComponent();          doNodeSelected(node);        }      }    };    //        keyListener = new KeyAdapter() {    //          public void keyReleased(KeyEvent e) {    //            if (e.getKeyCode() == KeyEvent.VK_UP || e.getKeyCode() == KeyEvent.VK_DOWN) {    //              TreePath path = treePanel.getTree().getSelectionPath();    //              EvalFormulaTreeNode node = (EvalFormulaTreeNode) path.getLastPathComponent();    //              doNodeSelected(node);    //            }    //          }    //        };    treePanel.getTree().addMouseListener(treeListener);    //    treePanel.getTree().addKeyListener(keyListener);  }  /**   *   * @Description: 点击树选中节点时，1，如果是初始化点击树节点则把本次选中节点对象赋值给 lastSelectedNode对象；  * 2，否则，如果本次选中节点和上次选中节点一致则不做任何处理；  * 3，如果本次选中节点和上次选中节点不一致则先判断当前编辑表格数据是否发生变化，如果有变化则提示专家是否保存，选择是则保存，否则不保存。  * 4，重新加载当前选中节点指标项对应的指标项明细数据。  * @return void 返回类型  * @since 1.0   */  private void doNodeSelected(EvalFormulaTreeNode node) {    //先保存上一个指标节点的评审分值    if (listPanel != null) {      listPanel.stopTableEditing();    }    if (null != lastSelectedNode) {      //前后点击节点一致不再从后台加载数据。      if (lastSelectedNode.equals(node)) {        return;      }    }    reloadRightPanelEditData(node);    lastSelectedNode = node;  }  private void reloadRightPanelEditData(EvalFormulaTreeNode node) {    listPanel.refreshData(node);    evalSplitPanel.setRightComponent(listPanel);    //    if (node.getUserObject().getChildItemList().size() > 1) {    //      listPanel.refreshData(node);    //      evalSplitPanel.setRightComponent(listPanel);    //    } else {    //      editPanel.refreshData(node);    //      evalSplitPanel.setRightComponent(editPanel);    //    }    evalSplitPanel.setDividerLocation(evalSplitPanel.getDividerLocation());    evalSplitPanel.setOneTouchExpandable(true);    setLayout(new BorderLayout());    add(toPanel, BorderLayout.NORTH);    add(evalSplitPanel, BorderLayout.CENTER);  }  /**   *   * @Description:该方法负责加载指标树等资源。  * @return void 返回类型  * @since 1.0   */  @SuppressWarnings("unchecked")  private void loadFormulaTreeData() {    zcEbEvalItemResultList = new ArrayList<ZcEbEvalItemResult>();    List list;    if (portalPanel.selectedProvider != null) {      if (formulaType.equals(EvalItemType.COMPLIANICE)) {        list = portalPanel.selectedProvider.getComplEvalList();      } else {        list = portalPanel.selectedProvider.getScoreEvalList();      }    } else {      Map map = new HashMap();      map.put("ITEM_TYPE", formulaType);      map.put("FORMULA_CODE", formulaCode);      list = zcEbEvalServiceDelegate.getZcEbEvalFormulaItemList(map, requestMeta);    }    //    List list = zcEbEvalServiceDelegate.getZcEbEvalItemResultList(initEvalItemResultParamMap, requestMeta);    if (zcEbEvalItemResultList.size() > 0) {      zcEbEvalItemResultList.clear();    }    zcEbEvalItemResultList.addAll(list);    for (int i = 0; i < zcEbEvalItemResultList.size(); i++) {      ZcEbEvalItemResult item = zcEbEvalItemResultList.get(i);      List childItemList = new ArrayList();      for (int j = 0; j < zcEbEvalItemResultList.size(); j++) {        ZcEbEvalItemResult childItem = zcEbEvalItemResultList.get(j);        if (childItem.getParentItemCode() != null && childItem.getParentItemCode().equals(item.getItemCode())) {//update by wangwei;如果当前节点没有子节点，就会检查至最后一个元素，最后一个元素恰好没有parentCode，导致空指针          childItem.setParentEvalItemResult(item);          childItemList.add(childItem);        }      }      if (childItemList.size() > 0) {        //是否汇总结果        item.setIsCompositeResult("Y");      } else {        item.setIsCompositeResult("N");      }      item.setChildItemList(childItemList);      if (null != portalPanel.getSelectedProvider()) {        item.setProviderCode(portalPanel.getSelectedProvider().getProviderCode());        item.setProviderName(portalPanel.getSelectedProvider().getProviderName());      }      if (item.getEvalDate() == null) {        item.setPackCode(evalParamBean.getEvalPack().getPackCode());        item.setProjCode(evalParamBean.getEvalPack().getProjCode());        item.setEvalExpertCode(evalParamBean.getEvalExpert().getExpertCode());        item.setEvalExpert(evalParamBean.getEvalExpert().getExpertName());      }    }  }  protected void fillToPanel() {    lable.setText(LangTransMeta.translate("ZC_TITLE_PROVIDER") + " ");    toPanel.setModuleCode("ZC");    toPanel.setCompoId(compoId);    toPanel.add(saveButton);    if (canEdit) {      saveButton.setEnabled(true);      calcButton.setEnabled(true);      clearAddScoreButton.setEnabled(true);      passButton.setEnabled(true);    } else {      saveButton.setEnabled(false);      calcButton.setEnabled(false);      clearAddScoreButton.setEnabled(false);      passButton.setEnabled(false);    }    if (formulaType.equals(EvalItemType.SCORE)) {      toPanel.add(calcButton);      toPanel.add(clearAddScoreButton);    } else if (formulaType.equals(EvalItemType.COMPLIANICE)) {      toPanel.add(passButton);    }    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 保存        doSave();      }    });    calcButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        //计算        doCalItemRes();      }    });    clearAddScoreButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        //计算        doCleraAddScore();      }    });    passButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        //全部通过按钮        doSetPass();      }    });  }  private boolean beforeSave() {    for (int i = 0; i < zcEbEvalItemResultList.size(); i++) {      ZcEbEvalItemResult resulstItem = zcEbEvalItemResultList.get(i);      if (resulstItem.getChildItemList() != null && resulstItem.getChildItemList().size() > 0) {        continue;      }      if (formulaType.equals(EvalItemType.COMPLIANICE)) {        if (resulstItem.isEval()) {          if ((null == resulstItem.getComplianceUnpassReason() || "".equals(resulstItem.getComplianceUnpassReason()))          && resulstItem.getComplianceEvalValue().equals(ComlianceItemValue.UN_PASS)) {            JOptionPane.showMessageDialog(this, "评审不通过的指标项必须设置不通过原因!", "提示", JOptionPane.OK_OPTION);            return false;          }        }      }    }    return true;  }  private boolean providerIsEval() {    for (int i = 0; i < zcEbEvalItemResultList.size(); i++) {      ZcEbEvalItemResult resulstItem = zcEbEvalItemResultList.get(i);      if (formulaType.equals(EvalItemType.COMPLIANICE)) {        if (resulstItem.getComplianceEvalValue() == null) {          return false;        }      } else {        if (!"1".equals(resulstItem.getIsAddScore()) && resulstItem.getExpertEvalScore() == null) {          return false;        }      }    }    return true;  }  public void doSave() {    if (portalPanel.getSelectedProvider() == null) {      return;    }    //判断是否可编辑    if (!canEdit) {      return;    }    //判断评审数据是否发生变化，发生变化时要进行保存。    if (!isDataChanged()) {      return;    }    if (!beforeSave()) {      return;    }    try {      //保存之前要删除原理的数据：      zcEbEvalServiceDelegate.insertEvalItemResultList(zcEbEvalItemResultList, requestMeta);      portalPanel.getSelectedProvider().setEval(providerIsEval());      setOldObject();      portalPanel.providerCombBox.updateUI();      JOptionPane.showMessageDialog(this, "保存成功!", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      UIUtilities.showStaickTraceDialog(e, this, "保存时发生错误", e.getMessage());    }  }  public boolean isDataChanged() {    //同步评审表格中的数据。    if (listPanel != null) {      listPanel.stopTableEditing();    }    return !DigestUtil.digest(oldZcEbEvalItemResultList).equals(DigestUtil.digest(zcEbEvalItemResultList));  }  protected void afterProviderChange() {    loadFormulaTreeData();    initLeftSplitPanel();    initRightEvalEditPanel();    evalSplitPanel.setLeftComponent(LeftSplitPanel);    evalSplitPanel.setRightComponent(listPanel);    evalSplitPanel.setOneTouchExpandable(true);    evalSplitPanel.setDividerLocation(evalSplitPanel.getDividerLocation());    addListener();    setOldObject();  }  private void initComponents() {    fillToPanel();    initEvalSplitPanel();    setLayout(new BorderLayout());    add(toPanel, BorderLayout.NORTH);    add(evalSplitPanel, BorderLayout.CENTER);    addListener();    setOldObject();  }  private void initEvalSplitPanel() {    evalSplitPanel = new JSaveableSplitPane(JSaveableSplitPane.HORIZONTAL_SPLIT);    evalSplitPanel.setPreferKey(evalParamBean.getEvalPack().getFormulaCode());    initLeftSplitPanel();    initRightEvalEditPanel();    evalSplitPanel.setLeftComponent(LeftSplitPanel);    evalSplitPanel.setRightComponent(listPanel);    evalSplitPanel.setOneTouchExpandable(true);    evalSplitPanel.setDividerLocation(300);  }  private void initRightEvalEditPanel() {    listPanel = new ZcEbEvalBaseEditPanel(treePanel.getRootNode(), this);    listPanel.setTreePanel(treePanel);    listPanel.setMinimumSize(new Dimension(0, 0));    if (formulaType.equals(EvalItemType.COMPLIANICE)) {      editPanel = new ZcEbEvalComplItemEditPanel();    } else {      editPanel = new ZcEbEvalScoreItemEditPanel();    }    editPanel.setMinimumSize(new Dimension(0, 0));    editPanel.setTreePanel(treePanel);  }  private void initLeftSplitPanel() {    LeftSplitPanel = new JSplitPane(JSplitPane.VERTICAL_SPLIT);    LeftSplitPanel.setDividerLocation(500);    initTreePanel();    LeftSplitPanel.setTopComponent(treePanel);  }  private void initTreePanel() {    treePanel = new EvalFormulaTreePanel(formulaType, zcEbEvalItemResultList);    setRootItemChildList();    treePanel.setMinimumSize(new Dimension(0, 0));  }  public void setOldObject() {    oldZcEbEvalItemResultList = (List) ObjectUtil.deepCopy(zcEbEvalItemResultList);  }  private void setRootItemChildList() {    ZcEbEvalItemResult rootItem = treePanel.getRootNode().getUserObject();    List rootChildItemList = new ArrayList();    for (int i = 0; i < zcEbEvalItemResultList.size(); i++) {      ZcEbEvalItemResult item = zcEbEvalItemResultList.get(i);      if (FormulaRootCode.COMPLIANCE.equals(item.getParentItemCode()) || FormulaRootCode.SCORE.equals(item.getParentItemCode())) {        item.setParentEvalItemResult(rootItem);        rootChildItemList.add(item);      }    }    rootItem.setChildItemList(rootChildItemList);    rootItem.setPackCode(evalParamBean.getEvalPack().getPackCode());    rootItem.setProjCode(evalParamBean.getEvalPack().getProjCode());    if (null != portalPanel.getSelectedProvider()) {      rootItem.setProviderCode(portalPanel.getSelectedProvider().getProviderCode());      rootItem.setProviderName(portalPanel.getSelectedProvider().getProviderName());    }    rootItem.setEvalExpertCode(evalParamBean.getEvalExpert().getExpertCode());    rootItem.setEvalExpert(evalParamBean.getEvalExpert().getExpertName());    //树的根节点是通过汇总而得的，专家不需要评审，保存时将根节点保存为汇总结果    rootItem.setIsCompositeResult("Y");    rootItem.setFormulaCode(formulaCode);    zcEbEvalItemResultList.add(rootItem);  }  private void doCalItemRes() {    List<ZcEbEvalItemResult> beanList = new ArrayList<ZcEbEvalItemResult>();    if (evalSplitPanel.getRightComponent() instanceof ZcEbEvalBaseEditPanel) {      JTablePanel tablePanel = ((ZcEbEvalBaseEditPanel) evalSplitPanel.getRightComponent()).getTablePanel();      Integer[] rows = tablePanel.getTable().getCheckedRows();      if (rows.length == 0) {        JOptionPane.showMessageDialog(this, "选择需要计算的指标项后点击该按钮进行操作!", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      BeanTableModel model = (BeanTableModel) tablePanel.getTable().getModel();      List list = model.getDataBeanList();      for (Integer checkedRow : rows) {        int accordDataRow = tablePanel.getTable().convertRowIndexToModel(checkedRow);        ZcEbEvalItemResult bean = (ZcEbEvalItemResult) list.get(accordDataRow);        if (bean.getChildItemList().size() == 0 && bean.getFormula() != null && !"".equals(bean.getFormula().trim())) {          beanList.add(bean);        } else {          JOptionPane.showMessageDialog(this, "该指标没有计算公式!", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }      }    } else {      ZcEbEvalItemResult bean = (ZcEbEvalItemResult) ((ZcEbEvalItemEditPanel) evalSplitPanel.getRightComponent()).getEditingObject();      if (bean.getChildItemList().size() == 0 && bean.getFormula() != null && !"".equals(bean.getFormula().trim())) {        beanList.add(bean);      } else {        JOptionPane.showMessageDialog(this, "该指标没有计算公式!", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }    }    try {      //获得通用参数      List<ZcEbEvalParam> evalParamList = zcEbEvalServiceDelegate.getEvalParamResultList(evalParamSelectMap, requestMeta);      //calItemRes 计算分值的处理类。      ZcEbEvalCalItemRes calItemRes = new ZcEbEvalCalItemRes(zcEbEvalItemResultList, evalParamList, portalPanel.getSelectedProvider());      StringBuffer resultStr = new StringBuffer();      for (int i = 0; i < beanList.size(); i++) {        resultStr.append(calItemRes.calItemScore(beanList.get(i)));      }      String calRes = resultStr.toString();      if (null != resultStr && !"".equals(calRes)) {        JOptionPane.showMessageDialog(this, calRes, "提示", JOptionPane.WARNING_MESSAGE);        return;      } else {        JOptionPane.showMessageDialog(this, "计算成功!", "提示", JOptionPane.INFORMATION_MESSAGE);      }    } catch (Exception e) {      System.out.println(e.getMessage());    }  }  private void doCleraAddScore() {    if (evalSplitPanel.getRightComponent() instanceof ZcEbEvalBaseEditPanel) {      JTablePanel tablePanel = ((ZcEbEvalBaseEditPanel) evalSplitPanel.getRightComponent()).getTablePanel();      Integer[] rows = tablePanel.getTable().getCheckedRows();      if (rows.length == 0) {        JOptionPane.showMessageDialog(this, "选择需要清除分值的指标项后点击该按钮进行操作!", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      BeanTableModel model = (BeanTableModel) tablePanel.getTable().getModel();      List list = model.getDataBeanList();      for (Integer checkedRow : rows) {        int accordDataRow = tablePanel.getTable().convertRowIndexToModel(checkedRow);        ZcEbEvalItemResult bean = (ZcEbEvalItemResult) list.get(accordDataRow);        if (bean.getChildItemList().size() == 0 && ("1".equals(bean.getIsAddScore()) || "2".equals(bean.getIsAddScore()))) {          bean.setExpertEvalScore(null);        } else {          JOptionPane.showMessageDialog(this, "该指标不是加减分值评分项!", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }      }    } else {      ZcEbEvalItemResult bean = (ZcEbEvalItemResult) ((ZcEbEvalItemEditPanel) evalSplitPanel.getRightComponent()).getEditingObject();      if (bean.getChildItemList().size() == 0 && ("1".equals(bean.getIsAddScore()) || "2".equals(bean.getIsAddScore()))) {        bean.setExpertEvalScore(null);      } else {        JOptionPane.showMessageDialog(this, "该指标不是加减分值评分项!", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }    }  }  private void doSetPass() {    for (ZcEbEvalItemResult item : zcEbEvalItemResultList) {      item.setComplianceEvalValue("1");      item.setEvalDate(new Date());    }    treePanel.repaint();    doNodeSelected(treePanel.getRootNode());  }  public ZcEbEvalBaseEditPanel getRightPanel() {    return listPanel;  }  public void setRightPanel(ZcEbEvalBaseEditPanel rightPanel) {    this.listPanel = rightPanel;  }  public JSaveableSplitPane getSplitPanel() {    return evalSplitPanel;  }  public void setSplitPanel(JSaveableSplitPane splitPanel) {    this.evalSplitPanel = splitPanel;  }  public EvalParamBean getEvalParamBean() {    return evalParamBean;  }  public void setEvalParamBean(EvalParamBean evalParamBean) {    this.evalParamBean = evalParamBean;  }  public String getFormulaCode() {    return formulaCode;  }  public void setFormulaCode(String formulaCode) {    this.formulaCode = formulaCode;  }}
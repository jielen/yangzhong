/**   * @(#) project: zcxa* @(#) file: ZcEbEvalCommentEditPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.border.TitledBorder;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextAreaFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.zc.zcebplan.ZcEbPlanEditPanel;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.zc.model.ZcEbEvalExpertComment;import com.ufgov.zc.common.zc.publish.IZcEbEvalExpertCommentServiceDelegate;/*** @ClassName: ZcEbEvalCommentEditPanel* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2010-7-16 下午04:44:02* @version: V1.0 * @since: 1.0* @author: Administrator* @modify: */public class ZcEbEvalCommentEditPanel extends AbstractMainSubEditPanel {  private static final Logger logger = Logger.getLogger(ZcEbPlanEditPanel.class);  private IZcEbEvalExpertCommentServiceDelegate zcEbEvalExpertCommentServiceDelegate = (IZcEbEvalExpertCommentServiceDelegate) ServiceFactory  .create(IZcEbEvalExpertCommentServiceDelegate.class, "zcEbEvalExpertCommentServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_EVAL_EXPERT_COMMENT";  private FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton nextButton = new NextButton();  private FuncButton saveButton = new SaveButton();  private FuncButton exitButton = new ExitButton();  private ListCursor listCursor;  private ZcEbEvalExpertComment zcEbEvalExpertComment;  private ZcEbEvalExpertCommentListPanel listPanel;  private ZcEbEvalCommentEditPanel self = this;  private GkBaseDialog parent;  private boolean isEditable;  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId);  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    TextFieldEditor editor2 = new TextFieldEditor(LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_EVAL_COMMENT_PROJ_CODE), "projCode");    editorList.add(editor2);    editor2.setEnabled(false);    TextFieldEditor editor3 = new TextFieldEditor(LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_EVAL_COMMENT_PROJ_NAME), "projName");    editorList.add(editor3);    editor3.setEnabled(false);    TextFieldEditor editor4 = new TextFieldEditor(LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_EVAL_COMMENT_PACK_CODE), "packCode");    editorList.add(editor4);    editor4.setEnabled(false);    TextFieldEditor editor5 = new TextFieldEditor(LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_EVAL_COMMENT_PACK_NAME), "packName");    editorList.add(editor5);    if (zcEbEvalExpertComment.getCommentCode() != null) {      //    TextFieldEditor editor1 = new TextFieldEditor(LangTransMeta      //      .translate(ZcElementConstants.FIELD_TRANS_ZC_EVAL_COMMENT_CODE), "commentCode");      //    editorList.add(editor1);      //    editor1.setEnabled(false);      TextFieldEditor editor6 = new TextFieldEditor(LangTransMeta      .translate(ZcElementConstants.FIELD_TRANS_ZC_EVAL_COMMENT_EXPERT_CODE), "expertCode");      editorList.add(editor6);      editor6.setEnabled(false);      TextFieldEditor editor7 = new TextFieldEditor(LangTransMeta      .translate(ZcElementConstants.FIELD_TRANS_ZC_EVAL_COMMENT_EXPERT_NAME), "expertName");      editorList.add(editor7);      editor7.setEnabled(false);      DateFieldEditor editor9 = new DateFieldEditor(LangTransMeta      .translate(ZcElementConstants.FIELD_TRANS_ZC_EVAL_COMMENT_CREATE_DATE), "createDate");      editorList.add(editor9);      editor9.setEnabled(isEditable);    }    editor5.setEnabled(false);    TextFieldEditor editor8 = new TextFieldEditor(LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_EVAL_COMMENT_REMARK), "remark");    editorList.add(editor8);    editor8.setEnabled(isEditable);    TextAreaFieldEditor editor10 = new TextAreaFieldEditor(LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_EVAL_COMMENT_COMMENT_DESC), "commentDesc");    editorList.add(editor10);    editor10.setEnabled(isEditable);    return editorList;  }  protected void initFieldEditorPanel() {    fieldEditors = createFieldEditors();    int row = 0;    int col = 0;    fieldEditorPanel.setLayout(new GridBagLayout());    for (int i = 0; i < fieldEditors.size() - 1; i++) {      AbstractFieldEditor comp = (AbstractFieldEditor) fieldEditors.get(i);      JLabel label = new JLabel(comp.getName());      comp.setPreferredSize(new Dimension(150, 23));      fieldEditorPanel.add(label, new GridBagConstraints(col, row, 1, 1, 1.0, 1.0, GridBagConstraints.EAST,      GridBagConstraints.NONE, new Insets(5, 0, 5, 5), 0, 0));      fieldEditorPanel.add(comp, new GridBagConstraints(col + 1, row, 1, 1, 1.0, 1.0,      GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(5, 0, 5, 5), 0, 0));      if (col == colCount * 2 - 2) {        row++;        col = 0;      } else {        col += 2;      }    }    row++;    col = 0;    TextAreaFieldEditor areaComp = (TextAreaFieldEditor) fieldEditors.get(fieldEditors.size() - 1);    JLabel label = new JLabel(areaComp.getName());    fieldEditorPanel.add(label, new GridBagConstraints(col, row, 1, 2, 1.0, 1.0, GridBagConstraints.EAST,    GridBagConstraints.NONE, new Insets(5, 0, 5, 5), 0, 0));    JScrollPane js = new JScrollPane(areaComp);    fieldEditorPanel.add(areaComp, new GridBagConstraints(col + 1, row, 3, 3, 1.0, 1.0,    GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets(5, 0, 5, 5), 0, 0));    fieldEditorPanel.repaint();  }  public JComponent createSubBillPanel() {    return new JPanel();  }  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(deleteButton);    //  toolBar.add(auditButton);    //  toolBar.add(unAuditButton);    if (isEditable) {      toolBar.add(saveButton);    }    if (zcEbEvalExpertComment.getCommentCode() != null) {      toolBar.add(previousButton);      toolBar.add(nextButton);    }    toolBar.add(exitButton);    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });  }  public ZcEbEvalCommentEditPanel(ZcEbEvalCommentDialog parent, ListCursor listCursor,  ZcEbEvalExpertCommentListPanel listPanel, boolean isEditable) {    zcEbEvalExpertComment = (ZcEbEvalExpertComment) listCursor.getCurrentObject();    this.isEditable = isEditable;    this.listCursor = listCursor;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),    LangTransMeta.translate("专家质疑管理"), TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 2;    init();    setEnabled(false);    this.setEditingObject(zcEbEvalExpertComment);    requestMeta.setCompoId(compoId);    refreshData();  }  public ZcEbEvalCommentEditPanel(ZcEbEvalCommentDialog parent, ZcEbEvalExpertComment zcEbEvalExpertComment,  ZcEbEvalExpertCommentListPanel listPanel, boolean isEditable) {    this.isEditable = isEditable;    this.listPanel = listPanel;    this.zcEbEvalExpertComment = zcEbEvalExpertComment;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),    LangTransMeta.translate("专家质疑管理"), TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 2;    init();    setEnabled(false);    this.setEditingObject(zcEbEvalExpertComment);    requestMeta.setCompoId(compoId);    refreshData();  }  private void doDelete() {    int num = JOptionPane.showConfirmDialog(this, "确认删除当前数据？", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      String errorInfo = "";      try {        zcEbEvalExpertCommentServiceDelegate.deleteExpertComment(zcEbEvalExpertComment, requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(self, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.listCursor.removeCurrentObject();        updateFieldEditorsEditable();        this.listPanel.refreshData();        refreshData();      } else {        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doSave() {    boolean success = true;    String errorInfo = "";    try {      if (zcEbEvalExpertComment.getCommentCode() == null) {        zcEbEvalExpertComment.setExpertName(requestMeta.getExpertName());        zcEbEvalExpertComment.setExpertCode(requestMeta.getExpertCode());        zcEbEvalExpertComment.setIsSummary("Y");        zcEbEvalExpertCommentServiceDelegate.saveExpertComment(zcEbEvalExpertComment, requestMeta);      } else {        zcEbEvalExpertCommentServiceDelegate.updateExpertComment(zcEbEvalExpertComment, requestMeta);      }    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      updateFieldEditorsEditable();      this.listPanel.refreshData();      refreshData();    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrevious() {    listCursor.previous();    refreshData();  }  private void doNext() {    listCursor.next();    refreshData();  }  private void refreshData() {    if (listCursor != null) {      zcEbEvalExpertComment = (ZcEbEvalExpertComment) listCursor.getCurrentObject();    }    this.setEditingObject(zcEbEvalExpertComment);  }  public void doExit() {    this.parent.dispose();  }}
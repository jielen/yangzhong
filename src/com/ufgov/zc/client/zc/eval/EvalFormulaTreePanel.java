/**   * @(#) project: GK* @(#) file: EvalFormulaTreePanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval;import java.awt.BorderLayout;import java.util.Enumeration;import java.util.List;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTree;import javax.swing.tree.TreePath;import javax.swing.tree.TreeSelectionModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.FormulaRootCode;import com.ufgov.zc.common.zc.model.ZcEbEvalItemResult;/*** @ClassName: EvalFormulaTreePanel* @Description:  评标指标项树面板。不分供应商，统一从指标集项目中取一级节点项目。* @date: 2010-4-27 上午09:50:50* @version: V1.0 * @since: 1.0* @author: tianly* @modify: */public class EvalFormulaTreePanel extends JPanel {  private static final long serialVersionUID = 3461836034179450093L;  private JScrollPane panel;  private JTree tree;  private EvalFormulaTreeNode rootNode;  private String formulaType = EvalItemType.COMPLIANICE;  private List<ZcEbEvalItemResult> zcEbEvalItemResultList;  /**   *   * <p>Description: 构造函数，传入指标项类别和对应的项目列表。该类根据指标项类别和对应项目类别构造对应的指标项树面板。</p>  * @param formulaType 指标类型：1,符合性指标；2,评分性指标。  * @param formulaItemList 分类指标项列表，传入的列表应该是根据formulaType过滤后的项目列表。   */  public EvalFormulaTreePanel(String formulaType, List<ZcEbEvalItemResult> zcEbEvalItemResultList) {    this.formulaType = formulaType;    this.zcEbEvalItemResultList = zcEbEvalItemResultList;    init();  }  private void init() {    this.setLayout(new BorderLayout());    createTree();    panel = new JScrollPane(tree);    this.add(panel, BorderLayout.CENTER);    this.tree.setCellRenderer(new EvalFormulaTreeCellRenderer());  }  private void createTree() {    initRootNodes();    tree = new JTree(rootNode, true);    tree.setRootVisible(true);    tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);    expandAll(tree, new TreePath(tree.getModel().getRoot()), true);    this.repaint();  }  private void expandAll(JTree tree, TreePath parent, boolean expand) {    //Traverse children       EvalFormulaTreeNode node = (EvalFormulaTreeNode) parent.getLastPathComponent();    if (node.getChildCount() >= 0) {      for (Enumeration e = node.children(); e.hasMoreElements();) {        expandAll(tree, parent.pathByAddingChild(e.nextElement()), expand);      }    }    if (expand) {      tree.expandPath(parent);    } else {      tree.collapsePath(parent);    }  }  /**   * @Description: 创建固定节点。包含一个顶级根节点、符合性指标根节点、评分性指标根节点和通用参数根节点。   * @return void 返回类型   * @since 1.0    */  private void initRootNodes() {    rootNode = new EvalFormulaTreeNode();    if (EvalItemType.COMPLIANICE.equals(formulaType)) {      ZcEbEvalItemResult compItem = new ZcEbEvalItemResult();      compItem.setItemCode(FormulaRootCode.COMPLIANCE);      compItem.setItemType(EvalItemType.COMPLIANICE);      compItem.setItemName(LangTransMeta.translate("ZC_TRANS_FORMUAL_COMPLIANCE"));      rootNode.setUserObject(compItem);    } else {      ZcEbEvalItemResult scoreItem = new ZcEbEvalItemResult();      scoreItem.setItemCode(FormulaRootCode.SCORE);      scoreItem.setItemType(EvalItemType.SCORE);      scoreItem.setItemName(LangTransMeta.translate("ZC_TRANS_FORMUAL_SCORE"));      rootNode.setUserObject(scoreItem);    }    rootNode.setAllowsChildren(true);    loadChildNodes(formulaType);  }  /**  * @Description:按照类型分别加载对应子节点。  * @param itemType 指标项类别：1，符合性指标；2，评分性指标。  * @return void   * @since 1.0   */  private void loadChildNodes(String formulaType) {    buildTreeNodes();  }  private void buildTreeNodes() {    rootNode = addChild(rootNode);  }  private EvalFormulaTreeNode addChild(EvalFormulaTreeNode pnode) {    boolean hasChild = false;    for (ZcEbEvalItemResult fi : zcEbEvalItemResultList) {      if (pnode.getCode().equals(fi.getParentItemCode())) {        EvalFormulaTreeNode child = new EvalFormulaTreeNode();        child.setParentCode(fi.getParentItemCode());        child.setUserObject(fi);        hasChild = true;        pnode.add(addChild(child));      }    }    if (!hasChild) {      pnode.setAllowsChildren(false);    }    return pnode;  }  protected JTree getTree() {    return tree;  }  protected void setTree(JTree tree) {    this.tree = tree;  }  protected EvalFormulaTreeNode getRootNode() {    return rootNode;  }  protected void setRootNode(EvalFormulaTreeNode rootNode) {    this.rootNode = rootNode;  }}
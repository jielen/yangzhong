/**   * @(#) project: GK* @(#) file: ZcEbEvalExpertCommentListPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbEvalExpertCommentToTableModelConverter;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.PrintPreviewButton;import com.ufgov.zc.client.component.button.PrintSettingButton;import com.ufgov.zc.client.component.button.zc.CommonButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.print.PrintPreviewer;import com.ufgov.zc.client.print.PrintSettingDialog;import com.ufgov.zc.client.print.Printer;import com.ufgov.zc.client.util.ListUtil;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.exception.BaseException;import com.ufgov.zc.common.system.exception.DataAlreadyDeletedException;import com.ufgov.zc.common.system.exception.OtherException;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcEbEvalExpertComment;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.publish.IZcEbEvalExpertCommentServiceDelegate;/*** @ClassName: ZcEbEvalExpertCommentListPanel* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2010-7-16 下午03:32:30* @version: V1.0 * @since: 1.0* @author: Administrator* @modify: */public class ZcEbEvalExpertCommentListPanel extends JPanel implements ParentWindowAware {  private Window parentWindow;  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  private static final Logger logger = Logger.getLogger(ZcEbEvalExpertCommentListPanel.class);  /**   * 顶部工具栏   */  protected JFuncToolBar toolBar = new JFuncToolBar();  private String compoId = "ZC_EB_EVAL_EXPERT_COMMENT";  /**   * 顶部按钮   */  private EditButton editButton = new EditButton();  private FuncButton saveSummaryButton;  private DeleteButton deleteButton = new DeleteButton();  private AddButton addButton = new AddButton();  private FuncButton printButton = new PrintButton();//打印  private FuncButton printPreviewButton = new PrintPreviewButton();//打印预览  private PrintSettingButton printSettingButton = new PrintSettingButton();//打印设置  private ZcEbEvalExpertCommentListPanel self = this;  private JTabbedPane tabbedPane = new JTabbedPane();  private JTablePanel tablePanel1 = new JTablePanel();  private JTablePanel tablePanel2 = new JTablePanel();  private ZcEbEvalExpertCommentToTableModelConverter modelConverter = new ZcEbEvalExpertCommentToTableModelConverter();  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private ForeignEntityFieldEditor packSelectEdit;  private ForeignEntityFieldEditor projEdit;  private ElementConditionDto elementConditionDto = new ElementConditionDto();  private ZcEbEvalExpertComment zcEbEvalExpertComment = new ZcEbEvalExpertComment();  private IZcEbEvalExpertCommentServiceDelegate zcEbEvalExpertCommentServiceDelegate = (IZcEbEvalExpertCommentServiceDelegate) ServiceFactory  .create(IZcEbEvalExpertCommentServiceDelegate.class, "zcEbEvalExpertCommentServiceDelegate");  public IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(  IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  static {    LangTransMeta.init("ZC%");  }  public ZcEbEvalExpertCommentListPanel() {    init();  }  private void init() {    tablePanel1.init();    tablePanel1.setPanelId("1");    tablePanel2.init();    tablePanel2.setPanelId("2");    addMouseListener();    addChangeListener();    this.setLayout(new BorderLayout());    addToolBarComponent(toolBar);    this.add(toolBar, BorderLayout.NORTH);    JPanel panel = new JPanel(new BorderLayout());    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "专家质疑管理",    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    panel.add(initSearchArea(), BorderLayout.NORTH);    panel.add(tabbedPane, BorderLayout.CENTER);    this.add(panel, BorderLayout.CENTER);    tabbedPane.addTab("专家质疑", tablePanel1);    tabbedPane.addTab("汇总结果", tablePanel2);    //    refreshData();  }  private JPanel initSearchArea() {    JPanel panel = new JPanel(new GridBagLayout());    //设置项目的文本实体    String projColumNames[] = { "项目编号", "项目名称", "预算", "采购类型", "负责人", "立项时间", "是否划分标段", "电话", "邮件", "传真",    "是否发布采购公告", "是否发布采购结果" };    ZcEbProjFnHandler handler1 = new ZcEbProjFnHandler(projColumNames);    projEdit = new ForeignEntityFieldEditor("ZcEbProj.getZcEbProj", 20, handler1, projColumNames,    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJECT_CODE), "projName");    AbstractFieldEditor comp = (AbstractFieldEditor) projEdit;    JLabel projLable = new JLabel(comp.getName());    comp.setPreferredSize(new Dimension(150, 23));    panel.add(projLable, new GridBagConstraints(0, 0, 1, 1, 1.0, 1.0, GridBagConstraints.EAST,    GridBagConstraints.NONE, new Insets(5, 0, 5, 5), 0, 0));    panel.add(comp, new GridBagConstraints(1, 0, 1, 1, 1.0, 1.0, GridBagConstraints.WEST,    GridBagConstraints.HORIZONTAL, new Insets(5, 0, 5, 5), 0, 0));    //设置项目标段的文本实体    String pakeColumNames[] = { LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE), LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME) };    ZcEbPackHandler handler2 = new ZcEbPackHandler(pakeColumNames);    packSelectEdit = new ForeignEntityFieldEditor("ZcEbProj.getZcEbPack", elementConditionDto, 20, handler2,    pakeColumNames, LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PAKE_NAME), "packName");    AbstractFieldEditor comp1 = (AbstractFieldEditor) packSelectEdit;    comp1.setPreferredSize(new Dimension(150, 23));    JLabel packLabel = new JLabel(comp1.getName());    panel.add(packLabel, new GridBagConstraints(2, 0, 1, 1, 1.0, 1.0, GridBagConstraints.EAST,    GridBagConstraints.NONE, new Insets(5, 0, 5, 5), 0, 0));    panel.add(comp1, new GridBagConstraints(3, 0, 1, 1, 1.0, 1.0, GridBagConstraints.WEST,    GridBagConstraints.HORIZONTAL, new Insets(5, 0, 5, 5), 0, 0));    packSelectEdit.setEnabled(false);    return panel;  }  public void refreshData() {    Map map = new HashMap();    if (elementConditionDto.getProjCode() != null) {      map.put("projCode", elementConditionDto.getProjCode());    }    if (elementConditionDto.getPackCode() != null) {      map.put("packCode", elementConditionDto.getPackCode());    }    List list = zcEbEvalExpertCommentServiceDelegate.getExpertCommentList(map, requestMeta);    List list1 = new ArrayList();    List list2 = new ArrayList();    for (int i = 0; i < list.size(); i++) {      ZcEbEvalExpertComment zcEbEvalExpertComment = (ZcEbEvalExpertComment) list.get(i);      if (zcEbEvalExpertComment.getIsSummary().equals("N")) {        list1.add(zcEbEvalExpertComment);      } else {        list2.add(zcEbEvalExpertComment);      }    }    tablePanel1.setTableModel(modelConverter.convertToTableModel(list1));    tablePanel2.setTableModel(modelConverter.convertToTableModel(list2));  }  private void addChangeListener() {    tabbedPane.addChangeListener(new ChangeListener() {      public void stateChanged(ChangeEvent e) {        int index = tabbedPane.getSelectedIndex();        if (index == 0) {          saveSummaryButton.setEnabled(true);          addButton.setEnabled(false);        } else {          saveSummaryButton.setEnabled(false);          addButton.setEnabled(true);        }      }    });  }  private void addMouseListener() {    final JTable table = tablePanel1.getTable();    table.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {          MyTableModel model = (MyTableModel) table.getModel();          int row = table.getSelectedRow();          List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(model.getList(),          table));          new ZcEbEvalCommentDialog(self, viewList, row, false);        }      }    });    final JTable table2 = tablePanel2.getTable();    table2.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {          MyTableModel model = (MyTableModel) table2.getModel();          int row = table2.getSelectedRow();          List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(model.getList(),          table2));          new ZcEbEvalCommentDialog(self, viewList, row, true);        }      }    });  }  protected void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    saveSummaryButton = new CommonButton("zc_eval_fsave", "保存为汇总结果", "save.jpg");    toolBar.add(saveSummaryButton);    toolBar.add(addButton);    toolBar.add(deleteButton);    toolBar.add(printButton);    toolBar.add(printPreviewButton);    toolBar.add(printSettingButton);    // 初始化按钮的action事件    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    saveSummaryButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrint();      }    });    printPreviewButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrintPreview();      }    });    printSettingButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrintSetting();      }    });  }  private void doDelete() {    JPageableFixedTable table = ((JTablePanel) tabbedPane.getSelectedComponent()).getTable();    Integer[] selectedRows = table.getCheckedRows();    if (selectedRows.length == 0) {      JOptionPane.showMessageDialog(this, "请选择需要删除的数据!", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int result = JOptionPane.showConfirmDialog(self, "是否要删除选中的数据?", "删除确认", JOptionPane.YES_NO_OPTION);    if (result != JOptionPane.YES_OPTION) {      return;    }    List dataList = ((MyTableModel) table.getModel()).getList();    List chechedList = new ArrayList();    for (Integer checkedRow : selectedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      chechedList.add(dataList.get(accordDataRow));    }    StringBuffer errorInfo = new StringBuffer("");    boolean success = true;    requestMeta.setFuncId(deleteButton.getFuncId());    try {      for (int i = 0; i < chechedList.size(); i++) {        ZcEbEvalExpertComment zcEbEvalExpertComment = (ZcEbEvalExpertComment) chechedList.get(i);        zcEbEvalExpertCommentServiceDelegate.deleteExpertComment(zcEbEvalExpertComment, requestMeta);      }    } catch (DataAlreadyDeletedException ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getStackTraceMessage(), ex);      success = false;    } catch (BaseException ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getStackTraceMessage(), ex);      success = false;    } catch (OtherException ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getStackTraceMessage(), ex);      success = false;    } catch (Exception ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getMessage(), ex);      success = false;    }    if (success) {      JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      refreshData();    } else {      JOptionPane.showMessageDialog(this, "删除错误!\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doAdd() {    ZcEbEvalExpertComment bill = new ZcEbEvalExpertComment();    BeanUtil.commonFieldsCopy(zcEbEvalExpertComment, bill);    new ZcEbEvalCommentDialog(self, new ArrayList(), bill, true);  }  public void doSave() {    JPageableFixedTable table = ((JTablePanel) tabbedPane.getSelectedComponent()).getTable();    Integer[] selectedRows = table.getCheckedRows();    if (selectedRows.length == 0) {      JOptionPane.showMessageDialog(this, "请选择需要保存的数据!", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    List dataList = ((MyTableModel) table.getModel()).getList();    List chechedList = new ArrayList();    for (Integer checkedRow : selectedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      chechedList.add(dataList.get(accordDataRow));    }    StringBuffer errorInfo = new StringBuffer("");    boolean success = true;    try {      ZcEbEvalExpertComment zcEbEvalExpertComment = (ZcEbEvalExpertComment) chechedList.get(0);      ZcEbEvalExpertComment bill = new ZcEbEvalExpertComment();      bill.setProjCode(zcEbEvalExpertComment.getProjCode());      bill.setProjName(zcEbEvalExpertComment.getProjName());      bill.setPackCode(zcEbEvalExpertComment.getPackCode());      bill.setPackName(zcEbEvalExpertComment.getPackName());      bill.setCommentDesc(zcEbEvalExpertComment.getCommentDesc());      bill.setExpertName(requestMeta.getExpertName());      bill.setExpertCode(requestMeta.getExpertCode());      bill.setIsSummary("Y");      zcEbEvalExpertCommentServiceDelegate.saveExpertComment(bill, requestMeta);    } catch (DataAlreadyDeletedException ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getStackTraceMessage(), ex);      success = false;    } catch (BaseException ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getStackTraceMessage(), ex);      success = false;    } catch (OtherException ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getStackTraceMessage(), ex);      success = false;    } catch (Exception ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getMessage(), ex);      success = false;    }    if (success) {      refreshData();      JOptionPane.showMessageDialog(this, "处理成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      JOptionPane.showMessageDialog(this, "保存错误!\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrint() {    JPageableFixedTable table = ((JTablePanel) tabbedPane.getSelectedComponent()).getTable();    Integer[] selectedRows = table.getCheckedRows();    if (selectedRows.length == 0) {      JOptionPane.showMessageDialog(this, "请选择需要打印的数据 !", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    List dataList = ((MyTableModel) table.getModel()).getList();    List chechedList = new ArrayList();    for (Integer checkedRow : selectedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      chechedList.add(dataList.get(accordDataRow));    }    requestMeta.setFuncId(this.printButton.getFuncId());    requestMeta.setPageType(this.compoId + "_L");    boolean success = true;    boolean printed = false;    try {      PrintObject printObject = this.baseDataServiceDelegate.genMainBillPrintObjectFN(chechedList,      requestMeta);      if (Printer.print(printObject)) {        printed = true;      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印出错！\n" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    }    if (success && printed) {    }  }  private void doPrintPreview() {    JPageableFixedTable table = ((JTablePanel) tabbedPane.getSelectedComponent()).getTable();    Integer[] selectedRows = table.getCheckedRows();    if (selectedRows.length == 0) {      JOptionPane.showMessageDialog(this, "请选择需要打印预览的数据 !", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    List dataList = ((MyTableModel) table.getModel()).getList();    List chechedList = new ArrayList();    for (Integer checkedRow : selectedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      chechedList.add(dataList.get(accordDataRow));    }    requestMeta.setFuncId(this.printPreviewButton.getFuncId());    requestMeta.setPageType(this.compoId + "_L");    try {      PrintObject printObject = this.baseDataServiceDelegate.genMainBillPrintObjectFN(chechedList,      requestMeta);      PrintPreviewer previewer = new PrintPreviewer(printObject) {        protected void afterSuccessPrint() {        }      };      previewer.preview();    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印预览出错！\n" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrintSetting() {    requestMeta.setFuncId(this.printSettingButton.getFuncId());    requestMeta.setPageType(this.compoId + "_L");    new PrintSettingDialog(requestMeta);  }  //设置选择项目的web实体  private class ZcEbProjFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbProjFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbProj proj = (ZcEbProj) object;        zcEbEvalExpertComment.setProjCode(proj.getProjCode());        zcEbEvalExpertComment.setProjName(proj.getProjName());        elementConditionDto.setProjCode(proj.getProjCode());        //过滤该项目的标段在elementConditionDto中设置的字段        elementConditionDto.setDattr1(proj.getProjCode());        projEdit.setEditObject(proj);        projEdit.setValue(proj.getProjName());        packSelectEdit.setEnabled(true);        //        refreshData();      }    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = rowData.getProjSum();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE", rowData.getPurType());        data[i][col++] = rowData.getManager();        data[i][col++] = rowData.getProjDate();        data[i][col++] = rowData.getIsSplitPack();        data[i][col++] = rowData.getPhone();        data[i][col++] = rowData.getEmail();        data[i][col++] = rowData.getFax();        data[i][col++] = rowData.getIsPubPurBulletin();        data[i][col++] = rowData.getIsPubPurResult();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  //设置选择标段的web实体  private class ZcEbPackHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbPackHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbPack pack = (ZcEbPack) object;        packSelectEdit.setEditObject(pack);        packSelectEdit.setValue(pack.getPackName());        zcEbEvalExpertComment.setPackName(pack.getPackName());        zcEbEvalExpertComment.setPackCode(pack.getPackCode());        elementConditionDto.setPackCode(pack.getPackCode());        refreshData();      }    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbPack rowData = (ZcEbPack) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getPackCode();        data[i][col++] = rowData.getPackName();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  public static void main(String[] args) {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        ZcEbEvalExpertCommentListPanel bill = new ZcEbEvalExpertCommentListPanel();        JFrame frame = new JFrame("frame");        bill.setParentWindow(frame);        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(UIConstants.DIALOG_2_LEVEL_WIDTH, UIConstants.DIALOG_2_LEVEL_HEIGHT);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }}
/**   * @(#) project: GK* @(#) file: ZcEbEvalFinalResultPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval.result;import java.awt.BorderLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JOptionPane;import javax.swing.JPanel;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.EvalResultToTableModelConverter;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.cellrenderer.NumberCellRenderer;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcEvalFiled;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.model.ZcEbPackEvalResult;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;/** * * @ClassName: ZcEbEvalFinalResultPanel* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2010-12-5 下午07:29:07* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbEvalFinalResultPanel extends JPanel {  private Map<String, String> paramMap = new HashMap<String, String>();  private ZcEbEvalPack evalPack = new ZcEbEvalPack();  private SaveButton saveButton = new SaveButton();  private String compoId = "ZC_EB_PROJ_CTRL";  /**   * 中标人   */  private static final String BIDED_VALUE = "4";  private boolean isScoreResultSum;  protected JFuncToolBar toolBar = new JFuncToolBar();  protected JTablePanel tablePanel = new JTablePanel();  protected List<ZcEbPackEvalResult> tableDataList;  private List<ZcEbPackEvalResult> oldtableDataList;  private IZcEbEvalServiceDelegate zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory.create(IZcEbEvalServiceDelegate.class,  "zcEbEvalServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  public ZcEbEvalFinalResultPanel(ZcEbEvalPack evalPack, boolean isScoreResultSum) {    this.evalPack = evalPack;    this.isScoreResultSum = isScoreResultSum;    LangTransMeta.init("ZC%");    initComponents();  }  protected void initComponents() {    tablePanel = new JTablePanel();    tablePanel.init();    tablePanel.getSearchBar().setVisible(false);    refreshData();    addToolBarComponent(toolBar);    setLayout(new BorderLayout());    add(toolBar, BorderLayout.NORTH);    add(tablePanel, BorderLayout.CENTER);  }  private void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(saveButton);    // toolBar.add(createButton);    // 初始化按钮的action事件    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSaveRes();      }    });  }  public void refreshData() {    loadData();    refreshTableData();    oldtableDataList = (List<ZcEbPackEvalResult>) ObjectUtil.deepCopy(tableDataList);    System.out.println("oldtableDataList" + DigestUtil.digest(oldtableDataList));    System.out.println("tableDataList" + DigestUtil.digest(tableDataList));  }  protected void refreshTableData() {    if (isScoreResultSum) {      tablePanel.setTableModel(EvalResultToTableModelConverter.convertScoreFinalResultTableData(tableDataList, true));      ZcUtil.translateColName(tablePanel.getTable(), EvalResultToTableModelConverter.getFinallscoreResultInfo());      setScoreTabledetailEditor(tablePanel.getTable());    } else {      tablePanel.setTableModel(EvalResultToTableModelConverter.convertComplFinalResultTableData(tableDataList, true));      ZcUtil.translateColName(tablePanel.getTable(), EvalResultToTableModelConverter.getFinallComplResultInfo());      setComplTabledetailEditor(tablePanel.getTable());    }  }  private void setScoreTabledetailEditor(final JPageableFixedTable table) {    AsValComboBoxCellEditor asValComboBoxCellEditor = new AsValComboBoxCellEditor("VS_ZC_EB_EVAL_RESULT") {      private static final long serialVersionUID = -8061568858776010107L;      @Override      public boolean stopCellEditing() {        Object object = getCellEditorValue();        if (BIDED_VALUE.equals(String.valueOf(object))) {          if (countBiderCount() > 1) {            JOptionPane.showMessageDialog(null, LangTransMeta.translate("ZC_EB_ONLY_ONE_BIDER"), "提示", JOptionPane.WARNING_MESSAGE);            return false;          }        }        return super.stopCellEditing();      };    };    SwingUtil.setTableCellEditor(table, ZcEvalFiled.FIELD_NAME_EVAL_RESULT, asValComboBoxCellEditor);    SwingUtil.setTableCellRenderer(tablePanel.getTable(), ZcEvalFiled.FIELD_NAME_EVAL_RESULT, new AsValCellRenderer("VS_ZC_EB_EVAL_RESULT"));  }  private void setComplTabledetailEditor(final JPageableFixedTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    final AsValComboBoxCellEditor asValComplEvalValueCellEditor = new AsValComboBoxCellEditor("VS_ZC_EB_COMPLIANCE_VALUE");    SwingUtil.setTableCellEditor(table, "COMPLIANCE_EVAL_VALUE", asValComplEvalValueCellEditor);    SwingUtil.setTableCellRenderer(table, "COMPLIANCE_EVAL_VALUE", new AsValCellRenderer("VS_ZC_EB_COMPLIANCE_VALUE"));    final AsValComboBoxCellEditor asValComplEvalResultCellEditor = new AsValComboBoxCellEditor("VS_ZC_EB_COMPLIANCE_RESULT");    SwingUtil.setTableCellEditor(table, "COMPLIANCE_EVAL_RESULT", asValComplEvalResultCellEditor);    SwingUtil.setTableCellRenderer(table, "COMPLIANCE_EVAL_RESULT", new AsValCellRenderer("VS_ZC_EB_COMPLIANCE_RESULT"));  }  private int countBiderCount() {    int zbrCount = 0;    for (ZcEbPackEvalResult t : tableDataList) {      if ("4".equals(t.getEvalResult())) {        zbrCount++;      }    }    return zbrCount;  }  protected void setTableCellRenderer() {    NumberCellRenderer numberCellRenderer = new NumberCellRenderer();    SwingUtil.setTableCellRenderer(tablePanel.getTable(), ZcEvalFiled.FIELD_NAME_ADJUST_SCORE, numberCellRenderer);  }  private boolean doSaveRes() {    boolean success = true;    if (!beforeSave()) {      return false;    }    try {      zcEbEvalServiceDelegate.updateZcEbPackEvalFinalSumResultFN(tableDataList, requestMeta);      JOptionPane.showMessageDialog(this, "保存成功", "提示", JOptionPane.INFORMATION_MESSAGE);      refreshData();    } catch (Exception e) {      success = false;      e.printStackTrace();      UIUtilities.showStaickTraceDialog(e, this, "保存时发生错误", e.getMessage());    }    return success;  }  private boolean beforeSave() {    int zbrCount = 0;    StringBuilder msg = new StringBuilder();    for (ZcEbPackEvalResult t : tableDataList) {      if (isScoreResultSum) {        if (null == t.getEvalResult() || "".equals(t.getEvalResult())) {          msg.append(LangTransMeta.translate("ZC_EB_BID_RES_MUST_NEED") + "\n");          break;        } else {          if ("4".equals(t.getEvalResult())) {            zbrCount++;          }        }      } else {        if (null == t.getComplianceEvalResult() || "".equals(t.getComplianceEvalResult())) {          msg.append(LangTransMeta.translate("ZC_EB_BID_COMPL_RES_MUST_NEED") + "\n");          break;        }        /**         * 可以补充功能：符合性通过比例。供应商符合性通过比例（符合性评审通过，进入技术评审供应商占总报名供应商的比例），暂时没有考虑         */      }    }    if (zbrCount > 1) {      msg.append(LangTransMeta.translate("ZC_EB_ONLY_ONE_BIDER"));    }    if (msg.length() > 0) {      JOptionPane.showMessageDialog(this, msg.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  @SuppressWarnings("unchecked")  public void loadData() {    Map<String, String> paraMap = new HashMap<String, String>();    paraMap.put("PROJ_CODE", evalPack.getProjCode());    paraMap.put("PACK_CODE", evalPack.getPackCode());    if (!isScoreResultSum) {      paraMap.put("IS_COMPLIANCE_RESULT", "Y");    } else {      paraMap.put("IS_COMPLIANCE_RESULT", "N");    }    //获得最终的汇总结果    tableDataList = zcEbEvalServiceDelegate.getZcEbEvalPackSumResult(paraMap, requestMeta);  }  public void loadData(List<ZcEbPackEvalResult> list) {    tableDataList.clear();    tableDataList.addAll(list);  }  protected void selfInit() {    paramMap.put("FORMULA_CODE", evalPack.getFormulaCode());    paramMap.put("PACK_CODE", evalPack.getPackCode());  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldtableDataList).equals(DigestUtil.digest(tableDataList));  }  public boolean doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        return doSaveRes();      }    }    return true;  }}
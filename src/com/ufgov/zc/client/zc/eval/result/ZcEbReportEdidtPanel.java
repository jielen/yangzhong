package com.ufgov.zc.client.zc.eval.result;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dialog.ModalityType;import java.awt.Dimension;import java.awt.Font;import java.awt.GridLayout;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTabbedPane;import javax.swing.JTextArea;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbPackEvalResultToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.WorkflowTrace;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AuditButton;import com.ufgov.zc.client.component.button.ConfirmButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.table.celleditor.MoneyCellEditor;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.cellrenderer.NumberCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.SelectFileFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BaseException;import com.ufgov.zc.common.system.exception.OtherException;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.EvalPackProvider;import com.ufgov.zc.common.zc.model.ZcEbEvalReport;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbPackEvalResult;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;/** *  * @author fanl *  非电子评标的评审报告 * */public class ZcEbReportEdidtPanel extends AbstractMainSubEditPanel implements ParentWindowAware {  private static final Logger logger = Logger.getLogger(ZcEbReportEdidtPanel.class);  private FuncButton addButton = new AddButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton saveButton = new SaveButton();  private FuncButton sendButton = new SendButton();  private FuncButton auditButton = new AuditButton();  private FuncButton unTreadButton = new UntreadButton();  private FuncButton traceButton = new TraceButton();  private FuncButton exitButton = new ExitButton();  private FuncButton editButton = new EditButton();  private FuncButton saveReportButton = new ConfirmButton();  private JTablePanel tablePanel = new JTablePanel();  private ZcEbEvalReportListPanel listPanel;  private JTabbedPane tabbedPane = new JTabbedPane();  private final ListCursor listCursor;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private String tabStatus;  private GkBaseDialog parent;  private ZcEbEvalReport oldZcEbEvalReport;  private ElementConditionDto packDto = new ElementConditionDto();  //评标组意见  private JTextArea bidEvalOpinionArea;  //监察公证意见  private JTextArea superviseOpinionArea;  //中标评标结果  private ZcEbPackEvalResult bidZcEvalPackEvalResult;  //意见  private JTextArea callBidOpinionArea;  private Window parentWindow;  private ZcEbEvalReportEditPanel self;  private String compoId = "ZC_EB_EVAL_REPORT";  private ElementConditionDto elementConditionDto = new ElementConditionDto();  private ElementConditionDto bidelementConditionDto = new ElementConditionDto();  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private IZcEbEvalServiceDelegate zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory.create(IZcEbEvalServiceDelegate.class,  "zcEbEvalServiceDelegate");  private String sqlMapSelectedId = "ZcEbProj.getZcEbProj";  private ZcEbEvalReport zcEbEvalReport;  private String reportCode;  private ForeignEntityFieldEditor packSelectEdit;  private ForeignEntityFieldEditor bidSelectEdit;  private SelectFileFieldEditor reportAttachFile;  private SelectFileFieldEditor signReportAttach;  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  static {    LangTransMeta.init("ZC%");  }  public ZcEbReportEdidtPanel(ZcEbReportDialog parent, ListCursor listCursor, String tabStatus, ZcEbEvalReportListPanel listPanel) {    // TODO Auto-generated constructor stub    super(ZcEbEvalReport.class, BillElementMeta.getBillElementMetaWithoutNd("ZC_EB_EVAL_REPORT"));    this.listCursor = listCursor;    this.zcEbEvalReport = (ZcEbEvalReport) listCursor.getCurrentObject();    if (zcEbEvalReport == null) {      zcEbEvalReport = new ZcEbEvalReport();      zcEbEvalReport.setStatus("0");      zcEbEvalReport.setNd(requestMeta.getSvNd());      zcEbEvalReport.setExecuteDate(requestMeta.getSysDate());      zcEbEvalReport.setExecutor(requestMeta.getSvUserName());      listCursor.getDataList().add(zcEbEvalReport);    } else {      if (null != zcEbEvalReport.getReportCode()) {        reportCode = zcEbEvalReport.getReportCode();      }    }    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("评审报告管理"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    requestMeta.setCompoId(compoId);    init();    refreshData();    setOldObject();    setButtonStatus((ZcEbEvalReport) listCursor.getCurrentObject(), requestMeta, this.listCursor);    updateFieldEditorsEditable();  }  public void init() {    this.initToolBar(toolBar);    this.setLayout(new BorderLayout());    this.add(toolBar, BorderLayout.NORTH);    this.add(workPanel, BorderLayout.CENTER);    initFieldEditorPanel();    initTable();    workPanel.setLayout(new BorderLayout());    workPanel.add(fieldEditorPanel, BorderLayout.NORTH);    workPanel.add(createSubBillPanel(), BorderLayout.CENTER);  }  public JComponent createSubBillPanel() {    JPanel panel = new JPanel(new GridLayout(3, 1));    tabbedPane.add("评标结果", tablePanel);    /**     * commentTapPanel的初始化     */    JTabbedPane commentTabPane = new JTabbedPane();    //业务科意见    JPanel optionPanel1 = new JPanel(new BorderLayout());    bidEvalOpinionArea = new JTextArea();    bidEvalOpinionArea.setRows(3);    bidEvalOpinionArea.setLineWrap(true);    JScrollPane groupPanel = new JScrollPane(bidEvalOpinionArea);    optionPanel1.add(groupPanel, BorderLayout.CENTER);    //监察公证意见    JPanel optionPanel2 = new JPanel(new BorderLayout());    superviseOpinionArea = new JTextArea();    superviseOpinionArea.setRows(3);    superviseOpinionArea.setLineWrap(true);    JScrollPane supervisePanel = new JScrollPane(superviseOpinionArea);    optionPanel2.add(supervisePanel, BorderLayout.CENTER);    commentTabPane.add("业务科意见", optionPanel1);    commentTabPane.add("监察公证意见", optionPanel2);    /**     * 招标人确认结果面板的初始化     */    JTabbedPane confimResultTabPanel = new JTabbedPane();    confimResultTabPanel.setTabPlacement(JTabbedPane.TOP);    confimResultTabPanel.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);    confimResultTabPanel.setPreferredSize(new Dimension(300, 200));    JPanel confimResultPanel = new JPanel();    confimResultPanel.setBounds(50, 50, 200, 180);    confimResultPanel.setLayout(null);    //设置选择中标人的编辑框    JLabel bidWinerLabel = new JLabel("选择中标人");    bidWinerLabel.setLayout(null);    bidWinerLabel.setBounds(100, 10, 100, 24);    confimResultPanel.add(bidWinerLabel);    String bidColumNames[] = { "供应商名称", "投标报价" };    ZcEbBidHandler handler3 = new ZcEbBidHandler(bidColumNames);    bidSelectEdit = new ForeignEntityFieldEditor("ZcEbEval.getEvalPackProviderByForeign", bidelementConditionDto, 20, handler3, bidColumNames,    "选择中标供应商", "providerName");    bidSelectEdit.setEditObject(zcEbEvalReport);    bidSelectEdit.setEditable(false);    bidSelectEdit.setBounds(100, 34, 540, 24);    confimResultPanel.add(bidSelectEdit);    //填写意见    JLabel optionLabel = new JLabel("意见  ");    optionLabel.setBounds(100, 62, 100, 24);    optionLabel.setLayout(null);    confimResultPanel.add(optionLabel);    callBidOpinionArea = new JTextArea();    //    callBidOpinionArea.setLayout(null);    callBidOpinionArea.setLineWrap(true);    JScrollPane optionJsPanel = new JScrollPane(callBidOpinionArea);    optionJsPanel.setBounds(100, 84, 600, 70);    confimResultPanel.add(optionJsPanel);    confimResultTabPanel.add("招标人确认中标结果", confimResultPanel);    panel.add(tabbedPane);    panel.add(commentTabPane);    panel.add(confimResultTabPanel);    if (zcEbEvalReport != null) {      bidEvalOpinionArea.setText(zcEbEvalReport.getBidEvalOpinion());      superviseOpinionArea.setText(zcEbEvalReport.getSuperviseOpinion());      callBidOpinionArea.setText(zcEbEvalReport.getCallBidOpinion());    }    return panel;  }  public void initTable() {    tablePanel.init();    tablePanel.getSearchBar().setVisible(false);  }  /**   *   * @Description: 不同的登录用户能够填写的审批意见不同。  * @return void 返回类型  * @since 1.0   */  private void setTextAreaStatus() {  }  public void refreshData() {    if (zcEbEvalReport.getProjCode() != null && zcEbEvalReport.getPackCode() != null) {      bidelementConditionDto.setProjCode(zcEbEvalReport.getProjCode());      bidelementConditionDto.setPackCode(zcEbEvalReport.getPackCode());      //      bidelementConditionDto.setStatus(ZcSettingConstants.PACK_STATUS_OPEN_BID);      Map map = new HashMap<String, String>();      map.put("projCode", zcEbEvalReport.getProjCode());      map.put("packCode", zcEbEvalReport.getPackCode());      //      map.put("packStatus", ZcSettingConstants.PACK_STATUS_OPEN_BID);      //新增评审报告，取该项目分包的供应商报名信息，并为其打分。      List evalResultList = new ArrayList();      if (zcEbEvalReport.getReportCode() == null || "".equals(zcEbEvalReport.getReportCode())) {        List supplierList = zcEbEvalServiceDelegate.getEvalPackProviderList(map, requestMeta);        for (int i = 0; i < supplierList.size(); i++) {          EvalPackProvider provider = (EvalPackProvider) supplierList.get(i);          ZcEbPackEvalResult result = new ZcEbPackEvalResult();          result.setProjCode(provider.getProjCode());          result.setPackCode(provider.getPackCode());          result.setProviderCode(provider.getProviderCode());          result.setProviderName(provider.getProviderName());          result.setProviderTotalPrice(provider.getBidSum());          evalResultList.add(result);        }        //      } else {        evalResultList = zcEbEvalServiceDelegate.getZcEbPackEvalResultList(bidelementConditionDto, requestMeta);      }      zcEbEvalReport.setPackEvalResultList(evalResultList);      tablePanel.setTableModel(ZcEbPackEvalResultToTableModelConverter.convertSubBiTableData(zcEbEvalReport.getPackEvalResultList()));      if (!"0".equals(zcEbEvalReport.getStatus())) {        tablePanel.getTable().setEnabled(false);      } else {        tablePanel.getTable().setEnabled(true);      }      ZcUtil.translateColName(tablePanel.getTable(), ZcEbPackEvalResultToTableModelConverter.getBillDetailInfo());      setTableBiEditor(tablePanel.getTable());    }    setEditingObject(zcEbEvalReport);  }  private void setTableBiEditor(JPageableFixedTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    SwingUtil.setTableCellEditor(table, "EVAL_SCORE", new MoneyCellEditor(false));    SwingUtil.setTableCellRenderer(table, "EVAL_SCORE", new NumberCellRenderer());  }  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    String projColumNames[] = { "项目编号", "项目名称", "预算", "采购类型", "负责人", "立项时间", "是否分包", "电话", "邮件", "传真", "是否发布采购公告", "是否发布采购结果" };    ZcEbProjFnHandler handler1 = new ZcEbProjFnHandler(projColumNames);    ForeignEntityFieldEditor editor = new ForeignEntityFieldEditor(this.sqlMapSelectedId, 20, handler1, projColumNames, LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_PROJECT_CODE), "projCode");    editor.setEnabled(true);    editor.setEditable(false);    editorList.add(editor);    TextFieldEditor editor1 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJECT_NAME), "projName");    editor1.setEnabled(false);    editorList.add(editor1);    TextFieldEditor editor2 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJECT_COMPANY), "purPeople");    editorList.add(editor2);    String pakeColumNames[] = { "分包编号", "分包名称" };    ZcEbPackHandler handler2 = new ZcEbPackHandler(pakeColumNames);    packSelectEdit = new ForeignEntityFieldEditor("ZcEbProj.getZcEbPack", packDto, 20, handler2, pakeColumNames, LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_PAKE_NAME), "packName");    packSelectEdit.setEnabled(false);    editorList.add(packSelectEdit);    TextFieldEditor editor3 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PIFU_CGFS), "purType");    editor3.setEnabled(false);    editorList.add(editor3);    //    DateFieldEditor editor4 = new DateFieldEditor(LangTransMeta    //      .translate(ZcElementConstants.FIELD_TRANS_BID_DATE), "bidDate");    //    editorList.add(editor4);    TextFieldEditor editor5 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_BID_LOCATION), "bidLocation");    editor5.setEnabled(false);    editorList.add(editor5);    reportAttachFile = new SelectFileFieldEditor("评标报告附件", "reportAttach", "reportAttachBlobid", true, true, true, true);    reportAttachFile.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        setreportAttachContent();      }    });    editorList.add(reportAttachFile);    signReportAttach = new SelectFileFieldEditor("签名附件", "signReportAttach", "signReportAttachBlobid", true, true, true, true);    signReportAttach.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        setsignReportAttachContent();      }    });    editorList.add(signReportAttach);    AsValFieldEditor status = new AsValFieldEditor("单据状态", "status", "ZC_VS_REPORT_STATUS");    editorList.add(status);    return editorList;  }  private void setreportAttachContent() {    if (this.reportAttachFile == null) {      zcEbEvalReport.setReportAttachBlobid(null);      return;    }    AsFile bidDoc = this.reportAttachFile.getFileUploader().getFile();    if (bidDoc == null) {      zcEbEvalReport.setReportAttachBlobid(null);      return;    }    zcEbEvalReport.setReportAttachBlobid(bidDoc.getFileId());  }  private void setOldObject() {    oldZcEbEvalReport = (ZcEbEvalReport) ObjectUtil.deepCopy(this.zcEbEvalReport);  }  private void setsignReportAttachContent() {    if (this.signReportAttach == null)      return;    AsFile bidDoc = this.signReportAttach.getFileUploader().getFile();    if (bidDoc == null) {      return;    }    zcEbEvalReport.setSignReportAttachBlobid(bidDoc.getFileId());  }  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(editButton);    //    toolBar.add(addButton);    toolBar.add(deleteButton);    toolBar.add(saveButton);    if (zcEbEvalReport == null || "0".equals(zcEbEvalReport.getStatus())) {      toolBar.add(sendButton);    } else {      toolBar.add(auditButton);    }    toolBar.add(unTreadButton);    toolBar.add(traceButton);    toolBar.add(exitButton);    if ("exec".equals(zcEbEvalReport.getStatus())) {      //    saveReportButton=new CommonButton("fsaveReport", "备份评标报告", "save.jpg");      toolBar.add(saveReportButton);    }    //设置按钮状态    //    setButtonStatus();    // 初始化按钮的action事件    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSend();      }    });    auditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doUnTread();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doTrace();      }    });    saveReportButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doConfirmReport();      }    });  }  /**   *   * @Description: 根据展示列表页面对象的审批状态设置按钮的状态  * @return void 返回类型  * @since 1.0   */  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs.setButton(this.addButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.auditButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.traceButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.unTreadButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.exitButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      btnStatusList.add(bs);    }    String billStatus;    if (null == zcEbEvalReport.getStatus()) {      billStatus = "0";    } else {      billStatus = zcEbEvalReport.getStatus();    }    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, zcEbEvalReport.getProcessInstId());  }  public void doAdd() {    this.zcEbEvalReport = new ZcEbEvalReport();    tablePanel.setTableModel(ZcEbPackEvalResultToTableModelConverter.convertSubBiTableData(null));    pageStatus = "NEW_PAGE";    tabStatus = "new";    setButtonStatus();    setOldObject();    refreshData();  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  public void doDelete() {    if (null == zcEbEvalReport.getReportCode()) {      return;    } else {      boolean success = true;      try {        if (!"0".equals(zcEbEvalReport.getStatus())) {          JOptionPane.showMessageDialog(this, "非编辑状态,不可以删除！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        zcEbEvalServiceDelegate.deleteZcEbEvalReport(zcEbEvalReport, requestMeta);      } catch (BaseException ex) {        success = false;        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      }      if (success) {        JOptionPane.showMessageDialog(this, "处理成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.zcEbEvalReport = new ZcEbEvalReport();        setEditingObject(zcEbEvalReport);        listCursor.removeCurrentObject();        listPanel.refreshCurrentTabData();      }    }  }  public boolean doSave() {    boolean isCorrect = beforeSave();    if (isCorrect) {      boolean success = true;      try {        ZcEbEvalReport bean = zcEbEvalServiceDelegate.saveZcEbEvalReportFN(zcEbEvalReport, requestMeta);        reportCode = bean.getReportCode();      } catch (BaseException ex) {        success = false;        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());        return false;      }      if (success) {        JOptionPane.showMessageDialog(this, "处理成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        afterSave();        //        setButtonStatus();        listPanel.refreshCurrentTabData();        return true;      }    }    return false;  }  public void doSend() {    if (null != zcEbEvalReport.getReportCode()) {      boolean success = true;      try {        GkCommentDialog commentDialog = new GkCommentDialog(this.getParentWindow(), ModalityType.APPLICATION_MODAL);        if (commentDialog.cancel) {          return;        }        zcEbEvalReport.setComment(commentDialog.getComment());        requestMeta.setFuncId(this.sendButton.getFuncId());        zcEbEvalServiceDelegate.newCommitFN(zcEbEvalReport, requestMeta);      } catch (BaseException ex) {        success = false;        logger.error(ex.getStackTraceMessage(), ex);        success = false;        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      } catch (OtherException ex) {        success = false;        logger.error(ex.getStackTraceMessage(), ex);        success = false;        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      } catch (Exception ex) {        success = false;        logger.error(ex.getMessage(), ex);        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      }      if (success) {        JOptionPane.showMessageDialog(this, "处理成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        afterSave();        //        setButtonStatus();        listPanel.refreshCurrentTabData();      }    } else {      JOptionPane.showMessageDialog(this, "请先保存再送审", "提示", JOptionPane.INFORMATION_MESSAGE);    }  }  /**   *   * @Description: 审核  * @return void 返回类型  * @since 1.0   */  public void doAudit() {    boolean success = true;    if ("exec".equals(zcEbEvalReport.getStatus())) {      JOptionPane.showMessageDialog(this, "该评审报告已经通过审批", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    try {      GkCommentDialog commentDialog = new GkCommentDialog(this.getParentWindow(), ModalityType.APPLICATION_MODAL);      if (commentDialog.cancel) {        return;      }      zcEbEvalReport.setComment(commentDialog.getComment());      requestMeta.setFuncId(sendButton.getFuncId());      //填写送审意见      zcEbEvalServiceDelegate.auditFN(zcEbEvalReport, requestMeta);    } catch (BaseException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (OtherException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (Exception ex) {      success = false;      logger.error(ex.getMessage(), ex);      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "处理成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      //      setButtonStatus();      afterSave();      listPanel.refreshCurrentTabData();    }  }  /**   *   * @Description: 流程跟踪  * @return void 返回类型  * @since 1.0   */  private void doTrace() {    if (null != zcEbEvalReport) {    	ZcUtil.showTraceDialog(zcEbEvalReport, compoId);    } else {      JOptionPane.showMessageDialog(this, "流程跟踪对象不能为空！", "提示", JOptionPane.INFORMATION_MESSAGE);    }  }  /**   *   * @Description: 退回  * @return void 返回类型  * @since 1.0   */  public void doUnTread() {    if (null != zcEbEvalReport && !"0".equals(zcEbEvalReport.getStatus())) {      boolean success = true;      try {        requestMeta.setFuncId(sendButton.getFuncId());        GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(this.getParentWindow(), ModalityType.APPLICATION_MODAL);        if (commentDialog.cancel) {          return;        }        zcEbEvalReport.setComment("退回:" + commentDialog.getComment());        zcEbEvalServiceDelegate.untreadFN(zcEbEvalReport, requestMeta);      } catch (BaseException ex) {        success = false;        logger.error(ex.getStackTraceMessage(), ex);        success = false;        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      } catch (OtherException ex) {        success = false;        logger.error(ex.getStackTraceMessage(), ex);        success = false;        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      } catch (Exception ex) {        success = false;        logger.error(ex.getMessage(), ex);        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      }      if (success) {        JOptionPane.showMessageDialog(this, "处理成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        listPanel.refreshCurrentTabData();        afterSave();      }    } else {      JOptionPane.showMessageDialog(this, "该评审报告还未审批不允许退回！", "提示", JOptionPane.INFORMATION_MESSAGE);    }  }  public boolean beforeSave() {    if (null == zcEbEvalReport.getProjCode() || "".equals(zcEbEvalReport.getProjCode())) {      JOptionPane.showMessageDialog(this, "请选择一个采购项目", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    if (null == zcEbEvalReport.getPackCode() || "".equals(zcEbEvalReport.getPackCode())) {      JOptionPane.showMessageDialog(this, "请选择分包", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    //    if (null == zcEbEvalReport.getBidDate() || "".equals(zcEbEvalReport.getBidDate())) {    //      JOptionPane.showMessageDialog(this, "请填写开标时间", "提示", JOptionPane.INFORMATION_MESSAGE);    //      return false;    //    }    if (null == zcEbEvalReport.getReportCode()) {      if (reportIsExists(zcEbEvalReport.getProjCode(), zcEbEvalReport.getPackCode())) {        JOptionPane.showMessageDialog(null, "已经存在该项目： " + zcEbEvalReport.getProjName() + " 的评标报告!");        return false;      }    }    zcEbEvalReport.setBidEvalOpinion(bidEvalOpinionArea.getText().trim());    zcEbEvalReport.setSuperviseOpinion(superviseOpinionArea.getText().trim());    //    zcEbEvalReport.setProviderName(providerNameArea.getText().trim());    zcEbEvalReport.setCallBidOpinion(callBidOpinionArea.getText().trim());    return true;  }  public void afterSave() {    zcEbEvalReport = zcEbEvalServiceDelegate.getZcEbEvalReport(reportCode, requestMeta);    listCursor.setCurrentObject(zcEbEvalReport);    setEditingObject(zcEbEvalReport);    setOldObject();  }  public void doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    this.parent.dispose();  }  //采购处备案评标报告  private void doConfirmReport() {    boolean success = true;    try {      zcEbEvalReport.setStatus("save");      zcEbEvalServiceDelegate.updateZcEbEvalStatus(zcEbEvalReport, requestMeta);    } catch (BaseException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (OtherException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (Exception ex) {      success = false;      logger.error(ex.getMessage(), ex);      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "备案评标报告成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      afterSave();      listPanel.refreshCurrentTabData();    }  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldZcEbEvalReport).equals(DigestUtil.digest(this.getEditingObject()));  }  private boolean reportIsExists(String ProjCode, String packCode) {    ElementConditionDto dto = new ElementConditionDto();    dto.setProjCode(ProjCode);    dto.setPackCode(packCode);    dto.setNd(requestMeta.getSvNd());    List list = new ArrayList();    list = zcEbEvalServiceDelegate.getZcEbEvalReportList(dto, requestMeta);    if (null != list && list.size() > 0) {      return true;    }    return false;  }  //设置选择项目的web实体  private class ZcEbProjFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbProjFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbProj proj = (ZcEbProj) object;        zcEbEvalReport.setProjCode(proj.getProjCode());        zcEbEvalReport.setProjName(proj.getProjName());        setEditingObject(zcEbEvalReport);        elementConditionDto.setProjectCode(proj.getProjCode());        bidelementConditionDto.setProjectCode(proj.getProjCode());        packDto.setDattr1(proj.getProjCode());        packSelectEdit.setEnabled(true);        packSelectEdit.setEditable(false);        //        refreshData();      }    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = rowData.getProjSum();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE", rowData.getPurType());        data[i][col++] = rowData.getManager();        data[i][col++] = rowData.getProjDate();        data[i][col++] = rowData.getIsSplitPack();        data[i][col++] = rowData.getPhone();        data[i][col++] = rowData.getEmail();        data[i][col++] = rowData.getFax();        data[i][col++] = rowData.getIsPubPurBulletin();        data[i][col++] = rowData.getIsPubPurResult();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  //设置选择分包的web实体  private class ZcEbPackHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbPackHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbPack pack = (ZcEbPack) object;        zcEbEvalReport.setPackCode(pack.getPackCode());        zcEbEvalReport.setPackName(pack.getPackName());        zcEbEvalReport.setPurType(pack.getPurType());        zcEbEvalReport.setBidLocation(pack.getBidLocation());        elementConditionDto.setPackCode(pack.getPackCode());        bidelementConditionDto.setPackCode(pack.getPackCode());        setEditingObject(zcEbEvalReport);        refreshData();      }    }    public TableModel createTableModel(List showDatas) {      if (null == zcEbEvalReport.getProjCode()) {        JOptionPane.showMessageDialog(self, "请先选择一个采购项目 ！", "提示", JOptionPane.INFORMATION_MESSAGE);        return new MyTableModel(null, columNames);      }      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbPack rowData = (ZcEbPack) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getPackCode();        data[i][col++] = rowData.getPackName();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  //选择中标人的web实体  private class ZcEbBidHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbBidHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        EvalPackProvider provider = (EvalPackProvider) object;        zcEbEvalReport.setProviderName(provider.getProviderName());        bidSelectEdit.setEditObject(zcEbEvalReport);        bidSelectEdit.setValue(provider.getProviderName());      }    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        EvalPackProvider rowData = (EvalPackProvider) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProviderName();        data[i][col++] = rowData.getBidSum();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }}
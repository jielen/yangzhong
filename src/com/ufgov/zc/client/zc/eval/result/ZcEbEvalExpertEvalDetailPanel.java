/**   * @(#) project: GK* @(#) file: ZcEbEvalExpertEvalDetailPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval.result;import java.awt.BorderLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JOptionPane;import javax.swing.JPanel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.SumButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.client.component.zc.EventPropertyName;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.eval.EvalColumnBeanPropertyPairFactory;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.ZcEbEvalItemResult;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;/*** @ClassName: ZcEbEvalExpertEvalDetailPanel* @Description: 专家评审明细结果面板。* @date: 2010-7-5 上午12:04:09* @version: V1.0 * @since: 1.0* @modify: */public class ZcEbEvalExpertEvalDetailPanel extends JPanel {  private static final long serialVersionUID = -8299496960685175387L;  private static final String compoId = "ZC_EB_EVAL_RESULT";  protected RequestMeta requestMeta;  protected IZcEbEvalServiceDelegate zcEbEvalServiceDelegate;  protected List<ColumnBeanPropertyPair> columnPairList;  protected ZcEbEvalPack evalPack;  protected JTablePanel tablePanel;  protected List<ZcEbEvalItemResult> tableDataList;  protected BeanTableModel<ZcEbEvalItemResult> tableModel;  protected SumButton sumButton = new SumButton();  protected JPanel topPanel;  /**   * 顶部工具栏   */  protected JFuncToolBar toolBar;  public ZcEbEvalExpertEvalDetailPanel(ZcEbEvalPack evalPack) {    this.evalPack = evalPack;    init();  }  public void init() {    requestMeta = WorkEnv.getInstance().getRequestMeta();    zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory.create(IZcEbEvalServiceDelegate.class, "zcEbEvalServiceDelegate");    selfInit();    toolBar = new JFuncToolBar();    addToolBarComponent(toolBar);    initComponents();  }  public void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(sumButton);    // 初始化按钮的action事件    sumButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        sumExpertRes();      }    });  }  protected void sumExpertRes() {    Map<String, String> paramMap = new HashMap<String, String>();    paramMap.put("PROJ_CODE", evalPack.getProjCode());    paramMap.put("PACK_CODE", evalPack.getPackCode());    paramMap.put("FORML_CODE", evalPack.getFormulaCode());    paramMap.put("IS_RE_GEN", "N");    if (hasGen()) {      int sel = JOptionPane.showConfirmDialog(this, "已经汇总过该标段的评审结果，是否重新汇总", "确认", JOptionPane.YES_NO_OPTION);      if (JOptionPane.OK_OPTION == sel) {        paramMap.put("IS_RE_GEN", "Y");      } else {        return;      }    }    String genRes = zcEbEvalServiceDelegate.genExpertEvalPackSumResult(paramMap, requestMeta);    if (null != genRes && !"".equals(genRes)) {      JOptionPane.showMessageDialog(this, genRes, "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      JOptionPane.showMessageDialog(this, "汇总成功", "提示", JOptionPane.INFORMATION_MESSAGE);      fireDataLoadedPropertyChange();    }  }  public void fireDataLoadedPropertyChange() {    firePropertyChange(EventPropertyName.EXPERT_RES_GENED_PROPERTY_NAME, false, true);  }  /**   *   * @Description: 是否已经存在汇总结果。  * @return boolean 返回类型  * @since 1.0   */  @SuppressWarnings("unchecked")  private boolean hasGen() {    Map<String, String> paraMap = new HashMap<String, String>();    paraMap.put("projectCode", evalPack.getProjCode());    paraMap.put("packCode", evalPack.getPackCode());    List list = zcEbEvalServiceDelegate.getExpertEvalPackResList(paraMap, requestMeta);    if (null != list && !list.isEmpty()) {      return true;    }    return false;  }  public void refreshData() {    tableModel.refreshData(tableDataList);    System.out.println("refreshData()");  }  /**   *   * @Description:个性化的初始化工作，主要用于设置取数条件等参数。  * @return void 返回类型  * @since 1.0   */  protected void selfInit() {  }  public ZcEbEvalPack getEvalPack() {    return evalPack;  }  public void setEvalPack(ZcEbEvalPack evalPack) {    this.evalPack = evalPack;  }  protected void initComponents() {    initTablePanel();    initTableModel();    setLayout(new BorderLayout());    topPanel = new JPanel();    topPanel.setLayout(new BorderLayout());    topPanel.add(toolBar, BorderLayout.NORTH);    add(topPanel, BorderLayout.NORTH);    add(tablePanel, BorderLayout.CENTER);    addControlComponents();  }  protected void addControlComponents() {  }  protected void initTablePanel() {    tablePanel = new JTablePanel();    tablePanel.init();    tablePanel.getSearchBar().setVisible(true);    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_table");  }  protected void initTableModel() {    tablePanel.getTable().setShowCheckedColumn(false);    tableDataList = new ArrayList<ZcEbEvalItemResult>();    tableModel = new BeanTableModel<ZcEbEvalItemResult>() {      private static final long serialVersionUID = -7329188957196322129L;      @Override      public boolean isCellEditable(int row, int column) {        String columnID = super.getColumnIdentifier(column);        return isCellEditAble(columnID);      }    };    tableModel.setEditable(false);    tableModel.setOidFieldName("resultCode");    loadData();    tableModel.setDataBean(tableDataList, getColumnPairList());    tablePanel.setTableModel(tableModel);    transTableColumn();  }  protected boolean isCellEditAble(String columnID) {    return false;  }  @SuppressWarnings("unchecked")  public void loadData() {    Map<String, String> getDataParaMap = new HashMap<String, String>();    getDataParaMap.put("FORMULA_CODE", evalPack.getFormulaCode());    getDataParaMap.put("ITEM_TYPE", EvalItemType.SCORE);    getDataParaMap.put("PACK_CODE", evalPack.getPackCode());    //    List list = zcEbEvalServiceDelegate.getZcEbExpertEvalResultList(getDataParaMap, requestMeta);    //    tableDataList.addAll(list);    tableModel.setDataBean(tableDataList, getColumnPairList());  }  protected void transTableColumn() {    ZcUtil.translateColName(tablePanel.getTable());  }  protected List<ColumnBeanPropertyPair> getColumnPairList() {    List<ColumnBeanPropertyPair> list = new ArrayList<ColumnBeanPropertyPair>();    list.addAll(EvalColumnBeanPropertyPairFactory.getExpertEvalScoreColumnList());    return list;  }}
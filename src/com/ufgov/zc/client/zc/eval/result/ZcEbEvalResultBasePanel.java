/**   * @(#) project: GK* @(#) file: ZcEbEvalResultBasePanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval.result;import java.awt.BorderLayout;import java.util.ArrayList;import java.util.List;import javax.swing.JPanel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.eval.EvalColumnBeanPropertyPairFactory;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcEvalFiled;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.model.ZcEbPackEvalResult;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;public class ZcEbEvalResultBasePanel extends JPanel {  private static final long serialVersionUID = -3317626282428849995L;  private String complianceValsetID = "VS_ZC_EB_COMPLIANCE_VALUE";  protected ZcEbEvalResultBasePanel self = this;  protected RequestMeta requestMeta;  protected IZcEbEvalServiceDelegate zcEbEvalServiceDelegate;  protected List<ColumnBeanPropertyPair> columnPairList;  protected List<ZcEbPackEvalResult> tableDataList;  protected BeanTableModel<ZcEbPackEvalResult> tableModel;  protected ZcEbEvalPack evalPack;  protected JTablePanel tablePanel;  protected JPanel topPanel;  /**   * 顶部工具栏   */  protected JFuncToolBar toolBar;  public ZcEbEvalResultBasePanel() {  }  public ZcEbEvalResultBasePanel(ZcEbEvalPack evalPack) {    this.evalPack = evalPack;    init();  }  public void init() {    requestMeta = WorkEnv.getInstance().getRequestMeta();    zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory.create(IZcEbEvalServiceDelegate.class, "zcEbEvalServiceDelegate");    selfInit();    toolBar = new JFuncToolBar();    addToolBarComponent(toolBar);    initComponents();    setTableCellRenderer();  }  public void addToolBarComponent(JFuncToolBar toolBar) {  }  protected void setTableCellRenderer() {    SwingUtil.setTableCellRenderer(tablePanel.getTable(), ZcEvalFiled.FIELD_NAME_COMPLIANCE_EVAL_VALUE, new AsValCellRenderer(complianceValsetID));  }  public void refreshData() {    tableModel.refreshData(tableDataList);  }  public void refreshData(List list) {    tableModel.refreshData(list);  }  /**   *   * @Description:个性化的初始化工作，主要用于设置取数条件等参数。  * @return void 返回类型  * @since 1.0   */  protected void selfInit() {  }  public ZcEbEvalPack getEvalPack() {    return evalPack;  }  public void setEvalPack(ZcEbEvalPack evalPack) {    this.evalPack = evalPack;  }  protected void initComponents() {    initTablePanel();    initTableModel();    setLayout(new BorderLayout());    topPanel = new JPanel();    topPanel.setLayout(new BorderLayout());    topPanel.add(toolBar, BorderLayout.NORTH);    add(topPanel, BorderLayout.NORTH);    add(tablePanel, BorderLayout.CENTER);    addControlComponents();  }  protected void addControlComponents() {  }  protected void initTablePanel() {    tablePanel = new JTablePanel();    tablePanel.init();    //tablePanel.getSearchBar().setVisible(false);    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_table");  }  protected void initTableModel() {    tablePanel.getTable().setShowCheckedColumn(false);    tableDataList = new ArrayList<ZcEbPackEvalResult>();    tableModel = new BeanTableModel<ZcEbPackEvalResult>() {      private static final long serialVersionUID = -7329188957196322129L;      @Override      public boolean isCellEditable(int row, int column) {        String columnID = super.getColumnIdentifier(column);        return isCellEditAble(columnID);      }    };    tableModel.setEditable(false);    tableModel.setOidFieldName("resultCode");    loadData();    tableModel.setDataBean(tableDataList, getColumnPairList());    tablePanel.setTableModel(tableModel);    transTableColumn();  }  protected boolean isCellEditAble(String columnID) {    return false;  }  public void loadData() {    //tableDataList.addAll(getDemoDataList());    //tableModel.setDataBean(tableDataList, getColumnPairList());  }  protected void transTableColumn() {    ZcUtil.translateColName(tablePanel.getTable());  }  protected List<ColumnBeanPropertyPair> getColumnPairList() {    List<ColumnBeanPropertyPair> list = new ArrayList<ColumnBeanPropertyPair>();    list.addAll(EvalColumnBeanPropertyPairFactory.getEvalColumnBeanList(EvalItemType.SCORE));    return list;  }}
/**   * @(#) project: GK* @(#) file: ZcEbZTBFilePanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.Point;import java.awt.Rectangle;import java.awt.Toolkit;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.io.File;import java.util.ArrayList;import java.util.Enumeration;import java.util.List;import javax.swing.JDialog;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JProgressBar;import javax.swing.SwingUtilities;import javax.swing.tree.DefaultTreeModel;import com.ufgov.zc.client.zc.activeztb.TbDocService;import com.ufgov.zc.client.zc.ztb.component.MainPanel;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.service.ReadTbFileService;import com.ufgov.zc.client.zc.ztb.util.EventPropertyName;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.common.zc.model.EvalExpert;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;/*** @ClassName: ZcEbZTBFilePanel* @Description: 评标招投标文件显示基础面板。* @date: 2010-5-7 下午04:48:15* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbEvalZTBFileBasePanel extends MainPanel {  private static final long serialVersionUID = -4616322236341764815L;  protected static final boolean tableIsReadOnly = true;  private String ztbFileName;  protected String filePath;  /**   * 招投标文件ID。   */  protected String ztbFileID;  /**   * 招投标文件下载及解压处理类。   */  protected TbDocService tbDocService = new TbDocService();  /**   * 评标标段对象   */  protected ZcEbEvalPack evalPack;  protected EvalExpert evalExpert;  private Thread downLoaderFile;  public EvalExpert getEvalExpert() {    return evalExpert;  }  public void setEvalExpert(EvalExpert evalExpert) {    this.evalExpert = evalExpert;  }  protected JLabel msgLabel;  //显示下载招投标文件的进度的Panel  public ZcEbEvalPortalPanel portalPanel;  //招投标文件是否已经下载过  protected boolean ztbFileExsits;  protected String getFilePath() {    return filePath;  }  protected void setFilePath(String filePath) {    this.filePath = filePath;  }  public ZcEbEvalPack getEvalPack() {    return evalPack;  }  @Override  public void doSplitPaneMove() {    portalPanel.panel.updateUI();  }  public void setEvalPack(ZcEbEvalPack evalPack) {    this.evalPack = evalPack;  }  public String getZtbFileName() {    return ztbFileName;  }  public void setZtbFileName(String ztbFileName) {    this.ztbFileName = ztbFileName;  }  public static long getSerialversionuid() {    return serialVersionUID;  }  @Override  public void paintPanel() {    this.setLayout(new BorderLayout());    this.add(this.splitPane, BorderLayout.CENTER);  }  protected JLabel createMsgLabel(String msg) {    JLabel label = new JLabel(msg);    label.setHorizontalAlignment(SwingUtilities.CENTER);    return label;  }  private static int PROGRESS_BAR_WIDTH = 400;  private static String progressInfoStatus = null;  private static JProgressBar progressBar = null;  private static JProgressBar getProgressBar(int len) {    if (len == 0) {      len = 100;    }    if (progressBar == null) {      progressBar = new JProgressBar(0, len);      progressBar.setStringPainted(true);      progressBar.setBounds(new Rectangle(101, 305, 420, 30));    }    return progressBar;  }  public static void publishProgressMsg(String msg) {    getProgressBar(0).setString(msg);  }  protected void downloadFile(final String fileID, final String providerCode, final String fileType) {    if (null != fileID && !"".equals(fileID.trim())) {      File file = new File(getFilePath());      if (!file.exists()) {        final JDialog progressDialog = new JDialog();        progressDialog.add(getProgressBar(0));        progressDialog.setSize(new Dimension(PROGRESS_BAR_WIDTH, 20));        progressDialog.setLocation(getPosition(PROGRESS_BAR_WIDTH));        progressDialog.setUndecorated(true);        progressDialog.setAlwaysOnTop(true);        progressDialog.setVisible(true);        if ("TB".equals(fileType)) {          portalPanel.providerCombBox.setEnabled(false);        }        downLoaderFile = new Thread(new Runnable() {          public void run() {            if (null != providerCode && !"".equals(providerCode)) {              progressInfoStatus = "正在下载投标文件...";              publishProgressMsg(progressInfoStatus);              Long time1 = System.currentTimeMillis();              System.out.println("开始下载投标文件");              try {                //投标文件存放在文件目录中，从文件目录中取投标文件。                tbDocService.downloadFile(evalPack.getProjCode(), fileID, "FILE");              } catch (Exception e) {                JOptionPane.showMessageDialog(portalPanel, e.getMessage(), "", JOptionPane.ERROR_MESSAGE);                progressDialog.dispose();                return;              }              progressInfoStatus = "下载投标文件完成...";              publishProgressMsg(progressInfoStatus);              System.out.println("下载投标文件完成:" + (System.currentTimeMillis() - time1));            } else {              Long time1 = System.currentTimeMillis();              progressInfoStatus = "正在下载招标文件...";              publishProgressMsg(progressInfoStatus);              System.out.println("开始下载招标文件");              try {                //招标文件存放在数据库中，从数据库中取招标文件。                tbDocService.downloadFile(evalPack.getProjCode(), fileID, "DB");              } catch (Exception e) {                JOptionPane.showMessageDialog(portalPanel, e.getMessage(), "", JOptionPane.ERROR_MESSAGE);                progressDialog.dispose();                return;              }              progressInfoStatus = "下载招标文件完成...";              publishProgressMsg(progressInfoStatus);              System.out.println("下载招标文件完成:" + (System.currentTimeMillis() - time1));            }            if ("TB".equals(fileType)) {              portalPanel.providerCombBox.setEnabled(true);            }            if (leftPane == null) {              System.out.println("---------inintPanel:");              initPanel();            } else {              System.out.println("---------refreshPanel:");              refreshPanel();            }            progressDialog.dispose();          }        });        downLoaderFile.start();      } else {        if (leftPane == null) {          System.out.println("---------inintPanel:");          initPanel();        } else {          System.out.println("---------refreshPanel:");          refreshPanel();        }      }    }  }  private Point getPosition(int barWidth) {    Dimension c = Toolkit.getDefaultToolkit().getScreenSize();    int width = c.width;    int height = c.height;    int x = (width - barWidth) / 2;    int y = height - 80;    return new Point(x, y);  }  public void refreshPanel() {    try {      refreshLeftTreePanel();    } catch (Exception e) {      e.printStackTrace();    }    //    refreshRightPanel();    expandOrClose(true, true);    splitPane.revalidate();    splitPane.repaint();  }  public void refreshLeftTreePanel() {    initLeftFilesTreePanel();  }  @Override  public void initLeftFilesTreePanel() {    //  if (null != singleSeletionTree) {    //      return;    //    }    //    super.initLeftTreePanel();    if (null == getZtbFileName() || "".equals(getZtbFileName())) {      return;    }    if (!checkFileExits(getZtbFileName())) {      ztbFileExsits = false;      return;    }    ztbFileExsits = true;    ReadTbFileService readTbFileService = new ReadTbFileService();    System.out.println("初始化树");    singleSeletionTree = readTbFileService.createZTBSTreePanel(getZtbFileName(), this);    List<SmartTreeNode> hideNodes = new ArrayList<SmartTreeNode>();    hideNode(evalPack.getPackCode(), hideNodes);    singleSeletionTree.getTree().setRootVisible(true);    openAndProtect = true;    singleSeletionTree.addPropertyChangeListener(EventPropertyName.MOUSE_DBCLICK_PROPERTY_NAME, new PropertyChangeListener() {      public void propertyChange(PropertyChangeEvent evt) {        showTreeNodeInfo(getFilePath() + File.separator + singleSeletionTree.getCurrentNode().getNodesFullPath()        + singleSeletionTree.getCurrentNode().getFileExtension());      }    });  }  /**   *   * @Description: 隐藏数节点，招标文件树只显示招标招标文件节点和当前评标分包的标段信息。  * @return void 返回类型  * @since 1.0   */  private void hideNode(String packCode, List<SmartTreeNode> hideNodes) {    SmartTreeNode rootNode = singleSeletionTree.getTreeNode();    hidePackNode(rootNode, packCode, hideNodes);    for (int i = 0; i < hideNodes.size(); i++) {      ((DefaultTreeModel) singleSeletionTree.getTree().getModel()).removeNodeFromParent(hideNodes.get(i));    }    singleSeletionTree.getTree().validate();    singleSeletionTree.getTree().repaint();  }  private void hidePackNode(SmartTreeNode projNode, String packCode, List<SmartTreeNode> hideNodes) {    Enumeration<?> enumeration = projNode.children();    while (enumeration.hasMoreElements()) {      SmartTreeNode node = (SmartTreeNode) enumeration.nextElement();      if (!node.getNodeCode().equals(packCode)) {        hideNodes.add(node);      } else {        hideZTBNode(node, hideNodes);      }    }  }  //  private void hideZTBNode(SmartTreeNode packCodeNode, List<SmartTreeNode> hideNodes) {    Enumeration<?> enumeration = packCodeNode.children();    while (enumeration.hasMoreElements()) {      SmartTreeNode node = (SmartTreeNode) enumeration.nextElement();      if (this instanceof ZcEbEvalZBFilePanel) {        if (node.getNodeType().equals(GV.NODE_TYPE_TB)) {          hideNodes.add(node);        }      } else {        if (node.getNodeType().equals(GV.NODE_TYPE_ZB)) {          hideNodes.add(node);        }      }    }  }  private boolean checkFileExits(String fileName) {    File file = new File(fileName);    if (file.exists()) {      return true;    }    return false;  }}
/**   * @(#) project: GK* @(#) file: ZcEbEvalEditPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.FlowLayout;import java.awt.Font;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.SwingUtilities;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import com.ufgov.smartclient.component.table.cellrenderer.NumberCellRenderer;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.EvalPackToTableModelConverter;import com.ufgov.zc.client.common.converter.zc.ZcEbEvalProviderResultToTableModelConverter;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.JTextAreaLabel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.celleditor.DateCellEditor;import com.ufgov.zc.client.component.table.celleditor.MoneyCellEditor;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.cellrenderer.DateCellRenderer;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcEvalFiled;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.ZcEbEvalItemResult;/*** @ClassName: ZcEbEvalEditPanel* @Description: 评标编辑面板。负责具体指标项表格的编辑保存处理。* @date: 2010-4-22 下午04:06:08* @version: V1.0 * @since: 1.0* @author: tianly1* @modify: */public class ZcEbEvalBaseEditPanel extends JPanel {  private static final long serialVersionUID = 4809425300377729549L;  protected static final String compoId = "ZC_EB_EVAL_PACK";  private String complianceValsetID = "VS_ZC_EB_COMPLIANCE_VALUE";  protected RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private ZcEbEvalBaseEditPanel self = this;  private ZcEbEvalBasePanel basePanel;  public JTablePanel getTablePanel() {    return tablePanel;  }  public void setTablePanel(JTablePanel tablePanel) {    this.tablePanel = tablePanel;  }  protected JTablePanel tablePanel = new JTablePanel();  //显示对比供应商打分情况的表格  protected JTablePanel tablePanel2 = new JTablePanel();  private JTabbedPane tabbedPane;  private ZcEbEvalItemResult zcEbEvalItemResult = new ZcEbEvalItemResult();  private EvalFormulaTreeNode evalFormulaTreeNode;  protected EvalPackToTableModelConverter modelConverter = new EvalPackToTableModelConverter();  protected ZcEbEvalProviderResultToTableModelConverter modelConverter2;  private EvalFormulaTreePanel treePanel;  private JPanel topPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));  private String formulaType;  JLabel scoreLabel = new JLabel("");  private JLabel itemLabel = new JLabel();  private JTextAreaLabel areaLabel;  StringBuffer itemDesc = new StringBuffer();  public ZcEbEvalBaseEditPanel(EvalFormulaTreeNode evalFormulaTreeNode, ZcEbEvalBasePanel basePanel) {    this.basePanel = basePanel;    this.evalFormulaTreeNode = evalFormulaTreeNode;    this.zcEbEvalItemResult = (ZcEbEvalItemResult) evalFormulaTreeNode.getUserObject();    formulaType = zcEbEvalItemResult.getItemType();    tablePanel.init();    tablePanel.getSearchBar().setVisible(false);    tablePanel2.init();    tablePanel2.getSearchBar().setVisible(false);    initComponent();    intTablePanel();    if (formulaType.equals(EvalItemType.COMPLIANICE)) {      tablePanel.setTableModel(EvalPackToTableModelConverter.convertComplItemTableData(zcEbEvalItemResult.getChildItemList(), basePanel.canEdit));      ZcUtil.translateColName(tablePanel.getTable(), EvalPackToTableModelConverter.getEvalComplFormualInfo());      setComplTabledetailEditor(tablePanel.getTable());      addComplItemTableLisenter(tablePanel.getTable());    } else {      tablePanel.setTableModel(EvalPackToTableModelConverter.convertScoreItemTableData(zcEbEvalItemResult.getChildItemList(), basePanel.canEdit));      ZcUtil.translateColName(tablePanel.getTable(), EvalPackToTableModelConverter.getEvalScoreFormualInfo());      setScoreTabledetailEditor(tablePanel.getTable());      addScoreItemTableLisenter(tablePanel.getTable());    }    //    //    //    addKeyListener(tablePanel.getTable());    adddMouseListener(tablePanel.getTable());  }  private void initComponent() {    setLayout(new BorderLayout());    initToolBar();    this.add(topPanel, BorderLayout.NORTH);    JPanel panel = new JPanel();    panel.setLayout(new BorderLayout());    panel.add(tablePanel, BorderLayout.CENTER);    areaLabel = new JTextAreaLabel();    areaLabel.setLineWrap(true);    areaLabel.setFont(new Font("宋体", Font.BOLD, 15));    areaLabel.setForeground(Color.BLUE);    panel.add(areaLabel, BorderLayout.SOUTH);    this.add(panel, BorderLayout.CENTER);    tabbedPane = new JTabbedPane();    tabbedPane.add("供应商评审情况", tablePanel2);    this.add(tabbedPane, BorderLayout.SOUTH);  }  private void initToolBar() {    scoreLabel.setFont(new Font("宋体", Font.BOLD, 15));    scoreLabel.setForeground(Color.blue);    itemLabel.setFont(new Font("宋体", Font.BOLD, 15));    itemLabel.setForeground(Color.blue);    if (formulaType.equals(EvalItemType.COMPLIANICE)) {      itemLabel.setText(LangTransMeta.translate("ZC_EB_COMPLIANCE_RESULT") + ":");    } else {      itemLabel.setText(LangTransMeta.translate("ZC_EB_EVAL_SCORE") + ":");    }    topPanel.add(itemLabel);    topPanel.add(scoreLabel);    if (EvalItemType.SCORE.equals(formulaType)) {      if (zcEbEvalItemResult.getExpertEvalScore() != null) {        scoreLabel.setText(zcEbEvalItemResult.getExpertEvalScore().toString());      }    } else {      scoreLabel.setText(AsValDataCache.getName(complianceValsetID, zcEbEvalItemResult.getComplianceEvalValue()));    }  }  public void refreshData(EvalFormulaTreeNode evalFormulaTreeNode) {    this.evalFormulaTreeNode = evalFormulaTreeNode;    this.zcEbEvalItemResult = (ZcEbEvalItemResult) evalFormulaTreeNode.getUserObject();    intTablePanel();    intItemDesc(zcEbEvalItemResult);  }  private void intTablePanel() {    if (zcEbEvalItemResult.getItemType().equals(EvalItemType.COMPLIANICE)) {      if (null != zcEbEvalItemResult.getComplianceEvalValue()) {        scoreLabel.setText(AsValDataCache.getName(complianceValsetID, zcEbEvalItemResult.getComplianceEvalValue()));      }      if (zcEbEvalItemResult.getChildItemList() == null || zcEbEvalItemResult.getChildItemList().size() == 0) {        List list = new ArrayList();        list.add(zcEbEvalItemResult);        tablePanel.setTableModel(EvalPackToTableModelConverter.convertComplItemTableData(list, basePanel.canEdit));      } else {        tablePanel.setTableModel(EvalPackToTableModelConverter.convertComplItemTableData(zcEbEvalItemResult.getChildItemList(), basePanel.canEdit));      }      setComplTabledetailEditor(tablePanel.getTable());      addComplItemTableLisenter(tablePanel.getTable());      ZcUtil.translateColName(tablePanel.getTable(), EvalPackToTableModelConverter.getEvalComplFormualInfo());    } else {      if (null != zcEbEvalItemResult.getExpertEvalScore()) {        scoreLabel.setText(zcEbEvalItemResult.getExpertEvalScore().toString());      } else {        scoreLabel.setText("");      }      if (zcEbEvalItemResult.getChildItemList() == null || zcEbEvalItemResult.getChildItemList().size() == 0) {        List list = new ArrayList();        list.add(zcEbEvalItemResult);        tablePanel.setTableModel(EvalPackToTableModelConverter.convertScoreItemTableData(list, basePanel.canEdit));      } else {        tablePanel.setTableModel(EvalPackToTableModelConverter.convertScoreItemTableData(zcEbEvalItemResult.getChildItemList(), basePanel.canEdit));      }      setScoreTabledetailEditor(tablePanel.getTable());      addScoreItemTableLisenter(tablePanel.getTable());      ZcUtil.translateColName(tablePanel.getTable(), EvalPackToTableModelConverter.getEvalScoreFormualInfo());    }    //获取供应商的评审信息。    modelConverter2 = new ZcEbEvalProviderResultToTableModelConverter(basePanel.portalPanel.providerDataList);    List itemList = new ArrayList();    Map map2 = new HashMap<String, String>();    if (evalFormulaTreeNode.getChildCount() > 0) {      for (int i = 0; i < evalFormulaTreeNode.getChildCount(); i++) {        List providerEvalResultList = new ArrayList(basePanel.portalPanel.providerDataList.size() + 1);        providerEvalResultList.add(((EvalFormulaTreeNode) evalFormulaTreeNode.getChildAt(i)).getName());        for (int j = 0; j < basePanel.portalPanel.providerDataList.size(); j++) {          if (formulaType.equals(EvalItemType.COMPLIANICE)) {            ZcEbEvalItemResult item = getZcEbEvalItemResultByCode(basePanel.portalPanel.providerDataList.get(j).getComplEvalList(),            ((EvalFormulaTreeNode) evalFormulaTreeNode.getChildAt(i)).getCode());            providerEvalResultList.add(item == null || item.getComplianceEvalValue() == null ? "" : (item.getComplianceEvalValue().equals("1") ? "通过"            : "不通过"));          } else {            ZcEbEvalItemResult item = getZcEbEvalItemResultByCode(basePanel.portalPanel.providerDataList.get(j).getScoreEvalList(),            ((EvalFormulaTreeNode) evalFormulaTreeNode.getChildAt(i)).getCode());            providerEvalResultList.add(item == null ? "" : (item.getExpertEvalScore() == null ? "" : item.getExpertEvalScore().toString()));          }        }        itemList.add(providerEvalResultList);      }    } else {      List providerEvalResultList = new ArrayList(basePanel.portalPanel.providerDataList.size() + 1);      providerEvalResultList.add(evalFormulaTreeNode.getName());      for (int j = 0; j < basePanel.portalPanel.providerDataList.size(); j++) {        if (formulaType.equals(EvalItemType.COMPLIANICE)) {          ZcEbEvalItemResult item = getZcEbEvalItemResultByCode(basePanel.portalPanel.providerDataList.get(j).getComplEvalList(), evalFormulaTreeNode          .getCode());          providerEvalResultList.add(item == null || item.getComplianceEvalValue() == null ? "" : (item.getComplianceEvalValue().equals("1") ? "通过"          : "不通过"));        } else {          ZcEbEvalItemResult item = getZcEbEvalItemResultByCode(basePanel.portalPanel.providerDataList.get(j).getScoreEvalList(), evalFormulaTreeNode          .getCode());          providerEvalResultList.add(item == null ? "" : (item.getExpertEvalScore() == null ? "" : item.getExpertEvalScore().toString()));        }      }      itemList.add(providerEvalResultList);    }    tablePanel2.setTableModel(modelConverter2.convertToTableModel(itemList));  }  private void intItemDesc(ZcEbEvalItemResult item) {    itemDesc.delete(0, itemDesc.length());    if (item.getChildItemList().size() > 0) {      itemDesc.append("该指标存在子指标，请对子指标进行评审！" + "\n");    }    //    if (item.getFormula() != null && !"".equals(item.getFormula())) {    //      itemDesc.append(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_FORMULA) + ": " + item.getFormula().trim() + "\n");    //    }    if (item.getDescription() != null) {      itemDesc.append(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_DESCRIPTION) + ": " + item.getDescription().trim()      + "\n");    }    areaLabel.setText(itemDesc.toString());  }  private void setComplTabledetailEditor(final JPageableFixedTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    final AsValComboBoxCellEditor asValComboBoxCellEditor = new AsValComboBoxCellEditor(complianceValsetID);    SwingUtil.setTableCellEditor(table, "EVAL_DATE", new DateCellEditor());    SwingUtil.setTableCellRenderer(table, "EVAL_DATE", new DateCellRenderer());    SwingUtil.setTableCellEditor(table, "COMPLIANCE_EVAL_VALUE", asValComboBoxCellEditor);    SwingUtil.setTableCellRenderer(table, "COMPLIANCE_EVAL_VALUE", new AsValCellRenderer(complianceValsetID));    //    SwingUtil.setTableCellEditor(table, "ZHONGXIN_AUDIT_VALUE", asValComboBoxCellEditor);    //    SwingUtil.setTableCellRenderer(table, "ZHONGXIN_AUDIT_VALUE", new AsValCellRenderer(complianceValsetID));  }  private void setScoreTabledetailEditor(JPageableFixedTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    NumberCellRenderer numberCellRenderer = new NumberCellRenderer();    SwingUtil.setTableCellRenderer(table, ZcEvalFiled.FIELD_NAME_EVAL_EXPERT_CODE, numberCellRenderer);    SwingUtil.setTableCellEditor(table, "STANDARD_SCORE", new MoneyCellEditor(false, false));    SwingUtil.setTableCellRenderer(table, "STANDARD_SCORE", numberCellRenderer);    SwingUtil.setTableCellEditor(table, "EXPERT_EVAL_SCORE", new MoneyCellEditor(false, false) {      public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {        return super.getTableCellEditorComponent(table, value, isSelected, row, column);      }    });    SwingUtil.setTableCellRenderer(table, "EXPERT_EVAL_SCORE", numberCellRenderer);    SwingUtil.setTableCellEditor(table, "ADJUST_SCORE", new MoneyCellEditor(false, false));    SwingUtil.setTableCellRenderer(table, "ADJUST_SCORE", numberCellRenderer);    SwingUtil.setTableCellEditor(table, "EVAL_DATE", new DateCellEditor());    SwingUtil.setTableCellRenderer(table, "EVAL_DATE", new DateCellRenderer());  }  private void addComplItemTableLisenter(final JPageableFixedTable table) {    final BeanTableModel model = (BeanTableModel) (table.getModel());    model.addTableModelListener(new TableModelListener() {      public void tableChanged(TableModelEvent e) {        if (e.getColumn() >= 0 && ("COMPLIANCE_EVAL_VALUE".equals(model.getColumnIdentifier(e.getColumn())))) {          if (e.getType() == TableModelEvent.UPDATE) {            int k = table.getSelectedRow();            if (k < 0)              return;            ZcEbEvalItemResult item = (ZcEbEvalItemResult) (model.getBean(table.convertRowIndexToView(k)));            if (item.getComplianceEvalValue() != null) {              updateParentRes(item);              item.setEvalDate(new Date());              scoreLabel.setText(AsValDataCache.getName(complianceValsetID, zcEbEvalItemResult.getComplianceEvalValue()));              treePanel.repaint();            }            model.fireTableRowsUpdated(k, k);          }        }      }    });  }  private void adddMouseListener(final JPageableFixedTable table) {    table.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() == 1 && SwingUtilities.isLeftMouseButton(e)) {          int k = table.getSelectedRow();          if (k < 0)            return;          itemDesc.delete(0, itemDesc.length());          ZcEbEvalItemResult item = (ZcEbEvalItemResult) (((BeanTableModel) table.getModel()).getBean(table.convertRowIndexToView(k)));          if (item.getChildItemList().size() > 0) {            itemDesc.append("该指标存在子指标，请对子指标进行评审！" + "\n");          }          //          if (item.getFormula() != null && !"".equals(item.getFormula())) {          //            itemDesc.append(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_FORMULA) + ": " + item.getFormula().trim()          //              + "\n");          //          }          if (item.getDescription() != null) {            itemDesc.append(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_DESCRIPTION) + ": "            + item.getDescription().trim() + "\n");          }          areaLabel.setText(itemDesc.toString());        }      }    });  }  private void addScoreItemTableLisenter(final JPageableFixedTable table) {    final BeanTableModel model = (BeanTableModel) (table.getModel());    model.addTableModelListener(new TableModelListener() {      public void tableChanged(TableModelEvent e) {        if (e.getColumn() >= 0 && ("EXPERT_EVAL_SCORE".equals(model.getColumnIdentifier(e.getColumn())))) {          if (e.getType() == TableModelEvent.UPDATE) {            int k = table.getSelectedRow();            if (k < 0)              return;            ZcEbEvalItemResult item = (ZcEbEvalItemResult) (model.getBean(table.convertRowIndexToView(k)));            if (item.getExpertEvalScore() != null) {              //打分的分值不能大于标准分值。              if (item.getExpertEvalScore().compareTo(item.getStandardScore()) == 1) {                item.setExpertEvalScore(null);                areaLabel.setText("打分分值不能大于标准分值！");                return;              }              //打分分值不能小于最少得分。              if (item.getLeastScore() != null && item.getExpertEvalScore().compareTo(item.getLeastScore()) == -1) {                item.setExpertEvalScore(null);                areaLabel.setText("打分分值不能小于最少得分！");                return;              }              item.setEvalDate(new Date());              updateParentRes(item);              treePanel.repaint();              scoreLabel.setText(zcEbEvalItemResult.getExpertEvalScore().toString());            }            model.fireTableRowsUpdated(k, k);          }        }      }    });  }  public EvalFormulaTreePanel getTreePanel() {    return treePanel;  }  public void setTreePanel(EvalFormulaTreePanel treePanel) {    this.treePanel = treePanel;  }  public void stopTableEditing() {    JPageableFixedTable biTable = this.tablePanel.getTable();    if (biTable.isEditing()) {      biTable.getCellEditor().stopCellEditing();    }  }  //评标的分值修改了之后，逐级修改上级评分的结果  private void updateParentRes(ZcEbEvalItemResult itemResult) {    ZcEbEvalItemResult parentItemResult = itemResult.getParentEvalItemResult();    parentItemResult.updateEvalResult();    parentItemResult.setEvalDate(new Date());    if (parentItemResult.getParentItemCode() != null) {      updateParentRes(parentItemResult);    }  }  private ZcEbEvalItemResult getZcEbEvalItemResultByCode(List<ZcEbEvalItemResult> list, String itemCode) {    for (ZcEbEvalItemResult item : list) {      if (item.getItemCode().equals(itemCode)) {        return item;      }    }    return null;  }}
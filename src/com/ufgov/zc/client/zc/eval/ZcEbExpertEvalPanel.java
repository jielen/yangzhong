/**   * @(#) project: ZFCG* @(#) file: CreateExpertEvalTable.java* * Copyright 2011 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.Dimension;import java.awt.Font;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.io.File;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.SwingUtilities;import javax.swing.border.TitledBorder;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTableHeader;import com.ufgov.smartclient.component.table.cellrenderer.NumberCellRenderer;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbEcbjToTableModelConverter;import com.ufgov.zc.client.common.converter.zc.ZcEbExpertEvalTableToModelConverter;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.JTextAreaLabel;import com.ufgov.zc.client.component.button.CalcButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.table.celleditor.MoneyCellEditor;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.activeztb.TbDocService;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.EvalExpert;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.EvalPackProvider;import com.ufgov.zc.common.zc.model.FormulaRootCode;import com.ufgov.zc.common.zc.model.ZcEbEcbj;import com.ufgov.zc.common.zc.model.ZcEbEcbjItem;import com.ufgov.zc.common.zc.model.ZcEbEvalItemResult;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.publish.IZcEbEcbjServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;public class ZcEbExpertEvalPanel extends JPanel {  private ZcEbEvalPack evalPack;  private EvalExpert evalExpert;  public List<EvalPackProvider> providerDataList;  private String formulaType;  private ZcEbExpertEvalPanel self = this;  protected static final String compoId = "ZC_EB_EVAL_PACK";  private String complianceValsetID = "VS_ZC_EB_COMPLIANCE_VALUE";  protected RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  protected JTablePanel tablePanel = new JTablePanel();  protected JTablePanel baojiaTable = new JTablePanel();  private JTabbedPane tabTbPanel = new JTabbedPane();  private SaveButton saveButton = new SaveButton();  private CalcButton calcButton = new CalcButton();  protected JFuncToolBar funcToolBar = new JFuncToolBar();  private ZcEbExpertEvalTableToModelConverter modelConver;  List<ZcEbEvalItemResult> noChildItemList = new ArrayList<ZcEbEvalItemResult>();  List<ZcEbEvalItemResult> parentItemList = new ArrayList<ZcEbEvalItemResult>();  HashMap<String, JPanel> sumarryPanelCach = new HashMap<String, JPanel>();  private TbDocService tb = new TbDocService();  private String ecbjFileDownLoadPath;  private boolean canEdit = false;  //显示对比供应商打分情况的表格  private JTabbedPane tabPanel1;  public JTextAreaLabel text1;  public JTextAreaLabel text2;  public IZcEbEvalServiceDelegate zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory.create(IZcEbEvalServiceDelegate.class,  "zcEbEvalServiceDelegate");  public IZcEbEcbjServiceDelegate zcEbEcbjServiceDelegate = (IZcEbEcbjServiceDelegate) ServiceFactory.create(IZcEbEcbjServiceDelegate.class,  "zcEbEcbjServiceDelegate");  public ZcEbExpertEvalPanel(ZcEbEvalPack evalPack, EvalExpert evalExpert, List<EvalPackProvider> providerDataList, boolean isScoreEval) {    this.evalPack = evalPack;    this.evalExpert = evalExpert;    this.providerDataList = providerDataList;    if (isScoreEval) {      if (evalPack.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_TECH_EVAL)) {        this.formulaType = EvalItemType.SCORE;        canEdit = true;      }    } else {      if (evalPack.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_FU_HE_EVAL)) {        this.formulaType = EvalItemType.COMPLIANICE;        canEdit = true;      }    }    initComponent();    intTablePanel();  }  private void initComponent() {    setLayout(new BorderLayout());    initToolBar();    JPanel panel = new JPanel(new BorderLayout());    String providerStr = "选中供应商：";    text1 = new JTextAreaLabel();    text1.setFont(new Font("宋体", Font.BOLD, 15));    text1.setForeground(Color.BLUE);    text1.setText(providerStr);    panel.add(text1, BorderLayout.NORTH);    tablePanel.init();    tablePanel.getSearchBar().setVisible(false);    panel.add(tablePanel, BorderLayout.CENTER);    String itemDesc = "";    text2 = new JTextAreaLabel();    text2.setLineWrap(true);    text2.setFont(new Font("宋体", Font.BOLD, 15));    text2.setForeground(Color.BLUE);    text2.setText(providerStr);    panel.add(text2, BorderLayout.SOUTH);    tabPanel1 = new JTabbedPane();    tabPanel1.add("专家打分一览表", panel);    JPanel bjPanel = createBjTalbe();    tabPanel1.add("供应商报价信息", bjPanel);    this.add(funcToolBar, BorderLayout.NORTH);    this.add(tabPanel1, BorderLayout.CENTER);  }  private JPanel createBjTalbe() {    JPanel panel = new JPanel(new GridLayout(2, 1));    JTabbedPane tabPanel1 = new JTabbedPane();    //添加供应商的报价表格信息    baojiaTable.init();    baojiaTable.getSearchBar().setVisible(false);    ElementConditionDto dto = new ElementConditionDto();    dto.setProjCode(evalPack.getProjCode());    dto.setZcText0(evalPack.getPackCode());    List<ZcEbEcbj> ecbjList = zcEbEcbjServiceDelegate.getZcEbEcbjList(dto, requestMeta);    baojiaTable.setTableModel(ZcEbEcbjToTableModelConverter.convertToTableModel(ecbjList));    baojiaTable.getTable().addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() == 1 && SwingUtilities.isLeftMouseButton(e)) {          MyTableModel model = (MyTableModel) baojiaTable.getTable().getModel();          int selectRows = baojiaTable.getTable().getSelectedRow();          List dataList = ((MyTableModel) baojiaTable.getTable().getModel()).getList();          int accordDataRow = baojiaTable.getTable().convertRowIndexToModel(selectRows);          ZcEbEcbj ecbj = (ZcEbEcbj) dataList.get(accordDataRow);          tabTbPanel.removeAll();          tabTbPanel.add("供应商的报价一览表", createTbylbPanel(ecbj));        }      }    });    tabPanel1.add("供应商的报价信息", baojiaTable);    panel.add(tabPanel1);    //供应商的报价一栏表    tabTbPanel = new JTabbedPane();    tabTbPanel.add("供应商的报价一览表", new JPanel());    panel.add(tabTbPanel);    return panel;  }  private JPanel createTbylbPanel(ZcEbEcbj ecjb) {    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText0(ecjb.getSignupPackId());    List<ZcEbEcbjItem> list = zcEbEcbjServiceDelegate.getZcEbEcbjItemList(dto, requestMeta);    JPanel panel = new JPanel(new GridLayout(list.size(), 1));    for (int i = 0; i < list.size(); i++) {      ZcEbEcbjItem ecbjItem = list.get(i);      if (ecbjItem.getStatus() != null && (ecbjItem.getStatus().equals(ZcSettingConstants.FIELD_TRANS_ZC_BJ_OPEN))) {        final String key = ecbjItem.getFileId() + "_" + ecbjItem.getPackCode();        JTabbedPane tabPanel = new JTabbedPane();        if (this.sumarryPanelCach.containsKey(key)) {          tabPanel.add("第" + ecbjItem.getBjNo() + "报价", this.sumarryPanelCach.get(key));          panel.add(tabPanel);        } else {          tabPanel.add("第" + ecbjItem.getBjNo() + "报价", createSummaryPn(ecbjItem));          panel.add(tabPanel);        }      }    }    return panel;  }  private JPanel createSummaryPn(ZcEbEcbjItem ecbjItem) {    JPanel panel;    ecbjFileDownLoadPath = ecbjItem.getProjCode() + File.separator + ecbjItem.getPackCode() + File.separator + tb.TB_DOC_TYPE_ECBJ + File.separator    + ecbjItem.getProviderName() + File.separator;    tb.setFileDownloadPath(tb.getDownloadFilePath() + File.separator + ecbjFileDownLoadPath);    File file = new File(tb.getFileDownloadPath() + File.separator + ecbjItem.getFileId());    if (!file.exists()) {      //获取报价金额            File asFile = tb.downLoadEcBjFile(ecbjItem.getFileId());      if (asFile == null) {        JPanel panel1 = new JPanel();        String info = "因为数据库中缺少对应的再次报价表文件数据，此次无法显示具体报价情况...";        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), info, TitledBorder.CENTER, TitledBorder.TOP, new Font(        "宋体", Font.BOLD, 15), Color.RED));        panel1.setPreferredSize(new Dimension(600, 300));        return panel1;      }      ecbjItem.setBjSum(tb.getEcbjSum(file));    }    List<String> paramList = new ArrayList<String>();    paramList.add(ecbjItem.getProjName());    paramList.add(ecbjItem.getPackName());    paramList.add(GV.NODE_NAME_TBYLB);    paramList.add("Y");    panel = tb.getEcbjSummaryTable(file, paramList);    sumarryPanelCach.put(ecbjItem.getFileId() + "_" + ecbjItem.getPackCode(), panel);    return panel;  }  private void initToolBar() {    funcToolBar.setModuleCode("ZC");    funcToolBar.setCompoId(compoId);    if (canEdit) {      funcToolBar.add(saveButton);      if (formulaType.equals(EvalItemType.SCORE)) {        funcToolBar.add(calcButton);      }    }    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 保存        doSave();      }    });    calcButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        //计算        doCalItemRes();      }    });  }  private void intTablePanel() {    //获取表头信息字段    intTableColumnItemList();    //初始化评审数据    initEvalItemList(providerDataList);    modelConver = new ZcEbExpertEvalTableToModelConverter(noChildItemList, this);    /**     * 根据获取的评审指标初始化二维表格     */    tablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    JGroupableTableHeader itemTableHeader = tablePanel.getTable().getTableHeader();    for (int i = 0; i < parentItemList.size(); i++) {      ZcEbEvalItemResult parentItem = parentItemList.get(i);      List<String> childNames = new ArrayList<String>();      for (int j = 0; j < parentItem.getChildItemList().size(); j++) {        if (formulaType.equals(EvalItemType.COMPLIANICE)) {          childNames.add(((ZcEbEvalItemResult) parentItem.getChildItemList().get(j)).getItemName());        } else {          childNames.add(((ZcEbEvalItemResult) parentItem.getChildItemList().get(j)).getItemName() + "("          + ((ZcEbEvalItemResult) parentItem.getChildItemList().get(j)).getStandardScore() + ")");        }      }      itemTableHeader.addColumnGroup(parentItemList.get(i).getItemName(), childNames.toArray());    }    tablePanel.setTableModel(modelConver.convertToTableModel(providerDataList));    //设置表格编辑框类型    if (formulaType.equals(EvalItemType.SCORE)) {      setScoreTabledetailEditor(tablePanel.getTable(), noChildItemList);    } else {      setComplTabledetailEditor(tablePanel.getTable(), noChildItemList);    }    //添加评审表格监听    addTableChangedLisenter(tablePanel.getTable());  }  private void addTableChangedLisenter(final JPageableFixedTable table) {    final MyTableModel model = (MyTableModel) table.getModel();    model.addTableModelListener(new TableModelListener() {      public void tableChanged(TableModelEvent e) {        int col = e.getColumn();        if (col >= 1) {          if (e.getType() == TableModelEvent.UPDATE) {            int row = table.getSelectedRow();            if (row < 0)              return;            /**             * 同步表格里的数据             */            EvalPackProvider provider = providerDataList.get(table.convertRowIndexToView(row));            ZcEbEvalItemResult item = (ZcEbEvalItemResult) provider.getItemMap().get(noChildItemList.get(col - 1).getItemCode());            if (formulaType.equals(EvalItemType.COMPLIANICE)) {              String valueStr = (String) model.getValueAt(row, col);              item.setComplianceEvalValue(valueStr);              if (item.getComplianceEvalValue() != null) {                updateParentRes(item);                item.setEvalDate(new Date());              }            } else {              BigDecimal value = (BigDecimal) model.getValueAt(row, col);              if (value != null) {                item.setExpertEvalScore(value);              }              if (item.getExpertEvalScore() != null) {                //打分的分值不能大于标准分值。                if (item.getExpertEvalScore().compareTo(item.getStandardScore()) == 1) {                  item.setExpertEvalScore(null);                  table.setValueAt(null, row, col);                  JOptionPane.showMessageDialog(self, "打分分值不能大于标准分值", "错误", JOptionPane.ERROR_MESSAGE);                  return;                }                //打分分值不能小于最少得分。                if (item.getLeastScore() != null && item.getExpertEvalScore().compareTo(item.getLeastScore()) == -1) {                  item.setExpertEvalScore(null);                  JOptionPane.showMessageDialog(self, "打分分值不能小于最少得分", "错误", JOptionPane.ERROR_MESSAGE);                  return;                }                item.setEvalDate(new Date());                updateParentRes(item);              }            }            //            table.setModel(modelConver.convertToTableModel(providerDataList));            //            addTableChangedLisenter(table);            //            for (int i = 1; i < table.getColumnCount(); i++) {            //              ZcEbEvalItemResult itemResult = (ZcEbEvalItemResult) provider.getItemMap().get(noChildItemList.get(i - 1).getItemCode());            //              if (formulaType.equals(EvalItemType.COMPLIANICE)) {            //                table.setValueAt(itemResult.getComplianceEvalValue(), row, i);            //              } else {            //                table.setValueAt(itemResult.getExpertEvalScore(), row, i);            //              }            //            }          }        }      }    });  }  //  private void addTableLisenter(final JPageableFixedTable table) {  //    table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {  //      public void valueChanged(ListSelectionEvent e) {  //        if (!e.getValueIsAdjusting()) {  //          final MyTableModel model = (MyTableModel) table.getModel();  //          if (table.getSelectedRows() != null && table.getSelectedRows().length > 0) {  //            int sel = table.convertRowIndexToModel(table.getSelectedRows()[0]);  //            EvalPackProvider provider = (EvalPackProvider) model.getList().get(sel);  //            text1.setText(provider.getProviderName());  //            //第一列是供应商的名称，最后一列是总分列。  //            if (table.getSelectedColumn() < 1 || table.getSelectedColumn() == table.getColumnCount() - 1) {  //              return;  //            }  //              //          }  //  //        }  //      }  //    });  //  }  private void intTableColumnItemList() {    Map map1 = new HashMap();    map1.put("FORMULA_CODE", evalPack.getFormulaCode());    if (formulaType.equals(EvalItemType.COMPLIANICE)) {      map1.put("ITEM_CODE", "CP");      map1.put("ITEM_TYPE", EvalItemType.COMPLIANICE);    } else {      map1.put("ITEM_CODE", "SC");      map1.put("ITEM_TYPE", EvalItemType.SCORE);    }    List<ZcEbEvalItemResult> list = zcEbEvalServiceDelegate.getZcEbEvalFormulaItemList(map1, requestMeta);    for (int i = 0; i < list.size(); i++) {      ZcEbEvalItemResult item = list.get(i);      List childItemList = new ArrayList();      for (int j = 0; j < list.size(); j++) {        ZcEbEvalItemResult childItem = list.get(j);        if (childItem.getParentItemCode() != null) {          if (childItem.getParentItemCode().equals(item.getItemCode())) {            childItem.setParentEvalItemResult(item);            childItemList.add(childItem);          }        }      }      item.setChildItemList(childItemList);      if (item.getChildItemList().size() > 0) {        parentItemList.add(item);      } else {        noChildItemList.add(item);      }    }  }  /**   *   * @Description: 初始化评审指标项  * @return void 返回类型  * @since 1.0   */  private void initEvalItemList(List<EvalPackProvider> providerDataList) {    for (int k = 0; k < providerDataList.size(); k++) {      List<ZcEbEvalItemResult> itemList;      Map map = new HashMap();      if (formulaType.equals(EvalItemType.COMPLIANICE)) {        //添加一个汇总结果：        ZcEbEvalItemResult compItem = new ZcEbEvalItemResult();        compItem.setItemCode(FormulaRootCode.COMPLIANCE);        compItem.setItemType(EvalItemType.COMPLIANICE);        compItem.setItemName(LangTransMeta.translate("ZC_TRANS_FORMUAL_COMPLIANCE"));        providerDataList.get(k).getComplEvalList().add(compItem);        itemList = providerDataList.get(k).getComplEvalList();      } else {        ZcEbEvalItemResult scoreItem = new ZcEbEvalItemResult();        scoreItem.setItemCode(FormulaRootCode.SCORE);        scoreItem.setItemType(EvalItemType.SCORE);        scoreItem.setItemName(LangTransMeta.translate("ZC_TRANS_FORMUAL_SCORE"));        providerDataList.get(k).getScoreEvalList().add(scoreItem);        itemList = providerDataList.get(k).getScoreEvalList();      }      for (int i = 0; i < itemList.size(); i++) {        ZcEbEvalItemResult item = itemList.get(i);        List childItemList = new ArrayList();        for (int j = 0; j < itemList.size(); j++) {          ZcEbEvalItemResult childItem = itemList.get(j);          if (childItem.getParentItemCode() != null) {            if (childItem.getParentItemCode().equals(item.getItemCode())) {              childItem.setParentEvalItemResult(item);              childItemList.add(childItem);            }          }        }        if (childItemList.size() > 0) {          //是否汇总结果          item.setIsCompositeResult("Y");        } else {          item.setIsCompositeResult("N");        }        item.setChildItemList(childItemList);        if (item.getEvalDate() == null) {          item.setPackCode(evalPack.getPackCode());          item.setProviderCode(providerDataList.get(k).getProviderCode());          item.setProviderName(providerDataList.get(k).getProviderName());          item.setProjCode(evalPack.getProjCode());          item.setEvalExpertCode(evalExpert.getExpertCode());          item.setEvalExpert(evalExpert.getExpertName());        }        map.put(item.getItemCode(), item);      }      providerDataList.get(k).setItemMap(map);    }  }  private void setComplTabledetailEditor(JPageableFixedTable table, List<ZcEbEvalItemResult> noChildItemList) {    table.setDefaultEditor(String.class, new TextCellEditor());    AsValCellRenderer asValCellRenderer = new AsValCellRenderer(complianceValsetID);    final AsValComboBoxCellEditor asValComboBoxCellEditor = new AsValComboBoxCellEditor(complianceValsetID);    for (int i = 0; i < noChildItemList.size(); i++) {      SwingUtil.setTableCellEditor(table, noChildItemList.get(i).getItemName(), asValComboBoxCellEditor);      SwingUtil.setTableCellRenderer(table, noChildItemList.get(i).getItemName(), asValCellRenderer);    }  }  private void setScoreTabledetailEditor(JPageableFixedTable table, List<ZcEbEvalItemResult> noChildItemList) {    table.setDefaultEditor(String.class, new TextCellEditor());    NumberCellRenderer numberCellRenderer = new NumberCellRenderer()    {      public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {        if (table.getValueAt(row, column) != null) {          this.setFont(new Font("宋体", Font.BOLD, 18));          this.setText(table.getValueAt(row, column).toString());          this.setBackground(this.getBackground());        } else {          this.setFont(new Font("宋体", Font.BOLD, 18));          this.setText(null);          this.setBackground(Color.LIGHT_GRAY);        }        return this;      }    };    for (int i = 0; i < noChildItemList.size(); i++) {      SwingUtil.setTableCellEditor(table, noChildItemList.get(i).getItemName() + "(" + noChildItemList.get(i).getStandardScore() + ")",      new MoneyCellEditor(false, false));      SwingUtil.setTableCellRenderer(table, noChildItemList.get(i).getItemName() + "(" + noChildItemList.get(i).getStandardScore() + ")",      numberCellRenderer);    }  }  public void stopTableEditing() {    JPageableFixedTable biTable = this.tablePanel.getTable();    if (biTable.isEditing()) {      biTable.getCellEditor().stopCellEditing();    }  }  private void doSave() {    try {      for (int i = 0; i < providerDataList.size(); i++) {        EvalPackProvider provider = providerDataList.get(i);        //采用删插的保存方式。        if (formulaType.equals(EvalItemType.COMPLIANICE)) {          zcEbEvalServiceDelegate.insertEvalItemResultList(provider.getComplEvalList(), requestMeta);        } else {          zcEbEvalServiceDelegate.insertEvalItemResultList(provider.getScoreEvalList(), requestMeta);        }      }    } catch (Exception e) {      UIUtilities.showStaickTraceDialog(e, this, "保存时发生错误", e.getMessage());    }  }  private void doCalItemRes() {  }  //评标的分值修改了之后，逐级修改上级评分的结果  private void updateParentRes(ZcEbEvalItemResult itemResult) {    ZcEbEvalItemResult parentItemResult = itemResult.getParentEvalItemResult();    parentItemResult.updateEvalResult();    parentItemResult.setEvalDate(new Date());    if (parentItemResult.getParentItemCode() != null) {      updateParentRes(parentItemResult);    }  }}
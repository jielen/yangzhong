/**   * @(#) project: GK* @(#) file: ZcEbEvalParamSetPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Font;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.math.BigDecimal;import java.math.RoundingMode;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.EvalPackToTableModelConverter;import com.ufgov.zc.client.common.converter.zc.ZcEbEvalPackProviderToTableModerlConverter;import com.ufgov.zc.client.component.AsValComboBox;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.table.celleditor.DateCellEditor;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.cellrenderer.DateCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.model.AsVal;import com.ufgov.zc.common.zc.model.EvalPackProvider;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.model.ZcEbEvalParam;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;/*** @ClassName: ZcEbEvalParamSetPanel* @Description: 评标参数设置面板。评标参数应该由评标组长或指定人统一设置。每个标段只设置一次。* @date: 2010-5-6 上午08:57:45* @version: V1.0 * @since: 1.0* @author: tianly* @modify: */public class ZcEbEvalParamSetPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = 1526171255843113895L;  private static final String compoId = "ZC_EB_PROJ_CTRL";  private GkBaseDialog parent;  private JTablePanel tablePanel;  private JTablePanel privateTablePanel;  private List<ZcEbEvalParam> manSetParamList = new ArrayList<ZcEbEvalParam>();  private SaveButton saveButton;  private ExitButton exitButton;  private boolean dataIsNew = false;  private ZcEbEvalPack evalPack;  protected Map<String, String> paramMap;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private List<EvalPackProvider> list;  private IZcEbEvalServiceDelegate zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory.create(IZcEbEvalServiceDelegate.class,  "zcEbEvalServiceDelegate");  private ZcEbEvalPackProviderToTableModerlConverter converter = new ZcEbEvalPackProviderToTableModerlConverter();  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    saveButton = new SaveButton();    exitButton = new ExitButton();    toolBar.add(saveButton);    toolBar.add(exitButton);    // 初始化按钮的action事件    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });  }  public Map<String, String> getParamMap() {    return paramMap;  }  public void setParamMap(Map<String, String> paramMap) {    this.paramMap = paramMap;  }  public ZcEbEvalParamSetPanel(ZcEbEvalPack evalPack, GkBaseDialog parent, String tabStatus) {    this.evalPack = evalPack;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("ZC_EB_EVAL_PACK_TITLE"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 30), Color.BLUE));    this.parent = parent;    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();  }  public JComponent createSubBillPanel() {    JPanel panel = new JPanel(new GridLayout(2, 1));    JTabbedPane tabbedPane1 = new JTabbedPane();    tablePanel = new JTablePanel();    tablePanel.init();    privateTablePanel = new JTablePanel();    privateTablePanel.init();    tabbedPane1.add("评审参数设置", tablePanel);    JTabbedPane tabbedPane2 = new JTabbedPane();    tabbedPane2.add("供应商投标报价表格", privateTablePanel);    if (initEvalParamRefeValue() == null) {      JPanel messagePanel = new JPanel();      messagePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "供应商符合性评审未结束，无法确定符合条件的投标报价，", TitledBorder.CENTER,      TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.RED));      tabbedPane2.add("评审参数设置参考数据", messagePanel);    } else {      tabbedPane2.add("评审参数设置参考数据", fieldEditorPanel);    }    panel.add(tabbedPane1);    panel.add(tabbedPane2);    return panel;  }  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    MoneyFieldEditor avgBidSum = new MoneyFieldEditor("平均报价", "avgBidSum");    editorList.add(avgBidSum);    MoneyFieldEditor lowBidSum = new MoneyFieldEditor("最低报价", "lowBidSum");    editorList.add(lowBidSum);    MoneyFieldEditor weightAvgBidSum = new MoneyFieldEditor("加权平均报价", "weightAvgBidSum");    editorList.add(weightAvgBidSum);    MoneyFieldEditor floatBaseSum = new MoneyFieldEditor(true, "浮动基准价", "floatBaseSum");    editorList.add(floatBaseSum);    MoneyFieldEditor floatRate = new MoneyFieldEditor(true, "浮动率%", "floatRate");    editorList.add(floatRate);    AsValFieldEditor paramSetWay = new AsValFieldEditor("浮动依据价格", "paramSetWay", "VS_ZC_EVAL_PARAM_SET_WAY") {      protected void afterChange(AsValComboBox field) {        super.afterChange(field);        if (getValue() != null) {          String value = ((AsVal) getValue()).getValId();          EvalParamrefeValue referValue = (EvalParamrefeValue) this.getEditObject();          if (referValue.getFloatRate() == null) {            referValue.setFloatRate(BigDecimal.ZERO);          }          BigDecimal floatRateValue = new BigDecimal("1").add(referValue.getFloatRate().divide(new BigDecimal("100")));          if (value.equals("1")) {            referValue.setFloatBaseSum(referValue.getLowBidSum().multiply(floatRateValue));          }          if (value.equals("2")) {            referValue.setFloatBaseSum(referValue.getAvgBidSum().multiply(floatRateValue));          }          if (value.equals("3")) {            referValue.setFloatBaseSum(referValue.getWeightAvgBidSum().multiply(floatRateValue));          }          setEditingObject(referValue);        }      }    };    editorList.add(paramSetWay);    return editorList;  }  public void init() {    this.initToolBar(toolBar);    this.setLayout(new BorderLayout());    this.add(toolBar, BorderLayout.NORTH);    this.add(workPanel, BorderLayout.CENTER);    workPanel.setLayout(new BorderLayout());    JComponent tabTable = createSubBillPanel();    if (tabTable != null) {      workPanel.add(tabTable, BorderLayout.CENTER);    }  }  private void refreshData() {    Map map = new HashMap();    map.put("projCode", evalPack.getProjCode());    map.put("packCode", evalPack.getPackCode());    map.put("formulaCode", evalPack.getFormulaCode());    List zcEbEvalParamList = new ArrayList();    zcEbEvalParamList = zcEbEvalServiceDelegate.getEvalParamResultList(map, requestMeta);    if (zcEbEvalParamList == null || zcEbEvalParamList.size() == 0) {      dataIsNew = true;      zcEbEvalParamList = zcEbEvalServiceDelegate.getEvalParamList(map, requestMeta);      formatEvalParam(zcEbEvalParamList);    }    getManSetParam(zcEbEvalParamList);    evalPack.setZcEbEvalParamList(zcEbEvalParamList);    //只显示需要人工设置的参数    tablePanel.setTableModel(EvalPackToTableModelConverter.convertEvalParamTableData(manSetParamList, true));    privateTablePanel.setTableModel(converter.convertToTableModel(list));    // 翻译从表表头列    ZcUtil.translateColName(tablePanel.getTable(), EvalPackToTableModelConverter.getEvalParamInfo());    // 设置从表列类型    setTabledetailEditor(tablePanel.getTable());  }  /**   *   * @Description: TODO(初始化评标参数设置的参考值)  * @return void 返回类型  * @since 1.0   */  private EvalParamrefeValue initEvalParamRefeValue() {    EvalParamrefeValue referValue = new EvalParamrefeValue();    Map providerSelectMap = new HashMap();    providerSelectMap.put("PACK_CODE", evalPack.getPackCode());    providerSelectMap.put("PROJ_CODE", evalPack.getProjCode());    providerSelectMap.put("FILTER_BY_COMPLIANCE_RES", "Y");    //获得符合评审通过的报名供应商情况    list = zcEbEvalServiceDelegate.getProviderList(providerSelectMap, requestMeta);    if (list.size() > 0) {      //按供应商的投标报价排序      Collections.sort(list, new Comparator() {        public int compare(Object o1, Object o2) {          EvalPackProvider result1 = (EvalPackProvider) o1;          EvalPackProvider result2 = (EvalPackProvider) o2;          //防止控制指针          if (result1.getBidSum() == null) {            result1.setBidSum(new BigDecimal(0));          }          if (result2.getBidSum() == null) {            result2.setBidSum(new BigDecimal(0));          }          return result2.getBidSum().compareTo(result1.getBidSum());        }      });      BigDecimal sumBidSum = BigDecimal.ZERO;      for (int i = 0; i < list.size(); i++) {        sumBidSum = sumBidSum.add(list.get(i).getBidSum());      }      System.out.println(sumBidSum);      System.out.println(list.size());      referValue.setAvgBidSum(sumBidSum.divide(new BigDecimal(list.size()), 2, RoundingMode.HALF_UP));      referValue.setLowBidSum(list.get(list.size() - 1).getBidSum());      //去掉最低报价和最高报价后的平均报价。      if (list.size() >= 3) {        referValue.setWeightAvgBidSum(sumBidSum.subtract(list.get(0).getBidSum()).subtract(list.get(list.size() - 1).getBidSum()).divide(        new BigDecimal(list.size() - 2), 2, RoundingMode.HALF_UP));      }      createFieldEditors();      initFieldEditorPanel();      this.setEditingObject(referValue);      return referValue;    } else {      return null;    }  }  private void setTabledetailEditor(JPageableFixedTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    SwingUtil.setTableCellEditor(table, "SETDATE", new DateCellEditor());    SwingUtil.setTableCellRenderer(table, "SETDATE", new DateCellRenderer());  }  private void getManSetParam(List<ZcEbEvalParam> dataList) {    for (int i = 0; i < dataList.size(); i++) {      ZcEbEvalParam param = (ZcEbEvalParam) dataList.get(i);      if (param.getIsManSet().toUpperCase().equals("Y")) {        manSetParamList.add(param);      }    }  }  private List<ZcEbEvalParam> formatEvalParam(List<ZcEbEvalParam> dataList) {    List<ZcEbEvalParam> list = new ArrayList<ZcEbEvalParam>(dataList.size());    for (int i = 0; i < dataList.size(); i++) {      ZcEbEvalParam param = (ZcEbEvalParam) dataList.get(i);      param.setValue(param.getDefaultValue());      param.setPackCode(evalPack.getPackCode());      param.setProjCode(evalPack.getProjCode());      param.setSetDate(requestMeta.getSysDate());      param.setSettor(requestMeta.getSvUserName());      list.add(param);    }    return list;  }  private void doSave() {    if (!beforeSave()) {      return;    }    try {      save();      JOptionPane.showMessageDialog(this, "保存成功", "提示", JOptionPane.INFORMATION_MESSAGE);    } catch (Exception e) {      UIUtilities.showStaickTraceDialog(e, this, "保存时发生错误", e.getMessage());      return;    }  }  private void doExit() {    this.parent.dispose();  }  protected boolean beforeSave() {    stopEdit();    for (int i = 0; i < manSetParamList.size(); i++) {      String value = ((ZcEbEvalParam) manSetParamList.get(i)).getValue();      if (value == null || "".equals(value)) {        JOptionPane.showMessageDialog(this, "参数值不能为空", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }    }    return true;  }  public void stopEdit() {    if (null != tablePanel.getTable().getCellEditor()) {      tablePanel.getTable().getCellEditor().stopCellEditing();    }  }  private void save() {    if (dataIsNew) {      zcEbEvalServiceDelegate.insertEvalParamResultList(evalPack.getZcEbEvalParamList(), requestMeta);    } else {      zcEbEvalServiceDelegate.updateEvalParamResultList(evalPack.getZcEbEvalParamList(), requestMeta);    }  }}
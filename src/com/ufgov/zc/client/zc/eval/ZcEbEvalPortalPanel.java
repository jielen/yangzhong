/**   * @(#) project: GK* @(#) file: EvalPortalPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.io.File;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.ImageIcon;import javax.swing.JComboBox;import javax.swing.JComponent;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JList;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.ListCellRenderer;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.EvalPackToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.ExperMessageButton;import com.ufgov.zc.client.component.button.ExpertQueButton;import com.ufgov.zc.client.component.button.FinishComplianceEvalButton;import com.ufgov.zc.client.component.button.FinishScoreEvalButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.activeztb.TbDocService;import com.ufgov.zc.client.zc.expertqa.ExpertQuestionUIPanel;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.zc.model.EvalExpert;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.EvalPackProvider;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;/** * * @ClassName: ZcEbEvalPortalPanel* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2010-11-10 下午02:39:22* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbEvalPortalPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = 9032604833094589808L;  private GkBaseDialog parentDialog;  protected EvalExpert evalExpert;  private static final String compoId = "ZC_EB_EVAL_PACK";  protected JTabbedPane mainPanel;  protected ZcEbEvalParamListPanel evalParamPanel;  protected ZcEbEvalZTBFileBasePanel evalZBFilePanel;  protected ZcEbEvalTBFilePanel evalTBFilePanel;  private ZcEbEvalBasePanel evalPanel;  private ZcEbEvalPackListPanel evalPackListPanel;  public JComboBox providerCombBox;  public boolean isStop = true;  private ExperMessageButton experMessageButton = new ExperMessageButton();  //完成评分性评标  private FinishScoreEvalButton finishScoreButton = new FinishScoreEvalButton();  //完成符合性评标  private FinishComplianceEvalButton finishComplianButton = new FinishComplianceEvalButton();  private FuncButton queButton = new ExpertQueButton();  public JPanel panel;  protected ZcEbEvalPack evalPack;  public List<EvalPackProvider> providerDataList = new ArrayList<EvalPackProvider>();  protected EvalPackProvider selectedProvider;  private ExpertQuestionUIPanel expertPanel;  public EvalPackProvider getSelectedProvider() {    return selectedProvider;  }  public void setSelectedProvider(EvalPackProvider selectedProvider) {    this.selectedProvider = selectedProvider;  }  public ExpertQuestionUIPanel getExpertPanel() {    return expertPanel;  }  public boolean isStop() {    return isStop;  }  public void setStop(boolean isStop) {    this.isStop = isStop;  }  private boolean isScoreEval = false;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private EvalPackToTableModelConverter modelConverter = new EvalPackToTableModelConverter();  private IZcEbEvalServiceDelegate zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory.create(IZcEbEvalServiceDelegate.class,  "zcEbEvalServiceDelegate");  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    return editorList;  }  @Override  public JComponent createSubBillPanel() {    panel = new JPanel(new FlowLayout(FlowLayout.LEFT));    JLabel lable = new JLabel();    lable.setFont(new Font("宋体", Font.BOLD, 15));    lable.setForeground(Color.BLUE);    lable.setText(LangTransMeta.translate("ZC_EB_EVAL_PROVIDER"));    panel.add(providerCombBox);    panel.add(lable);    panel.add(experMessageButton);    if (this.isScoreEval && evalPack.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_TECH_EVAL)) {      panel.add(finishScoreButton);    }    if (!this.isScoreEval && evalPack.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_FU_HE_EVAL)) {      panel.add(finishComplianButton);    }    addActionListener();    JPanel centerPanel = new JPanel(new BorderLayout());    centerPanel.add(panel, BorderLayout.NORTH);    mainPanel = new JTabbedPane(JTabbedPane.TOP);    centerPanel.add(mainPanel, BorderLayout.CENTER);    return centerPanel;  }  private void addActionListener() {    experMessageButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doCreateExpertMessage();      }    });    if (this.isScoreEval) {      finishScoreButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          evalPackListPanel.doFinishScoreEval(evalPack);        }      });    } else {      finishComplianButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          evalPackListPanel.doFinishComplianceEval(evalPack);        }      });    }  }  private void doCreateExpertMessage() {    ZcEbEvalPack evalPack = this.evalPack;    // getEvalExpert(evalPack);    ExpertMessageEditDialog editDialog = new ExpertMessageEditDialog(this.parentDialog, "专家评审意见", evalPack, evalExpert, zcEbEvalServiceDelegate,    isScoreEval);    editDialog.setVisible(true);  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    //    toolBar.setModuleCode("ZC");    //    toolBar.setCompoId(compoId);    //    toolBar.add(queButton);    //    queButton.addActionListener(new ActionListener() {    //      public void actionPerformed(ActionEvent e) {    //        doQue();    //      }    //    });  }  public ZcEbEvalPortalPanel(EvalExpert evalExpert, ZcEbEvalPack evalPack, GkBaseDialog parent, ZcEbEvalPackListPanel evalPackListPanel,  boolean isScoreEval) {    this.evalExpert = evalExpert;    this.evalPack = evalPack;    evalPack.setEvalExpert(evalExpert);    this.parentDialog = parent;    this.isScoreEval = isScoreEval;    this.colCount = 3;    this.evalPackListPanel = evalPackListPanel;    createProviderBox();    init();    requestMeta.setCompoId(compoId);    refreshData();  }  private void refreshData() {    initMainPanel();  }  private void initMainPanel() {    createTabPanel();    //    addListener();  }  protected void createTabPanel() {    //评标参数列表panel    evalParamPanel = new ZcEbEvalParamListPanel(evalPack);    //    //招标文件panel    evalZBFilePanel = new ZcEbEvalZBFilePanel(evalPack, this);    //    //投标文件panel    evalTBFilePanel = new ZcEbEvalTBFilePanel(evalPack, evalExpert, this);    //    //专家评标主面板    JPanel expertEvalPanel = createEvalPanel();    //只有在技术评分阶段才显示评审参数。    if (evalPack.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_TECH_EVAL)) {      mainPanel.add(LangTransMeta.translate("ZC_EB_EVAL_PARAM_TITLE"), evalParamPanel);    }    mainPanel.add(LangTransMeta.translate("ZC_EB_EVAL_ZBWJ_TITLE"), evalZBFilePanel);    mainPanel.add(LangTransMeta.translate("ZC_EB_EVAL_TBWJ_TITLE"), evalTBFilePanel);    //    mainPanel.add(LangTransMeta.translate("ZC_EB_EVAL_PB_TITLE"), new ZcEbExpertEvalPanel(evalPack, evalExpert, providerDataList, isScoreEval));    mainPanel.add("供应商报价信息", new ProviderBajiaTable(evalPack));    mainPanel.add(LangTransMeta.translate("ZC_EB_EVAL_PB_TITLE"), expertEvalPanel);    //    JFrame xbFrame = new JFrame();    //    expertPanel = new ExpertQuestionUIPanel(xbFrame, "expert", requestMeta.getSvUserID(), evalPack    //      .getProjCode(), evalPack.getPackCode(), evalPack    //      .getPackStatus());    //    mainPanel.add("询 标", expertPanel);    //    refreshColor();    mainPanel.setSelectedComponent(expertEvalPanel);  }  public void refreshColor() {    Runnable run = new Runnable() {      @Override      public void run() {        // TODO Auto-generated method stub        while (isStop) {          if (ExpertQuestionUIPanel.isChangeColor && mainPanel.getSelectedIndex() != mainPanel.getComponentZOrder(expertPanel)) {            for (int i = 0; i < 2; i++) {              mainPanel.setBackgroundAt(mainPanel.getComponentZOrder(expertPanel), Color.red);              try {                Thread.sleep(500);              } catch (InterruptedException e) {                // TODO Auto-generated catch block                e.printStackTrace();              }              mainPanel.setBackgroundAt(mainPanel.getComponentZOrder(expertPanel), new Color(243, 249, 255));              try {                Thread.sleep(500);              } catch (InterruptedException e) {                // TODO Auto-generated catch block                e.printStackTrace();              }              mainPanel.setBackgroundAt(mainPanel.getComponentZOrder(expertPanel), Color.red);            }          } else if (mainPanel.getSelectedIndex() == mainPanel.getComponentZOrder(expertPanel)) {            mainPanel.setBackgroundAt(mainPanel.getComponentZOrder(expertPanel), new Color(243, 249, 255));            ExpertQuestionUIPanel.isChangeColor = false;          }        }        try {          Thread.sleep(500);        } catch (InterruptedException e) {          // TODO Auto-generated catch block          e.printStackTrace();        }      }    };    Thread thread = new Thread(run);    thread.start();  }  private JPanel createEvalPanel() {    EvalParamBean evalParamBean = new EvalParamBean();    evalParamBean.setEvalExpert(evalExpert);    evalParamBean.setEvalPack(evalPack);    boolean canEdit = false;    if (isScoreEval) {      if (evalPack.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_TECH_EVAL)) {        canEdit = true;      }      evalPanel = new ZcEbEvalBasePanel(EvalItemType.SCORE, evalParamBean, canEdit, this);    } else {      if (evalPack.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_FU_HE_EVAL)) {        canEdit = true;      }      evalPanel = new ZcEbEvalBasePanel(EvalItemType.COMPLIANICE, evalParamBean, canEdit, this);    }    return evalPanel;  }  private void createProviderBox() {    Map providerSelectMap = new HashMap();    providerSelectMap.put("PACK_CODE", evalPack.getPackCode());    providerSelectMap.put("PROJ_CODE", evalPack.getProjCode());    if (isScoreEval) {      providerSelectMap.put("ITEM_TYPE", EvalItemType.SCORE);      providerSelectMap.put("FILTER_BY_COMPLIANCE_RES", "Y");    } else {      providerSelectMap.put("ITEM_TYPE", EvalItemType.COMPLIANICE);    }    providerSelectMap.put("FORMULA_CODE", evalPack.getFormulaCode());    providerSelectMap.put("EVAL_EXPERT_CODE", evalExpert.getExpertCode());    List list = zcEbEvalServiceDelegate.getEvalPackProviderList(providerSelectMap, requestMeta);    if (null != list && !list.isEmpty()) {      providerDataList.addAll(list);      //初始化供应商选择框      final Map<JLabel, EvalPackProvider> providerMap = new HashMap<JLabel, EvalPackProvider>();      List labelList = new ArrayList();      for (int i = 0; i < providerDataList.size(); i++) {        JLabel label = new JLabel();        EvalPackProvider provider = providerDataList.get(i);        label.setText(provider.getProviderName());        providerMap.put(label, provider);        labelList.add(label);      }      providerCombBox = new JComboBox(labelList.toArray());      providerCombBox.setPreferredSize(new Dimension(300, 25));      ItemListener listener = new ItemListener() {        public void itemStateChanged(ItemEvent e) {          if (ItemEvent.SELECTED == e.getStateChange()) {            /*             * 切换供应商时,如果供应商的评审数据发生变化时，要保存一下当前选中供应商的评审数据。             */            evalPanel.doSave();            selectedProvider = providerMap.get(providerCombBox.getSelectedItem());            if (null != selectedProvider) {              afterProviderChange();            }          }        }      };      providerCombBox.addItemListener(listener);      providerCombBox.setRenderer(new ListCellRenderer() {        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {          JLabel label = (JLabel) value;          if (providerMap.size() > 0) {            EvalPackProvider provider = providerMap.get(label);            label.setFont(new Font("宋体", Font.BOLD, 12));            label.setForeground(Color.BLUE);            label.setText(provider.getProviderName());            if (provider.isEval()) {              label.setIcon(new ImageIcon(this.getClass().getResource("/img/" + "EvalDid.jpg")));            } else {              label.setIcon(new ImageIcon(this.getClass().getResource("/img/" + "EvalUndo.jpg")));            }            setBackground(isSelected ? Color.red : Color.white);            setForeground(isSelected ? Color.white : Color.black);          }          return label;        }      });      if (!providerDataList.isEmpty()) {        providerCombBox.setSelectedIndex(0);        providerCombBox.setSelectedItem(labelList.get(0));        selectedProvider = providerMap.get(providerCombBox.getSelectedItem());      }    } else {      providerCombBox = new JComboBox(new String[] { "   " });    }  }  private void afterProviderChange() {    evalTBFilePanel.afterProviderChange();    evalPanel.afterProviderChange();  }  private void addListener() {    mainPanel.addChangeListener(new ChangeListener() {      @Override      public void stateChanged(ChangeEvent e) {        int index = ((JTabbedPane) e.getSource()).getSelectedIndex();        if (index == 2) {          ZcEbEvalTBFilePanel panel = (ZcEbEvalTBFilePanel) ((JTabbedPane) e.getSource()).getSelectedComponent();          //          panel.downloadFileIfNeed();        }      }    });  }  public void clearZTBFile() {    String filePath = ZcUtil.getZcFileTempDir() + File.separator + ZcUtil.ZTB_FILE_DIR + File.separator + evalPack.getProjCode();    TbDocService.deleteFile(new File(filePath));  }  public JComboBox getProviderCombBox() {    return providerCombBox;  }  public void setProviderCombBox(JComboBox providerCombBox) {    this.providerCombBox = providerCombBox;  }  public GkBaseDialog getParentDialog() {    return parentDialog;  }  public void setParentDialog(GkBaseDialog parentDialog) {    this.parentDialog = parentDialog;  }  private void doQue() {    JFrame thisClass = new JFrame();    thisClass.setTitle("评审专家实时质疑问答系统");    thisClass.setSize(680, 415);    thisClass.setContentPane(new ExpertQuestionUIPanel(thisClass, "expert", requestMeta.getSvUserID(), evalPack.getProjCode(),    evalPack.getPackCode(), evalPack.getPackStatus()));    thisClass.setLocationRelativeTo(null);    thisClass.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);    thisClass.setResizable(false);    thisClass.setVisible(true);  }}
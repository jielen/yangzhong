/**   * @(#) project: GK* @(#) file: ZcEbComplianceEvalPackListPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.eval;import java.awt.Color;import java.awt.Container;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.EvalPackToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.AdjustButton;import com.ufgov.zc.client.component.button.ComplianceEvalButton;import com.ufgov.zc.client.component.ui.AbstractDataDisplay;import com.ufgov.zc.client.component.ui.AbstractEditListBill;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SaveableSearchConditionArea;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.component.ui.conditionitem.SearchConditionUtil;import com.ufgov.zc.client.util.BalanceUtil;import com.ufgov.zc.client.util.ListUtil;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.EvalExpert;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;/*** @ClassName: ZcEbComplianceEvalPackListPanel* @Description:符合性审查，评标参数的制定有评审组长* @date: 2010-6-30 下午06:11:35* @version: V1.0 * @since: 1.0* @author: tianly* @modify: */public class ZcEbComplianceEvalPackListPanel extends AbstractEditListBill implements ParentWindowAware {  private static final Logger logger = Logger.getLogger(ZcEbComplianceEvalPackListPanel.class);  private static final long serialVersionUID = 395291702646092160L;  private ZcEbComplianceEvalPackListPanel self = this;  private Window parentWindow;  private String compoId = "ZC_EB_EVAL_PACK_COMP";  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private ElementConditionDto elementConditionDto = new ElementConditionDto();  protected EvalPackToTableModelConverter modelConverter = new EvalPackToTableModelConverter();  protected IZcEbEvalServiceDelegate zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory.create(IZcEbEvalServiceDelegate.class,  "zcEbEvalServiceDelegate");  //通用参数设置  private AdjustButton paramSetButton;  //符合性评标  protected ComplianceEvalButton evalButton = new ComplianceEvalButton();  protected EvalExpert evalExpert;  public IZcEbEvalServiceDelegate getZcEbEvalServiceDelegate() {    return zcEbEvalServiceDelegate;  }  public void setZcEbEvalServiceDelegate(IZcEbEvalServiceDelegate zcEbEvalServiceDelegate) {    this.zcEbEvalServiceDelegate = zcEbEvalServiceDelegate;  }  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  private final class DataDisplay extends MultiDataDisplay {    private DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays, AbstractSearchConditionArea conditionArea,    boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, ZcSettingConstants.TAB_ID_ZC_EB_COMPL_EVAL_PACK);      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "符合性评审", TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体",      Font.BOLD, 15), Color.BLUE));    }    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {              String tabStatus = d.getStatus();              JGroupableTable table = d.getTable();              MyTableModel model = (MyTableModel) table.getModel();              int row = table.getSelectedRow();              List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(model.getList(), table));              ZcEbEvalPack evalPack = (ZcEbEvalPack) viewList.get(row);              createEvalDialog(evalPack);            }          }        });      }    }    @Override    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems, final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(compoId);      elementConditionDto.setExecutor(WorkEnv.getInstance().getCurrUserId());      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setStatus(tableDisplay.getStatus());      elementConditionDto.setCoCode(requestMeta.getSvCoCode());      elementConditionDto.setOrgCode(requestMeta.getSvOrgCode());      elementConditionDto.setMonth(BalanceUtil.getMonthIdBySysOption());      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        @Override        public void before() {          assert c != null;          installLoadingComponent(c);        }        @Override        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        @Override        public TableModel execute() throws Exception {          return modelConverter.convertToTableModel(zcEbEvalServiceDelegate.getZcEbEvalPackList(elementConditionDto, requestMeta));        }        @Override        public void success(TableModel model) {          tableDisplay.setTableModel(model);          //          setButtonStatus();        }      });    }  }  static {    LangTransMeta.init("ZC%");  }  public ZcEbComplianceEvalPackListPanel() {    UIUtilities.asyncInvoke(new DefaultInvokeHandler<List<SearchCondition>>() {      @Override      public List<SearchCondition> execute() throws Exception {        List<SearchCondition> needDisplaySearchConditonList = SearchConditionUtil.getNeedDisplaySearchConditonList(WorkEnv.getInstance()        .getCurrUserId(), ZcSettingConstants.TAB_ID_ZC_EB_COMPL_EVAL_PACK);        return needDisplaySearchConditonList;      }      @Override      public void success(List<SearchCondition> needDisplaySearchConditonList) {        List<TableDisplay> showingDisplays = SearchConditionUtil.getNeedDisplayTableDisplay(needDisplaySearchConditonList);        init(createDataDisplay(showingDisplays), null);//调用父类方法        revalidate();        repaint();      }    });    requestMeta.setCompoId(compoId);    getEvalExpert();  }  private AbstractSearchConditionArea topSearchConditionArea;  private AbstractSearchConditionArea createTopConditionArea() {    Map defaultValueMap = new HashMap();    topSearchConditionArea = new SaveableSearchConditionArea(ZcSettingConstants.CONDITION_ID_ZC_EB_COMPL_EVAL_PACK, null, true, defaultValueMap, null);    return topSearchConditionArea;  }  private AbstractDataDisplay createDataDisplay(List<TableDisplay> showingDisplays) {    return new DataDisplay(SearchConditionUtil.getAllTableDisplay(ZcSettingConstants.TAB_ID_ZC_EB_COMPL_EVAL_PACK), showingDisplays,    createTopConditionArea(), true);//true:显示收索条件区 false：不显示收索条件区  }  @Override  protected void addToolBarComponent(JFuncToolBar toolBar) {    paramSetButton = new AdjustButton();    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(paramSetButton);    toolBar.add(evalButton);    // 初始化按钮的action事件    evalButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEval();      }    });    paramSetButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSetParam();      }    });  }  private void getEvalExpert() {    Map<String, String> param = new HashMap<String, String>();    /**     * 专家以用户的方式登录:     */    evalExpert = new EvalExpert();    evalExpert.setExpertCode(requestMeta.getSvUserID());    evalExpert.setExpertName(requestMeta.getEmpName());  }  public void refreshCurrentTabData() {    topSearchConditionArea.doSearch();  }  /**   *   * @Description: TODO(符合性评标)  * @return void 返回类型  * @since 1.0   */  private void doEval() {    List beanList = getCheckedList();    if (beanList.size() > 1 || beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择一个标段且只能选择一个标段然后进行操作", "提示", JOptionPane.YES_OPTION);      return;    }    ZcEbEvalPack evalPack = (ZcEbEvalPack) beanList.get(0);    createEvalDialog(evalPack);  }  private void createEvalDialog(ZcEbEvalPack evalPack) {    GkBaseDialog dialog = new GkBaseDialog(this.parentWindow, LangTransMeta.translate("ZC_EB_EVAL_PACK_TITLE") + "  "    + LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_PROJ_NAME) + ":" + evalPack.getProjName() + "  "    + LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME) + ":" + evalPack.getPackName() + "  "    + LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_FIELD_EXPERT_NAME) + ":" + evalExpert.getExpertName());    final ZcEbEvalPortalPanel panel = new ZcEbEvalPortalPanel(evalExpert, evalPack, dialog, null, false);    dialog.addWindowListener(new WindowAdapter() {      public void windowClosed(WindowEvent e) {        super.windowClosed(e);      }    });    dialog.add(panel);    dialog.setMaxSizeWindow();    dialog.moveToScreenCenter();    dialog.setVisible(true);  }  public List getCheckedList() {    List<ZcEbEvalPack> beanList = new ArrayList<ZcEbEvalPack>();    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    MyTableModel model = (MyTableModel) table.getModel();    //Modal的数据    List list = model.getList();    Integer[] checkedRows = table.getCheckedRows();    for (Integer checkedRow : checkedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      ZcEbEvalPack bean = (ZcEbEvalPack) list.get(accordDataRow);      beanList.add(bean);    }    return beanList;  }  private boolean expertIsEvalLeader(ZcEbEvalPack pack) {    if (null == pack.getEvalLeader() || "".equals(pack.getEvalLeader())) {      return false;    }    if (evalExpert.getExpertCode().equals(pack.getEvalLeader())) {      return true;    }    return false;  }  /**   *   * @Description: 设置评标参数  * @return void 返回类型  * @since 1.0   */  private void doSetParam() {    List beanList = getCheckedList();    if (beanList.size() > 1 || beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择一个标段且只能选择一个标段然后进行操作", "提示", JOptionPane.YES_OPTION);      return;    }    ZcEbEvalPack evalPack = (ZcEbEvalPack) beanList.get(0);    if (!expertIsEvalLeader(evalPack)) {      JOptionPane.showMessageDialog(this, "你不是当前标段的评审组长，无权进行此操作!", "提示", JOptionPane.YES_OPTION);      return;    }    GkBaseDialog dialog = new GkBaseDialog(this.parentWindow, "评审参数设置");    ZcEbEvalParamSetPanel panel = new ZcEbEvalParamSetPanel(evalPack, dialog, "EDIT");    dialog.add(panel);    dialog.setSize(UIConstants.DIALOG_2_LEVEL_WIDTH, UIConstants.DIALOG_2_LEVEL_HEIGHT);    dialog.moveToScreenCenter();    dialog.setVisible(true);  }  public static void main(String[] args) throws Exception {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        ZcEbComplianceEvalPackListPanel bill = new ZcEbComplianceEvalPackListPanel();        JFrame frame = new JFrame("专家评标系统");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(UIConstants.SCREEN_WIDTH - 200, UIConstants.SCREEN_HEIGHT - 100);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }}
package com.ufgov.zc.client.zc.eval;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Font;import java.awt.GridBagConstraints;import java.awt.Insets;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.ImageIcon;import javax.swing.JComboBox;import javax.swing.JComponent;import javax.swing.JLabel;import javax.swing.JList;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.ListCellRenderer;import javax.swing.border.TitledBorder;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextAreaFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.util.GridBagLayoutTools;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.EvalExpert;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.EvalPackProvider;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.model.ZcEbExpertOpinion;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;public class ExpertMessageEditPanel extends AbstractMainSubEditPanel implements ParentWindowAware {  /**   *    */  private static final Logger logger = Logger.getLogger(ExpertMessageEditPanel.class);  private static final long serialVersionUID = 6059206738904126963L;  private FuncButton saveButton = new SaveButton();  private GkBaseDialog parent;  private ExpertMessageEditPanel self = this;  private String compoId = "ZC_EB_EVAL_PACK";  private GridBagLayoutTools tool;  private ZcEbEvalPack evalPack;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private IZcEbEvalServiceDelegate zcEbEvalServiceDelegate;  private ZcEbExpertOpinion zcEbExpertOpinion;  private ZcEbExpertOpinion oldZcEbExpertOpinion;  public List<EvalPackProvider> providerDataList = new ArrayList<EvalPackProvider>();  private EvalExpert evalExpertm;  private boolean isScoreEval;  private JComboBox providerCombBox;  public ExpertMessageEditPanel(ZcEbEvalPack evalPack, EvalExpert evalExpertm, IZcEbEvalServiceDelegate zcEbEvalServiceDelegate, boolean isScoreEval) {    this.zcEbEvalServiceDelegate = zcEbEvalServiceDelegate;    this.evalPack = evalPack;    //this.parent = dialog;    this.evalExpertm = evalExpertm;    this.isScoreEval = isScoreEval;    initProviders();    Map<String, String> map = new HashMap<String, String>();    map.put("projCode", evalPack.getProjCode());    map.put("packCode", evalPack.getPackCode());    map.put("expertCode", evalExpertm.getExpertCode());    zcEbExpertOpinion = zcEbEvalServiceDelegate.getZcEbExpertOpinion(map, requestMeta);    if (zcEbExpertOpinion == null) {      zcEbExpertOpinion = new ZcEbExpertOpinion();      zcEbExpertOpinion.setProjCode(evalPack.getProjCode());      zcEbExpertOpinion.setProjName(evalPack.getProjName());      zcEbExpertOpinion.setPackCode(evalPack.getPackCode());      zcEbExpertOpinion.setPackName(evalPack.getPackName());      zcEbExpertOpinion.setExpertCode(requestMeta.getSvUserID());      zcEbExpertOpinion.setExpertName(evalExpertm.getExpertName());      zcEbExpertOpinion.setTime(requestMeta.getSysDate());    }    init();    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("专家意见"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.setEditingObject(zcEbExpertOpinion);    setOldObject();  }  protected void init() {    this.initToolBar(toolBar);    this.setLayout(new BorderLayout());    toolBar.setLayout(new FlowLayout(FlowLayout.CENTER, 0, 0));    this.add(workPanel, BorderLayout.CENTER);    this.add(toolBar, BorderLayout.SOUTH);    saveButton.setSize(200, 200);    if (this.billClass != null && this.eleMeta != null) {      initFieldEditorPanel(this.billClass, this.eleMeta);    } else {      initFieldEditorPanel();    }    workPanel.setLayout(new BorderLayout());    workPanel.add(fieldEditorPanel, BorderLayout.NORTH);    JComponent tabTable = createSubBillPanel();    if (tabTable != null) {      workPanel.add(tabTable, BorderLayout.CENTER);    }  }  private void initProviders() {    Map providerSelectMap = new HashMap();    providerSelectMap.put("PACK_CODE", evalPack.getPackCode());    providerSelectMap.put("PROJ_CODE", evalPack.getProjCode());    if (isScoreEval) {      providerSelectMap.put("ITEM_TYPE", EvalItemType.SCORE);      providerSelectMap.put("FILTER_BY_COMPLIANCE_RES", "Y");    } else {      providerSelectMap.put("ITEM_TYPE", EvalItemType.COMPLIANICE);    }    providerSelectMap.put("FORMULA_CODE", evalPack.getFormulaCode());    providerSelectMap.put("EVAL_EXPERT_CODE", evalExpertm.getExpertCode());    List list = zcEbEvalServiceDelegate.getEvalPackProviderList(providerSelectMap, requestMeta);    if (null != list && !list.isEmpty()) {      providerDataList.addAll(list);      final Map<JLabel, EvalPackProvider> providerMap = new HashMap<JLabel, EvalPackProvider>();      List labelList = new ArrayList();      for (int i = 0; i < providerDataList.size(); i++) {        JLabel label = new JLabel();        EvalPackProvider provider = providerDataList.get(i);        label.setText(provider.getProviderName());        providerMap.put(label, provider);        labelList.add(label);      }      providerCombBox = new JComboBox(labelList.toArray());      providerCombBox.setPreferredSize(new Dimension(300, 25));      providerCombBox.setRenderer(new ListCellRenderer() {        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {          JLabel label = (JLabel) value;          if (providerMap.size() > 0) {            EvalPackProvider provider = providerMap.get(label);            label.setFont(new Font("宋体", Font.BOLD, 12));            label.setForeground(Color.BLUE);            label.setText(provider.getProviderName());            if (provider.isEval()) {              label.setIcon(new ImageIcon(this.getClass().getResource("/img/" + "EvalDid.jpg")));            } else {              label.setIcon(new ImageIcon(this.getClass().getResource("/img/" + "EvalUndo.jpg")));            }            setBackground(isSelected ? Color.red : Color.white);            setForeground(isSelected ? Color.white : Color.black);          }          return label;        }      });    }  }  @Override  protected void initFieldEditorPanel() {    fieldEditors = createFieldEditors();    fieldEditorPanel.setLayout(new BorderLayout());    fieldEditorPanel.add(this.makeFieldEditorsPanel(), BorderLayout.NORTH);    this.fieldEditorPanel.repaint();  }  private Component makeFieldEditorsPanel() {    JPanel edPanel = new JPanel();    tool = new GridBagLayoutTools();    tool.setColCount(3);    tool.setFieldEditorList(fieldEditors);    Map<String, String> map = new HashMap<String, String>();    map.put("projCode", evalPack.getProjCode());    map.put("packCode", evalPack.getPackCode());    tool.layoutFieldEditorPanel(edPanel, ZcEbExpertOpinion.class, "ZC_EB_EVAL_PACK");    JLabel label = new JLabel("<html><b><font size='5' color='red'>温馨提示：在意见输入框中单击【右键】，可以选择插入供应商名称。</font></b></html>");    edPanel.add(label, new GridBagConstraints(1, 7, 3, 1, 1.0, 1.0, GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(4, 0, 4, 4), 0, 0));    edPanel.repaint();    return edPanel;  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    TextFieldEditor projCode = new TextFieldEditor("项目编号", "projCode");    projCode.setEnabled(false);    editorList.add(projCode);    TextFieldEditor projName = new TextFieldEditor("项目名称", "projName");    projName.setEnabled(false);    editorList.add(projName);    TextFieldEditor packCode = new TextFieldEditor("分包编号", "packCode");    packCode.setEnabled(false);    editorList.add(packCode);    TextFieldEditor packName = new TextFieldEditor("分包名称", "packName");    packName.setEnabled(false);    editorList.add(packName);    DateFieldEditor time = new DateFieldEditor("填写时间", "time");    time.setEnabled(false);    editorList.add(time);    TextAreaFieldEditor argueOpinions = new TextAreaFieldEditor("专家意见", "opinion", 1000, 4, 6);    argueOpinions.setPreferredSize(new Dimension(400, 300));    editorList.add(argueOpinions);    List<String> names = new ArrayList<String>();    for (Iterator iterator = providerDataList.iterator(); iterator.hasNext();) {      EvalPackProvider prov = (EvalPackProvider) iterator.next();      names.add(prov.getProviderName());    }    argueOpinions.initMouseMenu(names);    //AsValFieldEditor afe = new AsValFieldEditor("供应商", "provider", "provider");    //editorList.add(afe);    // editorList.add(providerCombBox);    return editorList;  }  @Override  public JComponent createSubBillPanel() {    // TCJLODO Auto-generated method stub    return null;  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(saveButton);    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doSave();      }    });  }  public boolean doSave() {    boolean success = true;    String errorInfo = "";    try {      if (zcEbExpertOpinion.getOpinion() != null && !"".equals(zcEbExpertOpinion.getOpinion())) {        this.zcEbEvalServiceDelegate.SaveZcEbExpertOpinion(zcEbExpertOpinion, requestMeta);      } else {        JOptionPane.showMessageDialog(self, "请输入专家意见！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      setOldObject();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  @Override  public Window getParentWindow() {    // TCJLODO Auto-generated method stub    return null;  }  @Override  public void setParentWindow(Window window) {    // TCJLODO Auto-generated method stub  }  private void setOldObject() {    oldZcEbExpertOpinion = (ZcEbExpertOpinion) ObjectUtil.deepCopy(zcEbExpertOpinion);  }  public boolean isDataChanged() {    if (oldZcEbExpertOpinion == null) {      return false;    }    return !DigestUtil.digest(oldZcEbExpertOpinion).equals(DigestUtil.digest(zcEbExpertOpinion));  }}
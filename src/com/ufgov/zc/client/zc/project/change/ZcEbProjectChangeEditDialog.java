package com.ufgov.zc.client.zc.project.change;import java.awt.BorderLayout;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog;import java.awt.Dimension;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.JTextArea;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbProjectChangeToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.AuditPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.InvalidButton;import com.ufgov.zc.client.component.button.IsSendToNextButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SubaddButton;import com.ufgov.zc.client.component.button.SubdelButton;import com.ufgov.zc.client.component.button.SubinsertButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.CompanyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldCellEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.SelectFileFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.model.AsVal;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcBaseBill;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbProjChange;import com.ufgov.zc.common.zc.model.ZcEbProjChangePack;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;@SuppressWarnings("unchecked")public class ZcEbProjectChangeEditDialog extends GkBaseDialog {  private static final long serialVersionUID = -56873481859200532L;  private final ZcEbProjectChangeEditDialog self = this;  private final ZcEbProjectEditPanel editPanel;  private final RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  public IZcEbBaseServiceDelegate zcEbBaseServiceDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class,    "zcEbBaseServiceDelegate");  public ZcEbProjectChangeEditDialog(ZcEbProjectChangeListPanel listPanel, List beanList, int editingRow, String tabStatus, String title) {    super(listPanel.getParentWindow(), Dialog.ModalityType.APPLICATION_MODAL);    editPanel = new ZcEbProjectEditPanel(new ListCursor(beanList, editingRow), tabStatus, listPanel);    setLayout(new BorderLayout());    add(editPanel);    this.setTitle(title);    this.setSize(UIConstants.SCREEN_WIDTH, UIConstants.SCREEN_HEIGHT);    this.moveToScreenCenter();    this.setVisible(true);    this.repaint();  }  private boolean yesConfirmed = true;  @Override  protected boolean dialogIsClosing() {    if (editPanel.isDataChanged() && yesConfirmed) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        return editPanel.doSave();      } else {        yesConfirmed = false;      }    }    return true;  }  private class ZcEbProjectEditPanel extends AbstractMainSubEditPanel {    private static final long serialVersionUID = -2539657260090189021L;    private RequestMeta requestMeta = null;    private IForeignEntityHandler handler;    private final FuncButton invalidButton = new InvalidButton();    private final FuncButton previousButton = new PreviousButton();    private final FuncButton saveButton = new SaveButton();    private final FuncButton deleteButton = new DeleteButton();    private final FuncButton nextButton = new NextButton();    private final FuncButton exitButton = new ExitButton();    private final JButton addBtnPack = new SubaddButton(false);    private final JButton insertBtnPack = new SubinsertButton(false);    private final JButton delBtnPack = new SubdelButton(false);    private final JTablePanel packTablePanel = new JTablePanel("packTablePanel");    // 工作流送审    private final FuncButton sendButton = new SendButton();    //是否送主任审核    private final FuncButton isSendToNextButton = new IsSendToNextButton();    // 工作流收回    private final FuncButton callbackButton = new CallbackButton();    // 工作流填写意见审核通过    private final FuncButton suggestPassButton = new SuggestAuditPassButton();    // 工作流审核通过    private final FuncButton auditPassButton = new AuditPassButton();    // 工作流销审    private final FuncButton unAuditButton = new UnauditButton();    // 工作流退回    private final FuncButton unTreadButton = new UntreadButton();    private final FuncButton editButton = new EditButton();    // 工作流流程跟踪    private final FuncButton traceButton = new TraceButton();    private final ListCursor listCursor;    private ZcEbProjChange oldProj;    private final ZcEbProjectChangeListPanel listPanel;    private SelectFileFieldEditor reasonFile;    private JTabbedPane itemTabPane = null;    private JTextArea changeReasonMemo = null;    private AsValFieldEditor specialReasonCode = null;    ForeignEntityFieldEditor projectSelectEditor;    private final ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();    TextFieldEditor projSrcCode;    private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    SimpleDateFormat dateFormate = new SimpleDateFormat("yyyyMMdd");    private boolean isAllChanged = true;    AsValFieldEditor purType;    AsValFieldEditor purLstType;    private final List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    private final String tabStatus;    public IZcEbBaseServiceDelegate zcEbBaseServiceDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class,      "zcEbBaseServiceDelegate");    public ZcEbProjectEditPanel(ListCursor listCursor, String tabStatus, ZcEbProjectChangeListPanel listPanel) {      super(ZcEbProj.class, listPanel.getBillElementMeta());      this.tabStatus = tabStatus;      this.listCursor = listCursor;      this.listPanel = listPanel;      this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "变更采购方式", TitledBorder.CENTER, TitledBorder.TOP,        new Font("宋体", Font.BOLD, 15), Color.BLUE));      this.colCount = 2;      requestMeta = listPanel.getRequestMeta();      getFieldEditors();      init();      refreshData();    }    @Override    public List<AbstractFieldEditor> createFieldEditors() {      return editorList;    }    public List<AbstractFieldEditor> getFieldEditors() {      ZcEbProjChange projChg = (ZcEbProjChange) listCursor.getCurrentObject();      String columNames[] = { "采购计划编号", "采购项目", "变更预算", "原采购方式", "上次变更内容", "变更单号" };      ProjectDetailHandler handler = new ProjectDetailHandler(columNames);      ElementConditionDto dto = new ElementConditionDto();      dto.setCoCodeFilter(requestMeta.getSvCoCode());      /**：       * 采购方式的变更分三个阶段的变更：       * 标前：采购中心没有立项之前 对采购计划进行变更，update计划、任务单、批办单的采购方式。       * 标后：采购中心立项分包完成之后。选择标段进行采购方式的变更 ，       * 评标现场变更：对标段进行变更，然后走后续走业务审批流。       */      //项目编号 和 项目名称 显示的是采购单位报计划时的计划编号 和 计划名称。      projectSelectEditor = new ForeignEntityFieldEditor("ZcEbProjChange.getZcPProMakeAll", dto, 20, handler, columNames, "采购计划编号", "projCode");      projectSelectEditor.addValueChangeListener(new ValueChangeListener() {        public void valueChanged(ValueChangeEvent e) {          packTablePanel.setDataList(null);          packTablePanel.refreshData();        }      });      TextFieldEditor projName = new TextFieldEditor("采购项目", "projName");      projName.setEnabled(false);      if (projChg != null && projChg.getChgId() != null && "".equals(projChg.getChgId())) {        TextFieldEditor chgId = new TextFieldEditor("变更单号", "chgId");        editorList.add(chgId);      }      //      projSrcCode = new TextFieldEditor("上次变更编号", "projSrcCode");      //      editorList.add(projSrcCode);      //      projSrcCode.setEnabled(false);      MoneyFieldEditor zcMoneySrcBiSum = new MoneyFieldEditor("采购预算", "projSrcSum");      zcMoneySrcBiSum.setEnabled(false);      //      MoneyFieldEditor zcMoneyBiSum = new MoneyFieldEditor("涉及变更的金额", "projSum");      //      zcMoneyBiSum.setEnabled(false);      //      editorList.add(zcMoneyBiSum);      TextFieldEditor packName = new TextFieldEditor("备注", "packName");      projName.setEnabled(false);      //      AsValFieldEditor zcOrigCgfs = new AsValFieldEditor("原采购方式", "purSrcType", "ZC_VS_PITEM_OPIWAY");      //      editorList.add(zcOrigCgfs);      //      zcOrigCgfs.setEnabled(false);      //存在多次变更的时候才显示这个字段      purLstType = new AsValFieldEditor("原采购方式", "purLstType", "ZC_VS_PITEM_OPIWAY");      purLstType.setEnabled(false);      purType = new AsValFieldEditor("拟变更采购方式", "purType", "ZC_VS_PITEM_OPIWAY");      CompanyFieldEditor coCode = new CompanyFieldEditor("预算单位", "coCode");      coCode.setEnabled(false);      DateFieldEditor inputDate = new DateFieldEditor("作业时间", "inputDate");      inputDate.setEnabled(false);      editorList.add(coCode);      editorList.add(purLstType);      editorList.add(projectSelectEditor);      editorList.add(purType);      editorList.add(projName);      editorList.add(zcMoneySrcBiSum);      editorList.add(inputDate);      editorList.add(packName);      //      AsValFieldEditor status = new AsValFieldEditor("变更状态", "status", ConditionFieldConstants.ZC_VS_PROJ_CHG_STATUS);      //      editorList.add(status);      //      status.setEnabled(false);      return editorList;    }    @Override    public JComponent createSubBillPanel() {      itemTabPane = new JTabbedPane();      itemTabPane.setTabPlacement(JTabbedPane.TOP);      itemTabPane.setTabLayoutPolicy(JTabbedPane.WRAP_TAB_LAYOUT);      itemTabPane.setPreferredSize(new Dimension(300, 200));      JPanel ctPanel = new JPanel();      ctPanel.setBounds(50, 50, 200, 180);      ctPanel.setLayout(null);      itemTabPane.addTab("变更原因", ctPanel);      JLabel label0 = new JLabel("变更原因：");      label0.setBounds(100, 10, 100, 24);      label0.setLayout(null);      ctPanel.add(label0);      specialReasonCode = new AsValFieldEditor("变更原因", "specialReasonCode", "ZC_VS_CHANGE_TYPE");      specialReasonCode.setBounds(100, 34, 540, 24);      ctPanel.add(specialReasonCode);      JLabel label1 = new JLabel("情况说明：");      label1.setBounds(100, 62, 100, 24);      label1.setLayout(null);      ctPanel.add(label1);      JLabel xygh = new JLabel("(情况说明最多可输入250个汉字)");      xygh.setForeground(new Color(254, 70, 1));      xygh.setFont(new Font("宋体", Font.BOLD, 12));      xygh.setBounds(180, 62, 400, 24);      xygh.setLayout(null);      ctPanel.add(xygh);      changeReasonMemo = new JTextArea();      changeReasonMemo.setBounds(100, 84, 540, 140);      changeReasonMemo.setLayout(null);      changeReasonMemo.setBackground(Color.WHITE);      changeReasonMemo.setLineWrap(true);//wkw  实现自动换行      ctPanel.add(changeReasonMemo);      JLabel label2 = new JLabel("上传变更原因附件：");      label2.setBounds(100, 232, 140, 24);      label2.setLayout(null);//将缺省的布局管理器清除      ctPanel.add(label2);      reasonFile = new SelectFileFieldEditor("上传变更原因附件", "changeReasonFileName", "changeReasonFileID", true, true, true, true);      reasonFile.setBounds(100, 256, 300, 24);      ctPanel.add(reasonFile);      reasonFile.addValueChangeListener(new ValueChangeListener() {        public void valueChanged(ValueChangeEvent e) {          fileCheck();        }      });      createChgPackTab();      return itemTabPane;    }    private void createChgPackTab() {      JFuncToolBar bottomToolBarPack = new JFuncToolBar();      bottomToolBarPack.add(addBtnPack);      bottomToolBarPack.add(insertBtnPack);      bottomToolBarPack.add(delBtnPack);      addBtnPack.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          // 添加分包明细          Object projCode = projectSelectEditor.getValue();          if (projCode == null || projCode.equals("")) {            JOptionPane.showMessageDialog(self, "请先选择一条【采购计划】", "提示", JOptionPane.WARNING_MESSAGE);          } else {            ZcEbProjChangePack pack = new ZcEbProjChangePack();            setPackDefaultValue(pack, ZcSettingConstants.PACK_STATUS_DRAFT);            int rowNum = ZcUtil.addSub(packTablePanel, pack);            packTablePanel.getTable().setRowSelectionInterval(rowNum, rowNum);          }        }      });      insertBtnPack.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          Object projCode = projectSelectEditor.getValue();          if (projCode == null || projCode.equals("")) {            JOptionPane.showMessageDialog(self, "请先选择一条【采购计划】", "提示", JOptionPane.WARNING_MESSAGE);          } else {            // 插入分包明细            ZcEbProjChangePack pack = new ZcEbProjChangePack();            int rowNum = ZcUtil.insertSub(packTablePanel, pack);            packTablePanel.getTable().setRowSelectionInterval(rowNum, rowNum);          }        }      });      // 删除项目标段按钮的事件监听      delBtnPack.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          Integer[] checkedRows = ZcUtil.deleteSub(packTablePanel, self);          if (checkedRows.length > 0) {            if (packTablePanel.getTable().getRowCount() == 0) {              ZcEbProjChangePack pack = new ZcEbProjChangePack();              ZcUtil.addSub(packTablePanel, pack);              packTablePanel.getTable().setRowSelectionInterval(0, 0);            } else {              packTablePanel.getTable().setRowSelectionInterval(0, 0);            }          }        }      });      packTablePanel.init();      packTablePanel.getSearchBar().setVisible(false);      packTablePanel.setTablePreferencesKey(this.getClass().getName() + "_pack_table");      packTablePanel.getTable().setShowCheckedColumn(true);      packTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));      packTablePanel.add(bottomToolBarPack, BorderLayout.SOUTH);    }    private void refreshChgPackTab(ZcEbProjChange proj) {      packTablePanel.setTableModel(ZcEbProjectChangeToTableModelConverter.convertPackToTableModel(proj.getPackList()));      ZcUtil.translateColName(packTablePanel.getTable(), ZcEbProjectChangeToTableModelConverter.getPackTableColumnInfo());    }    private void addPackTablePanel(ZcEbProjChange proj) {      //先进行判断，是否已经进行了分包的操作，如果没有进行分包，就不显示该页签，变更的是整个采购计划=整个任务单。      List packList = null;      if (proj.getProjCode() != null) {        packList = zcEbBaseServiceDelegate.queryDataForList("ZcEbReqPack.getZcEbPackByZcMakeCode", proj.getProjCode(), requestMeta);      }      if (packList == null || packList.size() == 0) {        isAllChanged = true;        proj.setIsAllChange("Y");        purType.setVisible(true);        purLstType.setVisible(true);        if (itemTabPane.getComponentCount() == 2) {          itemTabPane.remove(packTablePanel);        }      } else {        isAllChanged = false;        proj.setIsAllChange("N");        purType.setVisible(false);        purLstType.setVisible(false);        if (itemTabPane.getComponentCount() == 1) {          itemTabPane.addTab("变更分包", packTablePanel);        }      }      fieldEditorPanel.removeAll();      initFieldEditorPanel();      fieldEditorPanel.updateUI();    }    private void setPackTableProperty(final JTable table) {      table.setDefaultEditor(String.class, new TextCellEditor());      String columNames[] = { "采购计划编号", "分包ID", "分包编号", "分包名称", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FIELD_PACK_BUDGET),        "采购方式", "联系人", "联系人电话" };      ElementConditionDto packDto = new ElementConditionDto();      //packDto.setBillStatus("exec");      packDto.setExecutor(requestMeta.getSvUserID());      packDto.setCoCode(requestMeta.getSvCoCode());      if (handler == null) {        handler = new ZcEbPackHandler(columNames, table);      }      ForeignEntityFieldCellEditor packEditor = new ForeignEntityFieldCellEditor("ZcEbProjChange.getZcEbPackByProjCode", packDto, 20, handler,        columNames, "分包", "packName");      SwingUtil.setTableCellEditor(table, "PACK_NAME", packEditor);      SwingUtil.setTableCellEditor(table, "PUR_SRC_WAY", new AsValComboBoxCellEditor("ZC_VS_PITEM_OPIWAY"));      SwingUtil.setTableCellRenderer(table, "PUR_SRC_WAY", new AsValCellRenderer("ZC_VS_PITEM_OPIWAY"));      SwingUtil.setTableCellEditor(table, "PUR_WAY", new AsValComboBoxCellEditor("ZC_VS_PITEM_OPIWAY"));      SwingUtil.setTableCellRenderer(table, "PUR_WAY", new AsValCellRenderer("ZC_VS_PITEM_OPIWAY"));    }    private void setPackDefaultValue(ZcEbProjChangePack pack, String status) {      pack.setId(Guid.genID());      pack.setChgID(oldProj.getChgId());    }    private void refreshAll(ZcEbProjChange afterSaveProj, boolean isRefreshButton) {      this.listCursor.setCurrentObject(afterSaveProj);      pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      refreshData();    }    private void setMyEditingObject(ZcEbProjChange proj) {      this.setEditingObject(proj);      this.changeReasonMemo.setText(proj.getChangeReasonMemo());      this.reasonFile.setEditObject(proj);      this.specialReasonCode.setEditObject(proj);    }    public boolean isDataChanged() {      return !DigestUtil.digest(oldProj).equals(DigestUtil.digest(this.getProjWithoutTempId()));    }    private void refreshData() {      ZcEbProjChange proj = (ZcEbProjChange) this.listCursor.getCurrentObject();      if (proj == null) {        // 新增的单据        proj = new ZcEbProjChange();        proj.setStatus("0");        proj.setNd(requestMeta.getSvNd());        proj.setInputDate(new Date());        proj.setManager(requestMeta.getSvUserID());        proj.setCoCode(requestMeta.getSvCoCode());        listCursor.getDataList().add(proj);        pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      }      this.setMyEditingObject(proj);      // 根据工作流模版设置字段是否可编辑      refreshChgPackTab(proj);      addPackTablePanel(proj);      updateWFEditorEditable(proj, requestMeta);      updateFieldEditorsEditable();      setButtonStatus();      // 根据工作流模版设置功能按钮是否可用      setButtonStatus(proj, requestMeta, this.listCursor);      setPackTableProperty(packTablePanel.getTable());      listCursor.setCurrentObject(proj);      setOldObject();    }    private void setOldObject() {      oldProj = this.getProjWithoutTempId();    }    private ZcEbProjChange getProjWithoutTempId() {      return (ZcEbProjChange) ObjectUtil.deepCopy(listCursor.getCurrentObject());    }    @Override    public void initToolBar(JFuncToolBar toolBar) {      toolBar.setModuleCode("ZC");      toolBar.setCompoId(ZcEbProjectChangeListPanel.compoId);      toolBar.add(editButton);      toolBar.add(saveButton);      toolBar.add(sendButton);      toolBar.add(isSendToNextButton);      toolBar.add(suggestPassButton);      toolBar.add(auditPassButton);      toolBar.add(callbackButton);      toolBar.add(unAuditButton);      toolBar.add(unTreadButton);      toolBar.add(traceButton);      toolBar.add(invalidButton);      toolBar.add(deleteButton);      toolBar.add(previousButton);      toolBar.add(nextButton);      toolBar.add(exitButton);      editButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          // 修改          doEdit();        }      });      saveButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          // 保存          doSave();        }      });      invalidButton.addActionListener(new ActionListener() {        @Override        public void actionPerformed(ActionEvent e) {          // TCJLODO Auto-generated method stub          doInvalid();        }      });      deleteButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          // 删除          doDelete();        }      });      sendButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          // 送审          doSend();        }      });      isSendToNextButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          // 送审          doSendNext();        }      });      callbackButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          // 收回          doCallback();        }      });      suggestPassButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent arg0) {          // 填写意见审核          doSuggestPass();        }      });      auditPassButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          // 审核          doAudit();        }      });      unAuditButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          // 销审          doUnaudit();        }      });      unTreadButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          // 退回          doUntread();        }      });      traceButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          // 流程跟踪          doTrace();        }      });      exitButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          // 退出          doExit();        }      });    }    //检查上传的变更原因文件内容    private void fileCheck() {      if (this.reasonFile == null)        return;      AsFile bidDoc = this.reasonFile.getFileUploader().getFile();      if (bidDoc == null)        return;      ZcEbProjChange curr = (ZcEbProjChange) listCursor.getCurrentObject();      curr.setChangeReasonFileID(bidDoc.getFileId());      curr.setChangeReasonFileName(bidDoc.getFileName());    }    //将变更原因内容同步到当前编辑的Object中    private void syncValue() {      ZcEbProjChange bean = (ZcEbProjChange) ZcEbProjectEditPanel.this.listCursor.getCurrentObject();      bean.setChangeReasonMemo(changeReasonMemo.getText());      if (specialReasonCode.getValue() != null) {        bean.setSpecialReasonCode(((AsVal) specialReasonCode.getValue()).getValId() + "");      }    }    public void doInvalid() {      boolean success = true;      String errorInfo = "";      int num = JOptionPane.showConfirmDialog(this, "是否作废", "作废确认", 0);      if (num != 0) {        return;      }      try {        requestMeta.setFuncId(invalidButton.getFuncId());        String chgId = ((ZcEbProjChange) listCursor.getCurrentObject()).getChgId();        if (chgId != null && !"".equals(chgId)) {          listPanel.zcEbProjectChangeServiceDelegate.updateInvalid(chgId, requestMeta);        }      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "作废成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.listPanel.refreshCurrentTabData();        this.listCursor.removeCurrentObject();        this.refreshData();      } else {        JOptionPane.showMessageDialog(this, "作废失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }    public void doDelete() {      boolean success = true;      String errorInfo = "";      int num = JOptionPane.showConfirmDialog(this, "确定删除吗", "删除确认", 0);      if (num != 0) {        return;      }      try {        requestMeta.setFuncId(deleteButton.getFuncId());        //        String projCode = ((ZcEbProjChange) listCursor.getCurrentObject()).getProjCode();        ZcEbProjChange projChange = ((ZcEbProjChange) listCursor.getCurrentObject());        if (projChange.getChgId() != null && !"".equals(projChange.getChgId())) {          listPanel.zcEbProjectChangeServiceDelegate.deleteZcEbProjChange(projChange.getChgId(), requestMeta);        }      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.listPanel.refreshCurrentTabData();        this.listCursor.removeCurrentObject();        this.refreshData();      } else {        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }    public boolean doSave() {      syncValue();      ZcEbProjChange proj = (ZcEbProjChange) listCursor.getCurrentObject();      if (!isDataChanged()) {        JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      ZcEbProjChange afterSaveProj = null;      boolean success = true;      String errorInfo = "";      try {        //校验变更金额和预算金额        if (proj.getProjSum() == null || proj.getProjSum().doubleValue() <= 0) {          JOptionPane.showMessageDialog(null, "【涉及变更的金额】必须大于0.0！", "提示", JOptionPane.INFORMATION_MESSAGE);          return false;        }        if (proj.getProjSum().longValue() > proj.getProjSrcSum().longValue()) {          JOptionPane.showMessageDialog(null, "【涉及变更的金额】超出预算", "提示", JOptionPane.INFORMATION_MESSAGE);          return false;        }        if (proj.getPurType() == null && (proj.getPackList() == null || proj.getPackList().size() == 0)) {          JOptionPane.showMessageDialog(null, "【变更采购方式】项必填！", "提示", JOptionPane.INFORMATION_MESSAGE);          return false;        }        if (proj.getPurType() != null && (proj.getPackList().size() > 0)) {          proj.setPurType(null);        }        if (proj.getSpecialReasonCode() == null || proj.getChangeReasonMemo() == null || "".equals(proj.getChangeReasonMemo())          || proj.getChangeReasonFileID() == null) {          String tip = "";          if (proj.getSpecialReasonCode() == null)            tip = "【变更原因】，";          if (proj.getChangeReasonMemo() == null || "".equals(proj.getChangeReasonMemo()))            tip += "【情况说明】，";          //          if(proj.getChangeReasonFileID() == null)          //            tip +="【变更原因附件】，";          if (tip.trim().length() > 0) {            tip += "不能为空！";            JOptionPane.showMessageDialog(null, tip, "提示", JOptionPane.INFORMATION_MESSAGE);            return false;          }        }        if (isAllChanged) {          if (proj.getPurType() != null && proj.getPurType().equalsIgnoreCase(proj.getPurLstType())) {            JOptionPane.showMessageDialog(this, "变更后的采购方式必须和原来的采购方式不一样！", "提示", JOptionPane.INFORMATION_MESSAGE);            return false;          }        } else {          if (!checkPackItem()) {            return false;          }        }        requestMeta.setFuncId(saveButton.getFuncId());        afterSaveProj = listPanel.zcEbProjectChangeServiceDelegate.saveZcEbProjChange(proj, this.requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.refreshAll(afterSaveProj, false);        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "保存失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }      return true;    }    private boolean checkPackItem() {      ZcEbProjChange proj = (ZcEbProjChange) listCursor.getCurrentObject();      List<ZcEbProjChangePack> zcEbProjChangePackList = proj.getPackList();      int i = 0;      for (ZcEbProjChangePack zcEbProjChangePack : zcEbProjChangePackList) {        i++;        if (zcEbProjChangePack.getPurWay() == null) {          JOptionPane.showMessageDialog(this, zcEbProjChangePack.getPackName() + "的采购方式必填！", "提示", JOptionPane.INFORMATION_MESSAGE);          return false;        }        if (zcEbProjChangePack.getPurSrcWay().equals(zcEbProjChangePack.getPurWay())) {          JOptionPane.showMessageDialog(this, zcEbProjChangePack.getPackName() + "的变更后的采购方式必须和原来的采购方式不一样！", "提示", JOptionPane.INFORMATION_MESSAGE);          return false;        }      }      return true;    }    /*    * 送审    */    private void doSend() {      boolean success = true;      ZcEbProjChange afterSaveProj = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.sendButton.getFuncId());        ZcEbProjChange proj = (ZcEbProjChange) this.listCursor.getCurrentObject();        proj.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveProj = listPanel.zcEbProjectChangeServiceDelegate.newCommitFN(proj, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        this.refreshAll(afterSaveProj, true);        JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "送审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }    /**     * 是否送主任审核     */    private void doSendNext() {      ZcEbProjChange proj = (ZcEbProjChange) this.listCursor.getCurrentObject();      int sel = JOptionPane.showConfirmDialog(this, "是否送主任审核？");      if (sel == JOptionPane.OK_OPTION) {        executeAudit(proj, ZcSettingConstants.IS_GOON_AUDIT_YES);      } else {        executeAudit(proj, ZcSettingConstants.IS_GOON_AUDIT_NO);      }    }    private void executeAudit(ZcEbProjChange proj, int isGoonAudit) {      if (isDataChanged()) {        JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),        ModalityType.APPLICATION_MODAL);      if (commentDialog.cancel) {        return;      }      boolean success = true;      String errorInfo = "";      try {        proj.setIsGoonAudit(isGoonAudit);        proj.setComment(commentDialog.getComment());        proj.setAuditorId(WorkEnv.getInstance().getCurrUserId());        requestMeta.setFuncId(this.isSendToNextButton.getFuncId());        listPanel.zcEbProjectChangeServiceDelegate.updateZcEbProjChange(proj, requestMeta);        listPanel.zcEbProjectChangeServiceDelegate.auditFN(proj, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        this.refreshAll(proj, true);        JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }    /*    * 收回    */    private void doCallback() {      boolean success = true;      ZcEbProjChange afterSaveProj = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZcEbProjChange proj = (ZcEbProjChange) this.listCursor.getCurrentObject();        proj.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveProj = listPanel.zcEbProjectChangeServiceDelegate.callbackFN(proj, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        this.refreshAll(afterSaveProj, true);        JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }    /*    * 填写意见审核    */    private void doSuggestPass() {      if (isDataChanged()) {        JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),        ModalityType.APPLICATION_MODAL);      if (commentDialog.cancel) {        return;      }      boolean success = true;      ZcEbProjChange afterSaveProj = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.suggestPassButton.getFuncId());        ZcEbProjChange proj = (ZcEbProjChange) this.listCursor.getCurrentObject();        proj.setComment(commentDialog.getComment());        proj.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveProj = listPanel.zcEbProjectChangeServiceDelegate.auditFN(proj, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        if ("exec".equals(afterSaveProj.getStatus())) {          /**           * 如果变更金额等于预算金额就不会涉及到采购计划的拆分。           * 如果变更金额小于预算金额就会涉及到采购计划的拆分，变更的金额采用变更后的采购方式，剩余的金额采用原来的采购方式。           */          if (afterSaveProj.getProjSrcSum().compareTo(afterSaveProj.getProjSum()) == 1) {            //对采购计划进行拆分            ZcEbProjChange projChange = new ZcEbProjChange();            projChange.setProjCode(afterSaveProj.getProjCode());            projChange.setProjName(afterSaveProj.getProjName());            projChange.setManager(afterSaveProj.getManager());            //通过一个状态标识这个是拆分之后的计划。            projChange.setStatus("00");            projChange.setNd(afterSaveProj.getNd());            projChange.setPurType(afterSaveProj.getPurLstType());            projChange.setPurLstType(afterSaveProj.getPurLstType());            //原始金额 减去 上次的变更金额            projChange.setProjSum(afterSaveProj.getProjSrcSum().subtract(afterSaveProj.getProjSum()));            projChange.setProjSrcSum(afterSaveProj.getProjSrcSum());            projChange.setCoCode(afterSaveProj.getCoCode());            projChange.setProjSrcCode(afterSaveProj.getProjSrcCode());            SimpleDateFormat dateFormate = new SimpleDateFormat("yyyyMMdd-HH:mm:ss");            projChange.setChgId(projChange.getProjCode() + "-变更[" + dateFormate.format(new Date()) + "]");            listPanel.zcEbProjectChangeServiceDelegate.insertZcEbProjChange(projChange, requestMeta);          }        }        this.refreshAll(afterSaveProj, true);        JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }    /*    * 审核    */    private void doAudit() {      if (isDataChanged()) {        JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      boolean success = true;      ZcEbProjChange afterSaveProj = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.auditPassButton.getFuncId());        ZcEbProjChange proj = (ZcEbProjChange) this.listCursor.getCurrentObject();        proj.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveProj = listPanel.zcEbProjectChangeServiceDelegate.auditFN(proj, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        this.refreshAll(afterSaveProj, true);        JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }    /*    * 销审    */    private void doUnaudit() {      boolean success = true;      ZcEbProjChange afterSaveProj = null;      String errorInfo = "";      try {        requestMeta.setFuncId(unAuditButton.getFuncId());        ZcEbProjChange proj = (ZcEbProjChange) this.listCursor.getCurrentObject();        proj.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveProj = listPanel.zcEbProjectChangeServiceDelegate.unAuditFN(proj, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        this.refreshAll(afterSaveProj, true);        JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }    /*    * 退回    */    private void doUntread() {      if (isDataChanged()) {        JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager()        .getActiveWindow(), ModalityType.APPLICATION_MODAL);      if (commentDialog.cancel) {        return;      }      boolean success = true;      ZcEbProjChange afterSaveProj = null;      String errorInfo = "";      try {        requestMeta.setFuncId(unTreadButton.getFuncId());        ZcEbProjChange proj = (ZcEbProjChange) this.listCursor.getCurrentObject();        proj.setAuditorId(WorkEnv.getInstance().getCurrUserId());        proj.setComment(commentDialog.getComment());        afterSaveProj = listPanel.zcEbProjectChangeServiceDelegate.untreadFN(proj, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        this.refreshAll(afterSaveProj, true);        JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }    /*    * 流程跟踪    */    private void doTrace() {      ZcBaseBill bean = (ZcBaseBill) this.listCursor.getCurrentObject();      if (bean == null) {        return;      }      ZcUtil.showTraceDialog(bean, listPanel.compoId);    }    private void doExit() {      self.closeDialog();    }    public void doEdit() {      this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;      updateFieldEditorsEditable();      setButtonStatus();    }    private void setButtonStatus() {      if (this.btnStatusList.size() == 0) {        ButtonStatus bs = new ButtonStatus();        bs.setButton(this.editButton);        bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);        bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);        bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);        btnStatusList.add(bs);        bs = new ButtonStatus();        bs.setButton(this.saveButton);        bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);        bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);        bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);        bs.addBillStatus(ZcSettingConstants.BILL_STATUS_DRAFT);        bs.addBillStatus(ZcSettingConstants.BILL_STATUS_NEW);        btnStatusList.add(bs);        bs = new ButtonStatus();        bs.setButton(this.deleteButton);        bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);        bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);        bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);        bs.addBillStatus("0");        btnStatusList.add(bs);        bs = new ButtonStatus();        bs.setButton(this.sendButton);        bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);        //      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);        bs.addBillStatus("0");        btnStatusList.add(bs);        bs = new ButtonStatus();        bs.setButton(this.previousButton);        bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);        bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);        btnStatusList.add(bs);        bs = new ButtonStatus();        bs.setButton(this.nextButton);        bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);        bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);        btnStatusList.add(bs);        bs = new ButtonStatus();        bs.setButton(this.invalidButton);        bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);        bs.addBillStatus(ZcSettingConstants.BILL_STATUS_AUDITED);        bs.addBillStatus(ZcSettingConstants.BILL_STATUS_DRAFT);        btnStatusList.add(bs);        bs = new ButtonStatus();        bs.setButton(this.isSendToNextButton);        bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);        bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);        btnStatusList.add(bs);      }      ZcEbProjChange obj = (ZcEbProjChange) listCursor.getCurrentObject();      String billStatus = obj.getStatus();      ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, listPanel.compoId, obj.getProcessInstId());      //作废状态下，只有删除按钮，其他按钮应该隐藏      if ("invalid".equals(obj.getStatus())) {        toolBar.remove(editButton);        toolBar.remove(saveButton);        toolBar.remove(sendButton);        toolBar.remove(isSendToNextButton);        toolBar.remove(suggestPassButton);        toolBar.remove(auditPassButton);        toolBar.remove(callbackButton);        toolBar.remove(unAuditButton);        toolBar.remove(unTreadButton);        toolBar.remove(previousButton);        toolBar.remove(nextButton);      }    }    private class ProjectDetailHandler implements IForeignEntityHandler {      private final String columNames[];      public ProjectDetailHandler(String columNames[]) {        this.columNames = columNames;      }      //点击编辑框的时候自动执行该方法      public void excute(List selectedDatas) {        ZcEbProjChange change = (ZcEbProjChange) listCursor.getCurrentObject();        for (Object object : selectedDatas) {          ZcEbProjChange curr = (ZcEbProjChange) object;          if (!curr.getProjCode().equals(change.getProjCode())) {            change.setPackList(new ArrayList());            packTablePanel.setTableModel(ZcEbProjectChangeToTableModelConverter.convertPackToTableModel(change.getPackList()));            ZcUtil.translateColName(packTablePanel.getTable(), ZcEbProjectChangeToTableModelConverter.getPackTableColumnInfo());            setPackTableProperty(packTablePanel.getTable());          }          change.setProjCode(curr.getProjCode());//计划编号          change.setProjName(curr.getProjName());//计划名称          change.setPackName(curr.getPackName());//上次变更内容          change.setCoCode(curr.getCoCode());//预算单位代码          change.setProjSrcSum(curr.getProjSum());//上次的变更金额 ：预算金额          change.setProjSum(curr.getProjSum());          change.setOrgCode(curr.getOrgCode());          change.setAgency(curr.getAgency());          if (curr.getChgId() == null) {            change.setProjSrcCode(curr.getProjCode());//上次变更单号          } else {            change.setProjSrcCode(curr.getChgId());//上次变更单号          }          change.setPurLstType(curr.getPurType());//上次变更采购方式：原采购方式          change.setNd(curr.getNd());        }        addPackTablePanel(change);        listCursor.setCurrentObject(change);        setMyEditingObject(change);      }      @Override      public TableModel createTableModel(List showDatas) {        Object data[][] = new Object[showDatas.size()][columNames.length];        for (int i = 0; i < showDatas.size(); i++) {          //          ZcPProMake rowData = (ZcPProMake) showDatas.get(i);          ZcEbProjChange rowData = (ZcEbProjChange) showDatas.get(i);          int col = 0;          //弹出来的项目选择框信息填充          data[i][col++] = rowData.getProjCode();          data[i][col++] = rowData.getProjName();          data[i][col++] = rowData.getProjSum();          data[i][col++] = AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", rowData.getPurType());          data[i][col++] = rowData.getPackName();          data[i][col++] = rowData.getChgId();//变更单号        }        MyTableModel model = new MyTableModel(data, columNames) {          private static final long serialVersionUID = 1821460782676810898L;          @Override          public boolean isCellEditable(int row, int colum) {            return false;          }          @Override          public Class getColumnClass(int column) {            if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {              for (int row = 0; row < this.getRowCount(); row++) {                if (getValueAt(row, column) != null) {                  return getValueAt(row, column).getClass();                }              }            }            return Object.class;          }        };        return model;      }      @Override      public boolean isMultipleSelect() {        return false;      }    }    @Override    protected void updateFieldEditorsEditable() {      super.updateFieldEditors();      if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {        updateSubTableEditable(true);        projectSelectEditor.setEnabled(true);        purType.setEnabled(true);        specialReasonCode.setEnabled(true);        changeReasonMemo.setEditable(true);        reasonFile.getFileUploader().setUploadFileButton(true);        reasonFile.getFileUploader().setDelFileButton(false);      } else {        updateSubTableEditable(false);        projectSelectEditor.setEnabled(false);        purType.setEnabled(false);        specialReasonCode.setEnabled(false);        changeReasonMemo.setEditable(false);        reasonFile.getFileUploader().setDownloadFileButton(true);        reasonFile.getFileUploader().setUploadFileButton(false);        reasonFile.getFileUploader().setDelFileButton(false);        if (!ZcSettingConstants.BILL_STATUS_DRAFT.equals(this.tabStatus)) {          reasonFile.getFileUploader().setUploadFileButton(false);        }      }      reasonFile.getFileUploader().setButtonEnable();    }    //设置子表状态    protected void updateSubTableEditable(boolean isEdit) {      setWFSubTableEditable(packTablePanel, isEdit);    }    private class ZcEbPackHandler implements IForeignEntityHandler {      private final String columNames[];      private final JTable table;      public ZcEbPackHandler(String columNames[], JTable table) {        this.columNames = columNames;        this.table = table;      }      @Override      public void excute(List selectedDatas) {        BeanTableModel model = (BeanTableModel) table.getModel();        int k = table.getSelectedRow();        if (k < 0)          return;        int k2 = table.convertRowIndexToModel(k);        ZcEbProjChangePack pack = (ZcEbProjChangePack) model.getBean(k2);        if (selectedDatas.size() > 0) {          ZcEbPack selectPack = (ZcEbPack) selectedDatas.get(0);          BeanUtil.commonFieldsCopy(selectPack, pack);          pack.setPurSrcWay(selectPack.getPurType());          pack.setCoCode(selectPack.getEntrust().getCoCode());        }        model.fireTableRowsUpdated(k, k);      }      @Override      public TableModel createTableModel(List showDatas) {        Object data[][] = new Object[showDatas.size()][columNames.length];        for (int i = 0; i < showDatas.size(); i++) {          ZcEbPack rowData = (ZcEbPack) showDatas.get(i);          int col = 0;          data[i][col++] = rowData.getProjCode();          data[i][col++] = rowData.getPackCode();          data[i][col++] = rowData.getPackName();          data[i][col++] = rowData.getPackDesc();          data[i][col++] = rowData.getPackBudget();          data[i][col++] = AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", rowData.getPurType());          data[i][col++] = rowData.getEntrust().getZcMakeLinkman();          data[i][col++] = rowData.getEntrust().getZcMakeTel();        }        MyTableModel model = new MyTableModel(data, columNames) {          @Override          public boolean isCellEditable(int row, int colum) {            return false;          }        };        return model;      }      @Override      public boolean isMultipleSelect() {        return false;      }      public boolean beforeSelect(ElementConditionDto packDto) {        String projCode = (String) projectSelectEditor.getValue();        packDto.setProjCode(projCode);        return true;      }    }  }}
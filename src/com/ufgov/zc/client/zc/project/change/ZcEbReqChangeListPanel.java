package com.ufgov.zc.client.zc.project.change;import java.awt.Color;import java.awt.Container;import java.awt.DefaultKeyboardFocusManager;import java.awt.Font;import java.awt.Window;import java.awt.Dialog.ModalityType;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbReqChangeToTableModelConverter;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.ui.AbstractDataDisplay;import com.ufgov.zc.client.component.ui.AbstractEditListBill;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SaveableSearchConditionArea;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.component.ui.conditionitem.SearchConditionUtil;import com.ufgov.zc.client.print.PrintPreviewer;import com.ufgov.zc.client.print.PrintSettingDialog;import com.ufgov.zc.client.print.Printer;import com.ufgov.zc.client.util.ListUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.WFConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcEbReqChange;import com.ufgov.zc.common.zc.publish.IZcEbProjChangeServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbProjServiceDelegate;/** * @ClassName: ZcEbReqChangeListPanel * @Description: 需求变更 * @date: 2010-7-16 下午03:00:50 * @version: V1.0 * @since: 1.0 * @author: leo * @modify: */@SuppressWarnings( { "serial", "unchecked" })public class ZcEbReqChangeListPanel extends AbstractEditListBill implements ParentWindowAware {  private static final Logger logger = Logger.getLogger(ZcEbReqChangeListPanel.class);  private Window parentWindow;  public static final String compoId = "ZC_EB_REQ_CHG";  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(compoId);  public BillElementMeta getBillElementMeta() {    return billElementMeta;  }  public RequestMeta getRequestMeta() {    return requestMeta;  }  private ElementConditionDto elementConditionDto = new ElementConditionDto();  public IZcEbProjServiceDelegate zcEbProjectServiceDelegate = (IZcEbProjServiceDelegate) ServiceFactory.create(IZcEbProjServiceDelegate.class,    "zcEbProjServiceDelegate");  public IZcEbProjChangeServiceDelegate zcEbProjectChangeServiceDelegate = (IZcEbProjChangeServiceDelegate) ServiceFactory.create(    IZcEbProjChangeServiceDelegate.class, "zcEbProjChangeServiceDelegate");  public IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class,    "baseDataServiceDelegate");  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  private final class DataDisplay extends MultiDataDisplay {    private DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays, AbstractSearchConditionArea conditionArea,      boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, "ZcEbReq_ReqChgTab");      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "需求变更记录", TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体",        Font.BOLD, 15), Color.BLUE));    }    @Override    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          @Override          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {              String tabStatus = d.getStatus();              JGroupableTable table = d.getTable();              MyTableModel model = (MyTableModel) table.getModel();              int row = table.getSelectedRow();              List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(model.getList(), table));              String title = "需求变更申请表";              new ZcEbReqChangeEditDialog(ZcEbReqChangeListPanel.this, viewList, row, tabStatus, title);            }          }        });      }    }    @Override    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems, final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(compoId);      elementConditionDto.setExecutor(WorkEnv.getInstance().getCurrUserId());      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setStatus(tableDisplay.getStatus());      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        @Override        public void before() {          assert c != null;          installLoadingComponent(c);        }        @Override        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        @Override        public TableModel execute() throws Exception {          return ZcEbReqChangeToTableModelConverter.convertToTableModel(ZcEbReqChangeListPanel.this.zcEbProjectChangeServiceDelegate            .getZcEbReqChangeList(elementConditionDto, requestMeta));        }        @Override        public void success(TableModel model) {          tableDisplay.setTableModel(model);          setButtonsVisiable();          //          setButtonStatus();        }      });    }  }  static {    LangTransMeta.init("ZC%");  }  /**   * 构造函数   */  public ZcEbReqChangeListPanel() {    UIUtilities.asyncInvoke(new DefaultInvokeHandler<List<SearchCondition>>() {      @Override      public List<SearchCondition> execute() throws Exception {        List<SearchCondition> needDisplaySearchConditonList = SearchConditionUtil.getNeedDisplaySearchConditonListJoinRole(WorkEnv.getInstance()          .getCurrUserId(), "ZcEbReq_ReqChgTab");        return needDisplaySearchConditonList;      }      @Override      public void success(List<SearchCondition> needDisplaySearchConditonList) {        List<TableDisplay> showingDisplays = SearchConditionUtil.getNeedDisplayTableDisplay(needDisplaySearchConditonList);        init(createDataDisplay(showingDisplays), null);//调用父类方法        revalidate();        repaint();      }    });    requestMeta.setCompoId(compoId);  }  private AbstractSearchConditionArea topSearchConditionArea;  private AbstractSearchConditionArea createTopConditionArea() {    topSearchConditionArea = new SaveableSearchConditionArea("ZC_EB_PROJ_CHG", null, true, new HashMap(), null);    return topSearchConditionArea;  }  private AbstractDataDisplay createDataDisplay(List<TableDisplay> showingDisplays) {    return new DataDisplay(SearchConditionUtil.getAllTableDisplayJoinRole(WorkEnv.getInstance().getCurrUserId(), "ZcEbProj_ProjChgTab"),      showingDisplays, createTopConditionArea(), true);    //true:显示收索条件区 false：不显示收索条件区  }  @Override  protected void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    //    toolBar.add(addReChangeButton);    //toolBar.add(deleteButton);    //toolBar.add(sendButton);    //toolBar.add(isSendToNextButton);    toolBar.add(suggestPassButton);//填写意见审核通过    //toolBar.add(callbackButton);    //toolBar.add(unTreadButton);//退回    toolBar.add(traceButton);    //    toolBar.add(printButton);    //    toolBar.add(printPreviewButton);    //    toolBar.add(printSettingButton);    //    toolBar.add(helpButton);    toolBar.add(traceDataButton);    // 初始化按钮的action事件    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    //    addReChangeButton.addActionListener(new ActionListener() {    //      public void actionPerformed(ActionEvent e) {    //        doReChgAdd();    //      }    //    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSend();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAuditPass();      }    });    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doCallBack();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doUnTread();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doTrace();      }    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrint();      }    });    printPreviewButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrintPreview();      }    });    printSettingButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrintSetting();      }    });    traceDataButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doTraceDataButton();      }    });  }  public void refreshCurrentTabData() {    topSearchConditionArea.doSearch();  }  public void refreshCurrentTabData(List beanList) {    topDataDisplay.getActiveTableDisplay().getTable().setModel(ZcEbReqChangeToTableModelConverter.convertToTableModel(beanList));  }  public List<ZcEbReqChange> getCheckedList() {    List<ZcEbReqChange> beanList = new ArrayList<ZcEbReqChange>();    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    MyTableModel model = (MyTableModel) table.getModel();    List<ZcEbReqChange> list = model.getList();    Integer[] checkedRows = table.getCheckedRows();    for (Integer checkedRow : checkedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      ZcEbReqChange bean = list.get(accordDataRow);      beanList.add(bean);    }    return beanList;  }  private void doAdd() {    new ZcEbReqChangeEditDialog(ZcEbReqChangeListPanel.this, new ArrayList(1), -1, topDataDisplay.getActiveTableDisplay().getStatus(), "需求变更申请表");  }  private void doDelete() {    List<ZcEbReqChange> ckList = this.getCheckedList();    if (ckList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要删除的记录！", "提示", JOptionPane.ERROR_MESSAGE);      return;    }    int num = JOptionPane.showConfirmDialog(this, "是否删除当前选中所有变更记录", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      ZcEbReqChange ht = null;      String errorInfo = "";      try {        requestMeta.setFuncId(deleteButton.getFuncId());        for (int i = 0; i < ckList.size(); i++) {          ht = ckList.get(i);          this.zcEbProjectChangeServiceDelegate.deleteZcEbProjChange(ht.getChangeCode(), requestMeta);        }      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doSend() {    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    String errorInfo = "";    requestMeta.setFuncId(this.sendButton.getFuncId());    try {      for (int i = 0; i < beanList.size(); i++) {        ZcEbReqChange proj = (ZcEbReqChange) ObjectUtil.deepCopy(beanList.get(i));        proj.setAuditorId(WorkEnv.getInstance().getCurrUserId());        //TODO:        //this.zcEbProjectChangeServiceDelegate.newCommitFN(proj, requestMeta);      }    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    }  }  private void doAuditPass() {    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    String errorInfo = "";    try {      requestMeta.setFuncId(this.suggestPassButton.getFuncId());      for (int i = 0; i < beanList.size(); i++) {        ZcEbReqChange proj = (ZcEbReqChange) beanList.get(i);        proj.setComment(commentDialog.getComment());        proj.setAuditorId(WorkEnv.getInstance().getCurrUserId());        //TODO:        // this.zcEbProjectChangeServiceDelegate.auditFN(proj, requestMeta);      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doTrace() {    ZcUtil.showTraceDialog(getCheckedList(), this);  }  private void doCallBack() {    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    String errorInfo = "";    try {      for (int i = 0; i < beanList.size(); i++) {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZcEbReqChange proj = (ZcEbReqChange) beanList.get(i);        proj.setAuditorId(WorkEnv.getInstance().getCurrUserId());        //TODO:        //this.zcEbProjectChangeServiceDelegate.callbackFN(proj, requestMeta);      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doUnTread() {    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    String errorInfo = "";    try {      for (int i = 0; i < beanList.size(); i++) {        requestMeta.setFuncId(unTreadButton.getFuncId());        ZcEbReqChange proj = (ZcEbReqChange) beanList.get(i);        proj.setAuditorId(WorkEnv.getInstance().getCurrUserId());        proj.setComment(commentDialog.getComment());        //TODO:        //this.zcEbProjectChangeServiceDelegate.untreadFN(proj, requestMeta);      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrint() {    List<ZcEbReqChange> printList = getCheckedList();    if (printList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要打印的数据 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    requestMeta.setFuncId(this.printButton.getFuncId());    requestMeta.setPageType(this.compoId + "_L");    boolean success = true;    boolean printed = false;    try {      PrintObject printObject = this.baseDataServiceDelegate.genMainBillPrintObjectFN(printList, requestMeta);      if (Printer.print(printObject)) {        printed = true;      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印出错！\n" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    }    if (success && printed) {    }  }  private void doPrintPreview() {    final List<ZcEbReqChange> printList = getCheckedList();    if (printList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要打印预览的数据 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    requestMeta.setFuncId(this.printPreviewButton.getFuncId());    requestMeta.setPageType(this.compoId + "_L");    try {      PrintObject printObject = this.baseDataServiceDelegate.genMainBillPrintObjectFN(printList, requestMeta);      PrintPreviewer previewer = new PrintPreviewer(printObject) {        @Override        protected void afterSuccessPrint() {        }      };      previewer.preview();    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印预览出错！\n" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrintSetting() {    requestMeta.setFuncId(this.printSettingButton.getFuncId());    requestMeta.setPageType(this.compoId + "_L");    new PrintSettingDialog(requestMeta);  }  private void doTraceDataButton() {    List beanList = getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择一条要进行跟踪的数据！", "错误", JOptionPane.ERROR_MESSAGE);      return;    }    ZcEbReqChange sh = (ZcEbReqChange) beanList.get(0);    //TODO:    //DataFlowConsoleCanvas dfc = new DataFlowConsoleCanvas(sh.getProjCode(), this.compoId);    //dfc.showWindow();  }  private void setButtonStatus() {    String panelId = WFConstants.AUDIT_TAB_STATUS_TODO;    if (topDataDisplay != null && topDataDisplay.getActiveTableDisplay() != null) {      panelId = topDataDisplay.getActiveTableDisplay().getStatus();    }    if (WFConstants.AUDIT_TAB_STATUS_TODO.equalsIgnoreCase(panelId)) {      suggestPassButton.setEnabled(true);      isSendToNextButton.setEnabled(true);      unAuditButton.setEnabled(false);      unTreadButton.setEnabled(true);      sendButton.setEnabled(false);    } else if (WFConstants.EDIT_TAB_STATUS_ACCEPTED.equalsIgnoreCase(panelId)) {      suggestPassButton.setEnabled(false);      isSendToNextButton.setEnabled(false);      unAuditButton.setEnabled(false);      unTreadButton.setEnabled(false);      sendButton.setEnabled(true);    } else if (WFConstants.EDIT_TAB_STATUS_UNACCEPTED.equalsIgnoreCase(panelId)) {      suggestPassButton.setEnabled(false);      isSendToNextButton.setEnabled(false);      unAuditButton.setEnabled(false);      unTreadButton.setEnabled(false);      sendButton.setEnabled(false);    } else if (WFConstants.AUDIT_TAB_STATUS_DONE.equalsIgnoreCase(panelId)) {      suggestPassButton.setEnabled(false);      isSendToNextButton.setEnabled(false);      unAuditButton.setEnabled(true);      unTreadButton.setEnabled(false);      sendButton.setEnabled(false);    } else if (WFConstants.AUDIT_TAB_STATUS_ALL.equalsIgnoreCase(panelId)) {      suggestPassButton.setEnabled(false);      isSendToNextButton.setEnabled(false);      unAuditButton.setEnabled(false);      unTreadButton.setEnabled(false);      sendButton.setEnabled(false);    } else if (WFConstants.AUDIT_TAB_STATUS_AUDITED.equalsIgnoreCase(panelId)) {      suggestPassButton.setEnabled(false);      isSendToNextButton.setEnabled(false);      unAuditButton.setEnabled(false);      unTreadButton.setEnabled(false);      sendButton.setEnabled(false);    }  }  public static void main(String[] args) {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        //        UIManager.getDefaults().put("SplitPaneUI", BigButtonSplitPaneUI.class.getName());        ZcEbReqChangeListPanel bill = new ZcEbReqChangeListPanel();        JFrame frame = new JFrame("frame");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }}
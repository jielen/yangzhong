package com.ufgov.zc.client.zc.project.integration.zbbook.services;import java.io.File;import java.io.FileOutputStream;import java.util.ArrayList;import java.util.List;import javax.swing.JOptionPane;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.zc.project.integration.zbbook.ZBPanel;import com.ufgov.zc.client.zc.ztb.DataChecker;import com.ufgov.zc.client.zc.ztb.JobThreads;import com.ufgov.zc.client.zc.ztb.component.ProjectInfoPanel;import com.ufgov.zc.client.zc.ztb.component.SingleSeletionTree;import com.ufgov.zc.client.zc.ztb.model.BusinessProject;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.service.ServerProjectService;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.client.zc.ztb.util.ZipFilePubFunc;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbProjZbFile;import com.ufgov.zc.common.zc.publish.IZcEbFormulaServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbZbFileServiceDelegate;public class ZbBookOperatorsService {  private SmartTreeNode rootNode = null;  private ZcEbProjZbFile serverZbFile = null;  private ZBPanel zbPanel = null;  private AsFile asFile = null;  private ServerProjectService serverProjectService = new ServerProjectService();  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  public IZcEbZbFileServiceDelegate zcEbZbFileServiceDelegate = (IZcEbZbFileServiceDelegate) ServiceFactory.create(IZcEbZbFileServiceDelegate.class,    "zcEbZbFileServiceDelegate");  private IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class,    "baseDataServiceDelegate");  private IZcEbFormulaServiceDelegate zcEbFormulaServiceDelegate = (IZcEbFormulaServiceDelegate) ServiceFactory.create(    IZcEbFormulaServiceDelegate.class, "zcEbFormulaServiceDelegate");  public ZbBookOperatorsService(ZBPanel zbPanel) {    this.zbPanel = zbPanel;  }  public void toSynLocalAndServer(String projCode,boolean zbBookRedoFlag) throws Exception {    boolean localExist = toCheckLocalExist(projCode);    boolean serverExist = toCheckServerExist(projCode);    if ((!localExist && !serverExist)||zbBookRedoFlag) {//如果服务器端和客户端都不存在，那么需要导入项目      importProject(projCode);    } else if (localExist && !serverExist) {//如果服务器端没有，而只有客户端有，那么直接读取客户端的      return;    } else if (!localExist && serverExist) {//如果服务器端存在，而客户端不存在，那么直接下载服务器端的      toGetZbFileFromServer(projCode);    } else if (localExist && serverExist) {//如果服务器端和客户端都存在，那么需要进行流水版本比较      int localNO = readLocalFlowingNO(projCode);      int serverNO = readServerFlowingNO(projCode);      if (localNO >= serverNO) {//如果本地的流水号较大，那么直接读取客户端的        return;      } else {        toGetZbFileFromServer(projCode);      }    }  }  /**   * 从服务器中获得招标文件   *   * @param projCode   */  private void toGetZbFileFromServer(String projCode) {    //清除本地临时文件目录    //deleteZbFile();    if (serverZbFile == null) {      return;    }    String downloadPath = GV.getImportFileDir_FromRoot().append("download.tmp").append(File.separator).toString();    File file = saveFileToLocal(asFile, downloadPath);    if (file != null) {      String targetDir = GV.getImportFileDir_FromRoot().append(projCode).append(File.separator).toString();      ZipFilePubFunc.unzipFileToDestDir(file, targetDir);      try {        String objFilePath = GV.getImportFileDir_FromRoot().append(projCode).append(File.separator).append(projCode).append(GV.SUFFIX_XML).toString();        this.serverProjectService.importProjectFromLocal(objFilePath);      } catch (Exception e) {        e.printStackTrace();      }    }  }  /**   * 将文件保存到本地   *   * @param asFile   * @param downloadPath   * @return   */  public File saveFileToLocal(AsFile asFile, String downloadPath) {    if (asFile == null) {      return null;    }    File path = new File(downloadPath);    if (!path.exists()) {      path.mkdirs();    }    File tempFile = new File(downloadPath + File.separator + asFile.getFileId());    FileOutputStream os = null;    byte[] b = asFile.getFileContent();    try {      os = new FileOutputStream(tempFile);      os.write(b, 0, b.length);      os.close();    } catch (Exception e) {      e.printStackTrace();      throw new BusinessException("保存下载文件时出错！", e);    }    return tempFile;  }  /**   * 导入项目   *   * @param projCode   * @throws Exception   */  private void importProject(String projCode) throws Exception {    List<String> projCodes = new ArrayList<String>();    projCodes.add(projCode);    (new ServerProjectService()).importProjectFromServer(projCodes);  }  /**   * 检查本地是否存在招标书   *   * @param projCode   * @return   * @throws Exception   */  private boolean toCheckLocalExist(String projCode) throws Exception {    if (projCode == null || "".equals(projCode)) {      return true;    }    if (!toCheckLocalProjInfoMatch(projCode)) {      return false;    }    for (int i = 0; i < rootNode.getChildCount(); i++) {      if (projCode.equals(((SmartTreeNode) rootNode.getChildAt(i)).getNodeCode())) {        SmartTreeNode zbNode = PubFunction.getNeedingNodeInChildren(rootNode, GV.NODE_TYPE_ZB);        SmartTreeNode tbNode = PubFunction.getNeedingNodeInChildren(rootNode, GV.NODE_TYPE_TB);        SmartTreeNode ylbNode = PubFunction.getNeedingNodeInChildren(rootNode, GV.NODE_TYPE_TBYLB);        return zbNode != null && tbNode != null && ylbNode != null;      }    }    return false;  }  /**   * 检查本地是不是已经有了项目配置信息   *   * @param projCode   * @return   * @throws Exception   */  private boolean toCheckLocalProjInfoMatch(String projCode) throws Exception {    BusinessProject bpLoc = ProjectInfoPanel.getBusinessProject();    // String manager = bpLoc.getManager(); //TODO  先注视掉项目经办人    String purType = bpLoc.getPurType();    String projName = bpLoc.getName();    if (projName == null || purType == null) {      return false;    }    BusinessProject bpServ = (new ServerProjectService()).readBusinessProject(projCode);    return purType.equals(bpServ.getPurType()) && projName.equals(bpServ.getName());  }  /**   * 检查服务器端是否存在招标书   *   * @param projCode   * @return   */  private boolean toCheckServerExist(String projCode) {    serverZbFile = zcEbZbFileServiceDelegate.getZcebZbFileByProjCode(projCode, this.requestMeta);    if (serverZbFile != null) {      asFile = baseDataServiceDelegate.getAsFileById(serverZbFile.getFileId(), this.requestMeta);      return asFile != null;    } else {      return false;    }  }  private int readLocalFlowingNO(String projCode) {    Integer fn = ProjectInfoPanel.getBusinessProject().getFlowingNO();    return fn == null ? 1 : fn;  }  private int readServerFlowingNO(String projCode) {    Integer fn = serverZbFile.getFlowingNO();    return fn == null ? 1 : fn;  }  public SmartTreeNode getRootNode() {    return rootNode;  }  public void setRootNode(SmartTreeNode rootNode) {    this.rootNode = rootNode;  }  /**   * 检查服务器端是否上传过标书   *   * @param proj   * @throws Exception   */  public void toCheckZbBookSaved(ZcEbProj proj) throws Exception {    zbPanel.saveWordPane();    String projCode = proj.getProjCode();    boolean localExist = toCheckLocalExist(projCode);    boolean serverExist = toCheckServerExist(projCode);    //    boolean formulaExist = toCheckServerFormulaExist(projCode);//去掉对评标方法的校验，因为评标方法是在需求确认模块添加。项目管理只是进行了引用    boolean formulaExist = true;    if (!localExist && !serverExist) {//如果服务器端和客户端都不存在，那么提示项目没有招标书      if (!formulaExist) {        JOptionPane.showMessageDialog(null, "当前项目缺少：\n1、项目招标书；\n2、评标(审)方法；\n请记得补上！");      } else {        JOptionPane.showMessageDialog(null, "当前项目缺少招标书，请记得补上！");      }      return;    } else if (localExist && !serverExist) {//如果服务器端没有，而只有客户端有，那么将客户端的招标书上传到服务器      if (!formulaExist) {        JOptionPane.showMessageDialog(null, "当前项目缺少【评标(审)方法】，请记得补上！");        return;      }      int sel = JOptionPane.showConfirmDialog(null, "当前项目在本地的招标书尚未上传到服务器，是否现在上传？", "提示", JOptionPane.YES_NO_OPTION);      if (sel == JOptionPane.OK_OPTION) {        doPrepareUploadZbFile(proj);      }    } else if (!localExist && serverExist) {//如果服务器端存在，而客户端不存在，那么直接返回      if (!formulaExist) {        JOptionPane.showMessageDialog(null, "当前项目缺少【评标(审)方法】，请记得补上！");      }      return;    } else if (localExist && serverExist) {//如果服务器端和客户端都存在，那么需要进行流水版本比较      int localNO = readLocalFlowingNO(projCode);      int serverNO = readServerFlowingNO(projCode);      if (localNO > serverNO) {//如果本地的流水号较大，那么将客户端的上传到服务器        int sel = JOptionPane.showConfirmDialog(null, "当前项目本地的招标书与服务器端的不同，是否上传覆盖？", "提示", JOptionPane.YES_NO_OPTION);        if (sel == JOptionPane.OK_OPTION) {          if (!formulaExist) {            JOptionPane.showMessageDialog(null, "当前项目缺少【评标(审)方法】，请先补上，然后再上传招标书！");            return;          }          doPrepareUploadZbFile(proj);        }        return;      }    }    if (!formulaExist) {      JOptionPane.showMessageDialog(null, "当前项目缺少【评标(审)方法】，请记得补上！");      return;    }  }  /**   * 检查项目是否缺少招标书和评标方法   *   * @param projCode   * @return   */  public boolean toCheckZbFileAndEvalElements(String projCode) {    boolean serverExist = toCheckServerExist(projCode);    StringBuffer info = new StringBuffer();    int count = 0;    /**     * 评标方法在需求确认模块制作，制作招标文件只是引用过来，不需要在做校验     */    //    boolean formulaExist = toCheckServerFormulaExist(projCode);    //    if (!formulaExist) {    //      count++;    //      info.append("  " + count + "、项目缺少评标方法，不能送审！\n");    //    }    if (!serverExist) {      count++;      info.append("  " + count + "、项目缺少招标书，不能送审！\n");    }    if (count > 0) {      JOptionPane.showMessageDialog(null, "当前项目缺少以下内容：\n" + info);      return true;    }    return false;  }  private boolean toCheckServerFormulaExist(String projCode) {    ElementConditionDto dto = new ElementConditionDto();    dto.setProjCode(projCode);    List<ZcEbFormula> list = zcEbFormulaServiceDelegate.getZcEbFormulaListByProjCode(dto, requestMeta);    return list.size() > 0;  }  private void doPrepareUploadZbFile(ZcEbProj proj) {    SingleSeletionTree ssTree = this.zbPanel.getSingleSeletionTree();    if (!DataChecker.toCheckKeyMsgInZTBFile()) {      return;    }    new JobThreads().startUploadProjectThread(ssTree, null);  }}
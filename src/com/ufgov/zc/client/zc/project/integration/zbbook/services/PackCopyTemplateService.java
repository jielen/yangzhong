package com.ufgov.zc.client.zc.project.integration.zbbook.services;import com.ufgov.zc.client.zc.ztb.dao.ReadObjectFileToObjectDao;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.model.Templates;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.zc.model.ZcZBFileTemplate;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class PackCopyTemplateService {  private ReadObjectFileToObjectDao readTbFileDao = ReadObjectFileToObjectDao.getInstance();  /**   * 从数据库提取模板数据   *   * @return   * @throws Exception   */  public List<Map<String, String>> getTemplatesList(String type, String tplbelongbidway) throws Exception {    List<Map<String, String>> tplList = null;    //  从xml文件中读取信息。改版成从数据库中读取信息。这里面取到的就是List<Template>    Templates templates = null;    if ("DataBase".equals(type)) {      // 从数据库读取      templates = readTbFileDao.readTemplateFromDB(tplbelongbidway);    } else if ("LocalData".equals(type)) {      // 从xml文件读取      templates = readTbFileDao.readTemplateFromTPLLib(tplbelongbidway);    } else {      return null;    }    if (templates != null && templates.getTemplateList() != null) {      tplList = new ArrayList<Map<String, String>>();      for (Object o : templates.getTemplateList()) {        ZcZBFileTemplate item = (ZcZBFileTemplate) o;        Map<String, String> storeMap = getTemplateMap(item);        if (storeMap != null) {          tplList.add(storeMap);        }      }    }    return tplList;  }  /**   * table字段和对象里面的字段的对照   *   * @param tpl   * @return   */  private Map<String, String> getTemplateMap(ZcZBFileTemplate tpl) {    Map<String, String> tplMap = new HashMap<String, String>();    SimpleDateFormat sdf = new SimpleDateFormat(ZcSettingConstants.SIMPLE_DATE_FORMAT_DATE_ONLY);    tplMap.put("TPLNO", tpl.getTplNo());    tplMap.put("TPLAPPTYPE", tpl.getTplAppType());    tplMap.put("TPLBELONGBIDWAY", tpl.getTplBelongBidWay());    tplMap.put("TPLPROJECTNAME", tpl.getProjName());    tplMap.put("FILEID", tpl.getFileId());    if (tpl.getLatestUsed() != null) {      tplMap.put("LATESTUSED", sdf.format(tpl.getLatestUsed()));    }    tplMap.put("DESCRIPTION", tpl.getDescription());    List list = null;    if (list == null) {      tplMap.put("HISTORY", "暂无使用！");    } else {      tplMap.put("HISTORY", "查看历史");    }    tplMap.put("TPL_PATH", tpl.getTplFullPath());    return tplMap;  }  /**   * 重新构建项目节点树配置文件   *   * @param projTreeNode   * @return   */  public boolean rebuildProjTreeNodeXML(SmartTreeNode projTreeNode) {    if (projTreeNode == null || !GV.NODE_TYPE_PROJECT.equals(projTreeNode.getNodeType())) {      return false;    } else {      try {        String configPath = GV.getProjectConfigFullPath();        SmartTreeNode rootNode = (SmartTreeNode) projTreeNode.getParent();        PubFunction.checkAndCreateDirOrFile(configPath, "F", true, true, rootNode);      } catch (Exception e) {        e.printStackTrace();      }    }    return true;  }}
package com.ufgov.zc.client.zc.project.integration.zbbook.services;import java.io.File;import java.util.ArrayList;import java.util.List;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.zc.ztb.component.MainPanel;import com.ufgov.zc.client.zc.ztb.docautogenerate.operate.GenWordTable;import com.ufgov.zc.client.zc.ztb.model.BusinessPack;import com.ufgov.zc.client.zc.ztb.model.BusinessProject;import com.ufgov.zc.client.zc.ztb.model.ResponsePoint;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.client.zc.ztb.util.StaticContainerMaps;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbFormulaItem;import com.ufgov.zc.common.zc.publish.IZcEbFormulaServiceDelegate;public class ResponsePointServices {  private static SmartTreeNode projNode;  private static MainPanel mainPanel;  private static RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private static IZcEbFormulaServiceDelegate zcEbFormulaServiceDelegate = (IZcEbFormulaServiceDelegate) ServiceFactory.create(    IZcEbFormulaServiceDelegate.class, "zcEbFormulaServiceDelegate"); /* public static void toCreateResponsePointList() {    projNode = StaticContainerMaps.getProjNode();    mainPanel = StaticContainerMaps.getMainPanel();    String projCode = projNode.getNodeCode();    //    String openPath = null;    //    if (mainPanel.getWordPane() != null) {    //      openPath = mainPanel.getWordPane().getOpenFile().getAbsolutePath();    //    }    //    String tmpPath = (new File(filePath)).getAbsolutePath();    //    boolean flag = tmpPath.equals(openPath);    //    if (flag) {    //      mainPanel.getWordPane().close(true);    //    }    GenWordTable genWordTable = new GenWordTable();    try {      List<SmartTreeNode> list = new ArrayList<SmartTreeNode>();      //先找到项目所有的标段，往每个标段下添加一个标书导读清单      PubFunction.doSearchAllMatchingNeedingNodeFromCurrNode(projNode, "nodeType", GV.NODE_TYPE_PACK, false, 0, list);      //将评标方法放入到招标文件文件夹下面      BusinessProject bp=(BusinessProject) projNode.getUserObject();      PubFunction.doSearchAllMatchingNeedingNodeFromCurrNode(projNode, "nodeName", getFoldName(bp.getPurType()), false, 0, list);      for (int i = 0; i < list.size(); i++) {        SmartTreeNode packNode = list.get(i);        String packCode = packNode.getNodeCode();        SmartTreeNode newNode = makePbffNode(packNode);        StringBuffer tmp = GV.getImportFileDir_FromRoot().append(packNode.getNodesFullPath()).append(File.separator)          .append(GV.NODE_NAME_RESPONSE_POINT);        String docFilePath = tmp.append(GV.SUFFIX_DOC).toString();        tmp = GV.getImportFileDir_FromRoot().append(packNode.getNodesFullPath()).append(File.separator).append(GV.NODE_NAME_RESPONSE_POINT);        String xmlFilePath = tmp.append(GV.SUFFIX_XML).toString();        try {          File file = new File(docFilePath);          genWordTable.startGenWordTable(projCode, packCode, file.getName(), file.getParent());        } catch (Exception e) {          e.printStackTrace();        }        List<ResponsePoint> responseList = new ArrayList<ResponsePoint>();        buildResponseListForPack(projCode, packCode, responseList);        String fullPath = GV.getProjectConfigFullPath();        boolean flag0 = new File(docFilePath).exists();        boolean flag1 = PubFunction.checkAndCreateDirOrFile(fullPath, "F", true, true, packNode.getRoot());        boolean flag2 = PubFunction.checkAndCreateDirOrFile(xmlFilePath, "F", true, true, responseList);        if (!flag0 || !flag1 || !flag2) {          packNode.remove(newNode);        }        mainPanel.refreshLeftFilesTreePanel();      }    } catch (Exception e) {      e.printStackTrace();      return;    }    //    if (flag) {    //      mainPanel.getWordPane().open(openPath);    //    }  }*/  public static void toCreateResponsePointList() {	    projNode = StaticContainerMaps.getProjNode();	    mainPanel = StaticContainerMaps.getMainPanel();	    String projCode = projNode.getNodeCode();	    //    String openPath = null;	    //    if (mainPanel.getWordPane() != null) {	    //      openPath = mainPanel.getWordPane().getOpenFile().getAbsolutePath();	    //    }	    //    String tmpPath = (new File(filePath)).getAbsolutePath();	    //    boolean flag = tmpPath.equals(openPath);	    //    if (flag) {	    //      mainPanel.getWordPane().close(true);	    //    }	    GenWordTable genWordTable = new GenWordTable();	    try {		  BusinessProject bp=(BusinessProject) projNode.getUserObject();	      List<SmartTreeNode> zbwjFoldLst = new ArrayList<SmartTreeNode>();	      List<SmartTreeNode> packLst = new ArrayList<SmartTreeNode>();	      //先找到项目所有的标段，往每个标段下添加一个标书导读清单	      PubFunction.doSearchAllMatchingNeedingNodeFromCurrNode(projNode, "nodeType", GV.NODE_TYPE_PACK, false, 0, packLst);	      for(int k=0;k<packLst.size();k++){	    	  SmartTreeNode packNode=packLst.get(k);	    	  BusinessPack businessPack=(BusinessPack) packNode.getUserObject();	    	  String packCode=businessPack.getNo();		      //将评标方法放入到招标文件文件夹下面		      PubFunction.doSearchAllMatchingNeedingNodeFromCurrNode(projNode, "nodeName", getFoldName(bp.getPurType()), false, 0, zbwjFoldLst);		      for (int i = 0; i < zbwjFoldLst.size(); i++) {		        SmartTreeNode zbwjFoldNode = zbwjFoldLst.get(i);		        if(zbwjFoldNode.isLeaf()){		        	continue;		        }		        SmartTreeNode newNode = makePbffNode(zbwjFoldNode);		        		        String p=GV.getImportFileDir_FromRoot().toString();		        		        if(p.endsWith("\\")){		        	p=p.substring(0, p.lastIndexOf("\\"));		        }		        StringBuffer tmp=new StringBuffer(p);		        tmp.append(zbwjFoldNode.getNodesFullPath()).append(File.separator).append(GV.NODE_NAME_RESPONSE_POINT);		        String docFilePath = tmp.append(GV.SUFFIX_DOC).toString();		        tmp=new StringBuffer(p);		        tmp.append(zbwjFoldNode.getNodesFullPath()).append(File.separator).append(GV.NODE_NAME_RESPONSE_POINT);		        String xmlFilePath = tmp.append(GV.SUFFIX_XML).toString();		        try {		          File file = new File(docFilePath);		          genWordTable.startGenWordTable(projCode, packCode, file.getName(), file.getParent());		        } catch (Exception e) {		          e.printStackTrace();		        }		        List<ResponsePoint> responseList = new ArrayList<ResponsePoint>();		        buildResponseListForPack(projCode, packCode, responseList);		        String fullPath = GV.getProjectConfigFullPath();		        boolean flag0 = new File(docFilePath).exists();		        boolean flag1 = PubFunction.checkAndCreateDirOrFile(fullPath, "F", true, true, zbwjFoldNode.getRoot());		        boolean flag2 = PubFunction.checkAndCreateDirOrFile(xmlFilePath, "F", true, true, responseList);		        if (!flag0 || !flag1 || !flag2) {		          zbwjFoldNode.remove(newNode);		        }		        mainPanel.refreshLeftFilesTreePanel();		      }	    	  	    	  	      }	    } catch (Exception e) {	      e.printStackTrace();	      return;	    }	    //    if (flag) {	    //      mainPanel.getWordPane().open(openPath);	    //    }	  }  private static String getFoldName(String purType) {	// TODO Auto-generated method stub	//暂时统一用招标文件四个字作为文件夹名称	return "招标文件";}private static void buildResponseListForPack(String projCode, String packCode, List<ResponsePoint> responseList) {    ElementConditionDto dto = new ElementConditionDto();    dto.setProjCode(projCode);    dto.setPackCode(packCode);    ZcEbFormula formula = zcEbFormulaServiceDelegate.getZcEbFormulaByPackCode(dto, requestMeta);    if (formula != null) {      List list = formula.getItemList();      for (int i = 0; i < list.size(); i++) {        ZcEbFormulaItem item = (ZcEbFormulaItem) list.get(i);        ResponsePoint rp = new ResponsePoint();        rp.setPointID(item.getItemCode());        rp.setPointMemo(item.getName());        rp.setPointDescription(item.getDescription());        rp.setPointType(item.getItemType());        responseList.add(rp);      }    }  }  /**   * 在标段节点下创建一个新的评标方法 或 评标导读文件节点   *   * @param parentNode   */  private static SmartTreeNode makePbffNode(SmartTreeNode parentNode) {    for (int i = 0; i < parentNode.getChildCount(); i++) {      if (GV.NODE_TYPE_RESPONSE_POINT.equals(((SmartTreeNode) parentNode.getChildAt(i)).getNodeType())) {        parentNode.remove(i);        continue;      }      if (GV.NODE_NAME_RESPONSE_POINT.equals(((SmartTreeNode) parentNode.getChildAt(i)).getNodeName())) {        parentNode.remove(i);      }    }    SmartTreeNode responseNode = new SmartTreeNode();    responseNode.setNodeCode(GV.NODE_TYPE_DOC + "_" + SmartTreeNode.SMART_TREE_NODE_COUNT);    responseNode.setNodeName(GV.NODE_NAME_RESPONSE_POINT);    responseNode.setNodeDirPath(GV.NODE_NAME_RESPONSE_POINT);    responseNode.setNodeDisplayName(GV.NODE_NAME_RESPONSE_POINT);    responseNode.setNodeGUID(Guid.genID());    responseNode.setNodeSequance(parentNode.getChildCount());    responseNode.setNodeSource(GV.NODE_SOURCE_FROM_SYS);    responseNode.setNodeType(GV.NODE_TYPE_DOC);    responseNode.setFileExtension(GV.SUFFIX_DOC);    responseNode.setAllowsChildren(false);    parentNode.insert(responseNode, 0);    return responseNode;  }  public static SmartTreeNode getProjNode() {    return projNode;  }  public static void setProjNode(SmartTreeNode projNode) {    ResponsePointServices.projNode = projNode;  }  public static MainPanel getMainPanel() {    return mainPanel;  }  public static void setMainPanel(MainPanel mainPanel) {    ResponsePointServices.mainPanel = mainPanel;  }}
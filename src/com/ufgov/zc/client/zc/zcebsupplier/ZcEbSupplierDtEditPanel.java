package com.ufgov.zc.client.zc.zcebsupplier;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbSupplierStatusToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.zc.activeztb.TbDocService;import com.ufgov.zc.client.zc.expertqa.ExpertQuestionUIPanel;import com.ufgov.zc.client.zc.ztb.table.TableBuilder;import com.ufgov.zc.client.zc.ztb.table.panel.TBTablePanel;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.common.commonbiz.model.Company;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityTreeHandler;import com.ufgov.zc.common.zc.model.ZcEbPtPack;import com.ufgov.zc.common.zc.publish.IZcEbSupplierServiceDelegate;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.FontMetrics;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.BufferedWriter;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStreamWriter;import java.io.UnsupportedEncodingException;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;import org.apache.log4j.Logger;/** *  * @author Administrator * */public class ZcEbSupplierDtEditPanel extends AbstractMainSubEditPanel {  private static final Logger logger = Logger.getLogger(ZcEbSupplierDtEditPanel.class);  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_DT_SUPPLIER";  private ListCursor listCursor;  private ZcEbSupplierDtListPanel listPanel;  private ZcEbSupplierDtEditPanel self = this;  private GkBaseDialog parent;  //记录当前选择的页签   private JTablePanel currJpanel;  //记录当前选择的标段   private JPanel currPackJpanel;  private int packIndex = 0;  private TBTablePanel tbPanel;  private ExpertQuestionUIPanel supplierPanel;  protected List<AbstractFieldEditor> packFieldEditors;  //private FuncButton secondPriceButton = new SecondPriceButton();  private FuncButton exitButton = new ExitButton();  private JTabbedPane packTabPane = new JTabbedPane();  private JPanel packFieldPanel = new JPanel();  //创建滚动消息面板  JPanel messageShowPanel = new JPanel(new GridBagLayout());  //创建滚动消息label  JLabel messageShowLabel = new JLabel();  private ElementConditionDto elementConditionDto = new ElementConditionDto();  private RequestMeta meta = WorkEnv.getInstance().getRequestMeta();  private JTabbedPane biTabPane1 = new JTabbedPane();  private TableBuilder tbBuilder = new TableBuilder();  private JPanel secHistoryPanel = new JPanel();  JPanel supplierCurrentPanel = new JPanel();  JPanel supplierSecHistoryAllPanel = new JPanel();  JPanel supplierAllMessage = new JPanel();  JPanel suppliserHistoryPanel = new JPanel(new GridBagLayout());  JPanel secbjPanel = new JPanel(new BorderLayout());  JPanel secbjHistoryPanel = new JPanel(new BorderLayout());  private int index = 0;  //标段页签信息  private Thread thread;  private boolean flag = true;  //旧XML文件对像  private String oldXmlTableString = "";  //新XML文件对像  private String newXmlTableString = "";  //文件路径  private String filePath;  public boolean isStop;  public JComponent tabTable = new JPanel();  public List zcEbPtPackList = new ArrayList();  public int packTabIndex = 0;  JPanel supplierBjMessage = new JPanel();  JPanel suppliserHistoryAPanel = new JPanel(new GridBagLayout());  JPanel suppliserHistoryAllPanel = new JPanel();  JScrollPane supplierScrollPanel = new JScrollPane();  public IZcEbSupplierServiceDelegate zcEbSupplierServiceDelegate = (IZcEbSupplierServiceDelegate) ServiceFactory  .create(IZcEbSupplierServiceDelegate.class, "zcEbSupplierServiceDelegate");  public ZcEbSupplierDtEditPanel(final GkBaseDialog parent, ListCursor listCursor, String tabStatus,  ZcEbSupplierDtListPanel listPanel) {    //滚动信息内容    this.listCursor = listCursor;    this.listPanel = listPanel;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "开标大厅",    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.parent = parent;    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshDate();  }  /**   * 添加项目field   */  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    ZcEbPtPack zcEbPtPack = (ZcEbPtPack) listCursor.getCurrentObject();    TextFieldEditor projCode = new TextFieldEditor("项目编号", "projCode");    TextFieldEditor projName = new TextFieldEditor("项目名称", "projName");    TextFieldEditor coName = new TextFieldEditor("采购单位", "coName");    TextFieldEditor agecyName = new TextFieldEditor("代理机构", "zcAgeyName");    TextFieldEditor openBidTime = new TextFieldEditor("开标时间", "openBidTime");    projCode.setEnabled(false);    projName.setEnabled(false);    coName.setEnabled(false);    agecyName.setEnabled(false);    openBidTime.setEnabled(false);    // evalEndTime.setEnabled(false);    editorList.add(projCode);    editorList.add(projName);    editorList.add(coName);    editorList.add(agecyName);    editorList.add(openBidTime);    for (AbstractFieldEditor editor : editorList) {      editor.setEditObject(zcEbPtPack);    }    return editorList;  }  IForeignEntityTreeHandler companyHandler = new IForeignEntityTreeHandler() {    @Override    public void excute(List selectedDatas) {      ZcEbPtPack zcEbPtPack = (ZcEbPtPack) listCursor.getCurrentObject();      if (selectedDatas != null && selectedDatas.size() > 0) {        Company company = (Company) selectedDatas.get(0);        setEditingObject(zcEbPtPack);      }    }    @Override    public boolean isMultipleSelect() {      return false;    }    @Override    public boolean isSelectLeaf() {      return false;    }  };  /**   * 添加二次报价field   * @param supplier   * @return   */  public List<AbstractFieldEditor> createSecFieldEditors(ZcEbPtPack supplier) {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    ZcEbPtPack zcEbPtPack = (ZcEbPtPack) listCursor.getCurrentObject();    TextFieldEditor packName = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME), "packName");    TextFieldEditor purContent = new TextFieldEditor("采购内容", "purContent");    TextFieldEditor evalStartTime = new TextFieldEditor("二次报价开始时间", "evalStartTime");    TextFieldEditor evalEndTime = new TextFieldEditor("二次报价结束时间", "evalEndTime");    TextFieldEditor purType = new TextFieldEditor("采购方式", "val");    packName.setEnabled(false);    purContent.setEnabled(false);    purType.setEnabled(false);    evalStartTime.setEnabled(false);    evalEndTime.setEnabled(false);    editorList.add(packName);    editorList.add(purContent);    editorList.add(purType);    if (!"0".equals(supplier.getStatus())) {      editorList.add(evalStartTime);      editorList.add(evalEndTime);    }    for (AbstractFieldEditor editor : editorList) {      editor.setEditObject(zcEbPtPack);    }    return editorList;  }  /**   * 创建二次报价field布局   * @param supplier   *    */  protected void initSecFieldEditorPanel(ZcEbPtPack supplier) {    packFieldEditors = createSecFieldEditors(supplier);    int row = 0;    int col = 0;    packFieldPanel.setLayout(new GridBagLayout());    for (int i = 0; i < packFieldEditors.size(); i++) {      AbstractFieldEditor comp = (AbstractFieldEditor) packFieldEditors.get(i);      if (comp.isVisible()) {        JLabel label = new JLabel(comp.getName());        comp.setPreferredSize(new Dimension(800, 23));        packFieldPanel.add(label, new GridBagConstraints(col, row, 1, 1, 1.0, 1.0, GridBagConstraints.EAST,        GridBagConstraints.NONE, new Insets(5, 0, 5, 5), 0, 0));        packFieldPanel.add(comp, new GridBagConstraints(col + 1, row, 1, 1, 1.0, 1.0,        GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(5, 0, 5, 5), 0, 0));        if (col == colCount * 2 - 2) {          row++;          col = 0;        } else {          col += 2;        }      }    }  }  /**   * 填充标段Field的值   * @param zcEbPtPack   */  private void setPackField(ZcEbPtPack zcEbPtPack) {    for (AbstractFieldEditor editor : packFieldEditors) {      editor.setEditObject(zcEbPtPack);    }    packFieldEditors = createSecFieldEditors(zcEbPtPack);  }  public JComponent createSubBillPanel() {    this.add(messageShowPanel, BorderLayout.SOUTH);    //标段一览Tab    JTablePanel biTablePanel;    //二次报价Tab    JTablePanel biSecBjePanel;    //询价Tab    JTablePanel biXjTablePanel;    //存放标段页    JPanel packJpanel;    //当前项目内容    elementConditionDto.setProjCode(((ZcEbPtPack) listCursor.getCurrentObject()).getProjCode());    //标段列表    zcEbPtPackList = zcEbSupplierServiceDelegate.getZcEbSupplierBd(elementConditionDto, requestMeta);    for (int i = 0; i < zcEbPtPackList.size(); i++) {      //重新生成每个标段的对象      packJpanel = new JPanel();      biTablePanel = new JTablePanel();      biSecBjePanel = new JTablePanel();      biXjTablePanel = new JTablePanel();      ZcEbPtPack zcEbPtPack = (ZcEbPtPack) zcEbPtPackList.get(i);      //创建二次报价field布局      initSecFieldEditorPanel(zcEbPtPack);      //初始化标段面版Tab      initPackTab(biTablePanel, biSecBjePanel, biXjTablePanel);      try {        //标段一览信息列表        getPackMessageList(zcEbPtPack, biTablePanel, biSecBjePanel, biXjTablePanel);      } catch (Exception e) {        e.printStackTrace();      }      if (biTabPane1 != null) {        biTabPane1.removeAll();      }      biTabPane1.addTab("标段一览", biTablePanel);      //标段一览历史信息      suppliserHistoryAllPanel.add(getHistoryBdMessage(zcEbPtPack));      biTablePanel.add(suppliserHistoryAllPanel, BorderLayout.SOUTH);      suppliserHistoryAllPanel.setBorder(BorderFactory.createTitledBorder("历史记录"));      //取系统当前时间      java.util.Date dt = null;      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:MM:SS");      DateFormat df = DateFormat.getDateInstance();      String evlStart = zcEbPtPack.getEvalStartTime();      String evlEnd = zcEbPtPack.getEvalEndTime();      if (evlStart != null && evlEnd != null) {        //        try {        //          Calendar cal = Calendar.getInstance();        //          // dt = df.parse(cal.getTime());        //          if (df.format(cal.getTime()).compareTo(df.format(sdf.parse(evlStart))) > 0        //            && df.format(cal.getTime()).compareTo(df.format(sdf.parse(evlEnd))) < 0) {        //            //二次报价信息        //            if ("1".equals(zcEbPtPack.getStatus()) || "2".equals(zcEbPtPack.getStatus())        //              || "3".equals(zcEbPtPack.getStatus())) {        //              biTabPane1.addTab("二次报价", biSecBjePanel);        //              //二次报价历史信息        //              getSecBjPanel(zcEbPtPack);        //              secHistoryPanel.add(secbjPanel);        //        //              biSecBjePanel.add(secHistoryPanel, BorderLayout.NORTH);        //              secHistoryPanel.repaint();        //        //            }        //          }        //        } catch (Exception ex) {        //          ex.printStackTrace();        //        }        //二次报价信息        elementConditionDto.setExecutor(requestMeta.getSvUserID());        List supplierCurrentList = zcEbSupplierServiceDelegate.getZcEbSecSupplierFile(elementConditionDto,        requestMeta);        if (("1".equals(zcEbPtPack.getStatus()) || "2".equals(zcEbPtPack.getStatus()) || "3"        .equals(zcEbPtPack.getStatus()))        && supplierCurrentList.size() > 0) {          biTabPane1.addTab("二次报价", biSecBjePanel);          //二次报价历史信息          getSecBjPanel(zcEbPtPack);          secHistoryPanel.add(secbjPanel);          biSecBjePanel.add(secHistoryPanel, BorderLayout.NORTH);          secHistoryPanel.repaint();        }      }      //询标      biTabPane1.addTab("询标", biXjTablePanel);      biTabPane1.addChangeListener(new javax.swing.event.ChangeListener() {        public void stateChanged(javax.swing.event.ChangeEvent evt) {          currJpanel = new JTablePanel();          currJpanel = (JTablePanel) biTabPane1.getSelectedComponent();          //saveFile();        }      });      packTabPane.addChangeListener(new javax.swing.event.ChangeListener() {        public void stateChanged(javax.swing.event.ChangeEvent evt) {          currPackJpanel = new JPanel();          currPackJpanel = (JPanel) packTabPane.getSelectedComponent();          packIndex = packTabPane.getSelectedIndex();          //saveFile();        }      });      JFrame xbFrame = new JFrame();      supplierPanel = new ExpertQuestionUIPanel(xbFrame, "supplier", meta.getSvUserName(), zcEbPtPack      .getProjCode(), zcEbPtPack.getPackCode(), zcEbPtPack.getStatus());      //询标接口,只显示供应商部分      biXjTablePanel.add(supplierPanel);      packJpanel.setLayout(new BorderLayout());      packJpanel.add(packFieldPanel, BorderLayout.NORTH);      packJpanel.add(biTabPane1, BorderLayout.WEST);      // refreshColor();      if (index < zcEbPtPackList.size()) {        //项目无标段时显示        if (zcEbPtPack.getPackName() != null) {          if (zcEbPtPack.getPackName().length() > 9) {            packTabPane.addTab(zcEbPtPack.getPackName().substring(0, 8) + "…", packJpanel);          } else {            packTabPane.addTab(zcEbPtPack.getPackName(), packJpanel);          }          packTabPane.setToolTipTextAt(i, zcEbPtPack.getPackName());        } else {          packTabPane.addTab(((ZcEbPtPack) listCursor.getCurrentObject()).getProjName(), packJpanel);          packTabPane.setToolTipTextAt(i, ((ZcEbPtPack) listCursor.getCurrentObject()).getProjName());        }        index++;      }      packTabPane.addChangeListener(new ChangeListener() {        @Override        public void stateChanged(ChangeEvent e) {          // TODO Auto-generated method stub          packTabIndex = packTabPane.getSelectedIndex();        }      });      //重置标段的Field信息      setPackField(zcEbPtPack);      packFieldPanel = new JPanel();      biTabPane1 = new JTabbedPane();    }    JTabbedPane itemTabPane = new JTabbedPane();    packTabPane.setMinimumSize(new Dimension(240, 300));    return packTabPane;  }  /**   * 初始化标段面版Tab   * @param biTablePanel   * @param biSecTablePanel   * @param biXjTablePanel   */  private void initPackTab(JTablePanel biTablePanel, JTablePanel biSecTablePanel, JTablePanel biXjTablePanel) {    biTablePanel.init();    biTablePanel.getSearchBar().setVisible(false);    biTablePanel.setTablePreferencesKey(this.getClass().getName() + "_biTable");    biTablePanel.getTable().setShowCheckedColumn(false);    biTablePanel.setPanelId("biTablePanel");    biTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    biSecTablePanel.init();    biSecTablePanel.getSearchBar().setVisible(false);    biSecTablePanel.setTablePreferencesKey(this.getClass().getName() + "_biSecTable");    biSecTablePanel.getTable().setShowCheckedColumn(false);    biSecTablePanel.setPanelId("biSecTablePanel");    biSecTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    biXjTablePanel.init();    biXjTablePanel.getSearchBar().setVisible(false);    biXjTablePanel.setTablePreferencesKey(this.getClass().getName() + "_XjTable");    biXjTablePanel.getTable().setShowCheckedColumn(false);    biXjTablePanel.setPanelId("biXjTablePanel");    biXjTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));  }  /**   * 设置滚动信息   * @param messageShowPanel   * @param scrollStr   * @param zcEbPtPack   */  public void setScrollMessage() {    messageShowLabel.setForeground(Color.red);    messageShowPanel.add(messageShowLabel);    initScrolledPanel();  }  /**   * 标段一览历史   * @param getHistoryMessage   * @return   */  private JScrollPane getHistoryBdMessage(ZcEbPtPack zcEbPtPack) {    //当前时间是否在二次开标的时间范围内    int timeFlag = 0;    //供应商信息    List<ZcEbPtPack> supplierList = new ArrayList<ZcEbPtPack>();    TbDocService tb = new TbDocService();    int borderCount = 1;    //投标某标段的所有报价信息    supplierList = zcEbSupplierServiceDelegate.getZcEbSupplierFile(elementConditionDto, requestMeta);    for (int i = 0; i < supplierList.size(); i++) {      ZcEbPtPack supplierFileId = (ZcEbPtPack) supplierList.get(i);      //    tb.setFileDownloadPath(tb.getDownloadFilePath() + File.separator + zcEbPtPack.getProjCode()      //      + File.separator + zcEbPtPack.getPackCode() + File.separator + zcEbPtPack.getProviderCode()      //      + File.separator);      tb.setFileDownloadPath(tb.getDownloadFilePath() + File.separator + zcEbPtPack.getProjCode()      + File.separator + zcEbPtPack.getPackCode() + File.separator);      if (supplierFileId.getFileId() != null && !"".equals(supplierFileId.getFileId())) {        File file = new File(tb.getFileDownloadPath() + File.separator + supplierFileId.getFileId());        //TODO:测试用代码        //File file = new File(tb.getFileDownloadPath() + File.separator + "BFA7FF82FFFFFFFFE71A09AE00000002");        // suppliserHistoryPanel.setLayout(new GridBagLayout());        if (!file.exists()) {          file = tb.downLoadEcBjFile(supplierFileId.getFileId());          if (file != null) {            supplierBjMessage = tb.getEcbjDtpackTable(file, getParamList(supplierFileId.getProviderName(),            "Y", ""), i);          } else {            return null;          }          suppliserHistoryAPanel.add(supplierBjMessage, new GridBagConstraints(0, borderCount++, 1, 1, 1.0,          1.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));        } else {          supplierBjMessage = tb.getEcbjDtpackTable(file, getParamList(supplierFileId.getProviderName(), "Y",          ""), i);          suppliserHistoryAPanel.add(supplierBjMessage, new GridBagConstraints(0, borderCount++, 1, 1, 1.0,          1.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));        }      }    }    supplierScrollPanel = new JScrollPane(suppliserHistoryAPanel);    supplierScrollPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);    supplierScrollPanel.setPreferredSize(new Dimension(UIConstants.DIALOG_0_LEVEL_WIDTH,    (int) (UIConstants.SCREEN_HEIGHT * 0.3)));    suppliserHistoryAPanel.repaint();    return supplierScrollPanel;  }  private void getSecBjPanel(ZcEbPtPack zcEbPtPack) {    getSecCurrMessage(zcEbPtPack);    supplierSecHistoryAllPanel.add(getSecHistoryMessage(zcEbPtPack));    secbjPanel.add(supplierCurrentPanel, BorderLayout.NORTH);    supplierCurrentPanel.setPreferredSize(new Dimension(UIConstants.DIALOG_0_LEVEL_WIDTH,    (int) (UIConstants.SCREEN_HEIGHT * 0.25)));    secbjPanel.add(supplierSecHistoryAllPanel, BorderLayout.CENTER);  }  /**   * 二次报价当前报价   * @param getSecHistoryMessage   * @return   */  private void getSecCurrMessage(ZcEbPtPack zcEbPtPack) {    int borderCount = 1;    //当前时间是否在二次开标的时间范围内    boolean isOnlyRead = true;    JPanel supplierPanel = new JPanel(new BorderLayout());    //供应商信息    List<ZcEbPtPack> supplierCurrentList = new ArrayList<ZcEbPtPack>();    List<ZcEbPtPack> supplierAllList = new ArrayList<ZcEbPtPack>();    TbDocService tbCurrent = new TbDocService();    TbDocService tbService = new TbDocService();    //投标某标段的当前报价信息    elementConditionDto.setExecutor(requestMeta.getSvUserID());    supplierCurrentList = zcEbSupplierServiceDelegate    .getZcEbSecSupplierFile(elementConditionDto, requestMeta);    //取系统当前时间    java.util.Date dt = null;    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");    DateFormat df = sdf.getDateInstance();    String evlStart = zcEbPtPack.getEvalStartTime();    String evlEnd = zcEbPtPack.getEvalEndTime();    if (evlStart != null && evlEnd != null) {      try {        Calendar cal = Calendar.getInstance();        // dt = df.parse(cal.getTime());        if (cal.getTime().getTime() > sdf.parse(evlStart).getTime()        && cal.getTime().getTime() < sdf.parse(evlEnd).getTime()) {          isOnlyRead = false;        }      } catch (Exception ex) {        ex.printStackTrace();      }    }    ZcEbPtPack supplierCode = (ZcEbPtPack) supplierCurrentList.get(0);    ZcEbPtPack supplierCurrCode = (ZcEbPtPack) supplierCurrentList.get(0);    tbCurrent.setFileDownloadPath(tbCurrent.getDownloadFilePath() + File.separator + zcEbPtPack.getProjCode()    + File.separator + zcEbPtPack.getPackCode() + File.separator);    if (supplierCode.getFileId() != null && !"".equals(supplierCode.getFileId())) {      File fileCurr = new File(tbCurrent.getFileDownloadPath() + File.separator      + supplierCurrCode.getFileId());      if (!fileCurr.exists()) {        fileCurr = tbService.downLoadEcBjFile(supplierCode.getFileId());        supplierCurrentPanel = tbService.getEcbjDtpackCurrSummaryTable(zcEbPtPack, fileCurr, getParamList(        supplierCode.getProviderName(), "Y", ""), 0, isOnlyRead);        tbPanel = tbService.getDtPanel();        if (oldXmlTableString.equals("")) {          oldXmlTableString = tbPanel.getXmlTableString();        }      } else {        supplierCurrentPanel = tbService.getEcbjDtpackCurrSummaryTable(zcEbPtPack, fileCurr, getParamList(        supplierCode.getProviderName(), "Y", String.valueOf(supplierAllList.size())), 0, isOnlyRead);        tbPanel = tbService.getDtPanel();        if (oldXmlTableString.equals("")) {          oldXmlTableString = tbPanel.getXmlTableString();        }        supplierPanel.add(supplierCurrentPanel, BorderLayout.NORTH);      }    }  }  /**   * 二次报价标历史   * @param getSecHistoryMessage   * @return   */  private JPanel getSecHistoryMessage(ZcEbPtPack zcEbPtPack) {    int borderCount = 1;    //当前时间是否在二次开标的时间范围内    boolean isOnlyRead = false;    JPanel supplierPanel = new JPanel(new BorderLayout());    //供应商信息    List<ZcEbPtPack> supplierCurrentList = new ArrayList<ZcEbPtPack>();    List<ZcEbPtPack> supplierAllList = new ArrayList<ZcEbPtPack>();    TbDocService tbCurrent = new TbDocService();    TbDocService tbAll = new TbDocService();    //投标某标段的当前报价信息    elementConditionDto.setExecutor(requestMeta.getSvUserID());    supplierCurrentList = zcEbSupplierServiceDelegate    .getZcEbSecSupplierFile(elementConditionDto, requestMeta);    supplierAllList = zcEbSupplierServiceDelegate.getZcEbSecSupplierAllFile(elementConditionDto, requestMeta);    for (int i = 0; i < supplierAllList.size(); i++) {      //      supplierMessagePanel = new JPanel(new BorderLayout());      ZcEbPtPack supplierCode = (ZcEbPtPack) supplierAllList.get(i);      ZcEbPtPack supplierCurrCode = (ZcEbPtPack) supplierCurrentList.get(0);      tbAll.setFileDownloadPath(tbAll.getDownloadFilePath() + File.separator + zcEbPtPack.getProjCode()      + File.separator + zcEbPtPack.getPackCode() + File.separator);      tbCurrent.setFileDownloadPath(tbCurrent.getDownloadFilePath() + File.separator      + zcEbPtPack.getProjCode() + File.separator + zcEbPtPack.getPackCode() + File.separator);      if (supplierCode.getFileId() != null && !"".equals(supplierCode.getFileId())) {        File fileAll = new File(tbAll.getFileDownloadPath() + File.separator + supplierCode.getFileId());        filePath = fileAll.getAbsolutePath();        File fileCurr = new File(tbCurrent.getFileDownloadPath() + File.separator        + supplierCurrCode.getFileId());        if (!fileAll.exists()) {          fileAll = tbAll.downLoadEcBjFile(supplierCode.getFileId());          if (fileAll != null) {            //            supplierCurrentPanel = tbAll.getEcbjDtpackCurrSummaryTable(zcEbPtPack, fileCurr, getParamList(            //              supplierCode.getProviderName(), "Y", ""), i, isOnlyRead);            tbPanel = tbAll.getDtPanel();            if (oldXmlTableString.equals("")) {              oldXmlTableString = tbPanel.getXmlTableString();            }            supplierAllMessage = tbAll.getEcbjDtpackSummaryTable(zcEbPtPack, fileAll, getParamList(            supplierCode.getProviderName(), "Y", String.valueOf(supplierAllList.size() - i)), i);            suppliserHistoryPanel.add(supplierAllMessage, new GridBagConstraints(0, borderCount++, 1, 1, 1.0,            1.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));          }        } else {          supplierAllMessage = tbAll.getEcbjDtpackSummaryTable(zcEbPtPack, fileAll, getParamList(supplierCode          .getProviderName(), "Y", String.valueOf(supplierAllList.size() - i)), i);          //          supplierCurrentPanel = tbAll.getEcbjDtpackCurrSummaryTable(zcEbPtPack, fileCurr, getParamList(          //            supplierCode.getProviderName(), "Y", String.valueOf(supplierAllList.size() - i)), i, isOnlyRead);          tbPanel = tbAll.getDtPanel();          if (oldXmlTableString.equals("")) {            oldXmlTableString = tbPanel.getXmlTableString();          }          suppliserHistoryPanel.add(supplierAllMessage, new GridBagConstraints(0, borderCount++, 1, 1, 1.0,          1.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL, new Insets(0, 0, 0, 0), 0, 0));          //supplierPanel.add(supplierCurrentPanel, BorderLayout.NORTH);        }      }    }    JScrollPane supplierScrollPanel = new JScrollPane(suppliserHistoryPanel);    // secbjHistoryPanel.add(supplierScrollPanel, BorderLayout.CENTER);    suppliserHistoryPanel.setBorder(BorderFactory.createTitledBorder("历史记录"));    supplierScrollPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);    supplierScrollPanel.setPreferredSize(new Dimension(UIConstants.DIALOG_0_LEVEL_WIDTH,    (int) (UIConstants.SCREEN_HEIGHT * 0.26)));    supplierPanel.add(supplierScrollPanel, BorderLayout.WEST);    suppliserHistoryPanel.repaint();    return supplierPanel;  }  private List<String> getParamList(String providerName, String rmb, String count) {    //项目及标段信息    List<String> paramList = new ArrayList<String>();    paramList.add("");    paramList.add("");    paramList.add("");    paramList.add("Y");    paramList.add(providerName);    paramList.add(count);    return paramList;  }  public String getCompoId() {    return "ZC_P_PRO_MAKE";  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(getCompoId());    //toolBar.add(secondPriceButton);    toolBar.add(exitButton);    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    this.setLayout(new BorderLayout());    this.add(toolBar);  }  public void doExit() {    //saveFile();    this.setFlag(false);    this.parent.dispose();  }  private void saveFile() {    if (tbPanel != null && !oldXmlTableString.equals("")) {      if (!newXmlTableString.equals(oldXmlTableString)) {        int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);        if (num == JOptionPane.YES_OPTION) {          boolean isSave = saveTBPanel();          if (isSave) {            JOptionPane.showMessageDialog(null, "保存成功", "提示", JOptionPane.INFORMATION_MESSAGE);          } else {            JOptionPane.showMessageDialog(null, "保存失败", "提示", JOptionPane.INFORMATION_MESSAGE);          }        }      }    }  }  public boolean saveTBPanel() {    String xmlTableString = newXmlTableString;    return _save(filePath, xmlTableString);  }  private boolean _save(String filepath, String xmlTableString) {    String dir = filepath.substring(0, filepath.lastIndexOf(File.separator));    File file = new File(dir);    if (!file.exists()) {      file.mkdirs();    }    xmlTableString = "<?xml version=\"1.0\" encoding=\"" + GV.XML_CHAR_CODE + "\"?>" + xmlTableString;    try {      FileOutputStream writerStream = new FileOutputStream(filepath);      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(writerStream, GV.XML_CHAR_CODE));      writer.write(xmlTableString);      writer.close();    } catch (FileNotFoundException e) {      e.printStackTrace();      throw new RuntimeException(e);    } catch (UnsupportedEncodingException e) {      e.printStackTrace();      throw new RuntimeException(e);    } catch (IOException e) {      e.printStackTrace();      throw new RuntimeException(e);    }    return true;  }  /**   * 标段一览信息列表   * @param zcEbPtPack   * @param biTablePanel   * @param biSecTablePanel   * @param biXjTablePanel   * @throws Exception   */  private void getPackMessageList(ZcEbPtPack zcEbPtPack, JTablePanel biTablePanel,  JTablePanel biSecTablePanel, JTablePanel biXjTablePanel) throws Exception {    elementConditionDto.setPackCode(zcEbPtPack.getPackCode());    biTablePanel.setTableModel(ZcEbSupplierStatusToTableModelConverter.convertTbToTableModel(    zcEbSupplierServiceDelegate.getZcEbSupplierResult(elementConditionDto, requestMeta),    elementConditionDto));  }  public void refreshColor() {    Runnable run = new Runnable() {      @Override      public void run() {        // TODO Auto-generated method stub        while (flag) {          if (supplierPanel.isChangeColor == true && biTabPane1.getSelectedIndex() != 1) {            for (int i = 0; i < 2; i++) {              biTabPane1.setBackgroundAt(1, Color.red);            }          } else if (supplierPanel.isChangeColor == false || biTabPane1.getSelectedIndex() == 1) {            biTabPane1.setBackgroundAt(0, new Color(243, 249, 255));          }        }        try {          Thread.sleep(500);        } catch (InterruptedException e) {          // TODO Auto-generated catch block          e.printStackTrace();        }      }    };    Thread thread = new Thread(run);    thread.start();  }  /**   * 刷新数据   */  public void refreshDate() {    setScrollMessage();    Runnable run = new Runnable() {      public void run() {        while (flag) {          //设置滚动信息面版          //          if (currJpanel != null) {          //            biTabPane1.setSelectedComponent(currJpanel);          //          }          //          if (currPackJpanel != null) {          //            biTabPane.setSelectedComponent(currPackJpanel);          //          }          try {            Thread.sleep(8000);          } catch (RuntimeException ex) {            ex.printStackTrace();          } catch (InterruptedException e) {            e.printStackTrace();          }          fieldEditorPanel.setVisible(true);          supplierSecHistoryAllPanel.removeAll();          suppliserHistoryPanel.removeAll();          supplierSecHistoryAllPanel.add(getSecHistoryMessage((ZcEbPtPack) zcEbPtPackList.get(packTabIndex)));          supplierSecHistoryAllPanel.repaint();          suppliserHistoryAllPanel.removeAll();          suppliserHistoryAllPanel.add(getHistoryBdMessage((ZcEbPtPack) zcEbPtPackList.get(packTabIndex)));          //supplierScrollPanel.add(suppliserHistoryAPanel);          suppliserHistoryAllPanel.repaint();        }      }    };    thread = new Thread(run);    thread.start();  }  /**   * 生成滚动文字   * @param scrollStr   * @param messageShowPanel   */  public void initScrolledPanel() {    String scrollStr = "";    List supplierCurrentList = zcEbSupplierServiceDelegate.getZcEbScrollStatus(requestMeta);    for (int i = 0; i < supplierCurrentList.size(); i++) {      ZcEbPtPack supplierCode = (ZcEbPtPack) supplierCurrentList.get(i);      if ("1".equals(supplierCode.getStatus())) {        scrollStr = scrollStr + "    " + supplierCode.getProjName() + "：" + "已开标";      } else if ("2".equals(supplierCode.getStatus())) {        scrollStr = scrollStr + "    " + supplierCode.getProjName() + "：" + "进入符合性评标阶段";      } else if ("3".equals(supplierCode.getStatus())) {        scrollStr = scrollStr + "    " + supplierCode.getProjName() + "：" + "进入技术性评标阶段";      } else if ("4".equals(supplierCode.getStatus())) {        scrollStr = scrollStr + "    " + supplierCode.getProjName() + "：" + "评标结束";      } else if ("5".equals(supplierCode.getStatus())) {        scrollStr = scrollStr + "    " + supplierCode.getProjName() + "：" + "废标";      }    }    messageShowLabel.setText(scrollStr);    FontMetrics metrics = messageShowLabel.getFontMetrics(messageShowLabel.getFont());    int textW = metrics.stringWidth(messageShowLabel.getText());    Dimension frameSize = messageShowPanel.getSize();    for (int i = 1; i <= frameSize.width + 150; i++)      scrollStr += " ";    messageShowLabel.setText(scrollStr);    Runnable run = new Runnable() {      public void run() {        try {          while (flag) {            String scrollTest = messageShowLabel.getText();            if (scrollTest.length() > 1) {              scrollTest = scrollTest.substring(1, scrollTest.length()) + scrollTest.charAt(0);              messageShowLabel.setText(scrollTest);              messageShowLabel.repaint();            }            Thread.sleep(500);          }        } catch (InterruptedException ex) {          ex.printStackTrace();        }      }    };    Thread thread = new Thread(run);    thread.start();  }  public void setFlag(boolean flag) {    this.flag = flag;  }}
package com.ufgov.zc.client.zc.notice;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ComponentAdapter;import java.awt.event.ComponentEvent;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Hashtable;import java.util.Iterator;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AgreeButton;import com.ufgov.zc.client.component.button.AuditFinalPassButton;import com.ufgov.zc.client.component.button.AuditPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.DisTrackRevisionsButton;import com.ufgov.zc.client.component.button.DisagreeButton;import com.ufgov.zc.client.component.button.DownloadButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.IsSendToNextButton;import com.ufgov.zc.client.component.button.LoadMoldButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.OpenNotepadButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.ReleaseButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SendToXieBanButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.button.ViewTrackRevisionsButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.NumUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.WordFileUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.bulletinmold.IWordMoldFn;import com.ufgov.zc.client.zc.bulletinmold.ZcEbWordMoldFnHandler;import com.ufgov.zc.client.zc.freemarker.ITemplateToDocumentHandler;import com.ufgov.zc.client.zc.freemarker.TemplateToDocumentFactory;import com.ufgov.zc.client.zc.notepad.ZcNotepadDialog;import com.ufgov.zc.client.zc.ztb.activex.WordPane;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.WFConstants;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.constants.ZcValSetConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.system.util.Utils;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcEbBulletin;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMold;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMoldParam;import com.ufgov.zc.common.zc.model.ZcEbEvalReport;import com.ufgov.zc.common.zc.model.ZcEbNotice;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.publish.IZcEbNoticeServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbProjServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbWenHaoToolDelegate;public class ZcEbNoticeEditPanel extends AbstractMainSubEditPanel implements IWordMoldFn {  private static final Logger logger = Logger.getLogger(ZcEbNoticeEditPanel.class);  private IZcEbNoticeServiceDelegate zcEbNoticeServiceDelegate = (IZcEbNoticeServiceDelegate) ServiceFactory.create(IZcEbNoticeServiceDelegate.class,  "zcEbNoticeServiceDelegate");  protected IZcEbProjServiceDelegate zcEbProjServiceDelegate = (IZcEbProjServiceDelegate) ServiceFactory.create(IZcEbProjServiceDelegate.class,  "zcEbProjServiceDelegate");  protected IZcEbNoticeServiceDelegate getIZcEbNoticeServiceDelegate() {    return this.zcEbNoticeServiceDelegate;  }  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_NOTICE";  private String sqlMapSelectedProj = "ZcEbEval.getZcEbEvalReportListNotice";  private String sqlMapSelectedMold = "ZcEbBulletinWordMold.getZcEbNoticeMold";  private String replaceValue = "";  private String fileName = "";  //是否修改/如果有修改权限就修改、没有修改权限文件加密  private boolean isEditAble = false;  private ListCursor listCursor;  private ZcEbNotice oldNotice;  private String tabStatus;  private boolean ifLoadMold = false;  private boolean ifRePalceBookMark = true;  private ZcEbNoticeListPanel listPanel;  private ZcEbNoticeEditPanel self = this;  private GkBaseDialog parent;  private JTabbedPane tabPane = new JTabbedPane();  private WordPane wordPane = new WordPane();  private FuncButton saveButton = new SaveButton();  private FuncButton downloadButton = new DownloadButton();  private FuncButton editButton = new EditButton();  public FuncButton addButton = new AddButton();  public FuncButton deleteButton = new DeleteButton();  public FuncButton openNotepadButton = new OpenNotepadButton();  //工作流送审  private FuncButton sendButton = new SendButton();  // 工作流收回  private FuncButton callbackButton = new CallbackButton();  //是否送主任审核  private FuncButton isSendToNextButton = new IsSendToNextButton();  // 工作流填写意见审核通过  private FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流审核通过  private FuncButton auditPassButton = new AuditPassButton();  // 工作流销审  private FuncButton unAuditButton = new UnauditButton();  // 工作流退回  private FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  private FuncButton traceButton = new TraceButton();  // 工作流终审  private FuncButton auditFinalPassButton = new AuditFinalPassButton();  //同意  private FuncButton agreeButton = new AgreeButton();  //不同意  private FuncButton disagreeButton = new DisagreeButton();  //送协办人审核  private FuncButton sendToXieBanButton = new SendToXieBanButton();  //显示痕迹  private FuncButton viewTrackRevisionsButton = new ViewTrackRevisionsButton();  //隐藏痕迹  private FuncButton disTrackRevisionsButton = new DisTrackRevisionsButton();  private ReleaseButton releaseButton = new ReleaseButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton nextButton = new NextButton();  public FuncButton printButton = new PrintButton();  private LoadMoldButton loadMoldButton = new LoadMoldButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  ElementConditionDto packDto = new ElementConditionDto();  TextFieldEditor fieldZcMakeName = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_NAME), "projName");  String moldColumNames[] = { "模板编号", "模板名称", "公告模板类型", "状态", "备注" };  private ZcEbWordMoldFnHandler handlera = new ZcEbNoticeWordMoldFnHandler(moldColumNames, this);  private ElementConditionDto findWordMoldCondition = new ElementConditionDto();  ForeignEntityFieldEditor fieldMoldName = new ForeignEntityFieldEditor(this.sqlMapSelectedMold, findWordMoldCondition, 20, handlera, moldColumNames,  "载入模板", "moldName");  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId);  private BillElementMeta detailBillElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId + "_PACK");  ForeignEntityFieldEditor fieldZcMakeCode;  public ZcEbNoticeEditPanel(ZcEbNoticeDialog parent, ListCursor listCursor, String tabStatus, ZcEbNoticeListPanel listPanel) {    super(new ZcEbNotice(), "ZC_EB_NOTICE");    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "中标通知书", TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    WordFileUtil.setDir("bulletin");    addSubPane();    this.refreshData();  }  private void setButtonStatus() {    ZcEbNotice notice = (ZcEbNotice) listCursor.getCurrentObject();    if (WFConstants.AUDIT_TAB_STATUS_CANCEL.equals(notice.getNoticeStatus())) {      setCancelStatus(listCursor);    } else {      setButtonStatus(notice, requestMeta, this.listCursor);    }  }  /**   * 子类重写该方法，用于非工作流控制状态下按钮的编辑性   */  public void setButtonStatusWithoutWf() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs.setButton(this.addButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.exitButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.sendButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.suggestPassButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.auditPassButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.callbackButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.unAuditButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.unTreadButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      bs = new ButtonStatus();      bs.setButton(this.printButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_AUDITED);      btnStatusList.add(bs);    }    ZcEbNotice notice = (ZcEbNotice) this.listCursor.getCurrentObject();    String billStatus = notice.getNoticeStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, notice.getProcessInstId());  }  private String refreshMainData() {    ZcEbNotice notice = (ZcEbNotice) listCursor.getCurrentObject();    if (notice == null) {//新增页面      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      notice = new ZcEbNotice();      notice.setExecuteDate(this.requestMeta.getSysDate());      setDefaultValue(notice, ZcSettingConstants.PAGE_STATUS_NEW);      isEditAble = true;      //      List lst = new ArrayList();      //      lst.add(notice);      //      this.listCursor.setDataList(lst, -1);      this.listCursor.getDataList().add(notice);      listCursor.setCurrentObject(notice);    } else {      notice = zcEbNoticeServiceDelegate.getZcEbNoticeById(notice.getNoticeID(), requestMeta);      List lst = new ArrayList();      lst.add(notice);      this.listCursor.setDataList(lst, -1);      //this.listCursor.getDataList().add(notice);      listCursor.setCurrentObject(notice);    }    setButtonStatus(notice, requestMeta, this.listCursor);    this.setEditingObject(notice);    setOldObject();    Long processInstId = notice.getProcessInstId();    if (processInstId == null || processInstId.longValue() < 0) {      sendToXieBanButton.setVisible(false);    } else {      editButton.setEnabled(true);      saveButton.setEnabled(false);    }    if (processInstId != null && processInstId.longValue() < 0) {      editButton.setEnabled(true);    }    return notice.getFileID();  }  public void refreshData() {    String fileID = refreshMainData();    refreshSubTableData(fileID);    setButtonStatus();    updateWFEditorEditable();  }  public void updateWFEditorEditable() {    ZcEbNotice notice = (ZcEbNotice) listCursor.getCurrentObject();    Long processInstId = notice.getProcessInstId();    isEdit = false;    if (processInstId != null && processInstId.longValue() > 0) {      // 工作流的单据      wfCanEditFieldMap = BillElementMeta.getWfCanEditField(notice, requestMeta);      if ("cancel".equals(this.oldNotice.getNoticeStatus())) {// 撤销单据设置字段为不可编辑        wfCanEditFieldMap = null;      }      for (AbstractFieldEditor editor : fieldEditors) {        // 工作流中定义可编辑的字段        if (wfCanEditFieldMap != null && wfCanEditFieldMap.containsKey(Utils.getDBColNameByFieldName(editor.getEditObject(), editor.getFieldName()))) {          isEdit = true;          editor.setEnabled(true);        } else {          editor.setEnabled(false);        }      }      // 子表的设置      updateWFSubTableEditable();    } else {      for (AbstractFieldEditor editor : fieldEditors) {        //        logger.debug("==="+editor.getFieldName() +"="+editor.isEnabled());        if (pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT) || pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {          if ("projCode".equals(editor.getFieldName())) {            editor.setEnabled(true);          } else {            editor.setEnabled(false);          }        } else {          editor.setEnabled(false);        }        //        logger.debug("==="+editor.getFieldName() +"="+editor.isEnabled());      }    }  }  private void refreshSubTableData(String fileID) {    if (wordPane.isDocOpened()) {      wordPane.close();    }    if (fileID != null && !fileID.equals("")) {      this.fileName = WordFileUtil.loadMold(fileID);    } else {      this.fileName = WordFileUtil.loadDefaultMold();    }    if (!self.isShowing()) {      parent.addComponentListener(new ComponentAdapter() {        public void componentShown(ComponentEvent e) {          if (isEditAble == true) {            wordPane.open(self.fileName);          } else {            wordPane.openAndProtect(self.fileName, ZcSettingConstants.WORD_PASSWORD);          }        }      });    } else {      if (isEditAble == true) {        wordPane.open(self.fileName);      } else {        wordPane.openAndProtect(self.fileName, ZcSettingConstants.WORD_PASSWORD);      }    }  }  private void setDefaultValue(ZcEbNotice notice, String pageStatus) {    if (pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {      notice.setExecutor(requestMeta.getSvUserName());      notice.setExecuteDate(WorkEnv.getInstance().getTransDate());      notice.setNd(WorkEnv.getInstance().getSysNd());      notice.setNoticeStatus("0");      notice.setNoticeType("N");      notice.setAgency(requestMeta.getSvCoCode());      notice.setOrgCode(requestMeta.getSvOrgCode());    }  }  private void addSubPane() {    //下面一句是为了打开word后刷新窗口    parent.setSize(parent.getSize().width + 1, parent.getSize().height + 1);    wordPane.addPropertyChangeListener(WordPane.EVENT_NAME_OPEN_CALLBACK, new PropertyChangeListener() {      public void propertyChange(PropertyChangeEvent evt) {        //打开文件完成之后的回调函数        boolean isSuccess = (Boolean) evt.getNewValue();        if (isSuccess) {          //下面一句是为了打开word后刷新窗口          parent.setSize(parent.getSize().width - 1, parent.getSize().height - 1);        }      }    });    tabPane.addTab("中标通知书内容", wordPane);  }  private void setOldObject() {    oldNotice = (ZcEbNotice) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  public boolean isDataChanged() {    /*        //如果载入了模板并且进行了数据填充，说明数据已经修改        if (ifLoadMold && ifRePalceBookMark) {          return true;        }        //      else if (isEditAble) {        //        //      return true;        //        //    }        else if (listCursor.isEmpty()) {          return false;        } else {          return !DigestUtil.digest(oldNotice).equals(DigestUtil.digest(listCursor.getCurrentObject()));        }*/    return false;  }  public JComponent createSubBillPanel() {    return this.tabPane;  }  private void projCodeChange() {    ZcEbNotice ZcEbNotice = (ZcEbNotice) this.listCursor.getCurrentObject();    for (AbstractFieldEditor editor : this.fieldEditors) {      if (editor.getFieldName().equals("zcMakeCode")) {        Object obj = editor.getValue();        if (obj == null || obj.toString().trim().length() == 0) {          this.fieldMoldName.setValue("");          ZcEbNotice.setProjCode(null);          ZcEbNotice.setProjName(null);          ZcEbNotice.setMoldName(null);          this.fieldZcMakeName.setEditObject(ZcEbNotice);          this.fieldMoldName.setEditObject(ZcEbNotice);          this.fieldMoldName.setEnabled(true);          break;        }      }    }    setFieldMoldNameStatus();  }  private void setFieldMoldNameStatus() {    if (this.fieldZcMakeCode.getValue() == null || this.fieldZcMakeCode.getValue().toString().length() == 0) {      this.fieldMoldName.setEnabled(false);    } else {      this.fieldMoldName.setEnabled(true);    }  }  public void setLoadMoldButtonStatus() {    if (this.fieldZcMakeCode == null || this.fieldZcMakeCode.getValue() == null || this.fieldZcMakeCode.getValue().toString().length() == 0    || fieldMoldName == null || fieldMoldName.getValue() == null || fieldMoldName.getValue().toString().length() == 0) {      this.loadMoldButton.setEnabled(false);    } else {      this.loadMoldButton.setEnabled(true);    }  }  public String doOpenMold(List valueList, ZcEbBulletinWordMold bulletinMold) {    if (wordPane != null && wordPane.isDocOpened()) {      wordPane.close();    }    String moldFileName = WordFileUtil.loadMold(bulletinMold.getFileID());    if (moldFileName == null || moldFileName.length() == 0) {      //没有成功载入模板，关闭wordPane        if (wordPane != null && wordPane.isDocOpened())      wordPane.close();      return "";    }    wordPane.open(moldFileName);    fileName = moldFileName;//zcEbWordPanel.getFileName();    StringBuffer sb = new StringBuffer();    for (Iterator it = valueList.iterator(); it.hasNext();) {      ZcEbBulletinWordMoldParam zcEbBulletinWordMoldParam = (ZcEbBulletinWordMoldParam) it.next();      sb.append(zcEbBulletinWordMoldParam.getParamName());      sb.append("$$$$$");      sb.append(zcEbBulletinWordMoldParam.getParamValue());      sb.append("@@@@@");    }    return sb.toString();  }  private String saveNoticeContent() {    String fileID = "";    if (wordPane != null && wordPane.isDocOpened()) {      wordPane.save();    }    if (fileName != null && fileName.length() != 0)    fileID = WordFileUtil.uploadBulletinWordConstent(fileName);    return fileID;  }  private boolean checkBeforeSave() {    List notNullBillElementList = this.billElementMeta.getNotNullBillElement();    List notNullDetailBillElementList = this.detailBillElementMeta.getNotNullBillElement();    ZcEbNotice notice = (ZcEbNotice) this.listCursor.getCurrentObject();    StringBuilder errorInfo = new StringBuilder();    String validateInfo = ZcUtil.validateBillElementNull(notice, notNullBillElementList);    if (validateInfo.length() != 0) {      errorInfo.append("").append(validateInfo.toString()).append("\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  /**   * 创建字段对象   */  public List<AbstractFieldEditor> createFieldEditors() {    String columNames[] = { "项目编号", "项目名称", "采购类型", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE), "中标供应商" };    ZcEbProjFnHandler handler = new ZcEbProjFnHandler(columNames);    ElementConditionDto dto = new ElementConditionDto();    dto.setUserId(requestMeta.getSvUserName());    fieldZcMakeCode = new ForeignEntityFieldEditor(this.sqlMapSelectedProj, dto, 20, handler, columNames, "选择分包", "projCode");    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    fieldZcMakeCode.addValueChangeListener(new ValueChangeListener() {      @Override      public void valueChanged(ValueChangeEvent e) {        //        projCodeChange();      }    });    editorList.add(fieldZcMakeCode);    editorList.add(fieldZcMakeName);    TextFieldEditor packName = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EVAL_COMMENT_PACK_CODE), "packName");    editorList.add(packName);    TextFieldEditor providerName = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_RESULT_PROVIDER_NAME), "providerName");    editorList.add(providerName);    TextFieldEditor fieldNoticeName = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_NOTICE_NAME), "noticeName");    editorList.add(fieldNoticeName);    //    editorList.add(fieldMoldName);    AsValFieldEditor fieldNoticeType = new AsValFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_NOTICE_TYPE), "noticeType",    "ZC_VS_PITEM_OPIWAY");    editorList.add(fieldNoticeType);    MoneyFieldEditor zcUseMoneyBiSum = new MoneyFieldEditor("中标金额", "bidSum");    zcUseMoneyBiSum.setEnabled(false);    editorList.add(zcUseMoneyBiSum);    TextFieldEditor fieldInputorName = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_INPUTOR_NAME), "executor");    editorList.add(fieldInputorName);    DateFieldEditor fieldInputDate = new DateFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_INPUT_DATE), "executeDate");    editorList.add(fieldInputDate);    AsValFieldEditor fieldNoticeStatus = new AsValFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_NOTICE_STATUS), "noticeStatus",    "ZC_EB_NOTICE_STATUS");    editorList.add(fieldNoticeStatus);    TextFieldEditor fieldRemark = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_REMARK), "remark");    editorList.add(fieldRemark);    return editorList;  }  /**   * 以下添加按钮和按钮方法   */  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    addButtonMenu(this.tabStatus);    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    downloadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        WordFileUtil.doSaveWordFile("采购公告.doc", wordPane, self);      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSend();      }    });    isSendToNextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSendNext();      }    });    releaseButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        //doPublish();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doTrace();      }    });    loadMoldButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doReplaceBookMarks();      }    });    callbackButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doCallback();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 审核        doAudit();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核        doSuggestPass();      }    });    agreeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 同意        doAgree();      }    });    disagreeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 不同意        doDisagree();      }    });    sendToXieBanButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送协办人        doSendToXieBan();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 销审        doUnAudit();      }    });    viewTrackRevisionsButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 显示痕迹        wordPane.viewTrackRevisions(true);        viewTrackRevisionsButton.setVisible(false);        disTrackRevisionsButton.setVisible(true);      }    });    disTrackRevisionsButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 隐藏痕迹        wordPane.viewTrackRevisions(false);        viewTrackRevisionsButton.setVisible(true);        disTrackRevisionsButton.setVisible(false);      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退回        doUnTread();      }    });    deleteButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrint();      }    });    auditFinalPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAuditFinalPass();      }    });    openNotepadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doOpenNotepad();      }    });    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });  }  private void doOpenNotepad() {    ZcEbNotice sheet = (ZcEbNotice) this.listCursor.getCurrentObject();    String sn = fetchSn(sheet);    if (sn != null) {      new ZcNotepadDialog(sn, parent);    }  }  public String fetchSn(ZcEbNotice sheet) {    String sn = null;    if (sheet.getProjCode() == null || "".equals(sheet.getProjCode())) {      JOptionPane.showMessageDialog(this, "项目为空不能记录相关信息 ！", "错误", JOptionPane.ERROR_MESSAGE);      return sn;    }    ZcEbProj proj = zcEbProjServiceDelegate.getZcEbProjByProjCode(sheet.getProjCode(), requestMeta);    if (proj == null) {      JOptionPane.showMessageDialog(this, "项目为空不能记录相关信息 ！", "错误", JOptionPane.ERROR_MESSAGE);      return sn;    }    List packs = proj.getPackList();    if (packs == null || packs.size() == 0 || ((ZcEbPack) (packs.get(0))).getEntrustCode() == null) {      JOptionPane.showMessageDialog(this, "请先创建标段信息，再记录相关信息 ！", "错误", JOptionPane.ERROR_MESSAGE);      return sn;    }    sn = ((ZcEbPack) (packs.get(0))).getEntrustCode();    return sn;  }  private void doAuditFinalPass() {    ZcEbNotice notice = (ZcEbNotice) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.auditFinalPassButton.getFuncId());    executeAudit(notice, ZcSettingConstants.IS_GOON_AUDIT_YES, null);    IZcEbWenHaoToolDelegate zcEbWenHaoToolDelegate = (IZcEbWenHaoToolDelegate) ServiceFactory.create(IZcEbWenHaoToolDelegate.class,    "zcEbWenHaoToolDelegate");    String wenHao = zcEbWenHaoToolDelegate.getNewWenHao(notice.getNoticeID(), ZcElementConstants.WEN_HAO_TYPE_NOTICE, requestMeta);    StringBuffer sb = new StringBuffer();    sb.append("NOTICE_CODE");    sb.append("$$$$$");    sb.append(wenHao);    sb.append("@@@@@");    replaceValue = sb.toString();    doReplaceBookMarks();    String fileID = saveNoticeContent();    notice.setFileID(fileID);    this.getIZcEbNoticeServiceDelegate().updateFN(notice, requestMeta);  }  /**   * 送协办人   */  private void doSendToXieBan() {    ZcEbNotice notice = (ZcEbNotice) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.sendToXieBanButton.getFuncId());    executeAudit(notice, ZcSettingConstants.IS_GOON_AUDIT_NO, null);  }  /**   * 同意   */  private void doAgree() {    ZcEbNotice notice = (ZcEbNotice) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.agreeButton.getFuncId());    Integer auditFlag = notice.getIsGoonAudit();    auditFlag = ZcUtil.getAuditFlagValue(auditFlag, 0, requestMeta);    executeAudit(notice, auditFlag, null);  }  /**   * 不同意   */  private void doDisagree() {    ZcEbNotice notice = (ZcEbNotice) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.disagreeButton.getFuncId());    Integer auditFlag = notice.getIsGoonAudit();    auditFlag = ZcUtil.getAuditFlagValue(auditFlag, 1, requestMeta);    executeAudit(notice, auditFlag, ZcSettingConstants.AUDIT_DISAGREE_DEFULT_MESSAGE);  }  private void doPrint() {    try {      this.wordPane.print();    } catch (RuntimeException e) {      // TCJLODO Auto-generated catch block      e.printStackTrace();      JOptionPane.showMessageDialog(this, "请确认系统已经打开委托协议，再进行打印！", "提示", JOptionPane.INFORMATION_MESSAGE);    }  }  private void doSendNext() {    ZcEbNotice notice = (ZcEbNotice) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.isSendToNextButton.getFuncId());    executeAudit(notice, ZcSettingConstants.IS_GOON_AUDIT_YES, null);  }  private void executeAudit(ZcEbNotice notice, Integer isGoonAudit, String defaultMsg) {    GkCommentDialog commentDialog = null;    if (defaultMsg == null) {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL);    } else {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL, defaultMsg);    }    if (commentDialog.cancel) {    return;    }    boolean success = true;    String errorInfo = "";    try {      isGoonAudit = isGoonAudit == null ? 0 : isGoonAudit;      notice.setIsGoonAudit(isGoonAudit);      notice.setComment(commentDialog.getComment());      notice.setAuditorId(WorkEnv.getInstance().getCurrUserId());      this.getIZcEbNoticeServiceDelegate().updateFN(notice, requestMeta);      this.getIZcEbNoticeServiceDelegate().auditFN(notice, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshData();      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doDelete() {    ZcEbNotice notice = (ZcEbNotice) this.listCursor.getCurrentObject();    int num = JOptionPane.showConfirmDialog(this, "确认删除当前数据？", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      String errorInfo = "";      try {        this.getIZcEbNoticeServiceDelegate().deleteFN(notice, requestMeta);        JOptionPane.showMessageDialog(self, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;        this.listCursor.removeCurrentObject();        refreshData();        this.listPanel.refreshCurrentTabData();        updateFieldEditorsEditable();        setButtonStatus();      } catch (Exception e) {        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  /*   * 退回   */  private void doUnTread() {    if (!checkBeforeSave()) {    return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {    return;    }    boolean success = true;    ZcEbNotice afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unTreadButton.getFuncId());      ZcEbNotice notice = (ZcEbNotice) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      notice.setAuditorId(WorkEnv.getInstance().getCurrUserId());      notice.setComment(commentDialog.getComment());      afterSaveBill = this.getIZcEbNoticeServiceDelegate().untreadFN(notice, requestMeta);      afterSaveBill.setIsGoonAudit(ZcSettingConstants.IS_GOON_AUDIT_NO);      this.getIZcEbNoticeServiceDelegate().updateFN(afterSaveBill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 销审   */  private void doUnAudit() {    boolean success = true;    ZcEbNotice afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unAuditButton.getFuncId());      ZcEbNotice ht = (ZcEbNotice) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      ht.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = this.getIZcEbNoticeServiceDelegate().unAuditFN(ht, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 填写意见审核   */  private void doSuggestPass() {    ZcEbNotice ht = (ZcEbNotice) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());    requestMeta.setFuncId(this.suggestPassButton.getFuncId());    String jianShenRoleId = AsOptionMeta.getOptVal("OPT_ZC_CGZX_JSKY_ROLE");//监审组员角色    if (WorkEnv.getInstance().containRole(jianShenRoleId)) {//如果是监审员，则不修改审批状态      Integer auditFlag = ht.getIsGoonAudit();      executeAudit(ht, auditFlag, null);    } else {      executeAudit(ht, ZcSettingConstants.IS_GOON_AUDIT_NO, null);    }  }  /*   * 审核   */  private void doAudit() {    if (!checkBeforeSave()) {    return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    ZcEbNotice afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.auditPassButton.getFuncId());      ZcEbNotice ht = (ZcEbNotice) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      ht.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = this.getIZcEbNoticeServiceDelegate().auditFN(ht, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 收回   */  private void doCallback() {    boolean success = true;    ZcEbNotice afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.callbackButton.getFuncId());      ZcEbNotice notice = (ZcEbNotice) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      notice.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = this.getIZcEbNoticeServiceDelegate().callbackFN(notice, requestMeta);      afterSaveBill.setIsGoonAudit(ZcSettingConstants.IS_GOON_AUDIT_NO);      this.getIZcEbNoticeServiceDelegate().updateFN(afterSaveBill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void refreshAll(ZcEbNotice afterSaveBill, boolean isRefreshButton) {    this.listCursor.setCurrentObject(afterSaveBill);    refreshData();  }  public boolean doSave() {    // 保存之后，再点修改，修改之后保存，提示：数据未发生变化，不需保存！    //    if (!isDataChanged()) {    //    //      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);    //    //      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    //    //      updateFieldEditorsEditable();    //    //      setButtonStatus();    //    //      return false;    //    //    }    /*        if (!ifRePalceBookMark) {          JOptionPane.showMessageDialog(self, "没有填充公告内容，请点击【填充模板】按钮生成正式公告后再保存！", "提示", JOptionPane.ERROR_MESSAGE);          return false;        }    */    ZcEbNotice notice = (ZcEbNotice) this.listCursor.getCurrentObject();    if (!checkBeforeSave())    return false;    String fileID = saveNoticeContent();    notice.setFileID(fileID);    if (notice.getNoticeID() != null && !notice.getNoticeID().equals("")) {      this.getIZcEbNoticeServiceDelegate().updateFN(notice, requestMeta);    } else {      String noticeID = NumUtil.getNum(compoId, "NOTICE_ID", notice, requestMeta);      notice.setNoticeID(noticeID);      this.getIZcEbNoticeServiceDelegate().insertFN(notice, requestMeta);    }    notice = getIZcEbNoticeServiceDelegate().getZcEbNoticeById(notice.getNoticeID(), requestMeta);    this.listCursor.setCurrentObject(notice);    this.oldNotice = (ZcEbNotice) ObjectUtil.deepCopy(notice);    this.listPanel.refreshCurrentTabData();    JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    updateFieldEditorsEditable();    setButtonStatus();    //wordPane.setEnabled(false);    isEditAble = false;    this.refreshData();    deleteButton.setEnabled(true);    return true;  }  protected void doAdd() {    // TCJLODO Auto-generated method stub    this.listCursor.setCurrentObject(null);    refreshData();  }  public void doEdit() {    ZcEbNotice notice = (ZcEbNotice) this.listCursor.getCurrentObject();    isEditAble = true;    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();    //    this.refreshData();    wordPane.unProtectDoc(ZcSettingConstants.WORD_PASSWORD);    if (notice.getProcessInstId() != null && notice.getProcessInstId() > 0) {      wordPane.addTrackRevisions(true, requestMeta.getEmpName());    }    saveButton.setVisible(true);    saveButton.setEnabled(true);  }  public void doSend() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {        return;        }      } else {        listCursor.setCurrentObject(oldNotice);      }    }    requestMeta.setFuncId(this.sendButton.getFuncId());    ZcEbNotice notice = (ZcEbNotice) this.listCursor.getCurrentObject();    this.getIZcEbNoticeServiceDelegate().newCommitFN(notice, requestMeta);    notice = getIZcEbNoticeServiceDelegate().getZcEbNoticeById(notice.getNoticeID(), requestMeta);    this.listCursor.setCurrentObject(notice);    this.oldNotice = (ZcEbNotice) ObjectUtil.deepCopy(notice);    this.listPanel.refreshCurrentTabData();    JOptionPane.showMessageDialog(self, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    updateFieldEditorsEditable();    this.refreshData();    setButtonStatus();  }  private void doTrace() {    ZcEbNotice notice = (ZcEbNotice) this.getEditingObject();    if (notice == null)    notice = (ZcEbNotice) listCursor.getCurrentObject();    ZcUtil.showTraceDialog(notice, compoId);  }  public void doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {        return;        }      }    }    if (wordPane != null && wordPane.isDocOpened()) {      wordPane.close();    }    this.parent.dispose();  }  public void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {        return;        }      } else {        listCursor.setCurrentObject(oldNotice);      }    }    listCursor.previous();    refreshData();    setButtonStatus();  }  public void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {        return;        }      } else {        listCursor.setCurrentObject(oldNotice);      }    }    listCursor.next();    refreshData();    setButtonStatus();  }  public void doReplaceBookMarks() {    this.loadMoldButton.setEnabled(false);//填充完之后设为不可用    if (replaceValue != null && !replaceValue.equals("")) {      wordPane.replaceBookMarks(this.replaceValue);    }    WordFileUtil.delete(this.fileName);    wordPane.save(this.fileName);    this.fileName = this.fileName;    ifRePalceBookMark = true;    ifLoadMold = false;  }  private void addButtonMenu(String tabStatus) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(ZcEbNoticeListPanel.compoId);    toolBar.add(addButton);    toolBar.add(editButton);    //    toolBar.add(loadMoldButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    //    toolBar.add(releaseButton);    toolBar.add(downloadButton);    toolBar.add(traceButton);    toolBar.add(sendButton);    toolBar.add(callbackButton);    toolBar.add(suggestPassButton);    //    toolBar.add(auditPassButton);    //    toolBar.add(agreeButton);    //    toolBar.add(disagreeButton);    //    toolBar.add(sendToXieBanButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    //    toolBar.add(isSendToNextButton);    //    toolBar.add(sendRecordButton);    toolBar.add(printButton);    //    toolBar.add(viewTrackRevisionsButton);    //    toolBar.add(disTrackRevisionsButton);    //    toolBar.add(openNotepadButton);    //    toolBar.add(overxxjjButton);    //    toolBar.add(overxxzjButton);    toolBar.add(exitButton);    //    toolBar.add(helpButton);  }  private void refreshWordPane(ZcEbNotice notice) {    if (wordPane.isDocOpened()) {      wordPane.close();    }    String fileID = notice.getFileID();    if (fileID != null && !fileID.equals("")) {      this.fileName = WordFileUtil.loadMold(fileID);      wordPane.open(this.fileName);    } else {      this.fileName = WordFileUtil.loadDefaultMold();      wordPane.open(this.fileName);    }  }  /**   * 选择项目外部部件信息   * @author admin   * */  private class ZcEbProjFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbProjFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      ZcEbNotice notice = (ZcEbNotice) listCursor.getCurrentObject();      for (Object object : selectedDatas) {        ZcEbEvalReport report = (ZcEbEvalReport) object;        notice.setProjCode(report.getProjCode());        notice.setProjName(report.getProjName());        notice.setNoticeName(report.getProjName() + "中标通知书");        notice.setPackCode(report.getPackCode());        notice.setPackName(report.getPackName());        notice.setProviderCode(report.getProviderCode());        notice.setProviderName(report.getProviderName());        notice.setNoticeType(report.getPurType());        notice.setBidSum(report.getBidSum());        notice.setCoCode(report.getCoCode());        notice.setCoName(report.getCoName());        if (notice.getNoticeID() == null) {          handlera.flashReplaceValue();        } else {          notice.setFileID(null);          notice.setMoldName("");          refreshWordPane(notice);        }        setEditingObject(notice);        break;      }      createDocument();      //      projCodeChange();      //      setLoadMoldButtonStatus();    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      SimpleDateFormat simFormat = new SimpleDateFormat("yyyy-MM-dd");      for (int i = 0; i < showDatas.size(); i++) {        ZcEbEvalReport rowData = (ZcEbEvalReport) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = AsValDataCache.getName(ZcValSetConstants.VS_ZC_VS_PITEM_OPIWAY, rowData.getPurType());        data[i][col++] = rowData.getPackName();        data[i][col++] = rowData.getProviderName();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      // TCJLODO Auto-generated method stub      return false;    }  }  @Override  public boolean getIfLoadMold() {    // TCJLODO Auto-generated method stub    return this.ifLoadMold;  }  public void createDocument() {    // TCJLODO Auto-generated method stub    ZcEbNotice notice = (ZcEbNotice) listCursor.getCurrentObject();    Hashtable userDataMap = new Hashtable();    userDataMap.put("notice", notice);    ITemplateToDocumentHandler handler = TemplateToDocumentFactory.getInstance().getHandler(ZcEbBulletin.ZHONGBIAO_NOTICE);    if (handler == null) {      JOptionPane.showMessageDialog(this.parent, "没有找到通知书模版，请手工编制中标公告", "提示", JOptionPane.WARNING_MESSAGE);      return;    }    fileName = handler.createDocumnet(userDataMap);    if (wordPane != null) {      wordPane.close(false);    }    wordPane.open(fileName);  }  @Override  public boolean getIfRePalceBookMark() {    // TCJLODO Auto-generated method stub    return this.ifRePalceBookMark;  }  @Override  public ListCursor getListCursor() {    // TCJLODO Auto-generated method stub    return this.listCursor;  }  @Override  public String getPackCode() {    ZcEbNotice zcEbNotice = (ZcEbNotice) listCursor.getCurrentObject();    return zcEbNotice.getPackCode();  }  @Override  public JPanel getWindowObject() {    // TCJLODO Auto-generated method stub    return this;  }  @Override  public String getWordMoldViewId() {    ZcEbNotice zcEbNotice = (ZcEbNotice) listCursor.getCurrentObject();    return zcEbNotice.getProjCode();  }  @Override  public WordPane getWordPane() {    // TCJLODO Auto-generated method stub    return this.wordPane;  }  @Override  public void setIfLoadMold(boolean ifLoadMold) {    // TCJLODO Auto-generated method stub    this.ifLoadMold = ifLoadMold;    if (this.ifLoadMold) {      this.setLoadMoldButtonStatus();    }  }  @Override  public void setIfRePalceBookMark(boolean ifRePalceBookMark) {    // TCJLODO Auto-generated method stub    this.ifRePalceBookMark = ifRePalceBookMark;  }  @Override  public void setMoldName(String wordName) {    // TCJLODO Auto-generated method stub    ZcEbNotice zcEbNotice = (ZcEbNotice) listCursor.getCurrentObject();    zcEbNotice.setMoldName(wordName);    fieldMoldName.setEditObject(zcEbNotice);  }  @Override  public void setReplaceValue(String replaceValue) {    // TCJLODO Auto-generated method stub    this.replaceValue = replaceValue;  }  @Override  public void setWordMold(ZcEbBulletinWordMold bulletinMold) {    // TCJLODO Auto-generated method stub  }  private class ZcEbNoticeWordMoldFnHandler extends ZcEbWordMoldFnHandler {    public ZcEbNoticeWordMoldFnHandler(String columNames[], IWordMoldFn editPanelFun) {      super(columNames, editPanelFun);    }    public boolean beforeSelect(ElementConditionDto dto) {      ZcEbNotice zcEbNotice = (ZcEbNotice) listCursor.getCurrentObject();      if (zcEbNotice.getProjCode() == null || "".equals(zcEbNotice.getProjCode())) {        JOptionPane.showMessageDialog(self, "请选择项目", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      return true;    }  }}
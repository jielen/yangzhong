package com.ufgov.zc.client.zc.proargue;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.Serializable;import java.util.ArrayList;import java.util.Date;import java.util.Iterator;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.ZcEbProArgueDetailToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AgreeButton;import com.ufgov.zc.client.component.button.AuditFinalPassButton;import com.ufgov.zc.client.component.button.AuditPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.DisagreeButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.EnableButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FreezeButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.IsSendToNextButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SendToXieBanButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.ZcEbProArgueHandler;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.EntrustFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.FileFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityDialog;import com.ufgov.zc.client.component.zc.fieldeditor.TextAreaFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.CompanyDataCache;import com.ufgov.zc.client.util.GridBagLayoutTools;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcBaseBill;import com.ufgov.zc.common.zc.model.ZcEbProArgue;import com.ufgov.zc.common.zc.model.ZcEbProArgueDetail;import com.ufgov.zc.common.zc.model.ZcEbProtocol;import com.ufgov.zc.common.zc.publish.IZcEbProArgueDelegate;public class ZcEbProArgueEditPanel extends AbstractMainSubEditPanel {  private static final Logger logger = Logger.getLogger(ZcEbProArgueEditPanel.class);  private IZcEbProArgueDelegate zcEbProArgueDelegate = (IZcEbProArgueDelegate) ServiceFactory.create(IZcEbProArgueDelegate.class,  "zcEbProArgueDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private static final String compoId = "ZC_PRO_ARGUE";  private FuncButton addButton = new AddButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private FuncButton enableButton = new EnableButton();  private FuncButton freezeButton = new FreezeButton();  //工作流送审  private FuncButton sendButton = new SendButton();  // 工作流收回  private FuncButton callbackButton = new CallbackButton();  //是否送主任审核  private FuncButton isSendToNextButton = new IsSendToNextButton();  // 工作流填写意见审核通过  private FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流审核通过  private FuncButton auditPassButton = new AuditPassButton();  // 工作流销审  private FuncButton unAuditButton = new UnauditButton();  // 工作流退回  private FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  private FuncButton traceButton = new TraceButton();  //工作流终审核通过  private FuncButton auditFinalPassButton = new AuditFinalPassButton();  //同意  private FuncButton agreeButton = new AgreeButton();  //不同意  private FuncButton disagreeButton = new DisagreeButton();  //送协办人审核  private FuncButton sendToXieBanButton = new SendToXieBanButton();  public FuncButton printButton = new PrintButton();  private final ListCursor listCursor;  private ZcEbProArgue oldSupplier;  private ZcEbProArgueListPanel listPanel;  private JTablePanel tablePanel = new JTablePanel();  private ZcEbProArgueEditPanel self = this;  private GkBaseDialog parent;  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId);  private ForeignEntityDialog forenEntityDialog;  private GridBagLayoutTools tool = null;  private JTabbedPane tabPane;  private JTablePanel tablePanelZyxm = new JTablePanel("tablePanelZyxm");  List<AbstractFieldEditor> moreFieldEditorList;  private EntrustFieldEditor entrustFieldEditor;  public ZcEbProArgueEditPanel(ZcEbProArgueDialog dialog, ListCursor listCursor, String tabStatus, ZcEbProArgueListPanel listPanel) {    super(new ZcEbProArgue(), compoId);    this.listCursor = listCursor;    this.listPanel = listPanel;    this.parent = dialog;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("ZC_EB_PRO_ARGUE_TITLE"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();    setButtonStatus();    updateFieldEditorsEditable();  }  private void refreshData() {    ZcEbProArgue zcEbProArgue = (ZcEbProArgue) listCursor.getCurrentObject();    if (zcEbProArgue == null) {// 新增页面selectBrandSqlPart      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      zcEbProArgue = new ZcEbProArgue();      zcEbProArgue.setStatus("0");      zcEbProArgue.setArgueTime(new Date());      List lst = new ArrayList();      lst.add(zcEbProArgue);      zcEbProArgue.setDetail(new ArrayList());      this.listCursor.setDataList(lst, -1);      listCursor.setCurrentObject(zcEbProArgue);      zcEbProArgue.setNewAdd(true);      zcEbProArgue.setNd(requestMeta.getSvNd());      zcEbProArgue.setAgency(requestMeta.getSvCoCode());    } else {      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      zcEbProArgue.setDbDigest(null);      ZcEbProArgue temp = zcEbProArgueDelegate.getZcEbProArgueById(zcEbProArgue.getArgueId(), this.requestMeta);      zcEbProArgue.setDetail(temp.getDetail());      zcEbProArgue.setNewAdd(false);      zcEbProArgue.setArgueAccessoriesName(temp.getArgueAccessoriesName());    }    refreshSubTableData(zcEbProArgue);    this.setEditingObject(zcEbProArgue);    setButtonStatus(zcEbProArgue, requestMeta, this.listCursor);    updateWFEditorEditable(zcEbProArgue, requestMeta);    Long processInstId = zcEbProArgue.getProcessInstId();    if (processInstId == null || processInstId.longValue() < 0) {      sendToXieBanButton.setVisible(false);    }    setOldObject();    tabPane.repaint();  }  public JComponent createSubBillPanel() {    tabPane = new JTabbedPane();    this.createSubTabPane(tablePanelZyxm, "论证专家", true, "zyxm");    return tabPane;  }  protected JTablePanel[] getSubTables() {    return new JTablePanel[] { tablePanelZyxm };  }  private void refreshSubTableData(ZcEbProArgue zcEbProArgue) {    tablePanelZyxm.setTableModel(ZcEbProArgueDetailToTableModelConverter.convertZcEbAuditSheetDetailToTableMode(zcEbProArgue.getDetail()));    setZyxmTableProperty(tablePanelZyxm.getTable());    // setMoreSupplierInfoTable();  }  private void setZyxmTableProperty(final JTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());  }  protected void initFieldEditorPanel(Class billClass, BillElementMeta eleMeta) {    fieldEditors = createFieldEditors();    fieldEditorPanel.setLayout(new BorderLayout());    fieldEditorPanel.add(this.makeFieldEditorsPanel(), BorderLayout.NORTH);    this.fieldEditorPanel.repaint();  }  private Component makeFieldEditorsPanel() {    JPanel edPanel = new JPanel();    moreFieldEditorList = new ArrayList<AbstractFieldEditor>();    // createMoreFieldEditorList(fieldEditors);    tool = null;    tool = new GridBagLayoutTools();    tool.setColCount(3);    tool.setFieldEditorList(fieldEditors);    tool.layoutFieldEditorPanel(edPanel, ZcEbProArgue.class, "ZC_EB_ARGUE");    tool.setCurrEditingObject(this.listCursor.getCurrentObject());    tool.setOldObject(this.listCursor.getCurrentObject());    edPanel.repaint();    return edPanel;  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    ZcEbProArgueHandler handler = new ZcEbProArgueHandler() {      public void excute(List selectedDatas) {        if (selectedDatas == null && selectedDatas.size() == 0) {          JOptionPane.showMessageDialog(self, "请选择一个项目进行论证！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        if (selectedDatas.size() > 1) {          JOptionPane.showMessageDialog(self, "请只选择一个项目进行论证！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        ZcEbProArgue zepa = (ZcEbProArgue) selectedDatas.get(0);        ZcEbProArgue zcEbProArgue = (ZcEbProArgue) listCursor.getCurrentObject();        zcEbProArgue.setProCode(zepa.getProCode());        zcEbProArgue.setProName(zepa.getProName());        zcEbProArgue.setProOrg(CompanyDataCache.getName(zepa.getProOrg()));        zcEbProArgue.setLeader(zepa.getLeader());        setEditingObject(zcEbProArgue);        entrustFieldEditor.getField().setValue(zepa.getProCode());      }      public void afterClear() {      }    };    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    ElementConditionDto entrustDto = new ElementConditionDto();    entrustDto.setCoCode("exec");    entrustDto.setZcText0(requestMeta.getSvUserID());    entrustFieldEditor = new EntrustFieldEditor(handler.getSqlId(), entrustDto, 20, handler, handler.getColumNames(), LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_EB_ZC_MAKE_CODE), "proCode");    editorList.add(entrustFieldEditor);    TextFieldEditor proNameEditor = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJECT_NAME), "proName");    proNameEditor.setEnabled(false);    editorList.add(proNameEditor);    TextFieldEditor proOrg = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_NAME), "proOrg");    proOrg.setEnabled(false);    editorList.add(proOrg);    TextFieldEditor leader = new TextFieldEditor("项目负责人", "leader");    proNameEditor.setEnabled(false);    editorList.add(leader);    DateFieldEditor argueTime = new DateFieldEditor("论证时间", "argueTime");    editorList.add(argueTime);    TextFieldEditor argueAddress = new TextFieldEditor("论证地点", "argueAddress");    editorList.add(argueAddress);    TextFieldEditor orgOpinions = new TextFieldEditor("采购单位意见", "orgOpinions");    editorList.add(orgOpinions);    TextFieldEditor agencyPersons = new TextFieldEditor("中心参与人员", "agencyPersons");    editorList.add(agencyPersons);    FileFieldEditor argueAccessoriesName = new FileFieldEditor("论证附件", "argueAccessoriesName", "argueAccessoriesBlobid");    editorList.add(argueAccessoriesName);    TextFieldEditor orgPersons = new TextFieldEditor("采购单位参与人员", "orgPersons");    editorList.add(orgPersons);    TextAreaFieldEditor argueOpinions = new TextAreaFieldEditor("论证意见", "argueOpinions", 1000, 7, 6);    editorList.add(argueOpinions);    return editorList;  }  private void createSubTabPane(final JTablePanel subPanel, String title, boolean needToolBar, final String which) {    subPanel.init();    subPanel.getSearchBar().setVisible(false);    subPanel.setTablePreferencesKey(this.getClass().getName() + "_dt");    tabPane.addTab(title, subPanel);    if (!needToolBar || which == null || "".equals(which)) {      return;    }    JFuncToolBar bottomToolBar = new JFuncToolBar();    JButton addBtn = new JButton("添加");    JButton insertBtn = new JButton("插入");    JButton delBtn = new JButton("删除");    bottomToolBar.add(addBtn);    bottomToolBar.add(insertBtn);    bottomToolBar.add(delBtn);    subPanel.add(bottomToolBar, BorderLayout.SOUTH);    addBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        if (self.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {          JOptionPane.showMessageDialog(self, "请点击\"修改\"按钮切换至可编辑状态！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        Serializable bean = new ZcEbProArgueDetail();        addSub(subPanel, bean);      }    });    insertBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        if (self.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {          JOptionPane.showMessageDialog(self, "请点击\"修改\"按钮切换至可编辑状态！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        Serializable bean = new ZcEbProArgueDetail();        insertSub(subPanel, bean);      }    });    delBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        if (self.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {          JOptionPane.showMessageDialog(self, "请点击\"修改\"按钮切换至可编辑状态！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        deleteSub(subPanel);      }    });  }  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.sendButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.sendToXieBanButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.traceButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbProArgue ht = (ZcEbProArgue) this.listCursor.getCurrentObject();    String billStatus = ht.getStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, ht.getProcessInstId());  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null        && (fd.getFieldName().equals("proName") || fd.getFieldName().equals("proOrg") || fd.getFieldName().equals("leader"))        || fd.getFieldName().equals("argueAccessoriesName")) {          fd.setEnabled(false);        } else {          fd.setEnabled(true);        }      }      this.updateEditable(true);      this.saveButton.setEnabled(true);      this.editButton.setEnabled(false);    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      // for (AbstractFieldEditor fd : this.tool.getFieldEditorList()) {      // fd.setEnabled(false);      // }      this.updateEditable(false);      this.saveButton.setEnabled(false);      this.editButton.setEnabled(true);    }  }  private void updateEditable(boolean flag) {    this.tablePanel.getTable().setEnabled(flag);    if (!flag) {      ZcEbProArgueDetailToTableModelConverter.setPageStatus("NOT_EDITABLE");    } else {      ZcEbProArgueDetailToTableModelConverter.setPageStatus("EDITABLE");    }  }  private void setOldObject() {    this.oldSupplier = (ZcEbProArgue) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    // toolBar.add(addButton);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    toolBar.add(enableButton);    toolBar.add(sendButton);    toolBar.add(callbackButton);    toolBar.add(suggestPassButton);    toolBar.add(auditPassButton);    toolBar.add(agreeButton);    toolBar.add(disagreeButton);    toolBar.add(sendToXieBanButton);    toolBar.add(auditFinalPassButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(traceButton);    toolBar.add(isSendToNextButton);    toolBar.add(printButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    deleteButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doSave();      }    });    enableButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doEnable();      }    });    freezeButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doFreeze();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });    traceButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doTrace();      }    });    callbackButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doCallback();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 审核        doAudit();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核        doSuggestPass();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 销审        doUnAudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退回        doUnTread();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSend();      }    });    isSendToNextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSendNext();      }    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrint();      }    });    auditFinalPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 终审        doAuditFinalPass();      }    });    agreeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 同意        doAgree();      }    });    disagreeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 不同意        doDisagree();      }    });    sendToXieBanButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送协办人        doSendToXieBan();      }    });  }  /**   * 送协办人   */  private void doSendToXieBan() {    ZcEbProArgue bill = (ZcEbProArgue) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.sendToXieBanButton.getFuncId());    executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_NO, null);  }  /**   * 同意   */  private void doAgree() {    ZcEbProArgue bill = (ZcEbProArgue) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.agreeButton.getFuncId());    Integer auditFlag = bill.getIsGoonAudit();    auditFlag = ZcUtil.getAuditFlagValue(auditFlag, 0, requestMeta);    executeAudit(bill, auditFlag, null);  }  /**   * 不同意   */  private void doDisagree() {    ZcEbProArgue bill = (ZcEbProArgue) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.disagreeButton.getFuncId());    Integer auditFlag = bill.getIsGoonAudit();    auditFlag = ZcUtil.getAuditFlagValue(auditFlag, 1, requestMeta);    executeAudit(bill, auditFlag, ZcSettingConstants.AUDIT_DISAGREE_DEFULT_MESSAGE);  }  /*   * 填写意见审核   */  private void doSuggestPass() {    ZcEbProArgue bill = (ZcEbProArgue) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.suggestPassButton.getFuncId());    String jianShenRoleId = AsOptionMeta.getOptVal("OPT_ZC_CGZX_JSKY_ROLE");//监审组员角色    if (WorkEnv.getInstance().containRole(jianShenRoleId)) {//如果是监审员，则不修改审批状态      Integer auditFlag = bill.getIsGoonAudit();      executeAudit(bill, auditFlag, null);    } else {      executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_NO, null);    }  }  public void doAuditFinalPass() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    ZcEbProtocol afterSaveProtocol = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.auditFinalPassButton.getFuncId());      ZcEbProArgue bill = (ZcEbProArgue) this.listCursor.getCurrentObject();      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_YES, null);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }  }  private void refreshAll(ZcEbProArgue afterSaveBill, boolean isRefreshButton) {    this.listCursor.setCurrentObject(afterSaveBill);    refreshData();    //    if (isRefreshButton) {    //      setButtonStatus(afterSaveBill, requestMeta, this.listCursor);    //    }  }  private void doSend() {    boolean success = true;    ZcEbProArgue afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.sendButton.getFuncId());      ZcEbProArgue make = (ZcEbProArgue) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      make.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = this.listPanel.getZcEbProArgueDelegate().newCommitFN(make, true, requestMeta);    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      if (afterSaveBill != null) {        this.refreshAll(afterSaveBill, true);      }      this.listPanel.refreshCurrentTabData();    }  }  /*   * 审核   */  private void doAudit() {    if (!checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    ZcEbProArgue afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.auditPassButton.getFuncId());      ZcEbProArgue ht = (ZcEbProArgue) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      ht.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getZcEbProArgueDelegate().auditFN(ht, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 销审   */  private void doUnAudit() {    boolean success = true;    ZcEbProArgue afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unAuditButton.getFuncId());      ZcEbProArgue ht = (ZcEbProArgue) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      ht.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getZcEbProArgueDelegate().unAuditFN(ht, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 退回   */  private void doUnTread() {    if (!checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcEbProArgue afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unTreadButton.getFuncId());      ZcEbProArgue ht = (ZcEbProArgue) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      ht.setAuditorId(WorkEnv.getInstance().getCurrUserId());      ht.setComment(commentDialog.getComment());      //listPanel.getZcEbProArgueDelegate().updateZcEbProArgue(ht, requestMeta);      afterSaveBill = listPanel.getZcEbProArgueDelegate().untreadFN(ht, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 流程跟踪   */  private void doTrace() {    ZcBaseBill bean = (ZcBaseBill) this.listCursor.getCurrentObject();    if (bean == null) {      return;    }    ZcUtil.showTraceDialog(bean, compoId);  }  /*   * 收回   */  private void doCallback() {    boolean success = true;    ZcEbProArgue afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.callbackButton.getFuncId());      ZcEbProArgue ht = (ZcEbProArgue) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      ht.setAuditorId(WorkEnv.getInstance().getCurrUserId());      // listPanel.getZcEbProArgueDelegate().updateZcEbProArgue(ht, requestMeta);      afterSaveBill = listPanel.getZcEbProArgueDelegate().callbackFN(ht, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doSendNext() {    ZcEbProArgue bill = (ZcEbProArgue) this.listCursor.getCurrentObject();    int sel = JOptionPane.showConfirmDialog(this, "是否送主任审核？");    requestMeta.setFuncId(this.isSendToNextButton.getFuncId());    if (sel == JOptionPane.OK_OPTION) {      executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_YES, null);    } else {      executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_NO, null);    }  }  private void executeAudit(ZcEbProArgue bill, Integer isGoonAudit, String defaultMsg) {    GkCommentDialog commentDialog = null;    if (defaultMsg == null) {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL);    } else {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL, defaultMsg);    }    if (commentDialog.cancel) {      return;    }    boolean success = true;    String errorInfo = "";    ZcEbProArgue afterSaveBill = null;    try {      isGoonAudit = isGoonAudit == null ? 0 : isGoonAudit;      bill.setIsGoonAudit(isGoonAudit);      bill.setComment(commentDialog.getComment());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      //this.listPanel.getZcEbProArgueDelegate().updateZcEbProArgue(bill, requestMeta);      afterSaveBill = listPanel.getZcEbProArgueDelegate().auditFN(bill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doAdd() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;    ZcEbProArgue zcEbProArgue = new ZcEbProArgue();    listCursor.setCurrentObject(zcEbProArgue);    // setEditingObject(zcEbProArgue);    refreshData();    updateFieldEditorsEditable();    //setButtonStatus();  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    //setButtonStatus();  }  private void doDelete() {    ZcEbProArgue zcEbProArgue = (ZcEbProArgue) this.listCursor.getCurrentObject();    int num = JOptionPane.showConfirmDialog(this, "确认删除当前数据？", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      String errorInfo = "";      try {        this.zcEbProArgueDelegate.deleteZcEbProArgueByIdFN(zcEbProArgue.getArgueId(), this.requestMeta);        JOptionPane.showMessageDialog(self, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;        this.listCursor.removeCurrentObject();        refreshData();        if (this.forenEntityDialog == null) {          this.listPanel.refreshCurrentTabData();        } else {          // refreshParentForeignDialog(null);        }        updateFieldEditorsEditable();        //setButtonStatus();      } catch (Exception e) {        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doEnable() {    requestMeta.setFuncId(enableButton.getFuncId());    ZcEbProArgue zcEbProArgue = (ZcEbProArgue) this.listCursor.getCurrentObject();    // zcEbProArgue.setStatus(ZcSettingConstants.SUPPLIER_START_TO_USE_STATUS);    boolean success = true;    String errorInfo = "";    try {      this.zcEbProArgueDelegate.updateZcEbProArgueFN(zcEbProArgue, this.requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(zcEbProArgue);      if (this.forenEntityDialog == null) {        // this.listPanel.refreshCurrentTabData();      } else {        refreshParentForeignDialog(zcEbProArgue);      }      this.oldSupplier = (ZcEbProArgue) ObjectUtil.deepCopy(zcEbProArgue);      JOptionPane.showMessageDialog(self, "启用成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      updateFieldEditorsEditable();      //setButtonStatus();    } else {      JOptionPane.showMessageDialog(this, "启用失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doFreeze() {    this.requestMeta.setFuncId(freezeButton.getFuncId());    ZcEbProArgue zcEbProArgue = (ZcEbProArgue) this.listCursor.getCurrentObject();    // supplier.setStatus("3");    boolean success = true;    String errorInfo = "";    try {      this.zcEbProArgueDelegate.updateZcEbProArgueFN(zcEbProArgue, this.requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(zcEbProArgue);      if (this.forenEntityDialog == null) {        // this.listPanel.refreshCurrentTabData();      } else {        refreshParentForeignDialog(null);      }      this.oldSupplier = (ZcEbProArgue) ObjectUtil.deepCopy(zcEbProArgue);      JOptionPane.showMessageDialog(self, "冻结成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      updateFieldEditorsEditable();      //setButtonStatus();    } else {      JOptionPane.showMessageDialog(this, "冻结失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrint() {    this.requestMeta.setFuncId(this.printButton.getFuncId());    this.requestMeta.setPageType(this.compoId + "_L");    try {      ZcEbProArgue zcEbProArgue = (ZcEbProArgue) this.listCursor.getCurrentObject();      if (zcEbProArgue.getArgueId() == null) {        JOptionPane.showMessageDialog(this, "请保存后再进行打印！", "提示", 0);        return;      }      String url = WorkEnv.getInstance().getWebRoot() + "app/page/xjprint/toZcEbProArguePrint.do?id=" + zcEbProArgue.getArgueId();      ZcUtil.anyBrowse(url);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印预览出错！\n" + e.getMessage(), "错误", 0);    }  }  private void doPrevious() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(this.oldSupplier);      }    }    listCursor.previous();    refreshData();    //setButtonStatus();    this.updateFieldEditorsEditable();  }  private void doNext() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(this.oldSupplier);      }    }    listCursor.next();    refreshData();    //setButtonStatus();    this.updateFieldEditorsEditable();  }  public void doExit() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    this.parent.dispose();  }  public boolean doSave() {    stopTableEditing();    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    ZcEbProArgue zcEbProArgue = (ZcEbProArgue) this.listCursor.getCurrentObject();    if (!checkBeforeSave())      return false;    boolean success = true;    String errorInfo = "";    try {      if (zcEbProArgue.getArgueId() == null || "".equals(zcEbProArgue.getArgueId())) {        zcEbProArgue = this.zcEbProArgueDelegate.insertZcEbProArgueFN(zcEbProArgue, this.requestMeta);      } else {        this.zcEbProArgueDelegate.updateZcEbProArgueFN(zcEbProArgue, this.requestMeta);      }    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(zcEbProArgue);      this.listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      this.refreshData();      setButtonStatus();      setOldObject();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  private boolean checkBeforeSave() {    List notNullBillElementList = this.billElementMeta.getNotNullBillElement();    ZcEbProArgue zcEbProArgue = (ZcEbProArgue) this.listCursor.getCurrentObject();    StringBuilder errorInfo = new StringBuilder();    String validateInfo = ZcUtil.validateBillElementNull(zcEbProArgue, notNullBillElementList);    if (validateInfo.length() != 0) {      errorInfo.append("").append(validateInfo.toString()).append("\n");    }    if (zcEbProArgue.getDetail() == null || zcEbProArgue.getDetail().size() == 0) {      errorInfo.append("").append("要求至少要有一位论证专家！").append("\n");    }    String detailerr = valiadateDetail(zcEbProArgue.getDetail());    if (detailerr.length() > 0) {      errorInfo.append("论证专家列表中：\n").append(detailerr);    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  private String valiadateDetail(List list) {    StringBuffer sb = new StringBuffer(100);    if (list == null)      return sb.toString();    int count = 1;    for (Iterator iterator = list.iterator(); iterator.hasNext();) {      ZcEbProArgueDetail d = (ZcEbProArgueDetail) iterator.next();      String ex = null, sh = null;      if (d.getExpert() == null || "".equals(d.getExpert())) {        ex = "【专家名称】不能为空;";      }      if (d.getExpertOrg() == null || "".equals(d.getExpertOrg())) {        sh = "【专家所属单位】不能为空;";      }      if (ex != null || sh != null) {        ex = ex == null ? "" : ex;        sh = sh == null ? "" : sh;        sb.append("第 ").append(count).append("行，").append(ex).append(sh).append("\n");      }      count++;    }    return sb.toString();  }  public void doHelp() {    //setButtonStatus();  }  private void stopTableEditing() {    JPageableFixedTable table = this.tablePanel.getTable();    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldSupplier).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  /**   * 刷新对话框的数据   *    * @param supplier   *            Administrator 2010-5-18   */  void refreshParentForeignDialog(ZcEbProArgue zcEbProArgue) {    // this.forenEntityDialog.refresh(zcEbProArgue);  }  public String getPageStatus() {    return pageStatus;  }  public void setPageStatus(String pageStatus) {    this.pageStatus = pageStatus;  }}
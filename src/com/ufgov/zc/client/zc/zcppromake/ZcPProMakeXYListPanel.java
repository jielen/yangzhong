package com.ufgov.zc.client.zc.zcppromake;import java.awt.Color;import java.awt.Container;import java.awt.Font;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.math.BigDecimal;import java.text.DecimalFormat;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.commons.lang.ObjectUtils;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.component.table.TableRowHeader.CheckedEvent;import com.ufgov.smartclient.component.table.TableRowHeader.CheckedListener;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.XySpecialBrandMeta;import com.ufgov.zc.client.common.converter.zc.ZcPProMakeToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SummarizedResultPanel;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.util.ListUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.commonbiz.model.BillElement;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcBMerchandise;import com.ufgov.zc.common.zc.model.ZcPProMake;import com.ufgov.zc.common.zc.model.ZcPProMitem;import com.ufgov.zc.common.zc.model.ZcPProMitemBi;@SuppressWarnings("unchecked")public class ZcPProMakeXYListPanel extends ZcPProMakeListPanel {  private static final long serialVersionUID = 1277810469937954543L;  public static final Logger logger = Logger.getLogger(ZcPProMakeXYListPanel.class);  //协议供货预算限额  BigDecimal moneyLimit = new BigDecimal("".equals(AsOptionMeta.getOptVal("OPT_ZC_XY_MONEY_LIMIT")) ? "0"    : AsOptionMeta.getOptVal("OPT_ZC_XY_MONEY_LIMIT"));  BigDecimal moneyLimitTs = new BigDecimal("".equals(AsOptionMeta.getOptVal("OPT_ZC_XY_MONEY_LIMIT_TS")) ? "0"    : AsOptionMeta.getOptVal("OPT_ZC_XY_MONEY_LIMIT_TS"));  public String getCompoId() {    return "ZC_P_PRO_MAKE_XY";  }  public String getTabId() {    return ZcSettingConstants.TAB_ID_ZC_P_PRO_MAKE_XY;  }  public String getTitle() {    return LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_XY_TITEL);  }  public ZcPProMakeEditPanel getEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus, ZcPProMakeListPanel listPanel) {    return new ZcPProMakeXYEditPanel(parent, listCursor, tabStatus, listPanel);  }  public final class DataDisplay extends MultiDataDisplay {    public DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays, AbstractSearchConditionArea conditionArea,    boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, getTabId());      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), getTitle(), TitledBorder.CENTER, TitledBorder.TOP, new Font(      "宋体", Font.BOLD, 15), Color.BLUE));    }    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {              String tabStatus = d.getStatus();              JGroupableTable table = d.getTable();              MyTableModel model = (MyTableModel) table.getModel();              int row = table.getSelectedRow();              List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(model.getList(), table));              new ZcPProMakeDialog(self, viewList, row, tabStatus);            }          }        });        //合计信息        List sumFields = new ArrayList();        sumFields.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MONEY_BI_SUM));        d.setSummarizedResultPanel(new SummarizedResultPanel(d.getTable(), sumFields));        final JGroupableTable jTable = d.getTable();        jTable.getTableRowHeader().addCheckedListener(new CheckedListener() {          public void checkedChanged(CheckedEvent e) {            d.getSummarizedResultPanel().clearSummarizedResult();            d.getSummarizedResultPanel().refreshSummarizedResult();          }        });        d.addSorterValueChangeListener(new ValueChangeListener() {          public void valueChanged(ValueChangeEvent e) {            d.getSummarizedResultPanel().clearSummarizedResult();            d.getSummarizedResultPanel().refreshSummarizedResult();          }        });      }    }    @Override    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems, final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(getCompoId());      elementConditionDto.setExecutor(WorkEnv.getInstance().getCurrUserId());      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setStatus(tableDisplay.getStatus());      elementConditionDto.setZcText0(WorkEnv.getInstance().getCurrUserId());      setElementConditionDto(elementConditionDto);      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        @Override        public void before() {          assert c != null;          installLoadingComponent(c);        }        @Override        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        @Override        public TableModel execute() throws Exception {          if (getCompoId().equals("ZC_P_PRO_MAKE_XY")) {            return ZcPProMakeToTableModelConverter.convertToTableModelXieYi(self.ZcPProMakeServiceDelegate.getZcPProMake(elementConditionDto,            requestMeta));          }          return ZcPProMakeToTableModelConverter.convertToTableModel(self.ZcPProMakeServiceDelegate.getZcPProMake(elementConditionDto, requestMeta));        }        @Override        public void success(TableModel model) {          tableDisplay.setTableModel(model);          setButtonStatus();          //刷新合计行          tableDisplay.getSummarizedResultPanel().clearSummarizedResult();          tableDisplay.getSummarizedResultPanel().refreshSummarizedResult();        }      });    }  }  public void setElementConditionDto(ElementConditionDto dto) {    // 协议供货    dto.setZcText2(ZcPProMake.CAIGOU_TYPE_XIEYI);  }  /**   * 保存前校验   * @param cpApply   * @return   */  public boolean checkBeforeSave(ZcPProMake zcPProMake, JComponent panel) {    List mainNotNullList = new ArrayList();    List itemNotNullList = new ArrayList();    List biNotNullList = new ArrayList();    List merNotNullList = new ArrayList();    if (ZcPProMake.CAIGOU_TYPE_DZJJ.equals(zcPProMake.getZcFukuanType())) {      mainNotNullList = ((BillElementMeta) billElementMeta).getNotNullBillElement();      //  mainNotNullList.add((BillElement)(LangTransMeta.translate(FIELD_TRANS_ZC_EB_XY_END_DATE)));      itemNotNullList = itemBillElementMetaWithoutNd.getNotNullBillElement();      biNotNullList = biBillElementMeta.getNotNullBillElement();      merNotNullList = itemBillElementMeta.getNotNullBillElement();    } else {      mainNotNullList = ((BillElementMeta) billElementMeta).getNotNullBillElement();      for (int i = 0; i < mainNotNullList.size(); i++) {        BillElement b = (BillElement) mainNotNullList.get(i);        if ("ZC_EB_XY_END_DATE".equals(b.getElementCode())) {          mainNotNullList.remove(b);        }      }      //去掉对供应商的校验      /**      itemNotNullList = self.itemBillElementMeta.getNotNullBillElement();      BillElement be = new BillElement();      be.setElementId("ZC_P_PRO_MITEM_ZC_SU_CODE");      be.setElementCode("ZC_SU_CODE");      be.setElementName("供应商");      itemNotNullList.add(be);**/      biNotNullList = self.biBillElementMeta.getNotNullBillElement();      if (ZcPProMake.CAIGOU_TYPE_XIEYI.equals(zcPProMake.getZcFukuanType())) {        itemNotNullList = itemBillElementMetaWithoutNd.getNotNullBillElement();      }    }    StringBuilder errorInfo = new StringBuilder();    String mainValidateInfo = ZcUtil.validateBillElementNull(zcPProMake, mainNotNullList);    String biValidateInfo = ZcUtil.validateDetailBillElementNull(zcPProMake.getBiList(), biNotNullList, false);    String itemValidateInfo = ZcUtil.validateDetailBillElementNull(zcPProMake.getItemList(), itemNotNullList, false);    String merItemValidateInfo = "";    if (zcPProMake.getZcFukuanType().equals("G03"))      merItemValidateInfo = getMerItemValidateInfo(zcPProMake.getItemList(), merNotNullList);    if (mainValidateInfo.length() != 0) {      errorInfo.append(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_XY_TITEL)).append("：\n").append(mainValidateInfo.toString())        .append("\n");    }    //当采购类型为电子竞价时对电子截止时间非空的判断  add by humina    //    ZcPProMake beanData = (ZcPProMake) this.listCursor.getCurrentObject();    //    Date date = beanData.getZcXieYiEndDate();    //    if (zcPProMake.getZcFukuanType().equals("G03") && date == null) {    //      errorInfo.append("当采购类型为电子竞价时[电子竞价截止时间]不允许为空！").append("\n");    //    }    if (this.budgetFlag && biValidateInfo.length() == 0) {      biValidateInfo = checkBiMoney(zcPProMake.getBiList());    }    if (biValidateInfo.length() != 0) {      errorInfo.append("资金构成：\n").append(biValidateInfo.toString()).append("\n"); //wangwei notes 2011-04-07-23:17    }    if (merItemValidateInfo.length() != 0) {      errorInfo.append("商品明细：\n").append(merItemValidateInfo.toString()).append("\n");    }    if (itemValidateInfo.length() != 0) {      //      if (itemValidateInfo.endsWith("不能为零！\n")) {      //      //      } else {      if (ZcPProMake.CAIGOU_TYPE_XIEYI.equals(zcPProMake.getZcFukuanType())) {        errorInfo.append("计划明细：\n").append(itemValidateInfo.toString()).append("\n");      } else {        errorInfo.append("竞价项目明细：\n").append(itemValidateInfo.toString()).append("\n");      }      //      }    }    for (int i = 0; i < zcPProMake.getBiList().size(); i++) {      ZcPProMitemBi bi = (ZcPProMitemBi) zcPProMake.getBiList().get(i);      if (!"A".equals(bi.getPaytypeCode()) && (bi.getZcBiNo() == null || "".equals(bi.getZcBiNo()))) {        errorInfo.append("资金构成：\n政策性资金指标余额表ID不能为空！\n");        break;      }    }    if (ZcPProMake.CAIGOU_TYPE_XIEYI.equals(zcPProMake.getZcFukuanType())) {      int i = checkSpecialBrand(zcPProMake);      if (i > 0) {        errorInfo.append("协议车辆不能和其它商品混合采购\n");      } else if (i == 0) {        if (moneyLimitTs.compareTo(BigDecimal.ZERO) > 0) {          List<ZcPProMitem> mitems = zcPProMake.getItemList();          for (ZcPProMitem it : mitems) {            if (it.getZcCaigNum() == null || it.getZcCaigNum().intValue() == 0) {              errorInfo.append("计划明细 采购数量 必须填写！").append("\n");            }            if (it.getZcMerPrice() != null && it.getZcMerPrice().compareTo(moneyLimitTs) == 1) {              errorInfo.append("协议供货预算单价不能超过" + moneyLimitTs.intValue() + "\n");              break;            }          }        }      } else {        ElementConditionDto dto = new ElementConditionDto();        dto.setNd(requestMeta.getSvNd());        dto.setCoCode(requestMeta.getSvCoCode());        if (zcPProMake.getZcMakeCode() != null) {          dto.setZcMakeCode(zcPProMake.getZcMakeCode());        }        BigDecimal b = (BigDecimal) zcEbBaseServiceDelegate.queryObject("ZC_P_PRO_MAKE.getZcPProXySum", dto, requestMeta);        if (moneyLimit.compareTo(BigDecimal.ZERO) > 0 && zcPProMake.getZcMoneyBiSum() != null) {          BigDecimal sum = zcPProMake.getZcMoneyBiSum();          if (b != null) {            sum = b.add(sum);          } else {            b = BigDecimal.ZERO;          }          if (sum.compareTo(moneyLimit) == 1) {            errorInfo.append("协议供货年度累计预算总金额不能超过" + moneyLimit.intValue() + "（元），" + "你们单位本年度协议供货已经申报金额：" + b + "（元）。本次协议采购最多允许申报金额："              + moneyLimit.subtract(b) + "(元)。\n");          }        }      }      //计划明细总和      BigDecimal sum = new BigDecimal(0);      for (Object o : zcPProMake.getItemList()) {        ZcPProMitem item = (ZcPProMitem) o;        BigDecimal zcItemSum = (BigDecimal) ObjectUtils.defaultIfNull(item.getZcItemSum(), new BigDecimal(0));        sum = sum.add(zcItemSum);      }      DecimalFormat df = new DecimalFormat("0.00");      if (!(df.format(sum)).equals(df.format(zcPProMake.getZcMoneyBiSum()))) {        errorInfo.append("计划明细：\n单项预算金额合计不等于项目预算！\n");      }    } else {      int sameCataNum = 0;      int sameBraNum = 0;      String catalogueCode = "";      String brandCode = "";      for (int i = 0; i < zcPProMake.getItemList().size(); i++) {        ZcPProMitem item = (ZcPProMitem) zcPProMake.getItemList().get(i);        if (catalogueCode.equals(item.getZcCatalogueCode())) {          sameCataNum++;        } else {          catalogueCode = item.getZcCatalogueCode();        }        if (brandCode.equals(item.getZcBraCode())) {          sameBraNum++;        } else {          brandCode = item.getZcBraCode();        }        List merList = item.getMerList();        BigDecimal sumItem = new BigDecimal("0.00");        for (int j = 0; j < merList.size(); j++) {          ZcPProMitem merItem = (ZcPProMitem) merList.get(j);          if (merItem.getZcItemSum() != null) {            sumItem = sumItem.add(merItem.getZcItemSum());          }        }        if (merList.size() > 1) {          errorInfo.append("每种品牌只能申报一种商品 \n");        }        if (sumItem.compareTo(zcPProMake.getZcMoneyBiSum()) == 1) {          errorInfo.append("单个品牌的采购金额已超出预算 \n");        }        if (sameBraNum > 0) { //add shijia 20111018          errorInfo.append("竞价项目明细：\n不能选择相同的品牌！\n");        }        if (zcPProMake.getItemList().size() == 1) {//add shijia 20111019          errorInfo.append("竞价项目明细：\n电子竞价至少选择两种品牌！\n");        }      }      StringBuilder sumInfo = jiSuanLimitSum(zcPProMake);      if (sumInfo.length() != 0) {        errorInfo.append(sumInfo);      }    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(panel, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return true;    }    return false;  }  /**   *    * @return r>0 混合；r==0 车辆；r<0 其它   */  private int checkSpecialBrand(ZcPProMake zcpproMake) {    List<String> brands = XySpecialBrandMeta.getXySpecialBrand(this.requestMeta);    int c = 0;    int q = 0;    if (brands == null || brands.size() == 0) {      return -1;    }    List<ZcPProMitem> mitems = zcpproMake.getItemList();    if (mitems == null || mitems.size() == 0) {      return -1;    }    for (ZcPProMitem item : mitems) {      boolean b = true;      for (String bra : brands) {        if (bra.equals(item.getZcBraCode())) {          c++;          b = false;          break;        }      }      if (b) {        q++;      }    }    return c > 0 && q > 0 ? 1 : c > 0 ? 0 : -1;  }  public String getMerItemValidateInfo(List itemList, List notNullList) {    String itemValidateInfo = "";    for (int i = 0; i < itemList.size(); i++) {      ZcPProMitem item = (ZcPProMitem) itemList.get(i);      List merList = item.getMerList();      String info = ZcUtil.validateDetailBillElementNull(merList, notNullList, false);      if (info.length() != 0) {        if (item.getZcBraName() != null && !"".equals(item.getZcBraName()))          itemValidateInfo = itemValidateInfo + "品牌【" + item.getZcBraName() + "】的商品明细" + info + "\n";      }    }    return itemValidateInfo;  }  /**   * 计算商品差价*/  public StringBuilder jiSuanLimitSum(ZcPProMake make) {    StringBuilder errorInfo = new StringBuilder();    BigDecimal maxSum = new BigDecimal("0.00");    BigDecimal minSum = new BigDecimal("0.00");    for (int i = 0; i < make.getItemList().size(); i++) {      ZcPProMitem item = (ZcPProMitem) make.getItemList().get(i);      List merList = item.getMerList();      for (int j = 0; j < merList.size(); j++) {        ZcPProMitem merItem = (ZcPProMitem) merList.get(j);        if (merItem.getZcMerCode() != null) {          ZcBMerchandise merchandiseItem = this.getZcPProMakeServiceDelegate().getMerchandiseInfo(merItem.getZcMerCode(), requestMeta);          if (i == 0) {            maxSum = merchandiseItem.getZcMerMPrice();            minSum = merchandiseItem.getZcMerMPrice();          }          if (maxSum.compareTo(merchandiseItem.getZcMerMPrice()) == -1) {            maxSum = merchandiseItem.getZcMerMPrice();          }          if (minSum.compareTo(merchandiseItem.getZcMerMPrice()) == 1) {            minSum = merchandiseItem.getZcMerMPrice();          }        }      }    }    BigDecimal limitSum = make.getZcMoneyBgZxs();//限额比例    if (maxSum.subtract(minSum).compareTo(maxSum.multiply(limitSum).divide(new BigDecimal("100.00"))) == 1) {      errorInfo.append("竞价项目明细：\n商品的市场价，最高价：" + maxSum + "元；最低价：" + minSum + "元；最高价与最低价差额：" + maxSum.subtract(minSum) + "元\n"      + "超过了该品目的限额（该品目限定的额度不能超过商品的最高价的" + limitSum.toBigInteger() + "%）,即" + maxSum.multiply(limitSum).divide(new BigDecimal("100.00")).intValue()      + "元！\n");    }    return errorInfo;  }  public static void main(String[] args) throws Exception {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        //        UIManager.getDefaults().put("SplitPaneUI", BigButtonSplitPaneUI.class.getName());        ZcPProMakeXYListPanel bill = new ZcPProMakeXYListPanel();        JFrame frame = new JFrame("frame");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }}
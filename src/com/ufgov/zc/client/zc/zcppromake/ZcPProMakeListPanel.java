package com.ufgov.zc.client.zc.zcppromake;import static com.ufgov.zc.common.system.constants.ZcElementConstants.TITLE_TRANS_ZC_P_PRO_MAKE;import java.awt.Color;import java.awt.Container;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.io.File;import java.math.BigDecimal;import java.text.DecimalFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.filechooser.FileSystemView;import javax.swing.table.TableModel;import jxl.Workbook;import jxl.write.Alignment;import jxl.write.Border;import jxl.write.BorderLineStyle;import jxl.write.Label;import jxl.write.WritableCellFormat;import jxl.write.WritableFont;import jxl.write.WritableSheet;import jxl.write.WritableWorkbook;import org.apache.commons.lang.ObjectUtils;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.component.table.TableRowHeader.CheckedEvent;import com.ufgov.smartclient.component.table.TableRowHeader.CheckedListener;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcPProMakeToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.CancelButton;import com.ufgov.zc.client.component.button.ConfirmSupplyButton;import com.ufgov.zc.client.component.button.ExportButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.PrintPreviewButton;import com.ufgov.zc.client.component.button.PrintSettingButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.SuggestAuditPassCZButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.ui.AbstractDataDisplay;import com.ufgov.zc.client.component.ui.AbstractEditListBill;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SaveableSearchConditionArea;import com.ufgov.zc.client.component.ui.SummarizedResultPanel;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.component.ui.conditionitem.AsValComboboxConditionItem2;import com.ufgov.zc.client.component.ui.conditionitem.ConditionFieldConstants;import com.ufgov.zc.client.component.ui.conditionitem.SearchConditionUtil;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.datacache.CompanyDataCache;import com.ufgov.zc.client.datacache.OrgDataCache;import com.ufgov.zc.client.print.PrintSettingDialog;import com.ufgov.zc.client.print.Printer;import com.ufgov.zc.client.util.ListUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.WFConstants;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.checkrule.BaseRule;import com.ufgov.zc.common.zc.checkrule.ZcMakeCheckRuleBySX;import com.ufgov.zc.common.zc.model.ZcPProMake;import com.ufgov.zc.common.zc.model.ZcPProMitem;import com.ufgov.zc.common.zc.model.ZcPProMitemBi;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcPProMakeServiceDelegate;@SuppressWarnings("unchecked")public class ZcPProMakeListPanel extends AbstractEditListBill implements ParentWindowAware {  public static final long serialVersionUID = 1277810469937954543L;  public static final Logger logger = Logger.getLogger(ZcPProMakeListPanel.class);  public ZcPProMakeListPanel self = this;  public Window parentWindow;  public RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  public ElementConditionDto elementConditionDto = new ElementConditionDto();  public IZcPProMakeServiceDelegate ZcPProMakeServiceDelegate = (IZcPProMakeServiceDelegate) ServiceFactory  .create(IZcPProMakeServiceDelegate.class, "zcPProMakeServiceDelegate");  public IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(  IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  public IZcEbBaseServiceDelegate zcEbBaseServiceDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(  IZcEbBaseServiceDelegate.class, "zcEbBaseServiceDelegate");  protected boolean budgetFlag = "Y".equals(AsOptionMeta.getOptVal(ZcSettingConstants.OPT_ZC_USE_BUDGET_INTERFACE));  public BillElementMeta biBillElementMeta = BillElementMeta.getBillElementMetaWithoutNd("ZC_P_PRO_MITEM_BI");  public BillElementMeta itemBillElementMeta = BillElementMeta.getBillElementMetaWithoutNd("ZC_P_PRO_MITEM");  public BillElementMeta itemBillElementMetaWithoutNd = BillElementMeta.getBillElementMetaWithoutNd("ZC_P_PRO_MITEM_MER");  public BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(getCompoId());  public String getCompoId() {    return "ZC_P_PRO_MAKE";  }  public String getTabId() {    return ZcSettingConstants.TAB_ID_ZC_P_PRO_MAKE;  }  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  public String getTitle() {    return "采购计划";  }  public void setElementConditionDto(ElementConditionDto dto) {    // 所有采购方式    dto.setZcText1(ZcPProMake.CAIGOU_TYPE_All);  }  public ZcPProMakeEditPanel getEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus,  ZcPProMakeListPanel listPanel) {    return new ZcPProMakeEditPanel(parent, listCursor, tabStatus, listPanel);  }  public final class DataDisplay extends MultiDataDisplay {    public DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays,    AbstractSearchConditionArea conditionArea, boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, getTabId());      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), getTitle(),      TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    }    @Override    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          @Override          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {              String tabStatus = d.getStatus();              JGroupableTable table = d.getTable();              MyTableModel model = (MyTableModel) table.getModel();              int row = table.getSelectedRow();              List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(              model.getList(), table));              new ZcPProMakeDialog(self, viewList, row, tabStatus);            }          }        });        //合计信息        List sumFields = new ArrayList();        sumFields.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MONEY_BI_SUM));        d.setSummarizedResultPanel(new SummarizedResultPanel(d.getTable(), sumFields));        final JGroupableTable jTable = d.getTable();        jTable.getTableRowHeader().addCheckedListener(new CheckedListener() {          public void checkedChanged(CheckedEvent e) {            d.getSummarizedResultPanel().clearSummarizedResult();            d.getSummarizedResultPanel().refreshSummarizedResult();          }        });        d.addSorterValueChangeListener(new ValueChangeListener() {          public void valueChanged(ValueChangeEvent e) {            d.getSummarizedResultPanel().clearSummarizedResult();            d.getSummarizedResultPanel().refreshSummarizedResult();          }        });      }    }    @Override    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems,    final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(getCompoId());      elementConditionDto.setExecutor(WorkEnv.getInstance().getCurrUserId());      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setStatus(tableDisplay.getStatus());      elementConditionDto.setZcText0(WorkEnv.getInstance().getCurrUserId());      setElementConditionDto(elementConditionDto);      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        @Override        public void before() {          assert c != null;          installLoadingComponent(c);        }        @Override        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        @Override        public TableModel execute() throws Exception {          if (getCompoId().equals("ZC_P_PRO_MAKE_XY")) {//协议供货            elementConditionDto.setZcText0(WorkEnv.getInstance().getCurrUserId());            elementConditionDto.setZcText2(ZcPProMake.CAIGOU_TYPE_XIEYI);            return ZcPProMakeToTableModelConverter.convertToTableModelXieYi(self.ZcPProMakeServiceDelegate            .getZcPProMake(elementConditionDto, requestMeta));          } else if (getCompoId().equals("ZC_P_PRO_MAKE_XY_JJ")) {//电子竞价            elementConditionDto.setZcText0(WorkEnv.getInstance().getCurrUserId());            elementConditionDto.setZcText2(ZcPProMake.CAIGOU_TYPE_DZJJ);            return ZcPProMakeToTableModelConverter.convertToTableModelXieYi(self.ZcPProMakeServiceDelegate            .getZcPProMake(elementConditionDto, requestMeta));          } else {//项目采购,分散采购，协议二次谈判            elementConditionDto.setZcText2(ZcPProMake.CAIGOU_TYPE_FXY);            return ZcPProMakeToTableModelConverter.convertToTableModel(self.ZcPProMakeServiceDelegate            .getZcPProMake(elementConditionDto, requestMeta));          }        }        @Override        public void success(TableModel model) {          tableDisplay.setTableModel(model);          setButtonStatus();          //刷新合计行          tableDisplay.getSummarizedResultPanel().clearSummarizedResult();          tableDisplay.getSummarizedResultPanel().refreshSummarizedResult();        }      });    }  }  static {    LangTransMeta.init("ZC%");  }  /**   * 构造函数   */  public ZcPProMakeListPanel() {    UIUtilities.asyncInvoke(new DefaultInvokeHandler<List<SearchCondition>>() {      @Override      public List<SearchCondition> execute() throws Exception {        List<SearchCondition> needDisplaySearchConditonList = SearchConditionUtil        .getNeedDisplaySearchConditonListJoinRole(WorkEnv.getInstance().getCurrUserId(), getTabId());        return needDisplaySearchConditonList;      }      @Override      public void success(List<SearchCondition> needDisplaySearchConditonList) {        List<TableDisplay> showingDisplays = SearchConditionUtil        .getNeedDisplayTableDisplay(needDisplaySearchConditonList);        init(createDataDisplay(showingDisplays), null);//调用父类方法        revalidate();        repaint();      }    });    requestMeta.setCompoId(getCompoId());  }  public AbstractSearchConditionArea topSearchConditionArea;  public AbstractSearchConditionArea createTopConditionArea() {    Map defaultValueMap = new HashMap();    topSearchConditionArea = new SaveableSearchConditionArea(ZcSettingConstants.CONDITION_ID_ZC_P_PRO_MAKE,    null, false, defaultValueMap, null);    AbstractSearchConditionItem item = this.topSearchConditionArea    .getCondItemsByCondiFieldCode(ConditionFieldConstants.ZC_VS_MAKE_STATUS);    if (item != null) {      ((AsValComboboxConditionItem2) item).setValueByCode("0");    }    return topSearchConditionArea;  }  public AbstractDataDisplay createDataDisplay(List<TableDisplay> showingDisplays) {    return new DataDisplay(SearchConditionUtil.getAllTableDisplayJoinRole(WorkEnv.getInstance()    .getCurrUserId(), getTabId()), showingDisplays, createTopConditionArea(), true);//true:显示收索条件区 false：不显示收索条件区  }  public AddButton addButton = new AddButton();  //工作流送审  public SendButton sendButton = new SendButton();  // 工作流填写意见审核通过  public FuncButton suggestPassButton = new SuggestAuditPassButton();  //  工作流填写意见审核通过(送处长审核)  public FuncButton suggestPassCZButton = new SuggestAuditPassCZButton();  // 工作流收回  public FuncButton callbackButton = new CallbackButton();  // 工作流退回  public FuncButton unTreadButton = new UntreadButton();  // 工作流销审  public FuncButton unAuditButton = new UnauditButton();  public PrintButton printButton = new PrintButton();  public FuncButton printPreviewButton = new PrintPreviewButton();  public PrintSettingButton printSettingButton = new PrintSettingButton();  public FuncButton traceButton = new TraceButton();  public FuncButton cancelButton = new CancelButton();  public HelpButton helpButton = new HelpButton();  //导出Excel文件  public ExportButton exportButton = new ExportButton();  //确认供货按钮  public ConfirmSupplyButton confirmSupplyButton = new ConfirmSupplyButton();  @Override  protected void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(getCompoId());    toolBar.add(addButton);//    toolBar.add(deleteButton);//    toolBar.add(sendButton);//送审//    toolBar.add(suggestPassButton);//填写意见审核通过    //    toolBar.add(suggestPassCZButton);//送处长审核//    toolBar.add(callbackButton);//收回//    toolBar.add(unTreadButton);//退回//    toolBar.add(unAuditButton);//销审//    toolBar.add(cancelButton);//撤销    toolBar.add(traceButton);//    toolBar.add(printButton);//    toolBar.add(printPreviewButton);//    toolBar.add(printSettingButton);//    toolBar.add(exportButton);//导出Excel//    toolBar.add(confirmSupplyButton); //确认供货//    toolBar.add(helpButton);    // 初始化按钮的action事件    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSend();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSuggestPass();      }    });    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doCallBack();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doUnTread();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doUnAudit();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doTrace();      }    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrint();      }    });    printPreviewButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrintPreview();      }    });    printSettingButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrintSetting();      }    });    cancelButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doCancel();      }    });    exportButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExport();      }    });    confirmSupplyButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doConfirmSupply();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    suggestPassCZButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核(送处长审核)        doSuggestCZPass();      }    });  }  public void refreshCurrentTabData() {    topSearchConditionArea.doSearch();  }  public void refreshCurrentTabData(List beanList) {    topDataDisplay.getActiveTableDisplay().getTable().setModel(    ZcPProMakeToTableModelConverter.convertToTableModel(beanList));  }  public List getCheckedList() {    List<ZcPProMake> beanList = new ArrayList<ZcPProMake>();    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    MyTableModel model = (MyTableModel) table.getModel();    //Modal的数据    List list = model.getList();    Integer[] checkedRows = table.getCheckedRows();    for (Integer checkedRow : checkedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      ZcPProMake bean = (ZcPProMake) list.get(accordDataRow);      beanList.add(bean);    }    return beanList;  }  public void doAdd() {    List<ZcPProMake> list = this.ZcPProMakeServiceDelegate.getZcPProMakeNoHt(this.elementConditionDto, this.requestMeta);    if (list != null && list.size() > 0) {      StringBuffer sb = new StringBuffer("以下采购项目合同未备案\n");      for (int i = 0; i < list.size(); i++) {        sb.append("采购计划编号【").append(list.get(i).getZcMakeCode()).append("】，采购项目【").append(list.get(i).getZcMakeName()).append("】\n");      }      JOptionPane.showMessageDialog(this, sb.toString(), " 提示", JOptionPane.INFORMATION_MESSAGE);    }    //    new ZcPProMakeDialog(self, new ArrayList(1), -1, topDataDisplay.getActiveTableDisplay().getStatus());  }  public BaseRule getZcMakeCheckRule() {    return ZcMakeCheckRuleBySX.getInstance();  }  public void doSend() {    boolean success = true;    requestMeta.setFuncId(this.sendButton.getFuncId());    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    try {      for (int i = 0; i < beanList.size(); i++) {        ZcPProMake make = (ZcPProMake) beanList.get(i);        if ("0".equals(make.getZcMakeStatus())) {          try {            make = getZcPProMakeServiceDelegate().selectByPrimaryKey(make.getZcMakeCode(), requestMeta);            //            make.setBiList(this.getZcPProMakeServiceDelegate().getZcPProMitemBi(make.getZcMakeCode(), budgetFlag, requestMeta));            //            make.setItemList(this.getZcPProMakeServiceDelegate().getZcPProMitem(make.getZcMakeCode(), requestMeta));            //            if (ZcPProMake.CAIGOU_TYPE_DZJJ.equals(make.getZcFukuanType())) {            //              for (int j = 0; j < make.getItemList().size(); j++) {            //                ZcPProMitem item = (ZcPProMitem) make.getItemList().get(j);            //                item.setMerList(this.getZcPProMakeServiceDelegate().getZcPProMitemMer(item, requestMeta));            //              }            //            }            if (checkBeforeSave(make, self)) {              return;            }          } catch (Exception e) {            logger.error(e.getMessage(), e);            success = false;            UIUtilities.showStaickTraceDialog(e, this, "错误", e.getMessage());          }        }        BaseRule rule = getZcMakeCheckRule();        Map parameter = new HashMap();        parameter.put("data", make);        // 填报提示信息        Map resMap = rule.check(parameter);        String resInfo = (String) resMap.get("resInfo");        int num = JOptionPane.YES_OPTION;        if (resInfo != null && resInfo.length() > 0) {          num = JOptionPane.showConfirmDialog(this, resInfo, "提示", 0);        }        if (num == JOptionPane.YES_OPTION) {          make.setAuditorId(WorkEnv.getInstance().getCurrUserId());          this.getZcPProMakeServiceDelegate().newCommitFN(make, budgetFlag, WorkEnv.getInstance().getWebRoot(), requestMeta);        } else {          success = false;        }      }    } catch (Exception ex) {      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    }  }  public void doSuggestPass() {    boolean success = true;    requestMeta.setFuncId(this.suggestPassButton.getFuncId());    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager    .getCurrentKeyboardFocusManager().getActiveWindow(), ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    try {      for (int i = 0; i < beanList.size(); i++) {        ZcPProMake make = (ZcPProMake) beanList.get(i);        make = getZcPProMakeServiceDelegate().selectByPrimaryKey(make.getZcMakeCode(), requestMeta);        if (make.getZcPifuCgfs() != null && make.getZcPitemOpiway() != null && !make.getZcPifuCgfs().equals(make.getZcPitemOpiway())) {          make.setZcAttr1("Y");        } else {          make.setZcAttr1("N");        }        if (checkBeforeSave(make, self)) {          return;        }        make.setAuditorId(WorkEnv.getInstance().getCurrUserId());        make.setComment(commentDialog.getComment());        this.getZcPProMakeServiceDelegate().auditFN(make, requestMeta);      }    } catch (Exception ex) {      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    }  }  public void doUnTread() {    boolean success = true;    requestMeta.setFuncId(this.unTreadButton.getFuncId());    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager    .getCurrentKeyboardFocusManager().getActiveWindow(), ModalityType.APPLICATION_MODAL, "不同意");    if (commentDialog.cancel) {      return;    }    try {      for (int i = 0; i < beanList.size(); i++) {        ZcPProMake make = (ZcPProMake) beanList.get(i);        make.setAuditorId(WorkEnv.getInstance().getCurrUserId());        make.setComment(commentDialog.getComment());        this.getZcPProMakeServiceDelegate().untreadFN(make, requestMeta);      }    } catch (Exception ex) {      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    }  }  public void doUnAudit() {    boolean success = true;    String errorInfo = "";    requestMeta.setFuncId(this.unAuditButton.getFuncId());    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int m = JOptionPane.showConfirmDialog(this, "是否确定消审？", "确认", JOptionPane.OK_OPTION);    if (m != 0) {      return;    }    try {      for (int i = 0; i < beanList.size(); i++) {        ZcPProMake make = (ZcPProMake) beanList.get(i);        make.setAuditorId(WorkEnv.getInstance().getCurrUserId());        this.getZcPProMakeServiceDelegate().unAuditFN(make, requestMeta);      }    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  public void doTrace() {    List beanList = getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    if (beanList.size() > 1) {      JOptionPane.showMessageDialog(this, "只能选择一条数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    for (int i = 0; i < beanList.size(); i++) {      ZcPProMake bean = (ZcPProMake) beanList.get(i);      ZcUtil.showTraceDialog(bean, getCompoId());    }  }  public void doCallBack() {    boolean success = true;    String errorInfo = "";    requestMeta.setFuncId(this.callbackButton.getFuncId());    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    try {      for (int i = 0; i < beanList.size(); i++) {        ZcPProMake make = (ZcPProMake) beanList.get(i);        make.setAuditorId(WorkEnv.getInstance().getCurrUserId());        this.getZcPProMakeServiceDelegate().callbackFN(make, requestMeta);      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  public void doPrint() {    List printList = getCheckedList();    if (printList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要打印的数据 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    requestMeta.setFuncId(this.printButton.getFuncId());    requestMeta.setPageType(this.getCompoId() + "_L");    boolean success = true;    boolean printed = false;    try {      PrintObject printObject = this.baseDataServiceDelegate.genMainBillPrintObjectFN(printList, requestMeta);      if (Printer.print(printObject)) {        printed = true;      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印出错！\n" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    }    if (success && printed) {    }  }  public void doGroupPrint() {  }  public void doPrintPreview() {    final List printList = getCheckedList();    String zcProMakeCode = "";    if (printList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要打印预览的数据 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    } else if (printList.size() > 1) {      JOptionPane.showMessageDialog(this, "请选择其中一条记录进行预览 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    try {      ZcPProMake zcPProMake = (ZcPProMake) printList.get(0);      zcPProMake.setCoName(CompanyDataCache.getNameByCode(zcPProMake.getCoCode()));      zcProMakeCode = zcPProMake.getZcMakeCode();      String url = "";      if (zcProMakeCode != null && !"".equals(zcProMakeCode))        url = WorkEnv.getInstance().getWebRoot() + "app/page/print/toZcProMakeDetailPrint.do?code_array="        + zcProMakeCode;      ZcUtil.anyBrowse(url);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印预览出错！\n" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    }  }  public void doExport() {    try {      List printList = getCheckedList();      if (printList.size() == 0) {        JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      String code_array = getMakeCodeArray(printList);      FileSystemView fsv = FileSystemView.getFileSystemView();      File file = fsv.getHomeDirectory();      String filePath = file.getAbsolutePath();      Calendar cale = Calendar.getInstance();      String sysDate = cale.get(Calendar.YEAR) + "年" + cale.get(Calendar.MONTH) + "月"      + cale.get(Calendar.DATE) + "日";      String fileName = filePath + "\\采购计划导出-" + sysDate + ".xls";      WritableWorkbook book = Workbook.createWorkbook(new File(fileName));      WritableSheet sheet = book.createSheet("采购计划导出", 0);      String[] zcMakeCodeArr;      if (code_array.indexOf("@") != -1) {        zcMakeCodeArr = code_array.split("@");      } else {        zcMakeCodeArr = new String[1];        zcMakeCodeArr[0] = code_array;      }      Double moneySum = 0d;      for (int i = 0; i < zcMakeCodeArr.length; i++) {        String zcMakeCode = zcMakeCodeArr[i];        ZcPProMake make = ZcPProMakeServiceDelegate.selectByPrimaryKey(zcMakeCode, requestMeta);        int j = 0;        moneySum += make.getZcMoneyBiSum().doubleValue();        j += 1;        //在Label对象的构造函数中指名是第一行第一列        jxl.write.WritableCellFormat txtFmt = new jxl.write.WritableCellFormat();        jxl.write.WritableCellFormat numFmt = new jxl.write.WritableCellFormat();        jxl.write.WritableCellFormat titleFmt = new jxl.write.WritableCellFormat();        //jxl.write.WritableCellFormat title2Fmt = new jxl.write.WritableCellFormat();        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault());        DecimalFormat df = new DecimalFormat("#0.00");        txtFmt.setBorder(Border.ALL, BorderLineStyle.THIN);        txtFmt.setAlignment(Alignment.LEFT);        numFmt.setBorder(Border.ALL, BorderLineStyle.THIN);        numFmt.setAlignment(Alignment.RIGHT);        //titleFmt.setAlignment(Alignment.CENTRE);        WritableFont fontFmt1 = new WritableFont(WritableFont.ARIAL, 8, WritableFont.BOLD, true);        WritableFont fontFmt = new WritableFont(WritableFont.ARIAL, 20, WritableFont.BOLD, true);        WritableCellFormat font = new WritableCellFormat(fontFmt);        WritableCellFormat font1 = new WritableCellFormat(fontFmt1);        font.setAlignment(Alignment.CENTRE);        font1.setBorder(Border.ALL, BorderLineStyle.THIN);        sheet.mergeCells(0, 0, 20, 0);        Label title = new Label(0, 0, "采购计划导出数据", font);        Label title1 = new Label(0, 1, "项目代码", font1);        Label title2 = new Label(1, 1, "采购项目", font1);        Label title3 = new Label(2, 1, "采购单位", font1);        Label title4 = new Label(3, 1, "采购预算(元)", font1);        Label title5 = new Label(4, 1, "年度", font1);        Label title6 = new Label(5, 1, "采购单位经办人", font1);        Label title7 = new Label(6, 1, "联系电话", font1);        Label title8 = new Label(7, 1, "项目状态", font1);        Label title9 = new Label(8, 1, "录入人代码", font1);        Label title10 = new Label(9, 1, "录入时间", font1);        Label title11 = new Label(10, 1, "财政主管处室", font1);        Label title12 = new Label(11, 1, "备注", font1);        Label title13 = new Label(12, 1, "采购单位负责人", font1);        Label title14 = new Label(13, 1, "委托机构名称", font1);        Label title15 = new Label(14, 1, "拟定采购方式", font1);        Label title16 = new Label(15, 1, "批复采购方式", font1);        Label title17 = new Label(16, 1, "采购类型", font1);        Label title18 = new Label(17, 1, "合同备案金额(元)", font1);        Label title19 = new Label(18, 1, "是否涉及进出口", font1);        Label title20 = new Label(19, 1, "采购组织形式", font1);        Label title21 = new Label(20, 1, "是否公开预算", font1);        Label label1 = new Label(0, i + 2, make.getZcMakeCode(), txtFmt);        Label label2 = new Label(1, i + 2, make.getZcMakeName(), txtFmt);        Label label3 = new Label(2, i + 2, CompanyDataCache.getName(make.getCoCode()), txtFmt);        Label label4 = new Label(3, i + 2, df.format(make.getZcMoneyBiSum().doubleValue()), numFmt);        Label label5 = new Label(4, i + 2, make.getNd() + "", txtFmt);        Label label6 = new Label(5, i + 2, make.getZcMakeLinkman(), txtFmt);        Label label7 = new Label(6, i + 2, make.getZcMakeTel(), txtFmt);        Label label8 = new Label(7, i + 2, AsValDataCache        .getName("ZC_VS_MAKE_STATUS", make.getZcMakeStatus()), txtFmt);        Label label9 = new Label(8, i + 2, make.getZcInputCode(), txtFmt);        Label label10 = new Label(9, i + 2, sdf.format(make.getZcInputDate()), txtFmt);        Label label11 = new Label(10, i + 2, OrgDataCache.getName(make.getOrgCode()), txtFmt);        Label label12 = new Label(11, i + 2, make.getZcIsRemark(), txtFmt);        Label label13 = new Label(12, i + 2, make.getZcAttr2(), txtFmt);        Label label14 = new Label(13, i + 2, make.getAgencyName(), txtFmt);        Label label15 = new Label(14, i + 2, AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", make        .getZcPitemOpiway()), txtFmt);        Label label16 = new Label(15, i + 2, AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", make        .getZcPifuCgfs()), txtFmt);        Label label17 = new Label(16, i + 2, AsValDataCache.getName("ZC_VS_FUKUAN_TYPE", make        .getZcFukuanType()), txtFmt);        Label label18 = new Label(17, i + 2, df.format(make.getZcMoneyHtYba().doubleValue()), numFmt);        Label label19 = new Label(18, i + 2, AsValDataCache.getName("VS_Y/N", make.getZcIsImp()), txtFmt);        Label label20 = new Label(19, i + 2, AsValDataCache        .getName("VS_ZC_ORGTYPE", make.getZcMakeSequence()), txtFmt);        Label label21 = new Label(20, i + 2, AsValDataCache.getName("VS_Y/N", make.getZcIsBudget()), txtFmt);        Label count1 = new Label(0, i + 3, "合计: ", txtFmt);        Label count2 = new Label(1, i + 3, "共导出 " + zcMakeCodeArr.length + "条数据", txtFmt);        Label count3 = new Label(2, i + 3, "采购预算: ", txtFmt);        Label count4 = new Label(3, i + 3, df.format(moneySum), numFmt);        Label count5 = new Label(4, i + 3, "元", txtFmt);        sheet.addCell(title);        sheet.addCell(title1);        sheet.addCell(title2);        sheet.addCell(title3);        sheet.addCell(title4);        sheet.addCell(title5);        sheet.addCell(title6);        sheet.addCell(title7);        sheet.addCell(title8);        sheet.addCell(title9);        sheet.addCell(title10);        sheet.addCell(title11);        sheet.addCell(title12);        sheet.addCell(title13);        sheet.addCell(title14);        sheet.addCell(title15);        sheet.addCell(title16);        sheet.addCell(title17);        sheet.addCell(title18);        sheet.addCell(title19);        sheet.addCell(title20);        sheet.addCell(title21);        sheet.addCell(label1);        sheet.addCell(label2);        sheet.addCell(label3);        sheet.addCell(label4);        sheet.addCell(label5);        sheet.addCell(label6);        sheet.addCell(label7);        sheet.addCell(label8);        sheet.addCell(label9);        sheet.addCell(label10);        sheet.addCell(label11);        sheet.addCell(label12);        sheet.addCell(label13);        sheet.addCell(label14);        sheet.addCell(label15);        sheet.addCell(label16);        sheet.addCell(label17);        sheet.addCell(label18);        sheet.addCell(label19);        sheet.addCell(label20);        sheet.addCell(label21);        sheet.addCell(count1);        sheet.addCell(count2);        sheet.addCell(count3);        sheet.addCell(count4);        sheet.addCell(count5);      }      for (int i = 0; i < sheet.getRows(); i++) {        sheet.setRowView(i, 500);      }      book.write();      book.close();      JOptionPane.showMessageDialog(this, "【采购计划】已导出至桌面,导出成功！");    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "导出【采购计划】出错！\n" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    }  }  public String getMakeCodeArray(List beanlist) {    String code_array = "";    for (int i = 0; i < beanlist.size(); i++) {      ZcPProMake zcPProMake = (ZcPProMake) beanlist.get(i);      String makeCode = zcPProMake.getZcMakeCode();      if (i == beanlist.size() - 1)        code_array = code_array + makeCode;      else        code_array = code_array + makeCode + "@";    }    return code_array;  }  public void doPrintPreviewGroup() {  }  public void doPrintSetting() {    requestMeta.setFuncId(this.printSettingButton.getFuncId());    requestMeta.setPageType(this.getCompoId() + "_L");    new PrintSettingDialog(requestMeta);  }  //供应商确认供货  public void doConfirmSupply() {    boolean success = true;    String errorInfo = "";    requestMeta.setFuncId(this.confirmSupplyButton.getFuncId());    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    // 确认是否供货    int num = JOptionPane.YES_OPTION;    num = JOptionPane.showConfirmDialog(this, "确认是否进行供货", "提示", 0);    if (num == JOptionPane.YES_OPTION) {      try {        for (int i = 0; i < beanList.size(); i++) {          ZcPProMake make = (ZcPProMake) beanList.get(i);          boolean fullConfirm = true;          ZcPProMake afterSaveBill = null;          List itemList = self.getZcPProMakeServiceDelegate().getZcPProMitem(make.getZcMakeCode(),          requestMeta);          if (itemList == null) {            JOptionPane.showMessageDialog(this, "协议商品明细为空!", "提示", JOptionPane.INFORMATION_MESSAGE);          } else {            for (int j = 0; j < itemList.size(); j++) {              ZcPProMitem zcPProMitem = (ZcPProMitem) itemList.get(j);              if (null != zcPProMitem.getZcSuCode()) {                if (WorkEnv.getInstance().getCurrUserId().trim().equals(zcPProMitem.getZcSuCode().trim())) {                  zcPProMitem.setZcIsChengJiao("2");                  self.getZcPProMakeServiceDelegate().updateZcPProMitemFN(zcPProMitem, requestMeta);                }              }              if (null != zcPProMitem.getZcSuCode()) {                if (!"2".equals(zcPProMitem.getZcIsChengJiao()))                  fullConfirm = false;              }            }          }          //更改主单单据状态          if (fullConfirm == true) {            make.setZcMakeStatus("confirm");            self.getZcPProMakeServiceDelegate().updateZcXYPProMakeFN(make, requestMeta);          }        }      } catch (Exception ex) {        errorInfo += ex.getMessage();        logger.error(ex.getMessage(), ex);        success = false;        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      }      if (success) {        JOptionPane.showMessageDialog(this, "确认供货成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "确认供货失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  public void doCancel() {    boolean success = true;    requestMeta.setFuncId(this.cancelButton.getFuncId());    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int num = JOptionPane.showConfirmDialog(this, "确实要撤销计划？");    if (num == JOptionPane.YES_OPTION) {      try {        for (int i = 0; i < beanList.size(); i++) {          ZcPProMake make = (ZcPProMake) beanList.get(i);          make.setZcMakeStatus("cancel");          this.getZcPProMakeServiceDelegate().CancelMakeFN(make, requestMeta);        }      } catch (Exception ex) {        logger.error(ex.getMessage(), ex);        success = false;        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      }      if (success) {        JOptionPane.showMessageDialog(this, "撤销成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.refreshCurrentTabData();      }    }  }  public void setButtonStatus() {    String panelId = WFConstants.AUDIT_TAB_STATUS_TODO;    if (topDataDisplay != null && topDataDisplay.getActiveTableDisplay() != null) {      panelId = topDataDisplay.getActiveTableDisplay().getStatus();    }    if (WFConstants.EDIT_TAB_STATUS_DRAFT.equalsIgnoreCase(panelId)) {      traceButton.setVisible(false);      suggestPassButton.setVisible(false);      suggestPassCZButton.setVisible(false);      unTreadButton.setVisible(false);      sendButton.setVisible(true);      addButton.setVisible(true);      deleteButton.setVisible(true);      printButton.setVisible(false);      printPreviewButton.setVisible(true);      printSettingButton.setVisible(false);      callbackButton.setVisible(false);      unAuditButton.setVisible(false);      exportButton.setVisible(true);      confirmSupplyButton.setVisible(false);      //cancelButton.setVisible(true);      cancelButton.setVisible(false);    } else if (WFConstants.AUDIT_TAB_STATUS_TODO.equalsIgnoreCase(panelId)) {      traceButton.setVisible(true);      sendButton.setVisible(false);      suggestPassButton.setVisible(true);      unTreadButton.setVisible(true);      suggestPassCZButton.setVisible(true);      addButton.setVisible(false);      deleteButton.setVisible(false);      printButton.setVisible(false);      printPreviewButton.setVisible(true);      printSettingButton.setVisible(false);      callbackButton.setVisible(false);      unAuditButton.setVisible(false);      exportButton.setVisible(true);      confirmSupplyButton.setVisible(false);      //代办不能有撤销按钮      //cancelButton.setVisible(true);      cancelButton.setVisible(false);    } else if (WFConstants.AUDIT_TAB_STATUS_DONE.equalsIgnoreCase(panelId)) {      traceButton.setVisible(true);      sendButton.setVisible(false);      suggestPassButton.setVisible(false);      suggestPassCZButton.setVisible(false);      unTreadButton.setVisible(false);      addButton.setVisible(false);      deleteButton.setVisible(false);      printButton.setVisible(false);      unAuditButton.setVisible(false);      printPreviewButton.setVisible(true);      printSettingButton.setVisible(false);      callbackButton.setVisible(true);      exportButton.setVisible(true);      confirmSupplyButton.setVisible(false);      cancelButton.setVisible(false);    } else if ("exec".equalsIgnoreCase(panelId)) {      traceButton.setVisible(true);      sendButton.setVisible(false);      suggestPassButton.setVisible(false);      unTreadButton.setVisible(false);      addButton.setVisible(false);      deleteButton.setVisible(false);      printButton.setVisible(false);      printPreviewButton.setVisible(true);      printSettingButton.setVisible(false);      callbackButton.setVisible(false);      //      unAuditButton.setVisible(true);      exportButton.setVisible(true);      confirmSupplyButton.setVisible(false);      cancelButton.setVisible(false);      suggestPassCZButton.setVisible(false);    } else if (WFConstants.AUDIT_TAB_STATUS_ALL.equalsIgnoreCase(panelId)) {      traceButton.setVisible(true);      sendButton.setVisible(false);      suggestPassButton.setVisible(false);      unTreadButton.setVisible(false);      addButton.setVisible(false);      deleteButton.setVisible(false);      printButton.setVisible(false);      printPreviewButton.setVisible(true);      printSettingButton.setVisible(false);      callbackButton.setVisible(false);      unAuditButton.setVisible(false);      exportButton.setVisible(true);      confirmSupplyButton.setVisible(false);      cancelButton.setVisible(false);    } else if ("notconfirm".equalsIgnoreCase(panelId)) {      traceButton.setVisible(true);      sendButton.setVisible(false);      suggestPassButton.setVisible(false);      suggestPassCZButton.setVisible(false);      unTreadButton.setVisible(false);      addButton.setVisible(false);      deleteButton.setVisible(false);      printButton.setVisible(false);      printPreviewButton.setVisible(true);      printSettingButton.setVisible(false);      callbackButton.setVisible(false);      unAuditButton.setVisible(false);      exportButton.setVisible(true);      confirmSupplyButton.setVisible(true);      cancelButton.setVisible(false);    } else if ("confirm".equalsIgnoreCase(panelId)) {      traceButton.setVisible(true);      sendButton.setVisible(false);      suggestPassButton.setVisible(false);      unTreadButton.setVisible(false);      addButton.setVisible(false);      deleteButton.setVisible(false);      printButton.setVisible(false);      printPreviewButton.setVisible(true);      printSettingButton.setVisible(false);      callbackButton.setVisible(false);      unAuditButton.setVisible(false);      exportButton.setVisible(true);      confirmSupplyButton.setVisible(false);      cancelButton.setVisible(false);    } else if ("cancel".equalsIgnoreCase(panelId)) {      traceButton.setVisible(false);      sendButton.setVisible(false);      suggestPassButton.setVisible(false);      unTreadButton.setVisible(false);      addButton.setVisible(false);      deleteButton.setVisible(false);      printButton.setVisible(false);      printPreviewButton.setVisible(false);      printSettingButton.setVisible(false);      callbackButton.setVisible(false);      unAuditButton.setVisible(false);      exportButton.setVisible(false);      confirmSupplyButton.setVisible(false);      cancelButton.setVisible(false);    } else if ("untread".equalsIgnoreCase(panelId)) {      traceButton.setVisible(true);      sendButton.setVisible(false);      suggestPassButton.setVisible(true);      unTreadButton.setVisible(true);      addButton.setVisible(false);      deleteButton.setVisible(false);      printButton.setVisible(false);      printPreviewButton.setVisible(false);      printSettingButton.setVisible(false);      callbackButton.setVisible(false);      unAuditButton.setVisible(false);      exportButton.setVisible(false);      confirmSupplyButton.setVisible(false);      cancelButton.setVisible(false);    }  }  public static void main(String[] args) throws Exception {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        //        UIManager.getDefaults().put("SplitPaneUI", BigButtonSplitPaneUI.class.getName());        ZcPProMakeListPanel bill = new ZcPProMakeListPanel();        JFrame frame = new JFrame("frame");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }  IZcPProMakeServiceDelegate getZcPProMakeServiceDelegate() {    return this.ZcPProMakeServiceDelegate;  }  public boolean chackBiMoney(ZcPProMake make) {    boolean rt = false;    String errorInfo = getZcPProMakeServiceDelegate().chackBiMoney(make, requestMeta);    if (errorInfo != null && !"".equals(errorInfo.trim())) {      rt = true;      JOptionPane.showMessageDialog(this, errorInfo, "提示", JOptionPane.INFORMATION_MESSAGE);    }    return rt;  }  protected void doDelete() {    boolean success = true;    String errorInfo = "";    requestMeta.setFuncId(deleteButton.getFuncId());    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int num = JOptionPane.showConfirmDialog(this, "是否删除当前单据", "删除确认", JOptionPane.YES_NO_OPTION);    if (num == JOptionPane.YES_OPTION) {      try {        for (int i = 0; i < beanList.size(); i++) {          ZcPProMake make = (ZcPProMake) beanList.get(i);          //          if (!"0".equals(make.getZcMakeStatus())) {          //          //            JOptionPane.showMessageDialog(this, "非编辑状态单据，不可以删除！", "提示", JOptionPane.ERROR_MESSAGE);          //          //            success = false;          //          //            break;          //          //          }          this.getZcPProMakeServiceDelegate().deleteByPrimaryKeyFN(make.getZcMakeCode(),            "Y".equals(AsOptionMeta.getOptVal(ZcSettingConstants.OPT_ZC_USE_BUDGET_INTERFACE)), WorkEnv.getInstance().getWebRoot(), this.requestMeta);        }      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  /*   * 送处长审核   */  public void doSuggestCZPass() {    List beanList = getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    //取消送处长审核的弹出确认框  fy 2011-07-29    //int sel = JOptionPane.showConfirmDialog(this, "是否送处长审核？");    //    if (sel == JOptionPane.OK_OPTION) {    executeAudit(beanList, ZcSettingConstants.IS_GOON_AUDIT_YES);    //    } else {    //      executeAudit(beanList, ZcSettingConstants.IS_GOON_AUDIT_NO);    //    }  }  /**   * 执行处长审核   * @param beanList   * @param isGoonAudit   */  private void executeAudit(List beanList, int isGoonAudit) {    if (isGoonAudit > 0) {      GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager      .getCurrentKeyboardFocusManager().getActiveWindow(), ModalityType.APPLICATION_MODAL);      if (commentDialog.cancel) {        return;      }      boolean success = true;      ZcPProMake zppm = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.suggestPassCZButton.getFuncId());        for (int i = 0; i < beanList.size(); i++) {          zppm = (ZcPProMake) beanList.get(i);          zppm.setIsGoonAudit(isGoonAudit);          zppm.setComment(commentDialog.getComment());          zppm.setAuditorId(WorkEnv.getInstance().getCurrUserId());          zppm.setZcAttr1("Y");          this.getZcPProMakeServiceDelegate().auditFN(zppm, requestMeta);        }      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.self.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    } else {      return;    }  }  public boolean checkBeforeSave(ZcPProMake zcPProMake, JComponent panel) {    List mainNotNullList = ((BillElementMeta) billElementMeta).getNotNullBillElement();    List biNotNullList = self.biBillElementMeta.getNotNullBillElement();    List itemNotNullList = self.itemBillElementMeta.getNotNullBillElement();    StringBuilder errorInfo = new StringBuilder();    String mainValidateInfo = ZcUtil.validateBillElementNull(zcPProMake, mainNotNullList);    String biValidateInfo = ZcUtil.validateDetailBillElementNull(zcPProMake.getBiList(), biNotNullList, false);    String itemValidateInfo = ZcUtil.validateDetailBillElementNull(zcPProMake.getItemList(), itemNotNullList, false);    if (mainValidateInfo.length() != 0) {      errorInfo.append(LangTransMeta.translate(TITLE_TRANS_ZC_P_PRO_MAKE)).append("：\n").append(mainValidateInfo.toString()).append("\n");    }    if (this.budgetFlag && biValidateInfo.length() == 0) {      biValidateInfo = self.checkBiMoney(zcPProMake.getBiList());    }    if (biValidateInfo.length() != 0) {      errorInfo.append("资金构成：\n").append(biValidateInfo.toString()).append("\n");    }    if (itemValidateInfo.length() != 0) {      //      if (itemValidateInfo.endsWith("不能为零！\n")) {      //      } else {      errorInfo.append("计划明细：\n").append(itemValidateInfo.toString()).append("\n");      //      }    }    // 计划明细总和    BigDecimal sum = new BigDecimal(0);    for (Object o : zcPProMake.getItemList()) {      ZcPProMitem item = (ZcPProMitem) o;      BigDecimal zcItemSum = (BigDecimal) ObjectUtils.defaultIfNull(item.getZcItemSum(), new BigDecimal(0));      sum = sum.add(zcItemSum);    }    if (sum.compareTo(zcPProMake.getZcMoneyBiSum()) == 1) {      errorInfo.append("计划明细：\n单项预算金额合计应小于等于项目预算！\n");    }    if (errorInfo.length() != 0) {      StringBuffer str = new StringBuffer("采购计划" + zcPProMake.getZcMakeCode() + "\n");      str.append(errorInfo);      JOptionPane.showMessageDialog(panel, str.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return true;    }    return false;  }  public String checkBiMoney(List<ZcPProMitemBi> biList) {    StringBuffer resultInfo = new StringBuffer();    for (ZcPProMitemBi bi : biList) {      if (bi.getZcBiNo() != null && !"".equals(bi.getZcBiNo())) {        if (bi.getZcBiJhuaSum().compareTo(bi.getZcBiDoSum()) == 1) {          resultInfo.append("[指标编号]为：" + bi.getZcBiNo() + "的[本次预算金额]为：" + bi.getZcBiJhuaSum() + "   大于该指标的[可用指标金额]：" + bi.getZcBiDoSum() + "\n");          bi.setZcBiJhuaSum(bi.getZcBiDoSum());        }      }    }    return resultInfo.toString();  }  public boolean checkTel(String tel) {    String phoneRegexp = "(\\d{3,4})??(-)??\\d{7,8}".trim();//固话的匹配模式        String mobileRegexp = "^((13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$".trim(); //手机的匹配模式     Pattern pattern1 = Pattern.compile(phoneRegexp);    Pattern pattern2 = Pattern.compile(mobileRegexp);    Matcher matcher1 = pattern1.matcher(tel);    Matcher matcher2 = pattern2.matcher(tel);    if (matcher1.find() || matcher2.find()) {      return true;    } else {      return false;    }  }}
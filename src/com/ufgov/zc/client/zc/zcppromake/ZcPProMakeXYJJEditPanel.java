package com.ufgov.zc.client.zc.zcppromake;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_ATTR2;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_CO_CODE_ND;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_CO_NAME;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_EB_XY_END_DATE;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_IS_REMARK;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MAKE_CODE;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MAKE_LINKMAN;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MAKE_NAME;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MAKE_STATUS;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_MONEY_BI_SUM;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_ZG_CS_CODE;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcPProMakeToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JBasePanel;import com.ufgov.zc.client.component.JClosableTabbedPane;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.SubinsertPinPaiButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.AutoNumFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.CompanyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.OrgFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFilePathFieldEditor;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.commonbiz.model.Company;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityTreeHandler;import com.ufgov.zc.common.zc.model.ZcPProMake;import com.ufgov.zc.common.zc.model.ZcPProMitem;import com.ufgov.zc.common.zc.model.ZcPProMitemBi;/** * 电子竞价 * modiy zhengbeier * 2011.06.9 */public class ZcPProMakeXYJJEditPanel extends ZcPProMakeEditPanel {  private static final long serialVersionUID = -7990547454355903333L;  JClosableTabbedPane pinPaiPane = null;  public JBasePanel pingPaiTablePanel = new JBasePanel("pingPaiTablePanel");  public JTablePanel jingJiaItemTablePanel = new JTablePanel("jingJiaItemTablePanel");  List<AbstractFieldEditor> itemFieldEditorList;  public BillElementMeta itemBillElementMeta = BillElementMeta.getBillElementMetaWithoutNd("ZC_P_PRO_MITEM_MER");  public ZcPProMakeXYJJItemEditPanel itemPanel;  public ZcPProMakeXYJJEditPanel self = this;  List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();  JFuncToolBar bottomToolBar3 = null;  public boolean fabuGG = true;  public static String lastActivedTabID = "";  private Map<String, ZcPProMakeXYJJItemEditPanel> tabID_TabPanelMap = new HashMap<String, ZcPProMakeXYJJItemEditPanel>();  public String getTitle() {    return LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_XY_JJ_TITEL);  }  public String getCompoId() {    // 网上竞价    return "ZC_P_PRO_MAKE_XY_JJ";  }  public ZcPProMakeXYJJEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus, ZcPProMakeListPanel listPanel) {    super(ZcPProMake.class, BillElementMeta.getBillElementMetaWithoutNd("ZC_P_PRO_MAKE_XY_JJ"));    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), getTitle(), TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.parent = parent;    this.colCount = 3;    init();    requestMeta.setCompoId(getCompoId());    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class,    "baseDataServiceDelegate");    //在电子竞价编辑页面初始化时，设置【成交】按钮不可用    chengJiaoButton.setEnabled(false);    refreshData();    this.haveInitFlag = true;    sendButton.setEnabled(false);    ZcPProMake make = (ZcPProMake) listCursor.getCurrentObject();    Long processInstId = make.getProcessInstId();    if (make.getZcMakeStatus().equals("0") && make.getProcessInstId() != null && make.getProcessInstId().longValue() > 0) {      sendButton.setEnabled(true);      deleteButton.setEnabled(true);    }    if (make.getZcMakeStatus().equals("0") && make.getProcessInstId() == null) {      deleteButton.setEnabled(false);      sendButton.setEnabled(true);    }  }  protected void refreshData() {    ZcPProMake zcPProMake = (ZcPProMake) listCursor.getCurrentObject();    boolean isNew;    if (zcPProMake != null) {//修改      isNew = false;      zcPProMake = getZcPProMakeServiceDelegate().selectByPrimaryKey(zcPProMake.getZcMakeCode(), this.requestMeta);      List biList = getZcPProMakeServiceDelegate().getZcPProMitemBi(zcPProMake.getZcMakeCode(), ZcUtil.useBudget(), requestMeta);      zcPProMake.setBiList(biList);      listCursor.setCurrentObject(zcPProMake);      if (biList != null && biList.size() > 0) {        if (ZcUtil.useBudget()) {          String sumId = "";          for (int i = 0; i < biList.size(); i++) {            ZcPProMitemBi bi = (ZcPProMitemBi) biList.get(i);            if (bi.getZcBiNo() == null || "".equals(bi.getZcBiNo())) {              bi.setZcBiDoSum(null);              continue;            }            if (sumId.length() > 0) {              sumId = sumId + ",'" + bi.getZcBiNo() + "'";            } else {              sumId = "'" + bi.getZcBiNo() + "'";            }          }          getDto.setZcText3(sumId);        }      }      if (ZcUtil.useBudget()) {        getDto.setZcMakeCode(zcPProMake.getZcMakeCode());      }    } else {//新增      isNew = true;      zcPProMake = new ZcPProMake();      setDeftValue(zcPProMake);      zcPProMake.setCoCode(this.requestMeta.getSvCoCode());      zcPProMake.setOrgCode(WorkEnv.getInstance().getCurrCompany().getForgCode());      zcPProMake.setZcFukuanType(ZcPProMake.CAIGOU_TYPE_DZJJ);      zcPProMake.setNd(this.requestMeta.getSvNd());      zcPProMake.setBiList(new ArrayList());      zcPProMake.setItemList(new ArrayList());      // 新增数据默认插入一行      ZcPProMitem item = new ZcPProMitem();      item.setZcBraName("");      item.setZcPitemName("电子竞价项目明细");      item.setTempId(Guid.genID());      setItemDefaultValue(item);      zcPProMake.getItemList().add(item);      ZcPProMitemBi bi = new ZcPProMitemBi();      setItemBiDefaultValue(bi);      zcPProMake.getBiList().add(bi);      listCursor.getDataList().add(zcPProMake);      listCursor.setCurrentObject(zcPProMake);      initOrg(zcPProMake);    }    if (ZcUtil.useBudget()) {      getDto.setNd(requestMeta.getSvNd());      getDto.setZcText2("1");      getDto.setCoCode(requestMeta.getSvCoCode());    }    this.setEditingObject(zcPProMake);    biTablePanel.setTableModel(ZcPProMakeToTableModelConverter.convertSubBiTableData(zcPProMake.getBiList(), wfCanEditFieldMap));    jingJiaItemTablePanel.setTableModel(ZcPProMakeToTableModelConverter.convertJingJiaItemTableData(zcPProMake.getItemList()));    itemTablePanel.setTableModel(ZcPProMakeToTableModelConverter.convertJingJiaItemTableData(zcPProMake.getItemList()));    // 翻译从表表头列    ZcUtil.translateColName(biTablePanel.getTable(), ZcPProMakeToTableModelConverter.biInfo);    // 设置从表列类型    setTableBiEditor(biTablePanel.getTable());    // 设置从表监听     addBiTableLisenter(biTablePanel.getTable());    this.fitTable();    // 草稿状态设置【批复采购方式】只读，设置【成交】按钮为不可用    if ("0".equals(zcPProMake.getZcMakeStatus())) {      if (zcPifuCgfs != null) {        zcPifuCgfs.setEnabled(false);      }      chengJiaoButton.setEnabled(false);    }    //在终审和未提交状态设置【成交】按钮不可用    if ("exec".equals(zcPProMake.getZcMakeStatus())) {      chengJiaoButton.setEnabled(true);    }    //创建竞价商品面板    refreshJinJiaItemPanel();    //刷新竞价信息和成交信息    refreshJinJiaChengJiao();    //设置旧值。判断页面值是否改变    setOldObject();    // 根据工作流模版设置字段是否可编辑    //    updateWFEditorEditable(zcPProMake, requestMeta);    if (zcPProMake.getZcMakeStatus() != null && !"0".equals(zcPProMake.getZcMakeStatus())) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      this.biTablePanel.getTable().setEnabled(false);    }    // 根据工作流模版设置功能按钮是否可用    setButtonStatus(zcPProMake, requestMeta, this.listCursor);    biTabPane.repaint();    itemTabPane.repaint();  }  public void setDeftValue(ZcPProMake zcPProMake) {    //其他    zcPProMake.setZcPitemOpiway("6");    //其他    zcPProMake.setZcPifuCgfs("6");    zcPProMake.setZcMakeStatus("0");    zcPProMake.setZcIsBudget("N");    zcPProMake.setZcIsImp("N");    // 政府集中采购    zcPProMake.setZcMakeSequence("1");    // 网上竞价    zcPProMake.setZcFukuanType("G03");    zcPProMake.setZcYepFlag("00");  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    AutoNumFieldEditor zcMakeCode = new AutoNumFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_CODE), "zcMakeCode");    editorList.add(zcMakeCode);    TextFieldEditor zcMakeName = new TextFilePathFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_NAME), "zcMakeName");    editorList.add(zcMakeName);    AsValFieldEditor zcMakeStatus = new AsValFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_STATUS), "zcMakeStatus", "ZC_VS_MAKE_STATUS");    zcMakeStatus.setEnabled(false);    editorList.add(zcMakeStatus);    IForeignEntityTreeHandler companyHandler = new IForeignEntityTreeHandler() {      @Override      public void excute(List selectedDatas) {        ZcPProMake zcPProMake = (ZcPProMake) listCursor.getCurrentObject();        if (selectedDatas != null && selectedDatas.size() > 0) {          Company company = (Company) selectedDatas.get(0);          zcPProMake.setOrgCode(company.getForgCode());          setEditingObject(zcPProMake);        }      }      @Override      public boolean isMultipleSelect() {        return false;      }      @Override      public boolean isSelectLeaf() {        return false;      }    };    CompanyFieldEditor zcCoCode = new CompanyFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_CO_NAME), "coCode", companyHandler, getCompoId(),    "CO_CODE");    zcCoCode.setEnabled(true);    editorList.add(zcCoCode);    TextFieldEditor zcCoCodeNd = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_CO_CODE_ND), "nd");    zcCoCodeNd.setEnabled(false);    editorList.add(zcCoCodeNd);    OrgFieldEditor zcZgCsCode = new OrgFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_ZG_CS_CODE), "orgCode", false);    editorList.add(zcZgCsCode);    TextFieldEditor zcMakeLinkman = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MAKE_LINKMAN), "zcMakeLinkman");    editorList.add(zcMakeLinkman);    TextFieldEditor zcMakeTel = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_TEL), "zcMakeTel");    editorList.add(zcMakeTel);    TextFieldEditor zcAttr2 = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_ATTR2), "zcAttr2");    editorList.add(zcAttr2);    zcMoneyBiSum = new MoneyFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_MONEY_BI_SUM), "zcMoneyBiSum");    zcMoneyBiSum.setEnabled(false);    editorList.add(zcMoneyBiSum);    df = new DateFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_EB_XY_END_DATE), "zcXieYiEndDate", DateFieldEditor.TimeTypeH24);    editorList.add(df);    TextFieldEditor zcIsRemark = new TextFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_IS_REMARK), "zcIsRemark");    editorList.add(zcIsRemark);    ZcPProHandler zcPProHandler = new ZcPProHandler(self, this.listCursor);    ElementConditionDto proDto = new ElementConditionDto();    proDto.setZcText0(this.requestMeta.getEmpCode());    ForeignEntityFieldEditor proName = new ForeignEntityFieldEditor("ZC_P_PRO.getZcPPro", proDto, 20, zcPProHandler,    zcPProHandler.getColumNames(), "预算项目", "proName");    editorList.add(proName);    return editorList;  }  public void refreshJinJiaItemPanel() {    createSubJingJiaItemPanel();  }  JBasePanel createSubJingJiaItemPanel() {    //this.itemTabPane = new JClosableTabbedPane();    this.itemTabPane.remove(this.jingJiaItemTablePanel);    this.itemTabPane.remove(this.itemTablePanel);    this.jingJiaItemTablePanel = new JTablePanel(this.getClass().getName() + "_jingjiaItem_panel");    ZcPProMake make = (ZcPProMake) this.listCursor.getCurrentObject();    JClosableTabbedPane itemTabPanel = null;    if (make.getItemList() != null && make.getItemList().size() > 0) {      itemTabPanel = new JClosableTabbedPane(JTabbedPane.TOP, JTabbedPane.WRAP_TAB_LAYOUT);      if (make.getItemList().size() > 0) {        for (int i = 0; i < make.getItemList().size(); i++) {          ZcPProMitem item = (ZcPProMitem) make.getItemList().get(i);          item.setTempId(Guid.genID());// add shijia 20110929          assemJinJiaItemPanel(item, itemTabPanel);        }      } else {        ZcPProMitem item = new ZcPProMitem();        item.setTempId(Guid.genID());        item.setZcBraName("");        item.setZcPitemName("电子竞价项目明细");        assemJinJiaItemPanel(item, itemTabPanel);      }      this.jingJiaItemTablePanel.setLayout(new BorderLayout());      this.jingJiaItemTablePanel.add(itemTabPanel, BorderLayout.CENTER);      addActionListener(itemTabPanel);//tab选择或者新建时记录最后激活的tabID       int order = itemTabPanel.getComponentZOrder(tabID_TabPanelMap.get(lastActivedTabID));      System.out.println(order);      itemTabPanel.setSelectedIndex(order);    }    assembJinJiaItemTabs("竞价项目明细", "竞价项目明细", this.jingJiaItemTablePanel);    bottomToolBar3 = new JFuncToolBar();    JButton insertPinpaiBtn = new SubinsertPinPaiButton(false);    bottomToolBar3.add(insertPinpaiBtn);    ZcPProMake zcPProMake = (ZcPProMake) listCursor.getCurrentObject();    String status = zcPProMake.getZcMakeStatus();    if (status != null && status.equals("0")) {      bottomToolBar3.setEnabled(true);    } else {      bottomToolBar3.setEnabled(false);    }    jingJiaItemTablePanel.add(bottomToolBar3, BorderLayout.SOUTH);    insertPinpaiBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZcPProMitem item = new ZcPProMitem();        item.setTempId(Guid.genID());        item.setZcBraName("");        item.setZcPitemName("电子竞价项目明细");        //lastActivedTabID = item.getTempId();//新增tab时，设置此tab为最后激活tab        refreshPinpaiPanel(item);      }    });    return this.jingJiaItemTablePanel;  }  //选择或者新建tab时，记录最新tab ID  private void addActionListener(final JClosableTabbedPane tabPanel) {    tabPanel.addChangeListener(new ChangeListener() {      public void stateChanged(ChangeEvent e) {        JClosableTabbedPane pane = (JClosableTabbedPane) e.getSource();        Object tmp = pane.getSelectedComponent();        if (tmp instanceof ZcPProMakeXYJJItemEditPanel) {          ZcPProMakeXYJJItemEditPanel tab = (ZcPProMakeXYJJItemEditPanel) pane.getSelectedComponent();          lastActivedTabID = tab.getTabID();//点击某个tab时，记录当前的tabid        } else {          ZcPProMake make = (ZcPProMake) listCursor.getCurrentObject();          ZcPProMitem mitem = (ZcPProMitem) make.getItemList().get(0);          lastActivedTabID = mitem.getTempId();//新增tab时，设置此tab为最后激活tab        }      }    });  }  public void refreshPinpaiPanel(ZcPProMitem item) {    ZcPProMake make = (ZcPProMake) this.listCursor.getCurrentObject();    if (make.getItemList().size() != 0) {      for (int i = 0; i < make.getItemList().size(); i++) {        ZcPProMitem mitem = (ZcPProMitem) make.getItemList().get(i);        if (mitem.getZcCatalogueCode() != null && mitem.getZcCatalogueName() != null) {          item.setZcCatalogueCode(mitem.getZcCatalogueCode());          item.setZcCatalogueName(mitem.getZcCatalogueName());          break;        }      }    }    make.getItemList().add(item);    refreshJinJiaItemPanel();  }  public void assemJinJiaItemPanel(ZcPProMitem item, JClosableTabbedPane itemTabPanel) {    String braName = "";    if (item.getZcBraName() != null && !"".equals(item.getZcBraName())) {      braName = item.getZcBraName();    } else {      braName = "品牌";    }    itemPanel = new ZcPProMakeXYJJItemEditPanel(item, this.self);    lastActivedTabID = item.getTempId();    tabID_TabPanelMap.put(item.getTempId(), itemPanel);    //this.itemPanelMap.put(item, itemPanel);    ZcPProMake make = (ZcPProMake) this.listCursor.getCurrentObject();    itemTabPanel.addTab(braName, itemPanel, null, item.getTempId(), getZcPProMake());//addTab(ZcUtil.substring(merName, 16, "..."), null, itemPanel, merName);  }  public ZcPProMake getZcPProMake() {    return (ZcPProMake) this.listCursor.getCurrentObject();  }  @Override  public JTablePanel[] getSubTables() {    return new JTablePanel[] { biTablePanel, jingJiaItemTablePanel, itemTablePanel };  }  /*   * 送审   */  public void doSend() {    ZcPProMake zcPProMake = (ZcPProMake) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());    //检查选择的竞价商品信息    if (!((ZcPProMakeXYJJListPanel) listPanel).checkJj(zcPProMake)) {      return;    }    super.doSend();  }  public boolean doSave() {    ZcPProMake inData = (ZcPProMake) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return true;    }    if (listPanel.checkBeforeSave(inData, self)) {      return false;    }    boolean success = true;    String errorInfo = "";    try {      requestMeta.setFuncId(saveButton.getFuncId());      ZcPProMake zcPProMake = this.listPanel.getZcPProMakeServiceDelegate().updateZcPProMakeFN(inData, ZcUtil.useBudget(), WorkEnv.getInstance().getWebRoot(),        this.requestMeta);      listCursor.setCurrentObject(zcPProMake);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      refreshData();      this.listPanel.refreshCurrentTabData();      sendButton.setEnabled(true);    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }    return true;  }}
package com.ufgov.zc.client.zc.zcppromake;import java.math.BigDecimal;import java.util.ArrayList;import java.util.HashMap;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.swing.JComponent;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.checkrule.BaseRule;import com.ufgov.zc.common.zc.model.ZcPProMake;import com.ufgov.zc.common.zc.model.ZcPProMitem;public class ZcPProMakeXYJJListPanel extends ZcPProMakeListPanel {  /**   *    */  private static final long serialVersionUID = 7044332289584535482L;  public static final Logger logger = Logger.getLogger(ZcPProMakeXYJJListPanel.class);  public ZcPProMakeXYJJListPanel self = this;  public String getCompoId() {    return "ZC_P_PRO_MAKE_XY_JJ";  }  public String getTabId() {    return ZcSettingConstants.TAB_ID_ZC_P_PRO_MAKE_JJ;  }  public String getTitle() {    return LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_XY_JJ_TITEL);  }  public ZcPProMakeEditPanel getEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus, ZcPProMakeListPanel listPanel) {    return new ZcPProMakeXYJJEditPanel(parent, listCursor, tabStatus, listPanel);  }  public ZcPProMakeXYJJEditPanel getEditPanel1(GkBaseDialog parent, ListCursor listCursor, String tabStatus, ZcPProMakeListPanel listPanel) {    return new ZcPProMakeXYJJEditPanel(parent, listCursor, tabStatus, listPanel);  }  public void setElementConditionDto(ElementConditionDto dto) {    // 网上竞价    dto.setZcText2(ZcPProMake.CAIGOU_TYPE_DZJJ);  }  public void doSend() {    requestMeta.setFuncId(this.sendButton.getFuncId());    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    for (int i = 0; i < beanList.size(); i++) {      ZcPProMake make = (ZcPProMake) beanList.get(i);      if (checkJj(make)) {        return;      }    }    super.doSend();  }  /**   * 保存前校验   * @param   * @return   */  public boolean checkBeforeSave(ZcPProMake zcPProMake, JComponent panel) {    List mainNotNullList = ((BillElementMeta) billElementMeta).getNotNullBillElement();    List biNotNullList = self.biBillElementMeta.getNotNullBillElement();    List itemNotNullList = self.itemBillElementMeta.getNotNullBillElement();    List merNotNullList = itemBillElementMeta.getNotNullBillElement();    StringBuilder errorInfo = new StringBuilder();    String mainValidateInfo = ZcUtil.validateBillElementNull(zcPProMake, mainNotNullList);    String biValidateInfo = ZcUtil.validateDetailBillElementNull(zcPProMake.getBiList(), biNotNullList, false);    String itemValidateInfo = ZcUtil.validateDetailBillElementNull(zcPProMake.getItemList(), itemNotNullList, false);    String merItemValidateInfo = getMerItemValidateInfo(zcPProMake.getItemList(), merNotNullList);    if (mainValidateInfo.length() != 0) {      errorInfo.append("电子竞价").append("：\n").append(mainValidateInfo.toString()).append("\n");    }    if (this.budgetFlag && biValidateInfo.length() == 0) {      biValidateInfo = checkBiMoney(zcPProMake.getBiList());    }    if (biValidateInfo.length() != 0) {      errorInfo.append("资金构成：\n").append(biValidateInfo.toString()).append("\n"); //wangwei notes 2011-04-07-23:17    }    if (itemValidateInfo.length() != 0) {      errorInfo.append("竞价项目明细：\n").append(itemValidateInfo.toString()).append("\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return true;    }    if (zcPProMake.getZcXieYiEndDate() != null) {      if (zcPProMake.getZcXieYiEndDate().getTime() < requestMeta.getSysDate().getTime()) {        errorInfo.append("").append("[电子竞价截止时间]不能小于当前时间!\n");      }    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return true;    }    Set set = new HashSet();    for (int i = 0; i < zcPProMake.getItemList().size(); i++) {      int count = 0;      ZcPProMitem zcPProMitemFst = (ZcPProMitem) (zcPProMake.getItemList().get(i));      for (int j = i; j < zcPProMake.getItemList().size(); j++) {        ZcPProMitem zcPProMitemSec = (ZcPProMitem) (zcPProMake.getItemList().get(j));        if (zcPProMitemFst.getZcBraCode() != null && zcPProMitemFst.getZcBraCode().equals(zcPProMitemSec.getZcBraCode())) {          count++;        }      }      if (count >= 2) {        set.add(zcPProMitemFst.getZcBraName());      }    }    for (int i = 0; i < set.size(); i++) {      errorInfo.append("保存失败!\n品牌");      if (i < set.size() - 1) {        errorInfo.append("[" + set.iterator().next().toString() + "],");      } else {        errorInfo.append("[" + set.iterator().next().toString() + "]");      }    }    //请保证上面的代码只做过品牌的重复性较验,不然错误信息里会多出“重复”两字    if (errorInfo.length() != 0) {      errorInfo.append("重复!");      JOptionPane.showMessageDialog(this, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return true;    }    if (merItemValidateInfo.length() != 0) {      errorInfo.append("商品明细：\n").append(merItemValidateInfo.toString()).append("\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return true;    }    int sameCataNum = 0;    int sameBraNum = 0;    String catalogueCode = "";    String brandCode = "";    for (int i = 0; i < zcPProMake.getItemList().size(); i++) {      ZcPProMitem item = (ZcPProMitem) zcPProMake.getItemList().get(i);      if (catalogueCode.equals(item.getZcCatalogueCode())) {        sameCataNum++;      } else {        catalogueCode = item.getZcCatalogueCode();      }      if (brandCode.equals(item.getZcBraCode())) {        sameBraNum++;      } else {        brandCode = item.getZcBraCode();      }      List merList = item.getMerList();      BigDecimal sumItem = new BigDecimal("0.00");      String pinpaiName = "";      for (int j = 0; j < merList.size(); j++) {        ZcPProMitem merItem = (ZcPProMitem) merList.get(j);        pinpaiName = item.getZcBraName().toString();        sumItem = sumItem.add(merItem.getZcItemSum());      }      if (merList.size() > 1) {        errorInfo.append("品牌" + "[" + pinpaiName + "]只能申报一种商品 !\n");      }      if (sumItem.compareTo(zcPProMake.getZcMoneyBiSum()) == 1) {        errorInfo.append("品牌" + "[" + pinpaiName + "]的采购金额已超出预算! \n");      }      /*      if (false) {              errorInfo.append("每种品牌的商品的单价差额不能超过" + zcPProMake.getZcMoneyBgZxs() + "元 \n");            }*/    }    /*    if (sameCataNum == 0) {          errorInfo.append("竞价项目明细：\n请选择相同的品目！\n");        }        if (sameBraNum > 0) {          errorInfo.append("竞价项目明细：\n不能选择相同的品牌！\n");        }        if (zcPProMake.getItemList().size() == 1) {          errorInfo.append("竞价项目明细：\n电子竞价至少选择两种品牌！\n");        }*/    StringBuilder sumInfo = jiSuanLimitSum(zcPProMake, catalogueCode);    if (sumInfo.length() != 0) {      errorInfo.append(sumInfo);    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(panel, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return true;    }    return false;  }  public String getMerItemValidateInfo(List itemList, List notNullList) {    String itemValidateInfo = "";    for (int i = 0; i < itemList.size(); i++) {      ZcPProMitem item = (ZcPProMitem) itemList.get(i);      List merList = item.getMerList();      String info = ZcUtil.validateDetailBillElementNull(merList, notNullList, false);      if (info.length() != 0) {        if (item.getZcBraName() != null && !"".equals(item.getZcBraName()))          itemValidateInfo = itemValidateInfo + "品牌[" + item.getZcBraName() + "]的商品明细" + info + "\n";      }    }    return itemValidateInfo;  }  /**   * 计算商品差价   * @param catalogueCode    *   */  public StringBuilder jiSuanLimitSum(ZcPProMake make, String catalogueCode) {    StringBuilder errorInfo = new StringBuilder();    BigDecimal maxSum = new BigDecimal("0.00");    BigDecimal minSum = new BigDecimal("0.00");    for (int i = 0; i < make.getItemList().size(); i++) {      ZcPProMitem item = (ZcPProMitem) make.getItemList().get(i);      List merList = item.getMerList();      for (int j = 0; j < merList.size(); j++) {        ZcPProMitem merItem = (ZcPProMitem) merList.get(j);        if (i == 0) {          maxSum = merItem.getZcMerPrice();          minSum = merItem.getZcMerPrice();        }        if (maxSum.compareTo(merItem.getZcMerPrice()) == -1) {          maxSum = merItem.getZcMerPrice();        }        if (minSum.compareTo(merItem.getZcMerPrice()) == 1) {          minSum = merItem.getZcMerPrice();        }      }    }    BigDecimal limitSum = getJjPricQuota(catalogueCode);//商品价格差比值    if (limitSum == null) {      errorInfo.append("竞价品目中，没有设置竞价品牌数量最低要求！");      return errorInfo;    }    if (maxSum.subtract(minSum).compareTo(minSum.multiply(limitSum).divide(new BigDecimal("100.00"))) == 1) {      errorInfo.append("竞价项目明细：\n商品的单价，最高价：" + maxSum + "元；最低价：" + minSum + "元；最高价与最低价差额：" + maxSum.subtract(minSum) + "元\n"      + "超过了该品目的限额（该品目限定的额度不能超过商品的最低价的" + limitSum.toBigInteger() + "%）,即" + minSum.multiply(limitSum).divide(new BigDecimal("100.00")).intValue()      + "元！\n");    }    return errorInfo;  }  private BigDecimal getJjPricQuota(String catalogueCode) {    // TCJLODO Auto-generated method stub    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText0(this.requestMeta.getSvNd() + "");    dto.setZcText1(catalogueCode);    return getZcPProMakeServiceDelegate().getJjPricQuota(dto, this.requestMeta);  }  /*   * 检查选择的竞价商品信息   */  public boolean checkJj(ZcPProMake make) {    // TCJLODO Auto-generated method stub    StringBuilder errorInfo = new StringBuilder();    if (make.getItemList().size() > 0) {      boolean sameCatFlag = true;      String catalogue = "";      String catalogueName = "";      String pinPai = "";      List<String> pinPLst = new ArrayList<String>();      int ppNum = 0;      for (int i = 0; i < make.getItemList().size(); i++) {        ZcPProMitem item = (ZcPProMitem) make.getItemList().get(i);        if (catalogue.equals("")) {          catalogue = item.getZcCatalogueCode();          catalogueName = item.getZcCatalogueName();        } else {          if (!catalogue.equals(item.getZcCatalogueCode())) {            sameCatFlag = false;          }        }        if (!pinPLst.contains(item.getZcBraCode())) {          pinPLst.add(item.getZcBraCode());        }      }      String checkStr = checkPinPNum(pinPLst.size(), catalogue, catalogueName);      if (checkStr.length() > 0) {        errorInfo.append(checkStr).append("\n");      }      if (!sameCatFlag) {        errorInfo.append("请选择同一个采购品目的商品进行竞价!\n");      }    } else {      errorInfo.append("请选择参加竞价的品牌和商品!\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  /*   * 检查品牌数量   */  private String checkPinPNum(int size, String catalogue, String catalogueName) {    // TCJLODO Auto-generated method stub    try {      ElementConditionDto dto = new ElementConditionDto();      dto.setZcText0(this.requestMeta.getSvNd() + "");      dto.setZcText1(catalogue);      int num = getZcPProMakeServiceDelegate().getJjPinPNum(catalogue, dto, this.requestMeta);      if (size < num) {        return "品目" + catalogue + catalogueName + "的竞价品牌数最低为" + num + ",请增加品牌。";      } else {        return "";      }    } catch (Exception e) {      logger.error(e.getMessage(), e);      return e.getMessage();    }  }  public void doAdd() {    new ZcPProMakeXYJJDialog(self, new ArrayList(1), -1, topDataDisplay.getActiveTableDisplay().getStatus());  }  public static void main(String[] args) throws Exception {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        ZcPProMakeXYJJListPanel bill = new ZcPProMakeXYJJListPanel();        JFrame frame = new JFrame("frame");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }}
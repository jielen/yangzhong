package com.ufgov.zc.client.zc.zcproend;import java.awt.Color;import java.awt.Container;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcYearEndToTableModelConverter;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.FinishItemButton;import com.ufgov.zc.client.component.button.zc.CommonButton;import com.ufgov.zc.client.component.ui.AbstractDataDisplay;import com.ufgov.zc.client.component.ui.AbstractEditListBill;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SaveableSearchConditionArea;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.component.ui.conditionitem.AsValComboboxConditionItem2;import com.ufgov.zc.client.component.ui.conditionitem.ConditionFieldConstants;import com.ufgov.zc.client.component.ui.conditionitem.SearchConditionUtil;import com.ufgov.zc.client.util.ListUtil;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcYearPlan;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcYearEndServiceDelegate;public class ZcProOrYearEndListPanel extends AbstractEditListBill implements ParentWindowAware {  private static final long serialVersionUID = 5518331807480036571L;  private static final Logger logger = Logger.getLogger(ZcProOrYearEndListPanel.class);  private ZcProOrYearEndListPanel self = this;  private FinishItemButton ffinishitem = new FinishItemButton();  private CommonButton fcarraryLockBtn = new CommonButton("fcarrarylock", "结转锁定", "", true);  private CommonButton fcarraryNewBtn = new CommonButton("fcarraryNew", "结转立项", "", true);  private CommonButton fjieZhuanBaseData = new CommonButton("fjieZhuanBaseData", "结转基础资料", "", true);  public ZcProOrYearEndListPanel getSelf() {    return self;  }  private Window parentWindow;  private String compoId = "ZC_PRO_END_YEAR_END";  public String getCompoId() {    return compoId;  }  protected RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  protected ElementConditionDto elementConditionDto = new ElementConditionDto();  public IZcYearEndServiceDelegate zcYearEndServiceDelegate = (IZcYearEndServiceDelegate) ServiceFactory.create(IZcYearEndServiceDelegate.class,  "zcYearEndServiceDelegate");  protected IZcEbBaseServiceDelegate zcEbBaseServiceDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class,  "zcEbBaseServiceDelegate");  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  private final class DataDisplay extends MultiDataDisplay {    private DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays, AbstractSearchConditionArea conditionArea,    boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, ZcSettingConstants.TAB_ID_ZC_YEAR_END);      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "项目结转结项", TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体",      Font.BOLD, 15), Color.BLUE));    }    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {              String status = elementConditionDto.getStatus();              if ("21".equals(status)) {                JGroupableTable table = d.getTable();                MyTableModel model = (MyTableModel) table.getModel();                int row = table.getSelectedRow();                List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(model.getList(), table));                new ZcProOrYearEndEditDialog(self, viewList, row, status);              }            }          }        });      }    }    @Override    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems, final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(getCompoId());      elementConditionDto.setExecutor(WorkEnv.getInstance().getCurrUserId());      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setStatus(tableDisplay.getStatus());      elementConditionDto.setNd(requestMeta.getSvNd());      elementConditionDto.setCoCode(requestMeta.getSvCoCode());      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        @Override        public void before() {          assert c != null;          installLoadingComponent(c);        }        @Override        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        @Override        public TableModel execute() throws Exception {          if (null != tableDisplay && "20".equals(tableDisplay.getStatus())) {            //            elementConditionDto.setCoCode(null);            elementConditionDto.setZcText4(null);            return ZcYearEndToTableModelConverter.convertToCarrayTableModel(self.zcYearEndServiceDelegate.getZcCarraryMake(elementConditionDto, requestMeta));          } else if (null != tableDisplay && "21".equals(tableDisplay.getStatus())) {            elementConditionDto.setZcText4("21");            return ZcYearEndToTableModelConverter.convertToCarrayTableModel(self.zcYearEndServiceDelegate.getZcCarraryMake(elementConditionDto, requestMeta));          }          return ZcYearEndToTableModelConverter.convertToTableModel(self.zcYearEndServiceDelegate.getZcPProMake(elementConditionDto, requestMeta));        }        @Override        public void success(TableModel model) {          tableDisplay.setTableModel(model);          setButtonsVisiable();        }      });    }  }  static {    LangTransMeta.init("ZC%");  }  /**   * 构造函数   */  public ZcProOrYearEndListPanel() {    createPanel();    requestMeta.setCompoId(getCompoId());  }  protected void createPanel() {    UIUtilities.asyncInvoke(new DefaultInvokeHandler<List<SearchCondition>>() {      @Override      public List<SearchCondition> execute() throws Exception {        List<SearchCondition> needDisplaySearchConditonList = SearchConditionUtil.getNeedDisplaySearchConditonListJoinRole(WorkEnv.getInstance()        .getCurrUserId(), ZcSettingConstants.TAB_ID_ZC_YEAR_END);        return needDisplaySearchConditonList;      }      @Override      public void success(List<SearchCondition> needDisplaySearchConditonList) {        List<TableDisplay> showingDisplays = SearchConditionUtil.getNeedDisplayTableDisplay(needDisplaySearchConditonList);        init(createDataDisplay(showingDisplays), null);// 调用父类方法        revalidate();        repaint();      }    });  }  protected AbstractSearchConditionArea topSearchConditionArea;  private AbstractSearchConditionArea createTopConditionArea() {    Map defaultValueMap = new HashMap();    topSearchConditionArea = new SaveableSearchConditionArea(ZcSettingConstants.CONDITION_ID_ZC_YEAR_END, null, false, defaultValueMap, null);    AbstractSearchConditionItem item = this.topSearchConditionArea.getCondItemsByCondiFieldCode(ConditionFieldConstants.ZC_VS_YEAR_END_STATUS);    if (item != null) {      ((AsValComboboxConditionItem2) item).setValueByCode("0");    }    return topSearchConditionArea;  }  private AbstractDataDisplay createDataDisplay(List<TableDisplay> showingDisplays) {    return new DataDisplay(    SearchConditionUtil.getAllTableDisplayJoinRole(WorkEnv.getInstance().getCurrUserId(), ZcSettingConstants.TAB_ID_ZC_YEAR_END), showingDisplays,    createTopConditionArea(), true);// true:显示搜索条件区 false：不显示搜索条件区  }  @Override  protected void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(getCompoId());    toolBar.add(ffinishitem);    toolBar.add(fcarraryLockBtn);    toolBar.add(fcarraryNewBtn);    toolBar.add(fjieZhuanBaseData);    ffinishitem.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doProEnd();      }    });    fcarraryLockBtn.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        // TCJLODO Auto-generated method stub        doLock();      }    });    fcarraryNewBtn.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doNew();      }    });  }  public void refreshCurrentTabData() {    topSearchConditionArea.doSearch();  }  public List<ZcYearPlan> getCheckedList() {    List<ZcYearPlan> beanList = new ArrayList<ZcYearPlan>();    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    MyTableModel model = (MyTableModel) table.getModel();    // Modal的数据    List list = model.getList();    Integer[] checkedRows = table.getCheckedRows();    for (Integer checkedRow : checkedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      ZcYearPlan bean = (ZcYearPlan) list.get(accordDataRow);      beanList.add(bean);    }    return beanList;  }  protected void doJieZhuanBaseData() {    // TCJLODO Auto-generated method stub    int num = JOptionPane.showConfirmDialog(this, "确认要结转" + requestMeta.getSvNd() + "年基础资料到" + (requestMeta.getSvNd() + 1) + "年吗", "结转确认", 0);    if (num == JOptionPane.YES_OPTION) {      ZcYearPlan p = new ZcYearPlan();      p.setNd(requestMeta.getSvNd());      zcEbBaseServiceDelegate.queryObject("ZC_YEAR_END.jiChuZiLiaoJieZhuan", p, requestMeta);      JOptionPane.showMessageDialog(this, "结转基础资料成功！请将服务器年度调整为" + (requestMeta.getSvNd() + 1) + "，并重启系统服务后，进行登陆测试。", "提示", JOptionPane.INFORMATION_MESSAGE);    }  }  private void doProEnd() {    List<ZcYearPlan> ckList = this.getCheckedList();    if (ckList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要结项的记录！", "提示", JOptionPane.ERROR_MESSAGE);      return;    }    boolean success = true;    String errorInfo = "";    try {      requestMeta.setFuncId(this.ffinishitem.getFuncId());      StringBuffer sb = new StringBuffer();      for (int i = 0; i < ckList.size(); i++) {        ZcYearPlan zcYearPlan = (ZcYearPlan) ObjectUtil.deepCopy(ckList.get(i));        if (sb.length() > 0) {          sb.append(",");        }        sb.append("'").append(zcYearPlan.getZcMakeCode()).append("'");      }      this.self.zcYearEndServiceDelegate.updateProEnd(sb.toString(), "Y".equals(AsOptionMeta.getOptVal(ZcSettingConstants.OPT_ZC_USE_BUDGET_INTERFACE)), WorkEnv.getInstance().getWebRoot(),        requestMeta);    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "结项成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    }  }  public void doLock() {    List<ZcYearPlan> ckList = this.getCheckedList();    if (ckList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要结转锁定的记录！", "提示", JOptionPane.ERROR_MESSAGE);      return;    }    requestMeta.setFuncId(this.fcarraryLockBtn.getFuncId());    StringBuffer sb = new StringBuffer();    for (int i = 0; i < ckList.size(); i++) {      ZcYearPlan zcYearPlan = (ZcYearPlan) ObjectUtil.deepCopy(ckList.get(i));      if (sb.length() > 0) {        sb.append(",");      }      sb.append("'").append(zcYearPlan.getZcMakeCode()).append("'");    }    //调用结转锁定的接口    elementConditionDto.setZcMakeCode(sb.toString());    elementConditionDto.setDattr1("20");    try {      this.self.zcYearEndServiceDelegate.updateMakeYepFlagByFlag(elementConditionDto, WorkEnv.getInstance().getWebRoot(), requestMeta);      JOptionPane.showMessageDialog(this, "结转锁定成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    } catch (Exception e) {      logger.error(e.getMessage(), e);      UIUtilities.showStaickTraceDialog(e, this, "错误", e.getMessage());    }  }  public void doNew() {    List<ZcYearPlan> ckList = this.getCheckedList();    if (ckList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要结转锁定的记录！", "提示", JOptionPane.ERROR_MESSAGE);      return;    }    requestMeta.setFuncId(this.fcarraryLockBtn.getFuncId());    StringBuffer sb = new StringBuffer();    StringBuffer newCode = new StringBuffer();    for (int i = 0; i < ckList.size(); i++) {      ZcYearPlan zcYearPlan = (ZcYearPlan) ObjectUtil.deepCopy(ckList.get(i));      if (sb.length() > 0) {        sb.append(",");      }      if (newCode.length() > 0) {        newCode.append(",");      }      sb.append("'").append(zcYearPlan.getZcMakeCode()).append("'");      newCode.append("'").append(zcYearPlan.getZcMakeCode()).append("_1").append("'");    }    System.out.println("sb==" + sb.toString());    elementConditionDto.setZcMakeCode(sb.toString());    elementConditionDto.setZcText0(newCode.toString());    try {      self.zcYearEndServiceDelegate.carraryNewMake(elementConditionDto, WorkEnv.getInstance().getWebRoot(), requestMeta);      JOptionPane.showMessageDialog(this, "结转立项成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    } catch (Exception e) {      logger.error(e.getMessage(), e);      UIUtilities.showStaickTraceDialog(e, this, "错误", e.getMessage());    }  }  /**   * 设置按钮状态   */  public void setButtonsVisiable() {    String panelId = "00";    if (topDataDisplay != null && topDataDisplay.getActiveTableDisplay() != null) {      panelId = topDataDisplay.getActiveTableDisplay().getStatus();    }    if ("00".equalsIgnoreCase(panelId)) {// 未结转      ffinishitem.setVisible(false);      fcarraryLockBtn.setVisible(true);      fcarraryNewBtn.setVisible(false);    } else if ("11".equalsIgnoreCase(panelId)) {// 待结项      ffinishitem.setVisible(true);      fcarraryLockBtn.setVisible(false);      fcarraryNewBtn.setVisible(false);    } else if ("10".equalsIgnoreCase(panelId)) {// 已经结项      ffinishitem.setVisible(false);      fcarraryLockBtn.setVisible(false);      fcarraryNewBtn.setVisible(false);    } else if ("20".equalsIgnoreCase(panelId)) { // 结转锁定      ffinishitem.setVisible(false);      fcarraryLockBtn.setVisible(false);      fcarraryNewBtn.setVisible(true);    } else if ("21".equalsIgnoreCase(panelId)) { // 结转锁定      ffinishitem.setVisible(false);      fcarraryLockBtn.setVisible(false);      fcarraryNewBtn.setVisible(true);    } else if ("30".equalsIgnoreCase(panelId)) { //已经结转      ffinishitem.setVisible(false);      fcarraryLockBtn.setVisible(false);      fcarraryNewBtn.setVisible(false);    }  }  public static void main(String[] args) throws Exception {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        ZcProOrYearEndListPanel bill = new ZcProOrYearEndListPanel();        JFrame frame = new JFrame("frame");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(getCompoId());  public BillElementMeta getBillElementMeta() {    return billElementMeta;  }}
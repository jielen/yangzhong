package com.ufgov.zc.client.zc.emfundpay;import java.awt.BorderLayout;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dimension;import java.awt.Font;import java.awt.Dialog.ModalityType;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.commons.lang.ObjectUtils;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEmFundPayBillToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.WorkflowTrace;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AuditPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SubaddButton;import com.ufgov.zc.client.component.button.SubdelButton;import com.ufgov.zc.client.component.button.SubinsertButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.table.celleditor.MoneyCellEditor;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.cellrenderer.NumberCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.AutoNumFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.WordFileUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.ztb.activex.WordPane;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.EmFundPayBill;import com.ufgov.zc.common.zc.model.EmFundPayBillDetail;import com.ufgov.zc.common.zc.model.EmFundPayReport;import com.ufgov.zc.common.zc.model.ZcBaseBill;public class EmFundPayBillEditPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = -2779110682087878491L;  private static final Logger logger = Logger.getLogger(EmFundReportEditPanel.class);  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EM_FUND_BILL";  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private FuncButton addButton = new AddButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton nextButton = new NextButton();  private FuncButton editButton = new EditButton();  private FuncButton exitButton = new ExitButton();  // 工作流送审  private FuncButton sendButton = new SendButton();  // 工作流收回  private FuncButton callbackButton = new CallbackButton();  // 工作流填写意见审核通过  private FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流审核通过  private FuncButton auditPassButton = new AuditPassButton();  // 工作流销审  private FuncButton unAuditButton = new UnauditButton();  // 工作流退回  private FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  private FuncButton traceButton = new TraceButton();  protected ListCursor listCursor;  private EmFundPayBill oldEmFundPayBill;  private EmFundPayBillListPanel listPanel;  private EmFundPayBillEditPanel self = this;  private GkBaseDialog parent;  private WordPane wordPane = new WordPane();  private String fileName;  private JTabbedPane jTabbedPane = null;  private JTablePanel detailTablePanel = new JTablePanel();  private JFuncToolBar bottomToolBar1 = null;  public EmFundPayBillEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus,  EmFundPayBillListPanel listPanel) {    super(EmFundPayBill.class, listPanel.getBillElementMeta());    this.listCursor = listCursor;    this.listPanel = listPanel;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "经费开支审批单",    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.parent = parent;    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    addSubPane();    refreshMainData();  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    AutoNumFieldEditor BillId = new AutoNumFieldEditor("审批单编号", "billId");    editorList.add(BillId);    TextFieldEditor billName = new TextFieldEditor("审批单名称", "billName");    editorList.add(billName);    String columNames[] = { "报告编号", "使用时间", "使用金额", "创建时间" };    ZcEmFundReportFnHandler handler1 = new ZcEmFundReportFnHandler(columNames);    ElementConditionDto elementCondtiontDto = new ElementConditionDto();    elementCondtiontDto.setNd(requestMeta.getSvNd());    elementCondtiontDto.setZcText0(requestMeta.getSvUserID());    ForeignEntityFieldEditor fundReportId = new ForeignEntityFieldEditor("EmFundPay.getEmFundPayReportList",    elementCondtiontDto, 20, handler1, columNames, "开支报告编号", "fundReportId");    editorList.add(fundReportId);    TextFieldEditor userName = new TextFieldEditor("经费申请人", "useName");    editorList.add(userName);    AsValFieldEditor deptId = new AsValFieldEditor("部门代码", "deptId", "ZC_VS_MAKE_STATUS");    editorList.add(deptId);    AsValFieldEditor fundType = new AsValFieldEditor("资金类型", "fundType", "VS_ZC_FUND_TYPE");    editorList.add(fundType);    DateFieldEditor applyTime = new DateFieldEditor("经费申请时间", "applyTime");    editorList.add(applyTime);    DateFieldEditor useTime = new DateFieldEditor("经费使用时间", "useTime");    editorList.add(useTime);    MoneyFieldEditor fundSum = new MoneyFieldEditor(false, "经费金额", "fundSum");    editorList.add(fundSum);    TextFieldEditor remark = new TextFieldEditor("备注", "remark");    editorList.add(remark);    TextFieldEditor fundUse = new TextFieldEditor("经费使用说明", "fundUse");    editorList.add(fundUse);    AsValFieldEditor status = new AsValFieldEditor("审核状态", "status", "VS_ZC_FUND_REPORT_STATUS");    editorList.add(status);    return editorList;  }  public JComponent createSubBillPanel() {    jTabbedPane = new JTabbedPane();    detailTablePanel.init();    detailTablePanel.getSearchBar().setVisible(false);    detailTablePanel.setTablePreferencesKey(this.getClass().getName() + "_biTable");    detailTablePanel.getTable().setShowCheckedColumn(true);    detailTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    jTabbedPane.addTab("经费开支明细", detailTablePanel);    bottomToolBar1 = new JFuncToolBar();    FuncButton addBtn1 = new SubaddButton(false);    JButton insertBtn1 = new SubinsertButton(false);    JButton delBtn1 = new SubdelButton(false);    bottomToolBar1.add(addBtn1);    bottomToolBar1.add(insertBtn1);    bottomToolBar1.add(delBtn1);    detailTablePanel.add(bottomToolBar1, BorderLayout.SOUTH);    addBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        EmFundPayBillDetail detail = new EmFundPayBillDetail();        detail.setTempId(Guid.genID());        setdetailBiDefaultValue(detail);        int rowNum = addSub(detailTablePanel, detail);        detailTablePanel.getTable().setRowSelectionInterval(rowNum, rowNum);      }    });    insertBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        EmFundPayBillDetail detail = new EmFundPayBillDetail();        detail.setTempId(Guid.genID());        setdetailBiDefaultValue(detail);        int rowNum = insertSub(detailTablePanel, detail);        detailTablePanel.getTable().setRowSelectionInterval(rowNum, rowNum);      }    });    delBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        Integer[] checkedRows = deleteSub(detailTablePanel);      }    });    return jTabbedPane;  }  private void setdetailBiDefaultValue(EmFundPayBillDetail detail) {    EmFundPayBill bill = (EmFundPayBill) listCursor.getCurrentObject();    detail.setBillId(bill.getBillId());    detail.setDetailSum(BigDecimal.ZERO);  }  protected void caculateMoney(List<EmFundPayBillDetail> detailList) {    BigDecimal sum = BigDecimal.ZERO;    for (EmFundPayBillDetail detail : detailList) {      sum = sum.add((BigDecimal) ObjectUtils.defaultIfNull(detail.getDetailSum(), new BigDecimal("0.00")));    }    EmFundPayBill bill = (EmFundPayBill) this.listCursor.getCurrentObject();    if (sum.compareTo(bill.getFundSum()) != 0) {      bill.setFundSum(sum);      this.setEditingObject(bill);    }  }  private void refreshMainData() {    EmFundPayBill emFundPayBill = (EmFundPayBill) listCursor.getCurrentObject();    boolean isNew;    if (emFundPayBill == null) {      isNew = true;      emFundPayBill = new EmFundPayBill();      emFundPayBill.setApplyTime(requestMeta.getSysDate());      emFundPayBill.setStatus("0");      emFundPayBill.setNd(requestMeta.getSvNd());      EmFundPayBillDetail detail = new EmFundPayBillDetail();      List detailList = new ArrayList();      detailList.add(detail);      emFundPayBill.setDetailList(detailList);      listCursor.setCurrentObject(emFundPayBill);      listCursor.getDataList().add(emFundPayBill);    }    this.setEditingObject(emFundPayBill);    detailTablePanel.setTableModel(ZcEmFundPayBillToTableModelConverter.convertSubBiTableData(emFundPayBill    .getDetailList()));    // 翻译从表表头列    ZcUtil.translateColName(detailTablePanel.getTable(), ZcEmFundPayBillToTableModelConverter    .getBillDetailInfo());    // 设置从表列类型    setTabledetailEditor(detailTablePanel.getTable());    setOldObject();    // 根据工作流模版设置字段是否可编辑    updateWFEditorEditable(emFundPayBill, requestMeta);    // 根据工作流模版设置功能按钮是否可用    setButtonStatus(emFundPayBill, requestMeta, this.listCursor);    this.fitTable();    //    refreshSubTableData(emFundPayBill.getDetailList());    //    addSubPane();  }  private void refreshSubTableData() {    EmFundPayBill emFundPayBill = (EmFundPayBill) listCursor.getCurrentObject();    String fileID = emFundPayBill.getReportFileID();    WordFileUtil.setDir("fundReport");    if (wordPane != null) {      wordPane.close();    }    if (fileID != null && !fileID.equals("")) {      this.fileName = WordFileUtil.loadMold(fileID);      wordPane.open(this.fileName);    } else {      this.fileName = WordFileUtil.loadFundReportDefaultMold();      wordPane.open(this.fileName);    }  }  private void addSubPane() {    //下面一句是为了打开word后刷新窗口    self.setSize(self.getSize().width + 1, self.getSize().height + 1);    wordPane.addPropertyChangeListener(WordPane.EVENT_NAME_OPEN_CALLBACK, new PropertyChangeListener() {      public void propertyChange(PropertyChangeEvent evt) {        //打开文件完成之后的回调函数        boolean isSuccess = (Boolean) evt.getNewValue();        if (isSuccess) {          //下面一句是为了打开word后刷新窗口          self.setSize(self.getSize().width - 1, self.getSize().height - 1);        }      }    });    jTabbedPane.addTab("经费开支报告", wordPane);  }  private void setTabledetailEditor(JPageableFixedTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    SwingUtil.setTableCellEditor(table, "FUND_SUM", new MoneyCellEditor(false));    SwingUtil.setTableCellRenderer(table, "FUND_SUM", new NumberCellRenderer());  }  private void setOldObject() {    oldEmFundPayBill = (EmFundPayBill) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(saveButton);    toolBar.add(editButton);    toolBar.add(sendButton);    toolBar.add(suggestPassButton);    toolBar.add(auditPassButton);    toolBar.add(callbackButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(traceButton);    toolBar.add(deleteButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 新增        doAdd();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 保存        doSave();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 删除        doDelete();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送审        doSend();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 修改        doEdit();      }    });    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 收回        doCallback();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核        doSuggestPass();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 审核        doAudit();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 销审        doUnaudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退回        doUntread();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 流程跟踪        doTrace();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 上一页        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 下一页        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退出        doExit();      }    });  }  public void refreshData() {    refreshMainData();    refreshSubTableData();  }  private void refreshAll(EmFundPayBill afterSaveBill, boolean isRefreshButton) {    this.listCursor.setCurrentObject(afterSaveBill);    refreshData();    if (isRefreshButton) {      setButtonStatus(afterSaveBill, requestMeta, this.listCursor);    }  }  /*   * 新增   */  private void doAdd() {    if (this.doExit()) {      this.listPanel.doAdd();    }  }  public void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  /*   * 流程跟踪   */  private void doTrace() {    ZcBaseBill bean = (ZcBaseBill) this.listCursor.getCurrentObject();    if (bean == null) {      return;    }    ZcUtil.showTraceDialog(bean, compoId);  }  /*   * 送审   */  private void doSend() {    boolean success = true;    EmFundPayBill afterSaveBill = null;    String errorInfo = "";    if (checkBeforeSave()) {      return;    }    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager    .getCurrentKeyboardFocusManager().getActiveWindow(), ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    try {      requestMeta.setFuncId(this.sendButton.getFuncId());      EmFundPayBill bill = (EmFundPayBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      bill.setComment(commentDialog.getComment());      afterSaveBill = this.listPanel.getZcEmFundPayServiceDelegate().newCommitFN(bill, requestMeta);    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    }  }  /*   * 收回   */  private void doCallback() {    boolean success = true;    EmFundPayBill afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.callbackButton.getFuncId());      EmFundPayBill bill = (EmFundPayBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getZcEmFundPayServiceDelegate().callbackFN(bill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 填写意见审核   */  private void doSuggestPass() {    if (checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager    .getCurrentKeyboardFocusManager().getActiveWindow(), ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    EmFundPayBill afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.suggestPassButton.getFuncId());      EmFundPayBill bill = (EmFundPayBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setComment(commentDialog.getComment());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getZcEmFundPayServiceDelegate().auditFN(bill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 审核   */  private void doAudit() {    if (checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    EmFundPayBill afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.auditPassButton.getFuncId());      EmFundPayBill bill = (EmFundPayBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getZcEmFundPayServiceDelegate().auditFN(bill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 销审   */  private void doUnaudit() {    boolean success = true;    EmFundPayBill afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unAuditButton.getFuncId());      EmFundPayBill bill = (EmFundPayBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getZcEmFundPayServiceDelegate().unAuditFN(bill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 退回   */  private void doUntread() {    if (checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager    .getCurrentKeyboardFocusManager().getActiveWindow(), ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    EmFundPayBill afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unTreadButton.getFuncId());      EmFundPayBill bill = (EmFundPayBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      bill.setComment(commentDialog.getComment());      afterSaveBill = listPanel.getZcEmFundPayServiceDelegate().untreadFN(bill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldEmFundPayBill);      }    }    listCursor.previous();    refreshData();  }  private void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldEmFundPayBill);      }    }    listCursor.next();    refreshData();  }  public boolean doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return false;        }      }    }    wordPane.close();    this.parent.dispose();    return true;  }  /**   * 保存前校验   * @param cpApply   * @return   */  private boolean checkBeforeSave() {    EmFundPayBill bill = (EmFundPayBill) listCursor.getCurrentObject();    if (bill.getBillName() == null || "".equals(bill.getBillName())) {      JOptionPane.showMessageDialog(this, "请填写审批单名称！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    if (bill.getFundReportId() == null || "".equals(bill.getFundReportId())) {      JOptionPane.showMessageDialog(this, "请填写开支报告编号！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    if (bill.getFundUse() == null || "".equals(bill.getFundUse())) {      JOptionPane.showMessageDialog(this, "请填写经费使用说明！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    BigDecimal sum = new BigDecimal(0);    for (Object o : bill.getDetailList()) {      EmFundPayBillDetail detail = (EmFundPayBillDetail) o;      BigDecimal detailSum = (BigDecimal) ObjectUtils.defaultIfNull(detail.getDetailSum(), new BigDecimal(0));      sum = sum.add(detailSum);    }    if (sum.compareTo(bill.getFundSum()) != 0) {      JOptionPane.showMessageDialog(this, "所有开支明细使用金额之和不等于经费开支资金总和！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    return true;  }  public boolean doSave() {    if (!checkBeforeSave()) {      return false;    }    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return true;    }    boolean success = true;    String errorInfo = "";    try {      requestMeta.setFuncId(saveButton.getFuncId());      EmFundPayBill inData = (EmFundPayBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      EmFundPayBill emFundPayBill = this.listPanel.getZcEmFundPayServiceDelegate().saveEmFundPayBill(inData,      requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      refreshData();      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }    return true;  }  protected void doDelete() {    int num = JOptionPane.showConfirmDialog(this, "是否删除当前单据", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      EmFundPayBill emFundPayBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(deleteButton.getFuncId());        emFundPayBill = (EmFundPayBill) this.listCursor.getCurrentObject();        if (!"0".equals(emFundPayBill.getStatus()))          JOptionPane.showMessageDialog(this, "非编辑状态单据，不可以删除！", "提示", JOptionPane.ERROR_MESSAGE);        this.listPanel.getZcEmFundPayServiceDelegate().deleteEmFundPayBill(emFundPayBill, requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        this.listCursor.removeCurrentObject();        JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.refreshData();        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.sendButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    EmFundPayReport obj = (EmFundPayReport) (this.listCursor.getCurrentObject());    String billStatus = obj.getStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, obj    .getProcessInstId());  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldEmFundPayBill).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  //  public EmFundPayBillEditPanel(Class<EmFundPayBill> class1, BillElementMeta billElementMetaWithoutNd) {  //    super(EmFundPayBill.class, billElementMetaWithoutNd);  //  }  private class ZcEmFundReportFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEmFundReportFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        EmFundPayReport report = (EmFundPayReport) object;        EmFundPayBill bill = (EmFundPayBill) listCursor.getCurrentObject();        bill.setReportFileID(report.getFileId());        bill.setFundReportId(report.getFundReportId());        bill.setUseId(report.getUseId());        bill.setUseName(report.getUseName());        bill.setUseTime(report.getUseTime());        bill.setFundSum(report.getPaySum());        bill.setFundType(report.getFundType());        bill.setDeptId(report.getDeptId());        setEditingObject(bill);        listCursor.setCurrentObject(bill);        refreshData();      }    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        EmFundPayReport rowData = (EmFundPayReport) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getFundReportId();        data[i][col++] = rowData.getUseTime();        data[i][col++] = rowData.getPaySum();        data[i][col++] = rowData.getCreateTime();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }}
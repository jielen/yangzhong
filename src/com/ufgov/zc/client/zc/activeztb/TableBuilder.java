/**   * @(#) project: GK53_branch* @(#) file: TableBuilder.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.activeztb;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.BufferedWriter;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStreamWriter;import java.io.UnsupportedEncodingException;import java.text.DateFormat;import java.util.Calendar;import java.util.List;import java.util.Map;import javax.swing.JOptionPane;import javax.swing.JPanel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.zc.ztb.table.entity.table.XmlTable;import com.ufgov.zc.client.zc.ztb.table.panel.TBTablePanel;import com.ufgov.zc.client.zc.ztb.table.panel.ZBKbylbTablePanel;import com.ufgov.zc.client.zc.ztb.table.panel.ZBTableSettingPanel;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableModel;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.Guid;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.zc.model.ZcEbEcbjItem;import com.ufgov.zc.common.zc.model.ZcEbPtPack;import com.ufgov.zc.common.zc.publish.IZcEbSupplierServiceDelegate;/*** 根据传递过来的xml格式生成JTable对象,开标大厅二次报价使用* @date: 2010-4-28 下午01:45:18* @version: V1.0 * @since: 1.0* @author: Administrator* @modify: */public class TableBuilder {  public String filepath = null;  private TBTablePanel tbTablePanel = null;  private ZBTableSettingPanel zbTableSettingPanel = null;  private ZBKbylbTablePanel kbylbTablePanel;  public String openBiTime;  public String packCode;  public String projCode;  private ElementConditionDto elementConditionDto = new ElementConditionDto();  //招标文件制作的表格设置的文件扩展名，如《开标一览表.config.setting》是表格设置的文件，《开标一览表.config》是预览的表格，也是供应商填写的表格  public static final String SETTING_NAME = ".setting";  public TBTablePanel getTbTablePanel() {    return tbTablePanel;  }  public void setTbTablePanel(TBTablePanel tbTablePanel) {    this.tbTablePanel = tbTablePanel;  }  public String getFilepath() {    return filepath;  }  /**   * 招标文件制作的投标一览表格panel  * @return JPanel 返回类型  * @since 1.0   */  public JPanel buildZBTbylbTablePanel(String filePath) {    setFilepath(filePath);    java.io.File f = new java.io.File(filepath + SETTING_NAME);    if (f.exists()) {      kbylbTablePanel = new ZBKbylbTablePanel(filepath + SETTING_NAME);    } else {      kbylbTablePanel = new ZBKbylbTablePanel();    }    return kbylbTablePanel;  }  /**   * 招标文件制作的表格panel  * @return JPanel 返回类型  * @since 1.0   */  public JPanel buildZBSettingPanel(XmlTable xmlTable) {    if (xmlTable == null) {      zbTableSettingPanel = new ZBTableSettingPanel();    } else {      zbTableSettingPanel = new ZBTableSettingPanel(xmlTable);    }    return zbTableSettingPanel;  }  /**   * 招标文件制作的表格panel  * @return JPanel 返回类型  * @since 1.0   */  public JPanel buildZBSettingPanel(String filePath) {    setFilepath(filePath);    java.io.File f = new java.io.File(filepath + SETTING_NAME);    if (f.exists()) {      zbTableSettingPanel = new ZBTableSettingPanel(filepath + SETTING_NAME);    } else {      zbTableSettingPanel = new ZBTableSettingPanel();    }    return zbTableSettingPanel;  }  /**   * 投标文件制作显示的表格panel  * @return TBTablePanel 返回类型  * @since 1.0   */  public TBTablePanel buildTBPanel(List<String> param, String filePath) {    setFilepath(filePath);    tbTablePanel = new TBTablePanel(param, this.filepath, null);    return tbTablePanel;  }  public void setFilepath(String filePath) {    if (filePath != null && (filePath.indexOf(GV.SUFFIX_TABLE) == -1)) {      this.filepath = filePath + GV.SUFFIX_TABLE;    } else {      this.filepath = filePath;    }  }  /**   * 投标文件制作显示的表格panel  * @return TBTablePanel 返回类型  * @since 1.0   */  public TBTablePanel buildTBPanel(List<String> param, String filePath, boolean tableIsReadOnly) {    this.filepath = filePath;    tbTablePanel = new TBTablePanel(param, filepath, tableIsReadOnly);    return tbTablePanel;  }  /**   *  开标大厅标段一览用   * @return TBTablePanel 返回类型   * @since 1.0   */  public TBTablePanel buildDtPackPanel(List<String> param, String filePath, boolean tableIsReadOnly, int count) {    this.filepath = filePath;    tbTablePanel = new TBTablePanel(param, filepath, tableIsReadOnly, count);    return tbTablePanel;  }  /**   *  开标大厅标段一览用,二次报价   * @return TBTablePanel 返回类型   * @since 1.0   */  public TBTablePanel buildDtPackSummaryPanel(ZcEbPtPack zcEbPtPack, List<String> param, String filePath,  boolean tableIsReadOnly, String flag, int count) {    this.filepath = filePath;    openBiTime = zcEbPtPack.getEvalEndTime();    packCode = zcEbPtPack.getPackCode();    projCode = zcEbPtPack.getProjCode();    tbTablePanel = new TBTablePanel(param, filepath, tableIsReadOnly, count, flag);    tbTablePanel.buttonSave.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        boolean isSave = save();        if (isSave) {          updateFile(filepath);          JOptionPane.showMessageDialog(null, "保存成功", "提示", JOptionPane.INFORMATION_MESSAGE);        }        System.out.println("保存：" + isSave);      }    });    return tbTablePanel;  }  //二次报价文件保存在as_file表  public void updateFile(String filePath) {    String fileId = "";    String fileName = "";    byte[] content = null;    String[] updatefileId = null;    AsFile asFile = new AsFile();    IZcEbSupplierServiceDelegate zcEbSupplierServiceDelegate = (IZcEbSupplierServiceDelegate) ServiceFactory    .create(IZcEbSupplierServiceDelegate.class, "zcEbSupplierServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    String replacePath = filePath.replace(File.separator, ";");    File file = new File(filePath);    try {      FileInputStream fis = new FileInputStream(file);      content = new byte[fis.available()];      fis.read(content);      updatefileId = (replacePath.split(";"));      fileId = Guid.genID();      fileName = Guid.genID();      asFile.setFileId(fileId);      asFile.setFileName(fileName);      asFile.setFileContent(content);    } catch (Exception ex) {      ex.printStackTrace();    }    elementConditionDto.setPackCode(packCode);    elementConditionDto.setUseType(requestMeta.getSvUserID());    elementConditionDto.setProjCode(projCode);    ZcEbEcbjItem zcEcbjItem = zcEbSupplierServiceDelegate.getZcEbEcbjItem(elementConditionDto, requestMeta);    zcEcbjItem.setFileId(fileId);    zcEcbjItem.setBjSum(null);    zcEcbjItem.setBjNo(String.valueOf((Integer.parseInt(zcEcbjItem.getBjNo().toString())) + 1));    DateFormat df = DateFormat.getDateInstance();    try {      Calendar cal = Calendar.getInstance();      zcEcbjItem.setOpenBidTime(df.parse(openBiTime));      zcEcbjItem.setBjTime(cal.getTime());    } catch (Exception e) {      e.printStackTrace();    }    if ("1".equals(zcEcbjItem.getStatus())) {      zcEbSupplierServiceDelegate.insertZcEbEcbjItemFN(zcEcbjItem, requestMeta);      asFile.setFileId(fileId);      asFile.setFileName(fileId);      asFile.setFileContent(content);      zcEbSupplierServiceDelegate.insertAsFileDirectoryFN(asFile, requestMeta);    } else {      asFile.setFileId(updatefileId[updatefileId.length - 1]);      asFile.setFileName(updatefileId[updatefileId.length - 1]);      asFile.setFileContent(content);      zcEbSupplierServiceDelegate.updateAsFileDirectoryFN(asFile, requestMeta);    }    //IAsFileService asFileService = (IAsFileService) SpringContext.getBean("asFileService");    // AsFile asFile = zcEbSupplierServiceDelegate.getLargeAsFileById(fileId[fileId.length - 1], requestMeta);  }  /**   * 投标文件制作显示的表格panel  * @return TBTablePanel 返回类型  * @since 1.0   */  public TBTablePanel buildTBPanel(List<String> param, XmlTable xmlTable) {    tbTablePanel = new TBTablePanel(param, xmlTable);    return tbTablePanel;  }  /**   * 保存功能  * @return boolean 返回类型  * @since 1.0   */  public boolean save() {    if (tbTablePanel != null) {      return saveTBPanel();    } else if (zbTableSettingPanel != null) {      return saveZBSettingPanel();    } else {      return saveZBKbylbSettingPanel();    }  }  /**   * 保存供应商投标表格  * @return boolean 返回类型  * @since 1.0   */  public boolean saveTBPanel() {    String xmlTableString = tbTablePanel.getXmlTableString();    if (tbTablePanel.checkBeforeSave()) {      return _save(filepath, xmlTableString);    } else {      return false;    }  }  /**   * 保存招标文件制作的表格，有2个，一个是设置的表格，一个是预览的表格   * @return boolean 返回类型  * @since 1.0   */  public boolean saveZBSettingPanel() {    // 表格设计内容    String xmlTableString = zbTableSettingPanel.getXmlTableString();    _save(filepath + SETTING_NAME, xmlTableString);    // 预览的表格，也是供应商填写的表格    xmlTableString = zbTableSettingPanel.getPreviewXmlTableString();    return _save(filepath, xmlTableString);  }  public boolean saveZBKbylbSettingPanel() {    if (!checkKbylbTablePanel()) {      return false;    }    String xmlTableString = kbylbTablePanel.getXmlTableString();    _save(filepath + SETTING_NAME, xmlTableString);    xmlTableString = kbylbTablePanel.getPreviewXmlTableString();    return _save(filepath, xmlTableString);  }  private boolean checkKbylbTablePanel() {    List<Map<String, String>> dataset = ((JTableModel) kbylbTablePanel.getSettingTable().getModel())    .getDataset();    if (dataset == null || dataset.size() == 0) {      return true;    }    int sumRowCount = 0;    int notNullRow = 0;    for (Map<String, String> m : dataset) {      if ("".equalsIgnoreCase(PubFunction.trim(m.get("COLUMN_ID")))) {        continue;      }      ++notNullRow;      if ("TOTAL".equalsIgnoreCase(m.get("COLUMN_TYPE"))) {        ++sumRowCount;        if (!"NUM".equalsIgnoreCase(m.get("DATA_TYPE"))) {          GV.showMessageDialog(kbylbTablePanel, "保存失败！\n列类型为【总价列】所在行的数据类型必须为【数字】。");          return false;        }      } else if ("DISCOUNT".equalsIgnoreCase(m.get("COLUMN_TYPE"))) {        ++sumRowCount;        if (!"NUM".equalsIgnoreCase(m.get("DATA_TYPE"))) {          GV.showMessageDialog(kbylbTablePanel, "保存失败！\n列类型为【折扣列】所在行的数据类型必须为【数字】。");          return false;        }      } else if ("DISCOUNT_RATE".equalsIgnoreCase(m.get("COLUMN_TYPE"))) {        ++sumRowCount;        if (!"NUM".equalsIgnoreCase(m.get("DATA_TYPE"))) {          GV.showMessageDialog(kbylbTablePanel, "保存失败！\n列类型为【折扣率率】所在行的数据类型必须为【数字】。");          return false;        }      }      if ("Y".equalsIgnoreCase(m.get("IS_SUM_COL"))) {        ++sumRowCount;        if (!"NUM".equalsIgnoreCase(m.get("DATA_TYPE"))) {          GV.showMessageDialog(kbylbTablePanel, "保存失败！\n总价列为\"是\"所在行的数据类型必须为\"数字\"。");          return false;        }      }    }    if (notNullRow > 0) {      if (sumRowCount == 0) {        GV.showMessageDialog(kbylbTablePanel, "保存失败！\n表格中必须包含一行列类型为【总价列/折扣列/折扣率列】的行，且三者不能同时存在。");        return false;      } else if (sumRowCount > 1) {        GV.showMessageDialog(kbylbTablePanel, "保存失败！\n表格中【总价列/折扣列/折扣率列】三者只能选其一。");        return false;      }    }    return true;  }  private boolean _save(String filepath, String xmlTableString) {    String dir = filepath.substring(0, filepath.lastIndexOf(File.separator));    File file = new File(dir);    if (!file.exists()) {      file.mkdirs();    }    xmlTableString = "<?xml version=\"1.0\" encoding=\"" + GV.XML_CHAR_CODE + "\"?>" + xmlTableString;    try {      FileOutputStream writerStream = new FileOutputStream(filepath);      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(writerStream, GV.XML_CHAR_CODE));      writer.write(xmlTableString);      writer.close();    } catch (FileNotFoundException e) {      e.printStackTrace();      throw new RuntimeException(e);    } catch (UnsupportedEncodingException e) {      e.printStackTrace();      throw new RuntimeException(e);    } catch (IOException e) {      e.printStackTrace();      throw new RuntimeException(e);    }    return true;  }  public ZBTableSettingPanel getZbTableSettingPanel() {    return zbTableSettingPanel;  }}
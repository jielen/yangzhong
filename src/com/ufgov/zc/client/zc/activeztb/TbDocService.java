/** * TbDocService.java * com.ufgov.gk.client.zc.ztb.service * Administrator * 2010-5-25 */package com.ufgov.zc.client.zc.activeztb;import java.awt.BorderLayout;import java.awt.Component;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.zip.ZipException;import javax.swing.JPanel;import org.apache.tools.zip.ZipFile;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.ztb.fileResumeBroken.download.ResumeBrokenDownloads;import com.ufgov.zc.client.zc.ztb.model.BusinessProject;import com.ufgov.zc.client.zc.ztb.model.ProjectBag;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.table.entity.table.XmlTable;import com.ufgov.zc.client.zc.ztb.table.panel.TBTablePanel;import com.ufgov.zc.client.zc.ztb.table.service.TableService;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.client.zc.ztb.util.ZipFilePubFunc;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.zc.model.ZcEbPtPack;/** * @author Administrator * */public class TbDocService {  public static String TB_DOC_TYPE_TB = "TB";//投标文件  public static String TB_DOC_TYPE_ECBJ = "ECBJ";//二次报价单文件  private BusinessProject businessProject;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class,  "baseDataServiceDelegate");  private String fileId;  private String projCode;  private String fileDownloadPath;  private String zippedFileDir;  private SmartTreeNode projNode;  public String kbylbFilePath;  //开标大厅用  private TBTablePanel dtPanel;  /**   * 路径前缀，主要为评标时多供应商文件存放路径服务。评标时供应商投标文件需要在项目前加上供应商代码前缀。如：C:\\ufgov\\eb\\download\\ztb\\provider1\\test。   */  private String pathPrex;  private List<File> tempFileList = new ArrayList<File>();  public String getFileDownloadPath() {    return fileDownloadPath;  }  public void setFileDownloadPath(String fileDownloadPath) {    this.fileDownloadPath = fileDownloadPath;  }  public String getZippedFileDir() {    return zippedFileDir;  }  public void setZippedFileDir(String zippedFileDir) {    this.zippedFileDir = zippedFileDir;  }  public String getPathPrex() {    return pathPrex;  }  public void setPathPrex(String pathPrex) {    this.pathPrex = pathPrex;  }  public TBTablePanel getDtPanel() {    return dtPanel;  }  public void setDtPanel(TBTablePanel dtPanel) {    this.dtPanel = dtPanel;  }  /**   * 文件id   * @param fileId 投标文件的id   */  public TbDocService(String fileId) throws BusinessException {    this(fileId, "");  }  /**   *   * <p>Description: </p>  * @param fileId  文件id。  * @param pathPrex 路径前缀，主要为评标时区分不同供应商投标文件服务。   */  public TbDocService(String fileId, String pathPrex) {    this(fileId, pathPrex, TB_DOC_TYPE_TB);  }  public TbDocService(String fileId, String pathPrex, String tbDocType) {    this.fileId = fileId;    setPathPrex(pathPrex);    initFileDownloadPath();    //断点下载    File zfile = resumeBrokendownloadFile();    if (tbDocType.equals(TB_DOC_TYPE_TB)) {      initProject(zfile);      buildZipFilePath();      ZipFilePubFunc.unzipFileToDestDir(zfile, zippedFileDir);      tempFileList.add(new File(zippedFileDir));      //读取的文件是二次报价文件    } else if (tbDocType.equals(TB_DOC_TYPE_ECBJ)) {    }  }  //获取二次报价表的Jpanel;  public JPanel getEcbjSummaryTable(File file, List<String> param) {    TBTablePanel tbPanel = (new TableBuilder()).buildTBPanel(param, file.getAbsolutePath(), true);    JPanel jPanel = new JPanel(new BorderLayout());    jPanel.add(tbPanel, BorderLayout.CENTER);    return jPanel;  }  //开标大厅标段一览用  public JPanel getEcbjDtpackTable(File file, List<String> param, int count) {    TBTablePanel tbPanel = (new TableBuilder()).buildDtPackPanel(param, file.getAbsolutePath(), true, count);    JPanel jPanel = new JPanel(new BorderLayout());    jPanel.add(tbPanel, BorderLayout.CENTER);    return jPanel;  }  // 开标大厅二次报价用所有报价  public JPanel getEcbjDtpackSummaryTable(ZcEbPtPack zcEbPtPack, File file, List<String> param, int count) {    TBTablePanel tbPanel = (new TableBuilder()).buildDtPackSummaryPanel(zcEbPtPack, param, file.getAbsolutePath(), true, "ALL", count);    this.dtPanel = tbPanel;    JPanel jPanel = new JPanel(new BorderLayout());    jPanel.add(tbPanel, BorderLayout.CENTER);    return jPanel;  }  // 开标大厅二次报价用当前报价  public JPanel getEcbjDtpackCurrSummaryTable(ZcEbPtPack zcEbPtPack, File file, List<String> param, int count, boolean isOnlyRead) {    TBTablePanel tbPanel = (new TableBuilder()).buildDtPackSummaryPanel(zcEbPtPack, param, file.getAbsolutePath(), isOnlyRead, "CURR", count);    this.setDtPanel(tbPanel);    JPanel jPanel = new JPanel(new BorderLayout());    jPanel.add(tbPanel, BorderLayout.CENTER);    return jPanel;  }  //获取二次报价表的总金额;  public BigDecimal getEcbjSum(File file) {    TableService service = new TableService();    XmlTable xmlTable = service.createXmlTable(file.getAbsolutePath());    return service.getTotalBagJe(xmlTable);  }  /**   * 获得供应商承诺工期   * @param file   * @return   */  public String getWorkDate(File file) {    TableService service = new TableService();    XmlTable xmlTable = service.createXmlTable(file.getAbsolutePath());    return service.getWorkDate(xmlTable);  }  public TbDocService() {    initFileDownloadPath();  }  public TbDocService(Component Parentframe) {    initFileDownloadPath();  }  public File downloadFile(String projCode, String fileID, String downLoadType) {    this.fileId = fileID;    this.projCode = projCode;    File zfile;    if ("DB".equals(downLoadType)) {      zfile = downloadFile(baseDataServiceDelegate.getAsFileById(fileId, requestMeta));    } else {      zfile = resumeBrokendownloadFile();    }    upZipFile(zfile);    return zfile;  }  /**   *   * @Description: TODO 解压招投标文件  * @return void 返回类型  * @since 1.0   */  public void upZipFile(File file) {    System.out.println("要解压缩文件的目录：" + file);    initProject(file);    buildZipFilePath();    ZipFilePubFunc.unzipFileToDestDir(file, zippedFileDir);    tempFileList.add(new File(zippedFileDir));  }  public File downLoadEcBjFile(String fileId) {    AsFile file = baseDataServiceDelegate.getAsFileById(fileId, requestMeta);    if (file != null) {      return downloadFile(file);    }    return null;  }  public void addPathPrex(String pathPrex) {    if (null == pathPrex || "".equalsIgnoreCase(pathPrex)) {      return;    }    fileDownloadPath = fileDownloadPath + File.separator + pathPrex;  }  private void initFileDownloadPath() {    fileDownloadPath = ZcUtil.getZcFileTempDir() + File.separator + ZcUtil.ZTB_FILE_DIR;    addPathPrex(pathPrex);  }  /**   *   * @Description: 取得文件下载临时文件目录。  * @return String 返回类型  * @since 1.0   */  public static final String getDownloadFilePath() {    return ZcUtil.getZcFileTempDir() + File.separator + ZcUtil.ZTB_FILE_DIR;  }  private void buildZipFilePath() {    zippedFileDir = fileDownloadPath;    if (null != pathPrex && !"".equals(pathPrex)) {      zippedFileDir += File.separator;    }    zippedFileDir += businessProject.getNo() + File.separator;  }  /**   *   * @Description: 断点下载：当前只是投标文件进行断点下载  * @return File 返回类型  * @since 1.0   */  private File resumeBrokendownloadFile() {    System.out.println(fileId);    /**     * 招投标文件下载的方式不同，招标文件存放在数据库中，直接从数据库中取数据，不涉及断点下载。     */    System.out.println("service端地址：" + WorkEnv.getInstance().getWebRoot());    //调用断点下载的service路径：    ResumeBrokenDownloads resumeBrokenDownloads = new ResumeBrokenDownloads(fileId, projCode, fileDownloadPath, WorkEnv.getInstance().getWebRoot());    Map returnMap = resumeBrokenDownloads.downloadFile();    if (null != returnMap.get("ERRORMESSAGE") && !"".equals(returnMap.get("ERRORMESSAGE"))) {      throw new RuntimeException(returnMap.get("ERRORMESSAGE").toString());    }    System.out.println(fileDownloadPath);    File tempFile = new File(fileDownloadPath + returnMap.get("FILENAME") + ".ztb");    System.out.println("TbDocService:要读取文件的路径：" + tempFile);    tempFileList.add(tempFile);    return tempFile;  }  /**   *   * @Description: TODO(解压招投标文件)  * @return void 返回类型  * @since 1.0   */  private void initProject(File file) {    try {      businessProject = new BusinessProject();      ZipFilePubFunc zipFunct = new ZipFilePubFunc();      projNode = zipFunct.getProject(new ZipFile(file, GV.FILE_CHAR_CODE));      getPackList(projNode);      businessProject.setId(projNode.getNodeGUID());      businessProject.setName(projNode.getNodeName());      businessProject.setDir(projNode.getNodeDirPath());      businessProject.setNo(projNode.getNodeCode());    } catch (ZipException e) {      e.printStackTrace();      throw new BusinessException("解压文件失败,请检查文件格式", e);    } catch (IOException e) {      e.printStackTrace();      throw new BusinessException("解压文件失败,请检查文件格式", e);    }  }  private void getPackList(SmartTreeNode projNode) {    SmartTreeNode packNode;    businessProject.getPackList().clear();    for (int i = 0; i < projNode.getChildCount(); i++) {      packNode = (SmartTreeNode) projNode.getChildAt(i);      ProjectBag bag = new ProjectBag();      bag.setNo(packNode.getNodeCode());      bag.setName(packNode.getNodeName());      businessProject.getPackList().add(bag);    }  }  public File downloadFile(AsFile asFile) {    File path = new File(fileDownloadPath);    if (!path.exists()) {      path.mkdirs();    }    File tempFile = new File(fileDownloadPath + File.separator + asFile.getFileId());    FileOutputStream os = null;    byte[] b = asFile.getFileContent();    try {      os = new FileOutputStream(tempFile);      os.write(b, 0, b.length);      os.close();    } catch (Exception e) {      e.printStackTrace();      throw new BusinessException("保存下载文件时出错！", e);    }    return tempFile;  }  /**   * 获得标段的投标一览表的存放目录   * @param packCode 分包编号   * */  private SmartTreeNode getChildNode(SmartTreeNode parentNode, String packCode, String nodeType) {    SmartTreeNode childNode;    for (int i = 0; i < parentNode.getChildCount(); i++) {      childNode = (SmartTreeNode) parentNode.getChildAt(i);      System.out.println(childNode.getNodeCode());      if (childNode.getNodeCode().equals(packCode)) {        return getChildNodeByType(childNode, nodeType);      }    }    return null;  }  private SmartTreeNode getChildNodeByType(SmartTreeNode parentNode, String nodeType) {    return PubFunction.getNeedingNodeInChildren(parentNode, nodeType);  }  private String getKbylbDir(String packCode) {    SmartTreeNode childNode = getChildNode(projNode, packCode, GV.NODE_TYPE_TBYLB);    if (childNode != null) {      return childNode.getNodesFullPath() + childNode.getFileExtension();    }    return null;  }  /**   * 获得标段的投标一览表panel   * @param packCode 分包编号   * @return   * Administrator   * 2010-5-25   */  public JPanel getTbSummaryTable(String projName, String packName, String packCode) {    kbylbFilePath = getKbylbDir(packCode);    if (kbylbFilePath == null) {      throw new BusinessException("未能获取分包明细文件的路径配置信息");    }    List<String> list = new ArrayList<String>();    list.add(projName);    list.add(packName);    list.add(GV.NODE_NAME_TBYLB);    list.add("Y");    TBTablePanel tbPanel = (new TableBuilder()).buildTBPanel(list, fileDownloadPath + kbylbFilePath, true);    JPanel panel = new JPanel(new BorderLayout());    panel.add(tbPanel, BorderLayout.CENTER);    return panel;  }  /**   * 获得标段的投标总价   * @param packCode 分包编号   * @return   * Administrator   * 2010-5-25   */  public BigDecimal getTbSum(String packCode) {    String kbylbFilePath = getKbylbDir(packCode);    if (kbylbFilePath == null) {      throw new BusinessException("未能获取分包明细文件的路径配置信息");    }    TableService service = new TableService();    XmlTable xmlTable = service.createXmlTable(fileDownloadPath + File.separator + kbylbFilePath);    return service.getTotalBagJe(xmlTable);  }  /**   * 获得工期   * @param packCode   * @return   */  public String getTbWorkDate(String packCode) {    String kbylbFilePath = getKbylbDir(packCode);    if (kbylbFilePath == null) {      throw new BusinessException("未能获取分包明细文件的路径配置信息");    }    TableService service = new TableService();    XmlTable xmlTable = service.createXmlTable(fileDownloadPath + File.separator + kbylbFilePath);    return service.getWorkDate(xmlTable);  }  /**   * 获得投标项目对象   * @return   * Administrator   * 2010-5-25   */  public BusinessProject getProject() {    return businessProject;  }  /**   * 获得标段对象   * @param packCode 分包编号   * @return   * Administrator   * 2010-5-25   */  public ProjectBag getPack(String packCode) {    if (businessProject != null) {      for (ProjectBag pb : businessProject.getPackList()) {        if (pb.getNo().equals(packCode)) {          return pb;        }      }    }    return null;  }  /**   * 获得招标文件的显示panel   * @param packCode   * @return   * Administrator   * 2010-5-25   */  public JPanel getZbDocShowPanel(String packCode) {    return null;  }  /**   * 获得标段投标文件的显示panel   * @param packCode 分包编号   * @return   * Administrator   * 2010-5-25   */  public JPanel getTbDocShowPanel(String packCode) {    return null;  }  /**   *    * 删除本地的解压文件夹和文件   * Administrator   * 2010-5-25   */  public void clear() {    for (File f : tempFileList) {      System.out.println(f.getAbsolutePath());      PubFunction.deleteFile(f.getAbsolutePath());    }    //PubFunction.deleteFile("C:\\ufgov\\ztb\\2.ztb");}  /**   *   * @Description: 递归删除已个目录下的所有文件。  * @return void 返回类型  * @since 1.0   */  public static void deleteFile(File file) {    if (null != file) {      if (file.isDirectory()) {        File files[] = file.listFiles();        for (File f : files) {          deleteFile(f);        }        file.delete();      } else {        file.delete();      }    }  }  /**   *   * @Description: 下载招标文件  * @return void   * @since 1.0   */  public File downloadZbFile(String fileId, String fileName) {    AsFile asFile = baseDataServiceDelegate.getAsFileById(fileId, requestMeta);    File path = new File(fileDownloadPath);    if (!path.exists()) {      path.mkdirs();    }    File tempFile = new File(fileDownloadPath + File.separator + fileName);    FileOutputStream os = null;    byte[] b = asFile.getFileContent();    try {      os = new FileOutputStream(tempFile);      os.write(b, 0, b.length);      os.close();    } catch (Exception e) {      e.printStackTrace();      throw new BusinessException("保存下载文件时出错！", e);    }    try {      os = new FileOutputStream(tempFile);      os.write(asFile.getFileContent());      os.close();    } catch (Exception e) {      e.printStackTrace();      throw new BusinessException("保存下载文件时出错！", e);    }    upZipFile(tempFile);    return tempFile;  }  public static void main(String[] args) {    //TbDocService docService = new TbDocService("2");    TbDocService docService = new TbDocService("2", "");    System.out.println(docService.getTbSum("4"));    System.out.println("-----------------------");    //    docService.clear();    TbDocService.deleteFile(new File("C:\\ufgov\\eb\\download\\ztb\\1"));  }  /**   *   * @Description: 从投标文件中抽取投标一览表  * @return void 返回类型   * @throws Exception   * @since 1.0   */  //downloadPath：投标一览表下载路径  public File downloadTbylbFromZbFile(String downloadPath, String fileId, String packNode) throws Exception {    byte[] b = baseDataServiceDelegate.getTbylbFromFileMenuById(fileId, packNode, requestMeta);    if (b == null || b.length < 10) {      throw new BusinessException("没有在投标书中找到【开表一览表】文件！");    }    File path = new File(downloadPath);    if (!path.exists()) {      path.mkdirs();    }    File tempFile = new File(downloadPath + File.separator + fileId);    FileOutputStream os = null;    try {      os = new FileOutputStream(tempFile);      os.write(b, 0, b.length);      os.close();    } catch (Exception e) {      e.printStackTrace();      throw new BusinessException("保存下载文件时出错！", e);    }    return tempFile;  }}
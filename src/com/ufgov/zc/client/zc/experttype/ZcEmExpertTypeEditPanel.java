package com.ufgov.zc.client.zc.experttype;import java.awt.Color;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.border.TitledBorder;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.ZcEmExpertTypeHandler;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityDialog;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.EmExpertType;import com.ufgov.zc.common.zc.publish.IZcEmExpertTypeServiceDelegate;public class ZcEmExpertTypeEditPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = -8330517047010771537L;  private static final Logger logger = Logger.getLogger(ZcEmExpertTypeEditPanel.class);  protected IZcEmExpertTypeServiceDelegate zcEmExpertTypeServiceDelegate;  protected RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EM_EXPERT_TYPE";  private FuncButton addButton = new AddButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  @SuppressWarnings("unchecked")  private final ListCursor listCursor;  private EmExpertType currentBill;  private EmExpertType oldBill;  private ZcEmExpertTypeListPanel listPanel;  private ZcEmExpertTypeEditPanel self = this;  private GkBaseDialog parent;  private TextFieldEditor emTypeCode;  private ForeignEntityFieldEditor emParentTypeCode;  private TextFieldEditor emParentTypeName;  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId);  @SuppressWarnings("unchecked")  public ZcEmExpertTypeEditPanel(ZcEmExpertTypeDialog dialog, ListCursor listCursor, String tabStatus,  ZcEmExpertTypeListPanel listPanel) {    super(new EmExpertType(), listPanel.compoId);    this.compoId = listPanel.compoId;    this.listCursor = listCursor;    this.listPanel = listPanel;    this.zcEmExpertTypeServiceDelegate = listPanel.getZcEmExpertTypeServiceDelegate();    this.parent = dialog;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),    this.listPanel.getTitle(), TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15),    Color.BLUE));    this.colCount = 2;    init();    requestMeta.setCompoId(compoId);    refreshData();  }  @SuppressWarnings("unchecked")  public ZcEmExpertTypeEditPanel(ZcEmExpertTypeDialog dialog, ListCursor listCursor, String tabStatus,  ZcEmExpertTypeListPanel listPanel, ForeignEntityDialog forenEntityDialog) {    this(dialog, listCursor, tabStatus, listPanel);  }  @SuppressWarnings("unchecked")  private void refreshData() {    this.currentBill = (EmExpertType) this.listCursor.getCurrentObject();    if (currentBill == null) {      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      currentBill = new EmExpertType();      currentBill.setEmTypeCode("自动编号");      List list = new ArrayList();      list.add(currentBill);      this.listCursor.setDataList(list, -1);      listCursor.setCurrentObject(currentBill);    } else {      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    }    setEditingObject(currentBill);    setButtonStatus();    updateFieldEditorsEditable();    setOldObject();  }  private void setButtonStatus() {    if (ZcSettingConstants.PAGE_STATUS_BROWSE.equals(pageStatus)) {      addButton.setEnabled(true);      editButton.setEnabled(true);      saveButton.setEnabled(false);      deleteButton.setEnabled(true);      exitButton.setEnabled(true);      helpButton.setEnabled(true);      previousButton.setEnabled(true);      nextButton.setEnabled(true);    } else if (ZcSettingConstants.PAGE_STATUS_EDIT.equals(pageStatus)) {      addButton.setEnabled(true);      editButton.setEnabled(false);      saveButton.setEnabled(true);      deleteButton.setEnabled(false);      exitButton.setEnabled(true);      helpButton.setEnabled(true);      previousButton.setEnabled(false);      nextButton.setEnabled(false);    } else if (ZcSettingConstants.PAGE_STATUS_NEW.equals(pageStatus)) {      addButton.setEnabled(false);      editButton.setEnabled(false);      saveButton.setEnabled(true);      deleteButton.setEnabled(false);      exitButton.setEnabled(true);      helpButton.setEnabled(true);      previousButton.setEnabled(false);      nextButton.setEnabled(false);    }  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)    || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null        && (fd.getFieldName().equals("inputorDate") || fd.getFieldName().equals("billStatus"))) {          fd.setEnabled(false);        } else {          fd.setEnabled(true);        }      }    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }    }    emTypeCode.setEnabled(false);  }  private void setOldObject() {    this.oldBill = (EmExpertType) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    ZcEmExpertTypeHandler handler = new ZcEmExpertTypeHandler() {      @SuppressWarnings("unchecked")      @Override      public void excute(List selectedDatas) {        for (Object obj : selectedDatas) {          EmExpertType m = (EmExpertType) obj;          currentBill = (EmExpertType) listCursor.getCurrentObject();          currentBill.setEmParentTypeCode(m.getEmTypeCode());          currentBill.setEmParentTypeName(m.getEmTypeName());          setEditingObject(currentBill);        }      }    };    emParentTypeCode = new ForeignEntityFieldEditor(handler.getSqlId(), 20, handler, handler.getColumNames(),    "上级类别编号", "emParentTypeCode");    editorList.add(emParentTypeCode);    emParentTypeName = new TextFieldEditor("上级类别名称", "emParentTypeName");    editorList.add(emParentTypeName);    emTypeCode = new TextFieldEditor("类别编号", "emTypeCode");    editorList.add(emTypeCode);    TextFieldEditor emTypeName = new TextFieldEditor("类别名称", "emTypeName");    editorList.add(emTypeName);    return editorList;  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    deleteButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doSave();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });  }  @SuppressWarnings("unchecked")  private void doAdd() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;    currentBill = null;    listCursor.setCurrentObject(null);    refreshData();    setOldObject();    updateFieldEditorsEditable();    setButtonStatus();  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    emParentTypeCode.setEnabled(false);    emParentTypeName.setEnabled(false);    setButtonStatus();  }  private void doDelete() {    EmExpertType t = (EmExpertType) this.listCursor.getCurrentObject();    int num = JOptionPane.showConfirmDialog(this, "若删除专家类别，与当前专家类别相关联的专家评标类别都将被删除。您确认删除当前数据？", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      String errorInfo = "";      try {        Map<String, String> m = new HashMap<String, String>();        m.put("EM_TYPE_CODE", t.getEmTypeCode());        zcEmExpertTypeServiceDelegate.deleteFN(m, this.requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(self, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;        this.listCursor.removeCurrentObject();        listPanel.refreshCurrentTabData();        refreshData();        updateFieldEditorsEditable();        setButtonStatus();      } else {        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  @SuppressWarnings("unchecked")  private void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(this.oldBill);      }    }    listCursor.previous();    refreshData();    setButtonStatus();  }  @SuppressWarnings("unchecked")  private void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(this.oldBill);      }    }    listCursor.next();    refreshData();    setButtonStatus();  }  public void doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    this.parent.dispose();  }  @SuppressWarnings("unchecked")  public boolean doSave() {    if (!checkBeforeSave()) {      return false;    }    boolean success = true;    String errorInfo = "";    try {      currentBill = zcEmExpertTypeServiceDelegate.saveFN(currentBill, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(currentBill);      this.listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      setButtonStatus();      setOldObject();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  @SuppressWarnings("unchecked")  private boolean checkBeforeSave() {    List notNullBillElementList = this.billElementMeta.getNotNullBillElement();    EmExpertType emExpertType = (EmExpertType) this.listCursor.getCurrentObject();    StringBuilder errorInfo = new StringBuilder();    String validateInfo = ZcUtil.validateBillElementNull(emExpertType, notNullBillElementList);    if (validateInfo.length() != 0) {      errorInfo.append("").append(validateInfo.toString());    }    if (!isNullString(currentBill.getEmTypeName())) {      boolean dupName = false;      for (Object o : this.listCursor.getDataList()) {        EmExpertType t = (EmExpertType) o;        if (t.getEmTypeCode().trim().equals(currentBill.getEmTypeCode().trim())) {          continue;        }        if (isNullString(currentBill.getEmParentTypeCode())) {          if (isNullString(t.getEmParentTypeCode())          && t.getEmTypeName().trim().equals(currentBill.getEmTypeName().trim())) {            dupName = true;            break;          }        } else {          if (!isNullString(t.getEmParentTypeCode())          && t.getEmParentTypeCode().trim().equals(currentBill.getEmParentTypeCode().trim())          && t.getEmTypeName().trim().equals(currentBill.getEmTypeName().trim())) {            dupName = true;            break;          }        }      }      if (dupName) {        errorInfo.append("类别名称重复。");      }    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  private boolean isNullString(String str) {    return str == null || "".equals(str.trim());  }  public void doHelp() {    setButtonStatus();  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldBill).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  public String getPageStatus() {    return pageStatus;  }  public void setPageStatus(String pageStatus) {    this.pageStatus = pageStatus;  }  @Override  public JComponent createSubBillPanel() {    return null;  }}
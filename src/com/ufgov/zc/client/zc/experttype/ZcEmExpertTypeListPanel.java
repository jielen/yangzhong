package com.ufgov.zc.client.zc.experttype;import java.awt.Color;import java.awt.Container;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JFrame;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.ZcEmExpertTypeToTableModelConverter;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.ui.AbstractDataDisplay;import com.ufgov.zc.client.component.ui.AbstractEditListBill;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SaveableSearchConditionArea;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.component.ui.conditionitem.SearchConditionUtil;import com.ufgov.zc.client.util.BalanceUtil;import com.ufgov.zc.client.util.ListUtil;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.publish.IZcEmExpertTypeServiceDelegate;public class ZcEmExpertTypeListPanel extends AbstractEditListBill implements ParentWindowAware {  private static final long serialVersionUID = -9080177197515854628L;  static {    LangTransMeta.init("ZC%");  }  private ZcEmExpertTypeListPanel self = this;  private Window parentWindow;  public String compoId = "ZC_EM_EXPERT_TYPE";  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private ElementConditionDto elementConditionDto = new ElementConditionDto();  private AbstractSearchConditionArea topSearchConditionArea;  private HelpButton helpButton = new HelpButton();  private AddButton fnewBtn = new AddButton();  private String listTabId = ZcSettingConstants.TAB_ID_ZC_EM_EXPERT_TYPE;  private String listConditionId = ZcSettingConstants.CONDITION_ID_ZC_EM_EXPERT_TYPE;  private IZcEmExpertTypeServiceDelegate zcEmExpertTypeServiceDelegate = (IZcEmExpertTypeServiceDelegate) ServiceFactory  .create(IZcEmExpertTypeServiceDelegate.class, "zcEmExpertTypeServiceDelegate");  public ZcEmExpertTypeListPanel() {    UIUtilities.asyncInvoke(new DefaultInvokeHandler<List<SearchCondition>>() {      @Override      public List<SearchCondition> execute() throws Exception {        List<SearchCondition> needDisplaySearchConditonList = SearchConditionUtil        .getNeedDisplaySearchConditonList(WorkEnv.getInstance().getCurrUserId(), listTabId);        return needDisplaySearchConditonList;      }      @Override      public void success(List<SearchCondition> needDisplaySearchConditonList) {        List<TableDisplay> showingDisplays = SearchConditionUtil        .getNeedDisplayTableDisplay(needDisplaySearchConditonList);        init(createDataDisplay(showingDisplays), null);//调用父类方法        revalidate();        repaint();      }    });    requestMeta.setCompoId(compoId);  }  protected AbstractDataDisplay createDataDisplay(List<TableDisplay> showingDisplays) {    return new DataDisplay(SearchConditionUtil.getAllTableDisplay(listTabId), showingDisplays,    createTopConditionArea(), true);//true:显示收索条件区 false：不显示收索条件区  }  @SuppressWarnings("unchecked")  protected AbstractSearchConditionArea createTopConditionArea() {    Map defaultValueMap = new HashMap();    topSearchConditionArea = new SaveableSearchConditionArea(listConditionId, null, true, defaultValueMap,    null);    return topSearchConditionArea;  }  @Override  protected void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(fnewBtn);    toolBar.add(helpButton);    fnewBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });  }  @SuppressWarnings("unchecked")  protected void doAdd() {    openEditDialog(new ArrayList(1), -1, topDataDisplay.getActiveTableDisplay().getStatus());  }  protected TableModel doExecute() {    ZcEmExpertTypeToTableModelConverter mc = new ZcEmExpertTypeToTableModelConverter();    return mc.convertToTableModel(zcEmExpertTypeServiceDelegate.getList(elementConditionDto, requestMeta));  }  protected void doSuccess(TableModel model) {    topDataDisplay.getActiveTableDisplay().setTableModel(model);    setButtonStatus();  }  protected void doLeftClick(MouseEvent e) {  }  @SuppressWarnings("unchecked")  protected void doLeftDbClick(MouseEvent e) {    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    MyTableModel model = (MyTableModel) table.getModel();    int row = table.getSelectedRow();    List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(model.getList(), table));    openEditDialog(viewList, row, topDataDisplay.getActiveTableDisplay().getStatus());  }  @SuppressWarnings("unchecked")  protected void openEditDialog(List viewList, int row, String status) {    new ZcEmExpertTypeDialog(self, viewList, row, status);  }  protected void setButtonStatus() {  }  public void refreshCurrentTabData() {    topSearchConditionArea.doSearch();  }  public static void main(String[] args) throws Exception {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        ZcEmExpertTypeListPanel bill = new ZcEmExpertTypeListPanel();        JFrame frame = new JFrame("frame");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }  @SuppressWarnings("unchecked")  public void refreshCurrentTabData(List dataList) {    ZcEmExpertTypeToTableModelConverter mc = new ZcEmExpertTypeToTableModelConverter();    topDataDisplay.getActiveTableDisplay().getTable().setModel(mc.convertToTableModel(dataList));  }  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(compoId);  public BillElementMeta getBillElementMeta() {    return billElementMeta;  }  protected String getTitle() {    return LangTransMeta.translate(compoId);  }  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  public IZcEmExpertTypeServiceDelegate getZcEmExpertTypeServiceDelegate() {    return zcEmExpertTypeServiceDelegate;  }  public void setZcEmExpertTypeServiceDelegate(IZcEmExpertTypeServiceDelegate zcEmExpertTypeServiceDelegate) {    this.zcEmExpertTypeServiceDelegate = zcEmExpertTypeServiceDelegate;  }  protected final class DataDisplay extends MultiDataDisplay {    private static final long serialVersionUID = 8838123294320983836L;    private DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays,    AbstractSearchConditionArea conditionArea, boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, listTabId);      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), getTitle(),      TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    }    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {              doLeftDbClick(e);            } else if (e.getClickCount() == 1 && SwingUtilities.isLeftMouseButton(e)) {              doLeftClick(e);            }          }        });      }    }    @Override    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems,    final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(compoId);      elementConditionDto.setExecutor(WorkEnv.getInstance().getCurrUserId());      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setStatus(tableDisplay.getStatus());      elementConditionDto.setMonth(BalanceUtil.getMonthIdBySysOption());      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        @Override        public void before() {          assert c != null;          installLoadingComponent(c);        }        @Override        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        @Override        public TableModel execute() throws Exception {          return doExecute();        }        @Override        public void success(TableModel model) {          doSuccess(model);        }      });    }  }}
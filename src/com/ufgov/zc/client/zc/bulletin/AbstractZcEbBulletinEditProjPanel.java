package com.ufgov.zc.client.zc.bulletin;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UserFuncBean;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.AgreeButton;import com.ufgov.zc.client.component.button.AuditPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.DisagreeButton;import com.ufgov.zc.client.component.button.DownloadButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.IsSendToNextButton;import com.ufgov.zc.client.component.button.LoadMoldButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.ReleaseButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SendRecordButton;import com.ufgov.zc.client.component.button.SendToXieBanButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.NumUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.WordFileUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.bulletinmold.IWordMoldFn;import com.ufgov.zc.client.zc.bulletinmold.ZcEbWordMoldFnHandler;import com.ufgov.zc.client.zc.project.integration.ZcEbProjectEditFrame;import com.ufgov.zc.client.zc.project.integration.ZcEbProjectListPanel;import com.ufgov.zc.client.zc.ztb.activex.WordPane;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BaseException;import com.ufgov.zc.common.system.model.UserFunc;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.ZcEbBulletinConstants;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcEbBulletin;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMold;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMoldParam;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbBulletinServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbProjServiceDelegate;public abstract class AbstractZcEbBulletinEditProjPanel extends AbstractMainSubEditPanel implementsIWordMoldFn {  private static final Logger logger = Logger.getLogger(ZcEbBulletinBidEditPanel.class);  public static final String XUNJIA_TEMPLETE_AS_FILE_ID_EXT = "_view";  public static final String PATH = ZcUtil.dir + "ht/";  public static int publishFlag = 0;  protected IZcEbBulletinServiceDelegate zcEbBulletinServiceDelegate = (IZcEbBulletinServiceDelegate) ServiceFactory  .create(IZcEbBulletinServiceDelegate.class, "zcEbBulletinServiceDelegate");  protected IZcEbProjServiceDelegate zcEbProjServiceDelegate = (IZcEbProjServiceDelegate) ServiceFactory  .create(IZcEbProjServiceDelegate.class, "zcEbProjServiceDelegate");  IZcEbBaseServiceDelegate zcEbBaseServiceDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(  IZcEbBaseServiceDelegate.class, "zcEbBaseServiceDelegate");  protected IZcEbBulletinServiceDelegate getIZcEbBulletinServiceDelegate() {    return this.zcEbBulletinServiceDelegate;  }  protected IZcEbProjServiceDelegate getIZcEbProjServiceDelegate() {    return this.zcEbProjServiceDelegate;  }  protected RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  protected String sqlMapSelectedProj = "ZcEbProj.getZcEbProj";  protected String sqlMapSelectedMold = "ZcEbBulletinWordMold.getZcEbBulletinWordMoldBid";  protected String replaceValue = "";  protected String fileName = "";  protected ListCursor listCursor;  protected ZcEbBulletin oldBulletin;  protected String tabStatus;  protected boolean ifLoadMold = false;  protected boolean ifRePalceBookMark = false;  protected ZcEbProjectListPanel listPanel;  protected AbstractZcEbBulletinEditProjPanel self = this;  protected ZcEbProjectEditFrame parent;  protected JTabbedPane tabPane = new JTabbedPane();  protected WordPane wordPane = new WordPane();  protected FuncButton saveButton = new SaveButton();  protected FuncButton downloadButton = new DownloadButton();  public static FuncButton editButton = new EditButton();  public FuncButton deleteButton = new DeleteButton();  //工作流送审  protected FuncButton sendButton = new SendButton();  // 工作流收回  protected FuncButton callbackButton = new CallbackButton();  //是否送主任审核  protected FuncButton isSendToNextButton = new IsSendToNextButton();  // 工作流填写意见审核通过  protected FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流审核通过  protected FuncButton auditPassButton = new AuditPassButton();  // 工作流销审  protected FuncButton unAuditButton = new UnauditButton();  // 工作流退回  protected FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  protected FuncButton traceButton = new TraceButton();  //送备案  protected FuncButton sendRecordButton = new SendRecordButton();  //同意  private FuncButton agreeButton = new AgreeButton();  //不同意  private FuncButton disagreeButton = new DisagreeButton();  //送协办人审核  private FuncButton sendToXieBanButton = new SendToXieBanButton();  public static ReleaseButton releaseButton = new ReleaseButton();  protected FuncButton previousButton = new PreviousButton();  protected FuncButton nextButton = new NextButton();  public FuncButton printButton = new PrintButton();  protected LoadMoldButton loadMoldButton = new LoadMoldButton();  protected FuncButton exitButton = new ExitButton();  protected FuncButton helpButton = new HelpButton();  protected String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  protected ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  protected String columNames[] = { "项目编号", "项目名称", "预算", "采购类型", "负责人", /*"是否划分标段",*/"电话", "邮件", "传真", /*"是否发布采购公告", "是否发布采购结果" */};  protected ZcEbProjFnHandler handler = new ZcEbProjFnHandler(columNames);  protected ForeignEntityFieldEditor fieldZcMakeCode;  protected TextFieldEditor fieldZcMakeName = new TextFieldEditor(LangTransMeta  .translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_NAME), "projName");  protected String moldColumNames[] = { "模板编号", "模板名称", "公告模板类型", "状态", "备注" };  protected ZcEbWordMoldFnHandler handlera = new ZcEbWordMoldFnHandler(moldColumNames, this);  protected ForeignEntityFieldEditor fieldMoldName = new ForeignEntityFieldEditor(getSqlMapSelectedMold(),  20, handlera, moldColumNames, "载入模板", "moldName");  protected BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(getCompId());  protected ZcEbBulletinWordMold wordMold;  public String fieldSn;  public ZcEbProj proj;  public AbstractZcEbBulletinEditProjPanel(ZcEbProjectEditFrame dself, ListCursor listCursor,  String tabStatus, ZcEbProjectListPanel listPanel, String compoId, String fieldSn, ZcEbProj proj) {    super(new ZcEbBulletin(), compoId);    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.parent = dself;    this.fieldSn = fieldSn;    this.proj = proj;    fieldZcMakeCode = new ForeignEntityFieldEditor("ZcEbProj.getBillZcEbProj", this.getFindProjConditions(), 20, handler,    columNames, LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_EB_ZC_MAKE_CODE), "projCode");    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),    getModelName(), TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(getCompId());    WordFileUtil.setDir("bulletin");    //    refreshMainData();    //    setButtonStatus();    //    updateFieldEditorsEditable();    //    addSubPane();    //    refreshData();    WordFileUtil.setDir("bulletin");    addSubPane();    refreshMainData();    setButtonStatus();    updateFieldEditorsEditable();    this.saveButton.setEnabled(false);  }  protected abstract String getModelName();  protected abstract String getCompId();  protected abstract String getBulletinType();  protected abstract String getStatus();  protected ElementConditionDto getFindProjConditions() {    ElementConditionDto dto = new ElementConditionDto();    dto.setStatus("specialNum12345--");    dto.setManageCode(this.requestMeta.getSvUserID());    dto.setProjCode(this.fieldSn);    return dto;  }  protected void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      //      bs = new ButtonStatus();      //      bs.setButton(this.loadMoldButton);      //      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      //      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      //      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      //      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.sendButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.traceButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbBulletin ht = (ZcEbBulletin) this.listCursor.getCurrentObject();    String billStatus = ht.getBulletinStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, getCompId(), ht    .getProcessInstId());  }  protected String refreshMainData() {    ZcEbBulletin bulletin = (ZcEbBulletin) listCursor.getCurrentObject();    if (bulletin == null) {//新增页面      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      bulletin = new ZcEbBulletin();      setDefaultValue(bulletin, ZcSettingConstants.PAGE_STATUS_NEW);      List lst = new ArrayList();      lst.add(bulletin);      this.listCursor.setDataList(lst, -1);      listCursor.setCurrentObject(bulletin);    }    callBackRefreshDate();    this.setEditingObject(bulletin);    setOldObject();    setButtonStatus(bulletin, requestMeta, this.listCursor);    Long processInstId = bulletin.getProcessInstId();    if (processInstId == null || processInstId.longValue() < 0) {      sendRecordButton.setVisible(false);      sendToXieBanButton.setVisible(false);    }    UserFunc userFunc = new UserFunc();    userFunc.setUserId(WorkEnv.getInstance().getCurrUserId());    userFunc.setCompoId(getCompId());    userFunc.setFuncId(releaseButton.getFuncId());    //releaseButton.setEnabled(false);    if (ZcSettingConstants.BILL_STATUS_AUDIT_FINISH.equals(bulletin.getBulletinStatus())    && UserFuncBean.isGrant(userFunc)) {      releaseButton.setEnabled(true);      releaseButton.setVisible(true);    } else {      releaseButton.setEnabled(false);      releaseButton.setVisible(false);    }    if ("exec".equals(this.getStatus())) {      releaseButton.setVisible(true);      releaseButton.setEnabled(true);    }    return bulletin.getFileID();  }  public void refreshData() {    String fileID = refreshMainData();    refreshSubTableData(fileID);  }  protected void refreshSubTableData(String fileID) {    if (wordPane.isDocOpened()) {      wordPane.close();    }    if (fileID != null && !fileID.equals("")) {      this.fileName = WordFileUtil.loadMold(fileID);      wordPane.open(this.fileName);    } else {      this.fileName = WordFileUtil.loadDefaultMold();      wordPane.open(this.fileName);    }  }  protected void setDefaultValue(ZcEbBulletin bulletin, String pageStatus) {    if (pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {      bulletin.setInputorName(WorkEnv.getInstance().getCurrUserName());      bulletin.setExecuteDate(WorkEnv.getInstance().getSysDate());      bulletin.setNd(WorkEnv.getInstance().getSysNd());      bulletin.setBulletinStatus("0");      bulletin.setBulletinType(getBulletinType());      //setEditingObject(bulletin);    }  }  protected void addSubPane() {    //下面一句是为了打开word后刷新窗口    parent.setSize(parent.getSize().width + 1, parent.getSize().height + 1);    wordPane.addPropertyChangeListener(WordPane.EVENT_NAME_OPEN_CALLBACK, new PropertyChangeListener() {      public void propertyChange(PropertyChangeEvent evt) {        //打开文件完成之后的回调函数        boolean isSuccess = (Boolean) evt.getNewValue();        if (isSuccess) {          //下面一句是为了打开word后刷新窗口          parent.setSize(parent.getSize().width - 1, parent.getSize().height - 1);        }      }    });    tabPane.addTab("公告内容", wordPane);  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)    || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null        && (fd.getFieldName().equals("projCode") || fd.getFieldName().equals("bulletinID")        || fd.getFieldName().equals("bulletinStatus") || fd.getFieldName().equals("executeDate")        || fd.getFieldName().equals("executor") || fd.getFieldName().equals("moldName") || fd        .getFieldName().equals("zcPProMake.zcXieYiEndDate"))) {          fd.setEnabled(false);        } else {          fd.setEnabled(true);        }      }    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }    }  }  protected void setOldObject() {    oldBulletin = (ZcEbBulletin) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  public boolean isDataChanged() {    //如果载入了模板并且进行了数据填充，说明数据已经修改    if (ifLoadMold && ifRePalceBookMark) {      return true;    } else {      return !DigestUtil.digest(oldBulletin).equals(DigestUtil.digest(listCursor.getCurrentObject()));    }  }  public JComponent createSubBillPanel() {    return this.tabPane;  }  protected void projCodeChange() {    ZcEbBulletin zcEbBulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    for (AbstractFieldEditor editor : this.fieldEditors) {      if (editor.getFieldName().equals("projCode")) {        Object obj = editor.getValue();        if (obj == null || obj.toString().trim().length() == 0) {          this.fieldMoldName.setValue("");          zcEbBulletin.setProjCode(null);          zcEbBulletin.setProjName(null);          zcEbBulletin.setMoldName(null);          this.fieldZcMakeName.setEditObject(zcEbBulletin);          this.fieldMoldName.setEditObject(zcEbBulletin);          this.fieldMoldName.setEnabled(true);          break;        }      }    }    setFieldMoldNameStatus();  }  protected void setFieldMoldNameStatus() {    if (this.fieldZcMakeCode.getValue() == null || this.fieldZcMakeCode.getValue().toString().length() == 0) {      this.fieldMoldName.setEnabled(false);    } else {      this.fieldMoldName.setEnabled(true);    }  }  public String doOpenMold(List valueList, ZcEbBulletinWordMold bulletinMold) {    if (wordPane != null && wordPane.isDocOpened()) {      wordPane.close();    }    String moldFileName = WordFileUtil.loadMold(bulletinMold.getFileID());    if (moldFileName == null || moldFileName.length() == 0) {      //没有成功载入模板，关闭wordPane        if (wordPane != null)        wordPane.close();      return "";    }    wordPane.open(moldFileName);    fileName = moldFileName;//zcEbWordPanel.getFileName();    StringBuffer sb = new StringBuffer();    for (Iterator it = valueList.iterator(); it.hasNext();) {      ZcEbBulletinWordMoldParam zcEbBulletinWordMoldParam = (ZcEbBulletinWordMoldParam) it.next();      sb.append(zcEbBulletinWordMoldParam.getParamName());      sb.append("$$$$$");      sb.append(zcEbBulletinWordMoldParam.getParamValue());      sb.append("@@@@@");    }    return sb.toString();  }  protected String saveBulletinContent() {    String fileID = "";    if (fileName != null && fileName.length() != 0)      fileID = WordFileUtil.uploadBulletinWordConstent(fileName);    return fileID;  }  protected boolean checkBeforeSave() {    List notNullBillElementList = this.billElementMeta.getNotNullBillElement();    ZcEbBulletin bulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    StringBuilder errorInfo = new StringBuilder();    String validateInfo = ZcUtil.validateBillElementNull(bulletin, notNullBillElementList);    if (validateInfo.length() != 0) {      errorInfo.append("").append(validateInfo.toString()).append("\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  /**   * 创建字段对象   */  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    fieldZcMakeCode.addValueChangeListener(new ValueChangeListener() {      @Override      public void valueChanged(ValueChangeEvent e) {        projCodeChange();      }    });    editorList.add(fieldZcMakeCode);    editorList.add(fieldZcMakeName);    AsValFieldEditor fieldBulletinStatus = new AsValFieldEditor(LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_BULLETIN_STATUS), "bulletinStatus", "ZC_EB_BULLETIN_STATUS");    editorList.add(fieldBulletinStatus);    editorList.add(fieldMoldName);    TextFieldEditor fieldInputorName = new TextFieldEditor(LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_INPUTOR_NAME), "executor");    editorList.add(fieldInputorName);    DateFieldEditor fieldInputDate = new DateFieldEditor(LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_INPUT_DATE), "executeDate");    editorList.add(fieldInputDate);    TextFieldEditor fieldRemark = new TextFieldEditor(LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_REMARK), "remark");    editorList.add(fieldRemark);    return editorList;  }  /**   * 以下添加按钮和按钮方法   */  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(getCompId());    addButtonMenu(this.tabStatus);    loadMoldButton.setEnabled(false);    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    downloadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        WordFileUtil.doSaveWordFile("采购公告.doc", wordPane, self);      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSend();      }    });    isSendToNextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSendNext();      }    });    releaseButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPublish();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doTrace();      }    });    loadMoldButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doReplaceBookMarks();      }    });    callbackButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doCallback();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 审核        doAudit();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核        doSuggestPass();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 销审        doUnAudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退回        doUnTread();      }    });    sendRecordButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送采购处备案        doSendRecord();      }    });    agreeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 同意        doAgree();      }    });    disagreeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 不同意        doDisagree();      }    });    sendToXieBanButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送协办人        doSendToXieBan();      }    });    deleteButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    //    exitButton.addActionListener(new ActionListener() {    //      public void actionPerformed(ActionEvent e) {    //        doExit();    //      }    //    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrint();      }    });  }  private void doSendRecord() {    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager    .getCurrentKeyboardFocusManager().getActiveWindow(), ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcEbBulletin afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.suggestPassButton.getFuncId());      ZcEbBulletin bulletin = (ZcEbBulletin) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bulletin.setComment(commentDialog.getComment());      bulletin.setAuditorId(WorkEnv.getInstance().getCurrUserId());      bulletin.setIsGoonAudit(ZcSettingConstants.IS_GOON_AUDIT_YES);      this.getIZcEbBulletinServiceDelegate().updateFN(bulletin, requestMeta);      afterSaveBill = listPanel.getIZcEbBulletinServiceDelegate().sendRecordFN(bulletin, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrint() {    try {      this.wordPane.print();    } catch (RuntimeException e) {      // TODO Auto-generated catch block      e.printStackTrace();      JOptionPane.showMessageDialog(this, "请确认系统已经打开公告，再进行打印！", "提示", JOptionPane.INFORMATION_MESSAGE);    }  }  protected void doDelete() {    ZcEbBulletin zcEbBulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    int num = JOptionPane.showConfirmDialog(this, "确认删除当前数据？", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      String errorInfo = "";      try {        listPanel.getIZcEbBulletinServiceDelegate().deleteFN(zcEbBulletin, requestMeta);        JOptionPane.showMessageDialog(self, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;        this.listCursor.removeCurrentObject();        refreshData();        this.listPanel.refreshCurrentTabData();        updateFieldEditorsEditable();        setButtonStatus();      } catch (Exception e) {        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  /*   * 退回   */  protected void doUnTread() {    GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager    .getCurrentKeyboardFocusManager().getActiveWindow(), ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcEbBulletin afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unTreadButton.getFuncId());      ZcEbBulletin ht = (ZcEbBulletin) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      ht.setAuditorId(WorkEnv.getInstance().getCurrUserId());      ht.setComment(commentDialog.getComment());      afterSaveBill = listPanel.getIZcEbBulletinServiceDelegate().untreadFN(ht, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 销审   */  protected void doUnAudit() {    boolean success = true;    ZcEbBulletin afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unAuditButton.getFuncId());      ZcEbBulletin ht = (ZcEbBulletin) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      ht.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getIZcEbBulletinServiceDelegate().unAuditFN(ht, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /**   * 送协办人   */  private void doSendToXieBan() {    ZcEbBulletin zcEbBulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.sendToXieBanButton.getFuncId());    executeAudit(zcEbBulletin, ZcSettingConstants.IS_GOON_AUDIT_NO, null);  }  /**   * 同意   */  private void doAgree() {    ZcEbBulletin zcEbBulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.agreeButton.getFuncId());    Integer auditFlag = zcEbBulletin.getIsGoonAudit();    auditFlag = auditFlag == null ? 0 : auditFlag;    executeAudit(zcEbBulletin, auditFlag + ZcSettingConstants.IS_GOON_AUDIT_YES, null);  }  /**   * 不同意   */  private void doDisagree() {    ZcEbBulletin zcEbBulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.disagreeButton.getFuncId());    Integer auditFlag = zcEbBulletin.getIsGoonAudit();    auditFlag = auditFlag == null ? 0 : auditFlag;    executeAudit(zcEbBulletin, auditFlag - ZcSettingConstants.IS_GOON_AUDIT_YES,    ZcSettingConstants.AUDIT_DISAGREE_DEFULT_MESSAGE);  }  /*   * 填写意见审核   */  private void doSuggestPass() {    ZcEbBulletin zcEbBulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.suggestPassButton.getFuncId());    String jianShenRoleId = AsOptionMeta.getOptVal("OPT_ZC_CGZX_JSKY_ROLE");//监审组员角色    if (WorkEnv.getInstance().containRole(jianShenRoleId)) {//如果是监审员，则不修改审批状态      Integer auditFlag = zcEbBulletin.getIsGoonAudit();      executeAudit(zcEbBulletin, auditFlag, null);    } else {      executeAudit(zcEbBulletin, ZcSettingConstants.IS_GOON_AUDIT_NO, null);    }  }  /*   * 审核   */  protected void doAudit() {    if (checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    ZcEbBulletin afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.auditPassButton.getFuncId());      ZcEbBulletin ht = (ZcEbBulletin) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      ht.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getIZcEbBulletinServiceDelegate().auditFN(ht, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 收回   */  protected void doCallback() {    boolean success = true;    ZcEbBulletin afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.callbackButton.getFuncId());      ZcEbBulletin ht = (ZcEbBulletin) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      ht.setAuditorId(WorkEnv.getInstance().getCurrUserId());      ht.setIsGoonAudit(ZcSettingConstants.IS_GOON_AUDIT_NO);      listPanel.getIZcEbBulletinServiceDelegate().updateFN(ht, requestMeta);      afterSaveBill = listPanel.getIZcEbBulletinServiceDelegate().callbackFN(ht, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  public void callBackRefreshDate() {  }  protected void refreshAll(ZcEbBulletin afterSaveBill, boolean isRefreshButton) {    this.listCursor.setCurrentObject(afterSaveBill);    refreshData();  }  public boolean doSave() {    /* 去掉检查数据是否发生变化，因为如果直接修改word内容，也需要保存。    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      setButtonStatus();      return false;    }    */    if (!checkBeforeSave()) //先对主表输入进行验证      return false;    //    if (!ifRePalceBookMark) { //默认为false，当填充模板成功之后设置为ture    //      JOptionPane.showMessageDialog(self, "没有填充公告内容，请点击【填充模板】按钮生成正式公告后再保存！", "提示", JOptionPane.ERROR_MESSAGE);    //      return false;    //    }    ZcEbBulletin bulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    // 支持直接修改word内容。    wordPane.save(this.fileName);    String fileID = saveBulletinContent();    bulletin.setFileID(fileID);    if (bulletin.getBulletinID() != null && !bulletin.getBulletinID().equals("")) {      this.getIZcEbBulletinServiceDelegate().updateFN(bulletin, requestMeta);    } else {      String bulletinID = NumUtil.getNum(getCompId(), "BULLETIN_ID", bulletin, requestMeta);      bulletin.setBulletinID(bulletinID);      this.getIZcEbBulletinServiceDelegate().insertFN(bulletin, requestMeta);    }    listCursor.setCurrentObject(bulletin);    this.oldBulletin = (ZcEbBulletin) ObjectUtil.deepCopy(bulletin);    this.listPanel.refreshCurrentTabData();    JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    HashMap parameter = new HashMap();    parameter.put("BULLETIN_ID", bulletin.getBulletinID());    List list = zcEbBaseServiceDelegate.queryDataForList("ZcEbBulletin.readBulletinById", parameter,    requestMeta);    if (list != null && list.size() > 0) {      bulletin = (ZcEbBulletin) list.get(0);    }    this.listCursor.setCurrentObject(bulletin);    refreshMainData();    this.oldBulletin = (ZcEbBulletin) ObjectUtil.deepCopy(bulletin);    this.listPanel.refreshCurrentTabData();    updateFieldEditorsEditable();    setButtonStatus();    wordPane.setEnabled(false);    if ("exec".equals(this.getStatus())) {      releaseButton.setEnabled(true);    }    return true;  }  public void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  public void doSend() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldBulletin);      }    }    requestMeta.setFuncId(this.sendButton.getFuncId());    ZcEbBulletin bulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    bulletin.setAuditorId(WorkEnv.getInstance().getCurrUserId());    ArrayList zl = new ArrayList();    zl.add(bulletin);    this.getIZcEbBulletinServiceDelegate().newCommitFN(zl, requestMeta);    HashMap parameter = new HashMap();    parameter.put("BULLETIN_ID", bulletin.getBulletinID());    List list = zcEbBaseServiceDelegate.queryDataForList("ZcEbBulletin.readBulletinById", parameter,    requestMeta);    if (list != null && list.size() > 0) {      bulletin = (ZcEbBulletin) list.get(0);    }    this.listCursor.setCurrentObject(bulletin);    this.oldBulletin = (ZcEbBulletin) ObjectUtil.deepCopy(bulletin);    this.listPanel.refreshCurrentTabData();    JOptionPane.showMessageDialog(self, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    updateFieldEditorsEditable();    this.refreshData();    setButtonStatus();  }  protected void doSendNext() {    ZcEbBulletin bulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    //int sel = JOptionPane.showConfirmDialog(this, "是否送主任审核？");    requestMeta.setFuncId(this.isSendToNextButton.getFuncId());    //if (sel == JOptionPane.OK_OPTION) {    executeAudit(bulletin, ZcSettingConstants.IS_GOON_AUDIT_YES, null);    //} else {    //   executeAudit(bulletin, ZcSettingConstants.IS_GOON_AUDIT_NO);    //}  }  protected void executeAudit(ZcEbBulletin bulletin, int isGoonAudit, String defaultMsg) {    GkCommentDialog commentDialog = null;    if (defaultMsg == null) {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager()      .getActiveWindow(), ModalityType.APPLICATION_MODAL);    } else {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager()      .getActiveWindow(), ModalityType.APPLICATION_MODAL, defaultMsg);    }    if (commentDialog.cancel) {      return;    }    boolean success = true;    String errorInfo = "";    try {      bulletin.setIsGoonAudit(isGoonAudit);      bulletin.setComment(commentDialog.getComment());      bulletin.setAuditorId(WorkEnv.getInstance().getCurrUserId());      this.getIZcEbBulletinServiceDelegate().updateFN(bulletin, requestMeta);      this.getIZcEbBulletinServiceDelegate().auditFN(bulletin, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshData();      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  public boolean publishToHtml(String htmlName, String attachTitle) {    if (attachTitle.length() > 0) {      boolean ifFindBookMark = wordPane.selectBookMark(ZcEbBulletinConstants.ATTACH_FILE_BOOKMARK_NAME);      if (ifFindBookMark) {        boolean ifInsertAttachment = wordPane.insertAttachmentUrl(WordFileUtil        .getPortalAttachPathFileName(attachTitle), attachTitle);        if (!ifInsertAttachment) {          UIUtilities.showStaickTraceDialog(new BaseException(), this, "错误", "发布公告时,没有正确插入附件文件!");          return false;        }      }    }    boolean ifConvert = wordPane.convertWordToHtml(WordFileUtil.getHtmlFileName(htmlName));    if (!ifConvert) {      UIUtilities.showStaickTraceDialog(new BaseException(), this, "错误", "发布公告时,没有正确生成网页文件!");      return false;    }    return true;  }  public abstract boolean doPublish();  protected String checkBeforePublish() {    // TODO Auto-generated method stub    return null;  }  protected void doTrace() {    ZcEbBulletin bulletin = (ZcEbBulletin) this.getEditingObject();    if (bulletin == null) {      bulletin = (ZcEbBulletin) listCursor.getCurrentObject();    }    ZcUtil.showTraceDialog(bulletin, getCompId());  }  public void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldBulletin);      }    }    listCursor.previous();    refreshData();    setButtonStatus();  }  public void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldBulletin);      }    }    listCursor.next();    refreshData();    setButtonStatus();  }  public void doReplaceBookMarks() {    this.loadMoldButton.setEnabled(false);//填充完之后设为不可用    if (replaceValue != null && !replaceValue.equals("")) {      wordPane.replaceBookMarks(this.replaceValue);    }    //WordFileUtil.delete(this.fileName);    wordPane.save(this.fileName);    ifRePalceBookMark = true;    ifLoadMold = false;    this.saveButton.setEnabled(true);  }  public String getSqlMapSelectedProj() {    return sqlMapSelectedProj;  }  public void setSqlMapSelectedProj(String sqlMapSelectedProj) {    this.sqlMapSelectedProj = sqlMapSelectedProj;  }  public String getSqlMapSelectedMold() {    return sqlMapSelectedMold;  }  public void setSqlMapSelectedMold(String sqlMapSelectedMold) {    this.sqlMapSelectedMold = sqlMapSelectedMold;  }  public void setLoadMoldButtonStatus() {    if (this.fieldZcMakeCode == null || this.fieldZcMakeCode.getValue() == null    || this.fieldZcMakeCode.getValue().toString().length() == 0 || fieldMoldName == null    || fieldMoldName.getValue() == null || fieldMoldName.getValue().toString().length() == 0) {      this.loadMoldButton.setEnabled(false);    } else {      this.loadMoldButton.setEnabled(true);    }  }  private void refreshWordPane(ZcEbBulletin bulletin) {    if (wordPane.isDocOpened()) {      wordPane.close();    }    String fileID = bulletin.getFileID();    if (fileID != null && !fileID.equals("")) {      this.fileName = WordFileUtil.loadMold(fileID);      wordPane.open(this.fileName);    } else {      this.fileName = WordFileUtil.loadDefaultMold();      wordPane.open(this.fileName);    }  }  protected void addButtonMenu(String tabStatus) {    toolBar.add(editButton);    toolBar.add(loadMoldButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    toolBar.add(releaseButton);    toolBar.add(downloadButton);    toolBar.add(traceButton);    toolBar.add(sendButton);    toolBar.add(callbackButton);    toolBar.add(suggestPassButton);    toolBar.add(auditPassButton);    toolBar.add(agreeButton);    toolBar.add(disagreeButton);    toolBar.add(sendToXieBanButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(isSendToNextButton);    toolBar.add(sendRecordButton);    toolBar.add(printButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    //toolBar.add(exitButton);    toolBar.add(helpButton);  }  /**   * 选择项目外部部件信息   * @author admin   *   */  protected class ZcEbProjFnHandler implements IForeignEntityHandler {    protected String columNames[];    public ZcEbProjFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbProj proj = (ZcEbProj) object;        ZcEbBulletin bulletin = (ZcEbBulletin) listCursor.getCurrentObject();        bulletin.setProjCode(proj.getProjCode());        bulletin.setProjName(proj.getProjName());        fieldMoldName.setEditObject(bulletin);        if (bulletin.getBulletinID() == null) {          handlera.flashReplaceValue();        } else {          bulletin.setMoldName("");          bulletin.setFileID(null);          refreshWordPane(bulletin);        }        //bulletin.getZcPProMake().setZcXieYiEndDate(proj.getProjDate());        setEditingObject(bulletin);        callBackRefreshDate();      }      setFieldMoldNameStatus();      setLoadMoldButtonStatus();      //      projCodeChange();      //      fieldMoldName.setValue("");      //      handlera.flashReplaceValue();    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = rowData.getProjSum();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE", rowData.getPurType());        data[i][col++] = rowData.getManager();        data[i][col++] = rowData.getPhone();        data[i][col++] = rowData.getEmail();        data[i][col++] = rowData.getFax();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }  }  @Override  public boolean getIfLoadMold() {    // TODO Auto-generated method stub    return this.ifLoadMold;  }  @Override  public boolean getIfRePalceBookMark() {    // TODO Auto-generated method stub    return this.ifRePalceBookMark;  }  @Override  public ListCursor getListCursor() {    // TODO Auto-generated method stub    return this.listCursor;  }  @Override  public JPanel getWindowObject() {    // TODO Auto-generated method stub    return this;  }  @Override  public WordPane getWordPane() {    // TODO Auto-generated method stub    return this.wordPane;  }  @Override  public void setIfLoadMold(boolean ifLoadMold) {    // TODO Auto-generated method stub    this.ifLoadMold = ifLoadMold;    if (this.ifLoadMold) {      this.setLoadMoldButtonStatus();    }  }  @Override  public void setIfRePalceBookMark(boolean ifRePalceBookMark) {    // TODO Auto-generated method stub    this.ifRePalceBookMark = ifRePalceBookMark;  }  @Override  public String getWordMoldViewId() {    // TODO Auto-generated method stub    ZcEbBulletin bulletin = (ZcEbBulletin) listCursor.getCurrentObject();    return bulletin.getProjCode();  }  @Override  public void setMoldName(String wordName) {    // TODO Auto-generated method stub    ZcEbBulletin bulletin = (ZcEbBulletin) listCursor.getCurrentObject();    bulletin.setMoldName(wordName);    fieldMoldName.setEditObject(bulletin);  }  @Override  public void setReplaceValue(String replaceValue) {    // TODO Auto-generated method stub    this.replaceValue = replaceValue;  }  @Override  public void setWordMold(ZcEbBulletinWordMold bulletinMold) {    setLoadMoldButtonStatus();    ZcEbBulletin bulletin = (ZcEbBulletin) listCursor.getCurrentObject();    bulletin.setMoldCode(bulletinMold.getBulletinMoldCode());    this.wordMold = bulletinMold;  }  @Override  public String getPackCode() {    // TODO Auto-generated method stub    return null;  }}
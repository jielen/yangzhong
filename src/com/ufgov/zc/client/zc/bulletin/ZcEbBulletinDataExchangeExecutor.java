package com.ufgov.zc.client.zc.bulletin;import java.io.File;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.component.zc.dataexchange.DataExchangeListPanel;import com.ufgov.zc.client.component.zc.dataexchange.model.ABaseData;import com.ufgov.zc.client.component.zc.dataexchange.model.AttachmentFile;import com.ufgov.zc.client.component.zc.dataexchange.model.CommonDataExchangeOperator;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.zc.model.DataExchangeLog;import com.ufgov.zc.common.zc.model.ZcEbBulletin;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbPackReq;import com.ufgov.zc.common.zc.model.ZcEbRequirementDetail;import com.ufgov.zc.common.zc.model.ZcEbXunJia;import com.ufgov.zc.common.zc.publish.IZcEbBulletinServiceDelegate;public class ZcEbBulletinDataExchangeExecutor extends ABaseData {  private static final long serialVersionUID = 4568366910708725757L;  private transient IZcEbBulletinServiceDelegate zcEbBulletinServiceDelegate = null;  private Map<String, String> commonParameters = new HashMap<String, String>();  private static int currRecordSeq = 0;  public ZcEbBulletinDataExchangeExecutor() {  }  /**   * 1、先抓取数据库中的数据：包括抓取已发布的招标公告、相关文件存储位置的配置信息；   * 2、接着抓取相关的文件数据：主要抓取ztb文件和html文件；   * 3、完成数据抓取后，交给框架去压缩加密；   * 4、这个方法往后还需要进行重构、优化、特别是对路径处理这一块，需要完善，否则不够健壮；   */  @Override  public int doExportData(ElementConditionDto dto, RequestMeta meta, String saveRootPath) {    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "正在查询需要导出的记录...");    if (this.getNeedExportDataRedoList() != null && this.getNeedExportDataRedoList().size() > 0) {      dto.setPmAdjustCodeList(this.getNeedExportDataList());      this.setDataList(getZcEbBulletinServiceDelegate().findTransData(dto, meta));    } else {      this.setDataList(new ArrayList<ZcEbBulletin>());    }    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "查询到【" + this.getDataList().size() + "】条记录...");    //导出公告DOC文档    List fileList = this.getDataList();    if (fileList.size() > 0) {      String parentDirectory = new File(saveRootPath).getParentFile().getParentFile().getAbsolutePath();      String bulletinFilePath = parentDirectory + File.separator + "WORD公告";      makeDirs(bulletinFilePath);      for (int i = 0; i < fileList.size(); i++) {        ZcEbBulletin zcEbBulletin = (ZcEbBulletin) fileList.get(i);        String fileID = zcEbBulletin.getFileID();        String path = bulletinFilePath + File.separator + fileID + ".doc";        AsFile asFile = this.getBaseDataServiceDelegate().getAsFileById(fileID, meta);        if (asFile == null) {          DataExchangeListPanel.setProgressText(this.getDataTypeName() + "没有Word文档公告...");          continue;        }        this.doWriteLittleFileToLocal(asFile.getFileContent(), path);      }    }    //导出需求明细文档    for (int i = 0; i < this.getDataList().size(); i++) {      ZcEbBulletin bltin = (ZcEbBulletin) this.getDataList().get(i);      List packList = bltin.getZcEbProj().getPackList();      for (int j = 0; j < packList.size(); j++) {        ZcEbPack pack = (ZcEbPack) packList.get(j);        List reqList = pack.getRequirementDetailList();        for (int k = 0; k < reqList.size(); k++) {          ZcEbPackReq req = (ZcEbPackReq) reqList.get(k);          String fileID = req.getRequirementDetail().getItemAttachBlobid();          AsFile asFile = this.getBaseDataServiceDelegate().getAsFileById(fileID, meta);          if (asFile == null) {            DataExchangeListPanel.setProgressText(this.getDataTypeName() + "没有采购明细需求附件...");            continue;          }          String filePath = saveRootPath + File.separator + fileID;          doWriteLittleFileToLocal(asFile.getFileContent(), filePath);        }        //如果是询价，那么还需要将询价单的附件一块拷贝        if (ZcSettingConstants.PITEM_OPIWAY_XJ.equals(pack.getPurType())) {          for (int l = 0; l < pack.getXunJiaList().size(); l++) {            ZcEbXunJia xj = (ZcEbXunJia) pack.getXunJiaList().get(l);            if (xj.getSpTechFileId() != null && !"".equals(xj.getSpTechFileId())) {              String fileID = xj.getSpTechFileId();              AsFile asFile = this.getBaseDataServiceDelegate().getAsFileById(fileID, meta);              if (asFile == null) {                DataExchangeListPanel.setProgressText(this.getDataTypeName() + "没有询价说明附件...");                continue;              }              String filePath = saveRootPath + File.separator + fileID;              doWriteLittleFileToLocal(asFile.getFileContent(), filePath);            }          }        }      }    }    /**     * 后缀名为_COMPO_UFGOV     */    String topDirectoy = saveRootPath.substring(saveRootPath.lastIndexOf(File.separator));    /*获取所有相关文件的存储位置配置信息*/    //发布公告时，下载到前台的ztb文件存储位置，需要获取该ztb文件    String attachFile = AsOptionMeta.getOptVal("OPT_ZC_ATTACH_FILE_TEMP");// C:/ufgov/eb/download/html/eb/attach/    //生成的招标公告原件doc和招标原ztb件文件存储位置，暂时不需要    //String docFile = AsOptionMeta.getOptVal("OPT_ZC_FILE_TEMP");    //点击栏目中的标题时，将显示该目录下的内容，主要是htm文件及其引用的相关文件     String htmlFile = AsOptionMeta.getOptVal("OPT_ZC_HTML_FILE_TEMP");// C:/ufgov/eb/download/html/eb/html/    //所属栏目id    String pletBidID = AsOptionMeta.getOptVal("OPT_ZC_PLET_BID");// 189    //上传ztb文件到服务器时相对portal目录存放的位置    String attachFilesSaveToOutServer = AsOptionMeta.getOptVal("OPT_ZC_SERVER_ATTACH_PATH");// /html/eb/attach/     //上传需要发布到外网的htm及其引用的相关文件存放的位置    String htmlFilesSaveToOutServer = AsOptionMeta.getOptVal("OPT_ZC_PORTAL_HREF_PATH");// /html/eb/html/    //将相关的文件拷贝到相应的目录下    String attach = saveRootPath + File.separator + "attach";    makeDirs(attach);    String html = saveRootPath + File.separator + "html";    if (this.attachmentDataMap == null) {      this.attachmentDataMap = new HashMap<String, Map<String, AttachmentFile>>();    } else {      this.attachmentDataMap.clear();    }    this.commonParameters.clear();    this.commonParameters.put("OPT_ZC_PLET_BID", pletBidID);    AttachmentFile attFile = null;    String ztbFile = null;    List<DataExchangeLog> exportDataList = new ArrayList<DataExchangeLog>();    for (int i = 0; i < this.dataList.size() && i >= 0; i++) {      currRecordSeq = i + 1;      //将附件信息存储到map中      Map<String, AttachmentFile> item = new HashMap<String, AttachmentFile>();      ZcEbBulletin bid = (ZcEbBulletin) this.dataList.get(i);      //++A++先拷贝以项目名称+"招标公告"命名的ztb文件      ztbFile = bid.getProjCode() + ".ztb";      DataExchangeListPanel.setProgressText(this.getDataTypeName() + "正在获取第【" + currRecordSeq + "】条记录相关数据和文件，名称：" + bid.getProjName());      try {        try {          copyFiles(attachFile, attach, ztbFile);        } catch (Exception e) {        }        attFile = new AttachmentFile();        attFile.setBelongToIdentify(bid.getBulletinID());        attFile.setFileID(ztbFile);        attFile.setFileName(ztbFile);        attFile.setSourceFilePath(topDirectoy + File.separator + "attach");        attFile.setTargetFilePath(attachFilesSaveToOutServer);        attFile.setFileType("file");        item.put("ztb_file", attFile);        //++B++接着拷贝以fileID命名的html文件        copyDirAndFiles(htmlFile, html, bid.getFileID());        String relativeHtmlPath = topDirectoy + File.separator + "html";        attFile = new AttachmentFile();        attFile.setBelongToIdentify(bid.getBulletinID());        attFile.setFileID(bid.getFileID());        attFile.setFileName(bid.getFileID() + ZcSettingConstants.HTML_FILE_SUFFIX);        attFile.setSourceFilePath(relativeHtmlPath);        attFile.setTargetFilePath(htmlFilesSaveToOutServer);        attFile.setFileType("file");        item.put("html_file", attFile);        //        attFile = new AttachmentFile();        //        attFile.setBelongToIdentify(bid.getBulletinID());        //        attFile.setFileID(bid.getFileID());        //        attFile.setFileName(bid.getFileID());        //        attFile.setSourceFilePath(relativeHtmlPath);        //        attFile.setTargetFilePath(htmlFilesSaveToOutServer + "/" + attFile.getFileName() + ".files");        //        attFile.setFileType("dir");        //        item.put("html_dir", attFile);        //        this.attachmentDataMap.put(bid.getBulletinID(), item);        StringBuffer detail = new StringBuffer("相关附件：");        detail.append(ztbFile).append(";");        detail.append(bid.getFileID()).append(ZcSettingConstants.HTML_FILE_SUFFIX).append(";");        detail.append(attFile.getTargetFilePath());        DataExchangeLog log = new DataExchangeLog();        makeDataExchangeLog(log, meta.getSvUserID(), "导出成功", "", detail.toString(), "OUT", bid);        exportDataList.add(log);        successRecordMap.put(bid.getBulletinID(), this.getDataExchangeRedo(bid.getBulletinID()));        DataExchangeListPanel.setProgressText(this.getDataTypeName() + "第【" + currRecordSeq + "】条记录相关数据和文件抓取完成...");      } catch (BusinessException e) {        StringBuffer detail = new StringBuffer("相关附件：");        detail.append(ztbFile).append(";");        detail.append(bid.getFileID()).append(ZcSettingConstants.HTML_FILE_SUFFIX).append(";");        DataExchangeLog log = new DataExchangeLog();        makeDataExchangeLog(log, meta.getSvUserID(), "导出失败", e.getMessage(), detail.toString(), "OUT", bid);        DataExchangeListPanel.setProgressText(this.getDataTypeName() + "第【" + currRecordSeq + "】条记录获取数据和文件失败，名称:" + bid.getProjName());        exportDataList.add(log);        this.dataList.remove(i);        i--;      }    }    this.getExchangeDataLogModel().setExportDataList(exportDataList);    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "主要的数据抓取和导出过程完毕...");    return this.dataList.size();  }  /**   * 填写日志   * @param log   * @param userID   * @param succFail   * @param exceptionMsg   * @param detail   * @param type   * @param bid   */  private void makeDataExchangeLog(DataExchangeLog log, String userID, String succFail, String exceptionMsg, String detail, String type,  ZcEbBulletin bid) {    log.setDataTypeID(this.getDataTypeID());    log.setDataTypeName(this.getDataTypeName());    log.setUserID(userID);    log.setRecStatus(succFail);    log.setDetailInfo(detail);    log.setExceptText(exceptionMsg);    log.setGentType(type);    log.setOptDateTime(new Date());    log.setRecSrcID(bid.getBulletinID());    log.setRecSrcName(bid.getProjName());    log.setRecSrcTab(this.getMainTableName());  }  /**   * 拷贝文件，保持原结构进行拷贝   * @param sourceDir   * @param targerDir   */  private void copyFiles(String sourceDir, String tarDir, String fileName) throws BusinessException {    File file = new File(sourceDir);    File[] files = file.listFiles();    if (files == null || files.length == 0) {      throw new BusinessException(sourceDir + "目录下没有找到文件，请检查是否已经发布招标公告...");    }    for (int i = 0; i < files.length; i++) {      if (files[i].getName().equalsIgnoreCase(fileName)) {        copyFile(files[i], tarDir + File.separator + fileName);      }    }  }  /**   * 执行具体的数据导入操作，主要包括：   * 1、将附件写到中间件容器下的指定目录下；   * 2、往文章表AP_ARTICLE中写入新加入的文章标题、文章htm文件位置路径记录；   * 3、往文章表和栏目的关联表AP_ARTICLE_PORTLET表中插入与2对应的记录；   */  @Override  public int doImportData(ElementConditionDto dto, RequestMeta meta, String rootPath) {    String dtName = this.getDataTypeName();    DataExchangeListPanel.setProgressText(dtName + "开始进行数据导入...");    Map<String, Boolean> filesSent = new HashMap<String, Boolean>();    //先进行文件发送和保存，只有保存成功后，才能够往下走    toSendFiles(rootPath, filesSent, meta);    String title = null;    String href = null;    String pletID = "189";    if (this.commonParameters != null && this.commonParameters.get("OPT_ZC_PLET_BID") != null) {      pletID = this.commonParameters.get("OPT_ZC_PLET_BID");    }    List<DataExchangeLog> logList = new ArrayList<DataExchangeLog>();    this.getExchangeDataLogModel().setImportDataList(logList);    int succCount = 0;    DataExchangeListPanel.setProgressText(dtName + "共有" + this.dataList.size() + "条数据需要导入...");    //对文件写入成功部分记录写入数据库标题表中和关系表中；    for (int i = 0; i < this.dataList.size(); i++) {      DataExchangeListPanel.setProgressText(dtName + "正在处理第" + (i + 1) + "条数据...");      ZcEbBulletin bulletin = ((ZcEbBulletin) this.dataList.get(i));      title = bulletin.getProjCode() + ".ztb";      //AttachmentFile attFile = this.attachmentDataMap.get(bulletin.getBulletinID()).get("html_file");      //href = attFile.getTargetFilePath() + File.separator + attFile.getFileName();      String submitRes = null;      String execptionText = null;      boolean insertRes = false;      try {        DataExchangeListPanel.setProgressText(dtName + "正在发送业务数据...");        //导出需求明细文档        for (int ii = 0; ii < this.getDataList().size(); ii++) {          ZcEbBulletin bltin = (ZcEbBulletin) this.getDataList().get(ii);          List packList = bltin.getZcEbProj().getPackList();          int s = dtName.indexOf("【") + 1;          int e = dtName.indexOf("】") > 0 ? dtName.indexOf("】") : dtName.length();          for (int j = 0; j < packList.size(); j++) {            ZcEbPack pack = (ZcEbPack) packList.get(j);            List reqList = pack.getRequirementDetailList();            for (int k = 0; k < reqList.size(); k++) {              DataExchangeListPanel.setProgressText(dtName + "正在发送文件到服务器......");              ZcEbPackReq req = (ZcEbPackReq) reqList.get(k);              ZcEbRequirementDetail detail = req.getRequirementDetail();              String fileID = detail.getItemAttachBlobid();              AsFile asFile = new AsFile();              asFile.setFileName(detail.getItemAttach());              asFile.setFileId(fileID);              String dataTypeRoot = rootPath + File.separator + dtName.substring(s, e) + CommonDataExchangeOperator.suffix;              doSendLittleFileToServerAsFileTable(asFile, dataTypeRoot, meta);            }            //如果是询价，那么还需要将询价单的附件一块拷贝            if (ZcSettingConstants.PITEM_OPIWAY_XJ.equals(pack.getPurType())) {              for (int l = 0; l < pack.getXunJiaList().size(); l++) {                ZcEbXunJia xj = (ZcEbXunJia) pack.getXunJiaList().get(l);                if (xj.getSpTechFileId() != null && !"".equals(xj.getSpTechFileId())) {                  String fileID = xj.getSpTechFileId();                  AsFile asFile = new AsFile();                  asFile.setFileName(xj.getSpTechFileName());                  asFile.setFileId(fileID);                  String dataTypeRoot = rootPath + File.separator + dtName.substring(s, e) + CommonDataExchangeOperator.suffix;                  doSendLittleFileToServerAsFileTable(asFile, dataTypeRoot, meta);                }              }            }          }        }        insertRes = this.getZcEbBulletinServiceDelegate().pubBulletinFN(title, meta.getSvUserName(), href, pletID, meta, bulletin);        if (insertRes) {          submitRes = "将招标公告相关文件成功发布到指定位置，同时，将标题信息和栏目信息插入到数据库中;";          succCount++;        } else {          submitRes = "公告发布失败...";        }      } catch (Exception e) {        insertRes = false;        execptionText = e.getMessage();        System.out.println(e.getMessage());      } finally {        //写日志        DataExchangeLog log = new DataExchangeLog();        log.setDataTypeID(this.getDataTypeID());        log.setDataTypeName(dtName);        log.setGentType("IN");        log.setDetailInfo(submitRes);        log.setExceptText(execptionText);        log.setOptDateTime(new Date());        log.setRecSrcID(bulletin.getBulletinID());        log.setRecSrcName(bulletin.getProjName());        log.setRecSrcTab(this.getMainTableName());        log.setRecStatus(insertRes == true ? "导入成功" : "导入失败");        log.setUserID(meta.getSvUserID());        logList.add(log);      }    }    DataExchangeListPanel.setProgressText(dtName + "数据导入完成...");    return succCount;  }  public void toSendFiles(String rootPath, Map<String, Boolean> filesSent, RequestMeta meta) {    Iterator<String> it = this.attachmentDataMap.keySet().iterator();    while (it.hasNext()) {      Map<String, AttachmentFile> curr = this.attachmentDataMap.get(it.next());      Iterator<String> tempIt = curr.keySet().iterator();      Boolean submitRes = true;      String bulletinID = null;      while (tempIt.hasNext()) {        DataExchangeListPanel.setProgressText(this.getDataTypeName() + "正在准备发送附件文件...");        AttachmentFile attFile = curr.get(tempIt.next());        bulletinID = attFile.getBelongToIdentify();        submitRes = submitRes && doSendFiles(attFile, rootPath, meta);      }      filesSent.put(bulletinID, submitRes);    }  }  @Override  public Map<String, Map<String, AttachmentFile>> getAttachmentDataMap() {    return this.attachmentDataMap;  }  private IZcEbBulletinServiceDelegate getZcEbBulletinServiceDelegate() {    if (this.zcEbBulletinServiceDelegate == null) {      zcEbBulletinServiceDelegate = (IZcEbBulletinServiceDelegate) ServiceFactory.create(IZcEbBulletinServiceDelegate.class,      "zcEbBulletinServiceDelegate");    }    return this.zcEbBulletinServiceDelegate;  }}
package com.ufgov.zc.client.zc.bulletin;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_CO_NAME;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.Hashtable;import java.util.List;import javax.swing.JOptionPane;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.CompanyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.datacache.CompanyDataCache;import com.ufgov.zc.client.zc.WordFileUtil;import com.ufgov.zc.client.zc.freemarker.ITemplateToDocumentHandler;import com.ufgov.zc.client.zc.freemarker.TemplateToDocumentFactory;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.ZcEbBulletinConstants;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcEbBulletin;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;public class ZcEbBulletinChgEditPanel extends AbstractZcEbBulletinEditPanel {  public ZcEbBulletinChgEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus, ZcEbBulletinChgListPanel listPanel) {    super(parent, listCursor, tabStatus, listPanel, ZcEbBulletinConstants.COMPO_ZC_EB_BULLETIN_CHG);  }  @Override  protected String getCompId() {    // TCJLODO Auto-generated method stub    return ZcEbBulletinConstants.COMPO_ZC_EB_BULLETIN_CHG;  }  @Override  protected String getModelName() {    // TCJLODO Auto-generated method stub    return ZcEbBulletinConstants.TITLE_ZC_EB_BULLETIN_CHG;  }  @Override  protected String getBulletinType() {    // TCJLODO Auto-generated method stub    return ZcEbBulletinConstants.TYPE_BULLETIN_CHG;  }  @Override  public String getSqlMapSelectedProj() {    return "ZcEbProj.getZcEbProjForMoreBul";  }  @Override  public String getOpiWay() {    StringBuffer sb = new StringBuffer();    sb.append("'").append(ZcSettingConstants.PITEM_OPIWAY_GKZB).append("',");    sb.append("'").append(ZcSettingConstants.PITEM_OPIWAY_YQZB).append("',");    //    sb.append("'").append(ZcSettingConstants.PITEM_OPIWAY_XJ).append("',");    sb.append("'").append(ZcSettingConstants.PITEM_OPIWAY_JZXTP).append("'");    return sb.toString();  }  @Override  public String getSqlMapSelectedMold() {    return "ZcEbBulletinWordMold.getZcEbBulletinWordMoldChg";  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    String columNames[] = { "项目编号", "项目名称", "预算", "采购类型", "采购单位", "负责人", "电话", "邮件", "传真", /*"是否发布采购公告", "是否发布采购结果" */};    ProjHandler handler = new ProjHandler(columNames);    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText2("forBiangengBulletin");    dto.setStatus("exec");    dto.setNd(requestMeta.getSvNd());    ForeignEntityFieldEditor projField = new ForeignEntityFieldEditor("ZcEbProj.getAllZcEbProjByConditions", dto, 20, handler, columNames, "招标编号", "zcEbProj.projCode");    TextFieldEditor projName = new TextFieldEditor("项目名称", "zcEbProj.projName");    DateFieldEditor openBidTime = new DateFieldEditor("开标时间", "zcEbPlan.openBidTime", DateFieldEditor.TimeTypeH24);    AsValFieldEditor fieldBulletinStatus = new AsValFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_BULLETIN_STATUS), "bulletinStatus", "ZC_EB_BULLETIN_STATUS");    TextFieldEditor fieldInputorName = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_INPUTOR_NAME), "executor");    if (WorkEnv.getInstance().containRole(ZcSettingConstants.ROLE_GYS_NORMAL)) {      fieldBulletinStatus.setVisible(false);      fieldMoldName.setVisible(false);      fieldInputorName.setVisible(false);    }    CompanyFieldEditor zcCoCode = new CompanyFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_CO_NAME), "coCode");    Integer[] allowMinutes = { 0, 10, 20, 30, 40, 50 };    DateFieldEditor failureDate = new DateFieldEditor("公告发布时间", "failureDate", DateFieldEditor.TimeTypeH24, allowMinutes, true);    DateFieldEditor bullPublishDate = new DateFieldEditor("首发公告时间", "bullPublishDate", DateFieldEditor.TimeTypeH24, allowMinutes, true);    AsValFieldEditor zcPifuCgfs = new AsValFieldEditor("采购方式", "zcEbProj.purType", "ZC_VS_PITEM_OPIWAY");    editorList.add(projField);    editorList.add(projName);    editorList.add(fieldBulletinStatus);    editorList.add(zcPifuCgfs);    //    editorList.add(fieldZcMakeCode);    //    editorList.add(fieldZcMakeName);    editorList.add(openBidTime);    return editorList;  }  @Override  protected boolean checkBeforeSave(boolean isSend) {    if (super.checkBeforeSave(isSend)) {      ZcEbBulletin bulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();      if (bulletin.getFailureDate() == null || bulletin.getFailureDate().before(new Date())) {        JOptionPane.showMessageDialog(this.parent, "请正确填写[公告发布时间]", "提示", JOptionPane.WARNING_MESSAGE);        return false;      }      return true;    }    return false;  }  @Override  public void doReplaceBookMarks() {    if (!checkBeforeSave(false)) { return; }    if (replaceValue == null || replaceValue.equals("")) { return; }    ZcEbBulletin bulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH时mm分");    String midStr = replaceValue.replaceAll("\\$", "#");    //公告发布时间    String reg = "ZB_PUBLISH_TIME#####[^@]*@@@@@";    String rep = "ZB_PUBLISH_TIME#####" + sdf.format(bulletin.getFailureDate()) + "@@@@@";    midStr = midStr.replaceAll(reg, rep);    replaceValue = midStr.replaceAll("#", "\\$");    super.doReplaceBookMarks();  }  @Override  protected void createMakeCode() {    String[] columNames = { "项目编码", "项目名称", "分包编码", "分包名称", "预算单位" };    ProjHandler handler = new ProjHandler(columNames);    fieldZcMakeCode = new ForeignEntityFieldEditor(getSqlMapSelectedProj(), getFindProjConditions(), 20, handler, columNames, LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE),      "packName");  }  @Override  public String fetchSn(ZcEbBulletin sheet) {    //变更公告projCode存放的是分包的编号    ZcEbPack pack = (ZcEbPack) zcEbBaseServiceDelegate.queryObject("ZcEbProj.getZcEbPackForPrintByPackCode", sheet.getProjCode(), requestMeta);    return pack.getEntrustCode();  }  private class ProjHandler implements IForeignEntityHandler {    protected String columNames[];    public ProjHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      selectProj(selectedDatas);    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = rowData.getProjSum();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE", rowData.getPurType());        data[i][col++] = CompanyDataCache.getName(rowData.getCoCode());        data[i][col++] = rowData.getManager();        data[i][col++] = rowData.getPhone();        data[i][col++] = rowData.getEmail();        data[i][col++] = rowData.getFax();      }      MyTableModel model = new MyTableModel(data, columNames) {        @Override        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }    public void afterClear() {      listCursor.setCurrentObject(null);      refreshData();    }  }  protected void selectProj(List selectedDatas) {    if (selectedDatas != null && selectedDatas.size() > 0) {      ZcEbProj proj = (ZcEbProj) selectedDatas.get(0);      ZcEbBulletin bulletin = (ZcEbBulletin) listCursor.getCurrentObject();      proj = zcEbProjServiceDelegate.getZcEbProjByProjCode(proj.getProjCode(), requestMeta);      bulletin.setZcEbProj(proj);      bulletin.setProjCode(proj.getProjCode());      bulletin.setProjName(proj.getProjName() + "变更公告");      bulletin.setZcEbPlan(proj.getPlan());      bulletin.setBulletinType(getBulletinType(proj.getPurType()));      setEditingObject(bulletin);      Hashtable userData = new Hashtable();      userData.put("bulletin", bulletin);      ITemplateToDocumentHandler handler = TemplateToDocumentFactory.getInstance().getHandler(bulletin.getBulletinType());      if (handler == null) {        JOptionPane.showMessageDialog(this.parent, "没有找到询价招标模版，请手工编制询价招标公告", "提示", JOptionPane.WARNING_MESSAGE);        return;      }      fileName = handler.createDocumnet(userData);      if (wordPane != null) {        wordPane.close(false);      }      wordPane.open(fileName);    }  }  private String getBulletinType(String purType) {    // TCJLODO Auto-generated method stub    String rtn = null;    if (ZcSettingConstants.PITEM_OPIWAY_GKZB.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG;    } else if (ZcSettingConstants.PITEM_OPIWAY_JZXTP.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG;    } else if (ZcSettingConstants.PITEM_OPIWAY_YQZB.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG;    } else if (ZcSettingConstants.PITEM_OPIWAY_DYLY.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG;    } else if (ZcSettingConstants.PITEM_OPIWAY_XJ.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG_XJ;    } else if (ZcSettingConstants.PITEM_OPIWAY_QT.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG;    } else if (ZcSettingConstants.PITEM_OPIWAY_ZXJJ.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG;    }    return rtn;  }  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null          && (fd.getFieldName().equals("zcMakeName") || fd.getFieldName().equals("bulletinID") || fd.getFieldName().equals("bulletinStatus")          || fd.getFieldName().equals("executeDate") || fd.getFieldName().equals("executor") || fd.getFieldName().equals("moldName") ||          fd.getFieldName().equals("coCode") || fd.getFieldName().equals("projName") || fd.getFieldName().equals("zcPProMake.zcXieYiEndDate") || fd          .getFieldName().equals("zcEbPlan.sellStartTime") || fd          .getFieldName().equals("zcEbPlan.sellEndTime") || fd          .getFieldName().equals("") || fd          .getFieldName().equals("zcEbProj.projName") || fd.getFieldName().equals("packPlan.openBidTime") || fd          .getFieldName().equals("zcEbPlan.bidEndTime") || fd.getFieldName().equals("zcEbPlan.openBidTime") || fd.getFieldName().equals("zcEbPlan.openBidAddress") || fd.getFieldName().equals(            "zcEbProj.purType"))) {          fd.setEnabled(false);        } else {          fd.setEnabled(true);        }      }      if (detailTablePanel != null) detailTablePanel.getTable().setEnabled(true);      if (bottomToolBar1 != null) bottomToolBar1.setVisible(true);    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      if (detailTablePanel != null) detailTablePanel.getTable().setEnabled(false);      if (bottomToolBar1 != null) bottomToolBar1.setVisible(false);    }  }  protected void addButtonMenu(String tabStatus) {    toolBar.add(editButton);    //    toolBar.add(loadMoldButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    //    toolBar.add(releaseButton);    //    toolBar.add(downloadButton);    toolBar.add(traceButton);    toolBar.add(sendButton);    toolBar.add(callbackButton);    toolBar.add(suggestPassButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(exitButton);  }  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(getCompId());    addButtonMenu(this.tabStatus);    loadMoldButton.setEnabled(false);    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave(true);      }    });    downloadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        WordFileUtil.doSaveWordFile("采购公告.doc", wordPane, self);      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSend();      }    });    isSendToNextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSendNext();      }    });    releaseButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPublish();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doTrace();      }    });    loadMoldButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doReplaceBookMarks();      }    });    callbackButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doCallback();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 审核        doAudit();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核        doSuggestPass();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 销审        doUnAudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退回        doUnTread();      }    });    deleteButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        //        doPrint();      }    });    openNotepadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        //        doOpenNotepad();      }    });  }}
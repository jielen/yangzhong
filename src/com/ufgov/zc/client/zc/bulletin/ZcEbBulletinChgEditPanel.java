package com.ufgov.zc.client.zc.bulletin;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_CO_NAME;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.io.Reader;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.HashMap;import java.util.Hashtable;import java.util.List;import java.util.Map;import javax.swing.JOptionPane;import javax.swing.table.TableModel;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.CompanyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.datacache.CompanyDataCache;import com.ufgov.zc.client.util.NumUtil;import com.ufgov.zc.client.zc.WordFileUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.freemarker.ITemplateToDocumentHandler;import com.ufgov.zc.client.zc.freemarker.TemplateToDocumentFactory;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.constants.ZcValSetConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BaseException;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.ZcEbBulletinConstants;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcEbBulletin;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;public class ZcEbBulletinChgEditPanel extends AbstractZcEbBulletinEditPanel {  IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");  public ZcEbBulletinChgEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus, ZcEbBulletinChgListPanel listPanel) {    super(parent, listCursor, tabStatus, listPanel, ZcEbBulletinConstants.COMPO_ZC_EB_BULLETIN_CHG);  }  @Override  protected String getCompId() {    // TCJLODO Auto-generated method stub    return ZcEbBulletinConstants.COMPO_ZC_EB_BULLETIN_CHG;  }  @Override  protected String getModelName() {    // TCJLODO Auto-generated method stub    return ZcEbBulletinConstants.TITLE_ZC_EB_BULLETIN_CHG;  }  @Override  protected String getBulletinType() {    // TCJLODO Auto-generated method stub    return ZcEbBulletinConstants.TYPE_BULLETIN_CHG;  }  @Override  public String getSqlMapSelectedProj() {    return "ZcEbProj.getZcEbProjForMoreBul";  }  @Override  public String getOpiWay() {    StringBuffer sb = new StringBuffer();    sb.append("'").append(ZcSettingConstants.ZC_CGFS_GKZB).append("',");    sb.append("'").append(ZcSettingConstants.ZC_CGFS_YQZB).append("',");    //    sb.append("'").append(ZcSettingConstants.PITEM_OPIWAY_XJ).append("',");    sb.append("'").append(ZcSettingConstants.ZC_CGFS_JZXTP).append("'");    return sb.toString();  }  @Override  public String getSqlMapSelectedMold() {    return "ZcEbBulletinWordMold.getZcEbBulletinWordMoldChg";  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    String columNames[] = { "项目编号", "项目名称", "预算", "采购类型", "采购单位", "负责人", "电话", "邮件", "传真", /*"是否发布采购公告", "是否发布采购结果" */};    ProjHandler handler = new ProjHandler(columNames);    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText2("forBiangengBulletin");    dto.setStatus("exec");    dto.setNd(requestMeta.getSvNd());    dto.setZcText3(requestMeta.getSvCoCode());    ForeignEntityFieldEditor projField = new ForeignEntityFieldEditor("ZcEbProj.getAllZcEbProjByConditions", dto, 20, handler, columNames, "招标编号", "zcEbProj.projCode");    TextFieldEditor projName = new TextFieldEditor("项目名称", "zcEbProj.projName");    DateFieldEditor openBidTime = new DateFieldEditor("开标时间", "zcEbPlan.openBidTime", DateFieldEditor.TimeTypeH24);    AsValFieldEditor fieldBulletinStatus = new AsValFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_BULLETIN_STATUS), "bulletinStatus", "ZC_EB_BULLETIN_STATUS");    TextFieldEditor fieldInputorName = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_INPUTOR_NAME), "executor");    if (WorkEnv.getInstance().containRole(ZcSettingConstants.ROLE_GYS_NORMAL)) {      fieldBulletinStatus.setVisible(false);      fieldMoldName.setVisible(false);      fieldInputorName.setVisible(false);    }    CompanyFieldEditor zcCoCode = new CompanyFieldEditor(LangTransMeta.translate(FIELD_TRANS_ZC_CO_NAME), "coCode");    Integer[] allowMinutes = { 0, 10, 20, 30, 40, 50 };    DateFieldEditor failureDate = new DateFieldEditor("公告发布时间", "failureDate", DateFieldEditor.TimeTypeH24, allowMinutes, true);    DateFieldEditor bullPublishDate = new DateFieldEditor("首发公告时间", "bullPublishDate", DateFieldEditor.TimeTypeH24, allowMinutes, true);    AsValFieldEditor zcPifuCgfs = new AsValFieldEditor("采购方式", "zcEbProj.purType", "ZC_VS_PITEM_OPIWAY");    editorList.add(projField);    editorList.add(projName);    editorList.add(fieldBulletinStatus);    editorList.add(zcPifuCgfs);    //    editorList.add(fieldZcMakeCode);    //    editorList.add(fieldZcMakeName);    editorList.add(openBidTime);    return editorList;  }  @Override  protected boolean checkBeforeSave(boolean isSend) {    ZcEbBulletin bulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    if (bulletin.getProjCode() == null) {      JOptionPane.showMessageDialog(this.parent, "请选择一个项目", "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  @Override  public void doReplaceBookMarks() {    if (!checkBeforeSave(false)) { return; }    if (replaceValue == null || replaceValue.equals("")) { return; }    ZcEbBulletin bulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH时mm分");    String midStr = replaceValue.replaceAll("\\$", "#");    //公告发布时间    String reg = "ZB_PUBLISH_TIME#####[^@]*@@@@@";    String rep = "ZB_PUBLISH_TIME#####" + sdf.format(bulletin.getFailureDate()) + "@@@@@";    midStr = midStr.replaceAll(reg, rep);    replaceValue = midStr.replaceAll("#", "\\$");    super.doReplaceBookMarks();  }  @Override  protected void createMakeCode() {    String[] columNames = { "项目编码", "项目名称", "分包编码", "分包名称", "预算单位" };    ProjHandler handler = new ProjHandler(columNames);    fieldZcMakeCode = new ForeignEntityFieldEditor(getSqlMapSelectedProj(), getFindProjConditions(), 20, handler, columNames, LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE),      "packName");  }  @Override  public String fetchSn(ZcEbBulletin sheet) {    //变更公告projCode存放的是分包的编号    ZcEbPack pack = (ZcEbPack) zcEbBaseServiceDelegate.queryObject("ZcEbProj.getZcEbPackForPrintByPackCode", sheet.getProjCode(), requestMeta);    return pack.getEntrustCode();  }  private class ProjHandler implements IForeignEntityHandler {    protected String columNames[];    public ProjHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      selectProj(selectedDatas);    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = rowData.getProjSum();        data[i][col++] = AsValDataCache.getName(ZcValSetConstants.VS_ZC_VS_PITEM_OPIWAY, rowData.getPurType());        data[i][col++] = CompanyDataCache.getName(rowData.getCoCode());        data[i][col++] = rowData.getManager();        data[i][col++] = rowData.getPhone();        data[i][col++] = rowData.getEmail();        data[i][col++] = rowData.getFax();      }      MyTableModel model = new MyTableModel(data, columNames) {        @Override        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }    public void afterClear() {      listCursor.setCurrentObject(null);      refreshData();    }  }  protected void selectProj(List selectedDatas) {    if (selectedDatas != null && selectedDatas.size() > 0) {      ZcEbProj proj = (ZcEbProj) selectedDatas.get(0);      ZcEbBulletin bulletin = (ZcEbBulletin) listCursor.getCurrentObject();      proj = zcEbProjServiceDelegate.getZcEbProjByProjCode(proj.getProjCode(), requestMeta);      bulletin.setZcEbProj(proj);      bulletin.setProjCode(proj.getProjCode());      bulletin.setProjName(proj.getProjName() + "变更公告");      bulletin.setZcEbPlan(proj.getPlan());      bulletin.setBulletinType(getBulletinType(proj.getPurType()));      setEditingObject(bulletin);      Hashtable userData = new Hashtable();      userData.put("bulletin", bulletin);      ITemplateToDocumentHandler handler = TemplateToDocumentFactory.getInstance().getHandler(bulletin.getBulletinType());      if (handler == null) {        JOptionPane.showMessageDialog(this.parent, "没有找到询价招标模版，请手工编制询价招标公告", "提示", JOptionPane.WARNING_MESSAGE);        return;      }      fileName = handler.createDocumnet(userData);      if (wordPane != null) {        wordPane.close(false);      }      wordPane.open(fileName);    }  }  private String getBulletinType(String purType) {    // TCJLODO Auto-generated method stub    String rtn = null;    if (ZcSettingConstants.ZC_CGFS_GKZB.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG;    } else if (ZcSettingConstants.ZC_CGFS_JZXTP.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG;    } else if (ZcSettingConstants.ZC_CGFS_YQZB.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG;    } else if (ZcSettingConstants.ZC_CGFS_DYLY.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG;    } else if (ZcSettingConstants.ZC_CGFS_XJ.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG_XJ;    } else if (ZcSettingConstants.ZC_CGFS_QT.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG;    } else if (ZcSettingConstants.ZC_CGFS_ZXJJ.equals(purType)) {      rtn = ZcEbBulletin.BIANGENG;    }    return rtn;  }  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null          && (fd.getFieldName().equals("zcMakeName") || fd.getFieldName().equals("bulletinID") || fd.getFieldName().equals("bulletinStatus")          || fd.getFieldName().equals("executeDate") || fd.getFieldName().equals("executor") || fd.getFieldName().equals("moldName") ||          fd.getFieldName().equals("coCode") || fd.getFieldName().equals("projName") || fd.getFieldName().equals("zcPProMake.zcXieYiEndDate") || fd          .getFieldName().equals("zcEbPlan.sellStartTime") || fd          .getFieldName().equals("zcEbPlan.sellEndTime") || fd          .getFieldName().equals("") || fd          .getFieldName().equals("zcEbProj.projName") || fd.getFieldName().equals("packPlan.openBidTime") || fd          .getFieldName().equals("zcEbPlan.bidEndTime") || fd.getFieldName().equals("zcEbPlan.openBidTime") || fd.getFieldName().equals("zcEbPlan.openBidAddress") || fd.getFieldName().equals(            "zcEbProj.purType"))) {          fd.setEnabled(false);        } else {          fd.setEnabled(true);        }      }      if (detailTablePanel != null) detailTablePanel.getTable().setEnabled(true);      if (bottomToolBar1 != null) bottomToolBar1.setVisible(true);    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      if (detailTablePanel != null) detailTablePanel.getTable().setEnabled(false);      if (bottomToolBar1 != null) bottomToolBar1.setVisible(false);    }  }  protected void addButtonMenu(String tabStatus) {    toolBar.add(editButton);    //    toolBar.add(loadMoldButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    //    toolBar.add(releaseButton);    //    toolBar.add(downloadButton);    toolBar.add(traceButton);    toolBar.add(sendButton);    toolBar.add(callbackButton);    toolBar.add(suggestPassButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(exitButton);  }  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(getCompId());    addButtonMenu(this.tabStatus);    loadMoldButton.setEnabled(false);    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave(true);      }    });    downloadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        WordFileUtil.doSaveWordFile("采购公告.doc", wordPane, self);      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        if (ZcUtil.isDljg() && requestMeta.containRole(ZcSettingConstants.ROLE_PUBLISH_BULLETIN)) {          doSendAndPubulishBulletin();        } else {          doSend();        }      }    });    isSendToNextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSendNext();      }    });    releaseButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPublish();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doTrace();      }    });    loadMoldButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doReplaceBookMarks();      }    });    callbackButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doCallback();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 审核        doAudit();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核        doSuggestPass();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 销审        doUnAudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退回        doUnTread();      }    });    deleteButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        //        doPrint();      }    });    openNotepadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        //        doOpenNotepad();      }    });  }  /*   * 填写意见审核   */  public void doSuggestPass() {    ZcEbBulletin zcEbBulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.suggestPassButton.getFuncId());    if (zcEbBulletin.getBulletinStatus().equals(AsOptionMeta.getOptVal(ZcSettingConstants.OPT_ZC_BULLETIN_ZHAOBIAO_BEFORE_PUBLISH_STATUS))      && requestMeta.containRole(ZcSettingConstants.ROLE_PUBLISH_BULLETIN)) {      doAuditAndPublish();    } else {      executeAudit(zcEbBulletin, ZcSettingConstants.IS_GOON_AUDIT_YES, null);    }    /*String jianShenRoleId = AsOptionMeta.getOptVal("OPT_ZC_CGZX_JSKY_ROLE");//监审组员角色    if (WorkEnv.getInstance().containRole(jianShenRoleId)) {//如果是监审员，则不修改审批状态      Integer auditFlag = zcEbBulletin.getIsGoonAudit();      executeAudit(zcEbBulletin, auditFlag, null);    } else {      executeAudit(zcEbBulletin, ZcSettingConstants.IS_GOON_AUDIT_NO, null);    }    */  }  /**   * 审核的同时,生成html文件，并发布   * @return   */  private boolean doAuditAndPublish() {    ZcEbBulletin bulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    //编辑状态下则保存数据    if (ZcSettingConstants.PAGE_STATUS_EDIT.equals(this.pageStatus) && this.saveButton.isVisible()) {      boolean save = saveBeforAudit(bulletin);      if (!save) {        JOptionPane.showMessageDialog(this, "审核失败:\n 审核前的公告保存失败！", "错误", JOptionPane.ERROR_MESSAGE);        return false;      }    }    GkCommentDialog commentDialog = null;    commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(), ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {    return false;    }    bulletin.setIsGoonAudit(ZcSettingConstants.IS_GOON_AUDIT_NO);    bulletin.setComment(commentDialog.getComment());    bulletin.setAuditorId(WorkEnv.getInstance().getCurrUserId());    //因为模板中有发布时间，所以发布时 必须重新填充一次模板    String vistr = null;    if ((vistr = checkBeforePublish()) != null) {      JOptionPane.showMessageDialog(self, vistr, "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    /*    if (bulletin.getBulletinStatus().equalsIgnoreCase(ZcEbBulletinConstants.STATUS_BULLETIN_BID_PUBLISHED)) {          UIUtilities.showStaickTraceDialog(new BaseException(), this, "错误", "公告已经发布,不需要再发布!");          return false;        }*/    /*    if (tabPane.getComponentCount() > 1) {          refreshWordPaneForPub(bulletin);          try {            Thread.sleep(3000);          } catch (InterruptedException e) {          }        }*/    if (!publishToHtml(bulletin.getFileID())) {    return false;    }    if (!readFileByChar(bulletin)) {      UIUtilities.showStaickTraceDialog(new BaseException(), this, "错误", "公告html文件的检查失败!");      //      this.listCursor.setCurrentObject(bulletin);      //      //      this.oldBulletin = (ZcEbBulletin) ObjectUtil.deepCopy(bulletin);      return false;    }    Map<String, String> option = new HashMap<String, String>();    /*    option.put("OPT_ZC_MAIL_FROM_POP", AsOptionMeta.getOptVal("OPT_ZC_MAIL_FROM_POP"));        option.put("OPT_ZC_MAIL_FROM_PORT", AsOptionMeta.getOptVal("OPT_ZC_MAIL_FROM_PORT"));        option.put("OPT_ZC_MAIL_FROM_USER", AsOptionMeta.getOptVal("OPT_ZC_MAIL_FROM_USER"));        option.put("OPT_ZC_MAIL_FROM_PASS", AsOptionMeta.getOptVal("OPT_ZC_MAIL_FROM_PASS"));        option.put("OPT_ZC_MAIL_TO_GKYQ_USER", AsOptionMeta.getOptVal("OPT_ZC_MAIL_TO_GKYQ_USER"));        option.put("OPT_ZC_MAIL_TO_USER", AsOptionMeta.getOptVal("OPT_ZC_MAIL_TO_USER"));        option.put("OPT_ZC_MAIL_TITLE", AsOptionMeta.getOptVal("OPT_ZC_MAIL_TITLE"));        option.put("OPT_ZC_MAIL_INTERFACE_DOWN", AsOptionMeta.getOptVal("OPT_ZC_MAIL_INTERFACE_DOWN"));        option.put("OPT_ZC_MAIL_INTERFACE_SERVER", AsOptionMeta.getOptVal("OPT_ZC_MAIL_INTERFACE_SERVER"));        option.put("OPT_ZC_MAIL_INTERFACE_COMP", AsOptionMeta.getOptVal("OPT_ZC_MAIL_INTERFACE_COMP"));        option.put("OPT_ZC_MAIL_INTERFACE_PASS", AsOptionMeta.getOptVal("OPT_ZC_MAIL_INTERFACE_PASS"));        String code = AsOptionMeta.getOptVal("OPT_ZC_MAIL_INTERFACE_CODE");        if (code != null) {          String[] codes = code.split(";");          for (int i = 0; i < codes.length; i++) {            String[] str = codes[i].split(",");            if (str.length == 2) {              option.put("C-" + str[0].trim(), str[1].trim());            }          }        }        String time = AsOptionMeta.getOptVal("OPT_ZC_MAIL_INTERFACE_TIME");        if (time != null) {          String[] times = time.split(";");          for (int i = 0; i < times.length; i++) {            String[] str = times[i].split(",");            if (str.length == 2) {              option.put("T-" + str[0].trim(), str[1].trim());            }          }        }*/    try {      bulletin = this.getIZcEbBulletinServiceDelegate().publishBulletinFN(bulletin, WorkEnv.getInstance().getWebRoot(), option, requestMeta);    } catch (Exception e) {      UIUtilities.showStaickTraceDialog(e, this, "错误", "公告审核并发布时失败!");      this.listCursor.setCurrentObject(bulletin);      this.oldBulletin = (ZcEbBulletin) ObjectUtil.deepCopy(bulletin);      return false;    }    this.listCursor.setCurrentObject(bulletin);    this.oldBulletin = (ZcEbBulletin) ObjectUtil.deepCopy(bulletin);    this.listPanel.refreshCurrentTabData();    JOptionPane.showMessageDialog(self, "审核并发布成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    updateFieldEditorsEditable();    setButtonStatus();    refreshMainData();    return true;  }  private boolean readFileByChar(ZcEbBulletin bulletin) {    //    File f = new File(AsOptionMeta.getOptVal("OPT_ZC_HTML_FILE_TEMP") + bulletin.getFileID());    String fileName = bulletin.getFileID() + ".htm";    File f = new File(AsOptionMeta.getOptVal("OPT_ZC_HTML_FILE_TEMP") + bulletin.getFileID());    if (!(f.isFile() && f.exists())) {      f = new File(AsOptionMeta.getOptVal("OPT_ZC_HTML_FILE_TEMP") + fileName);    }    for (int i = 0; i < 2; i++) {      if (f.exists()) {        Reader r = null;        int charread = 0;        StringBuffer sb = new StringBuffer();        try {          FileInputStream fis = new FileInputStream(f);          r = new InputStreamReader(fis, "GBK");          char[] tempchars = new char[fis.available()];          while ((charread = r.read(tempchars)) != -1) {            sb.append(tempchars);          }        } catch (Exception e) {          sb = null;        } finally {          if (r != null) {            try {              r.close();            } catch (IOException e) {              e.printStackTrace();            }          }        }        if (sb == null || sb.length() == 0) { return false; }        int from = 0;        while ((from = sb.indexOf("<!--", from + 1)) > 0) {          int to = sb.indexOf("-->", from + 1);          int from2 = sb.indexOf("<!--", from + 1);          if (to > 0 && (to < from2 || from2 < 0)) {            sb.replace(from, to + 3, "");            from--;          }        }        bulletin.setFile(sb);        //        String str = sb.toString();        String str = chuliStr(sb.toString());        bulletin.setFileContent(str);        return true;      }    }    return true;  }  /**   * 处理掉html尾部的异常字符串   * @param str   * @return   */  String chuliStr(String str) {    String tag = "</html>";    int i = str.indexOf(tag);    str = str.substring(0, i + tag.length());    return str;  }  protected String checkBeforePublish() {    // TCJLODO Auto-generated method stub    return null;  }  private boolean saveBeforAudit(ZcEbBulletin bulletin) {    if (!checkBeforeSave(true)) { //先对主表输入进行验证      return false;    }    String oldFileId = bulletin.getFileID();    // 支持直接修改word内容。    wordPane.save(this.fileName);    String fileID = saveBulletinContent();    bulletin.setFileID(fileID);    if (bulletin.getBulletinID() != null && !bulletin.getBulletinID().equals("")) {      this.getIZcEbBulletinServiceDelegate().updateFN(bulletin, requestMeta);    } else {      String bulletinID = NumUtil.getNum(compoId, "BULLETIN_ID", bulletin, requestMeta);      bulletin.setBulletinID(bulletinID);      this.getIZcEbBulletinServiceDelegate().insertFN(bulletin, requestMeta);    }    deleteOldFile(oldFileId);    return true;  }  private void deleteOldFile(String oldFileId) {    // TCJLODO Auto-generated method stub    if (oldFileId == null || oldFileId.trim().length() == 0) { return; }    baseDataServiceDelegate.deleteFile(oldFileId, requestMeta);  }  protected void executeAudit(ZcEbBulletin bulletin, Integer isGoonAudit, String defaultMsg) {    GkCommentDialog commentDialog = null;    ZcEbBulletin afterSaveBill = null;    if (defaultMsg == null) {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL);    } else {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL, defaultMsg);    }    if (commentDialog.cancel) {    return;    }    boolean success = true;    String errorInfo = "";    try {      //编辑状态下则保存数据      if (ZcSettingConstants.PAGE_STATUS_EDIT.equals(this.pageStatus) && this.saveButton.isVisible()) {        boolean save = saveBeforAudit(bulletin);        if (!save) {          JOptionPane.showMessageDialog(this, "审核失败:\n 审核前的公告保存失败！", "错误", JOptionPane.ERROR_MESSAGE);          return;        }      }      isGoonAudit = isGoonAudit == null ? 0 : isGoonAudit;      bulletin.setIsGoonAudit(isGoonAudit);      bulletin.setComment(commentDialog.getComment());      bulletin.setAuditorId(WorkEnv.getInstance().getCurrUserId());      //      this.getIZcEbBulletinServiceDelegate().updateFN(bulletin, requestMeta);      afterSaveBill = this.getIZcEbBulletinServiceDelegate().auditFN(bulletin, requestMeta);    } catch (Exception e) {      success = false;      e.printStackTrace();      errorInfo += e.getMessage();    }    if (success) {      //this.refreshData();      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      setButtonStatus();      refreshMainData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /**   * 代理机构不走流程   */  private void doSendAndPubulishBulletin() {    ZcEbBulletin bulletin = (ZcEbBulletin) this.listCursor.getCurrentObject();    //编辑状态下则保存数据    if (ZcSettingConstants.PAGE_STATUS_EDIT.equals(this.pageStatus) && this.saveButton.isVisible()) {      boolean save = saveBeforAudit(bulletin);      if (!save) {        JOptionPane.showMessageDialog(this, "发布失败:\n 发布前的公告保存失败！", "错误", JOptionPane.ERROR_MESSAGE);        return;      }    }    bulletin.setIsGoonAudit(ZcSettingConstants.IS_GOON_AUDIT_NO);    bulletin.setComment("");    bulletin.setAuditorId(WorkEnv.getInstance().getCurrUserId());    //因为模板中有发布时间，所以发布时 必须重新填充一次模板    String vistr = null;    if ((vistr = checkBeforePublish()) != null) {      JOptionPane.showMessageDialog(self, vistr, "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    if (tabPane.getComponentCount() > 1) {      refreshWordPaneForPub(bulletin);      try {        Thread.sleep(3000);      } catch (InterruptedException e) {      }    }    if (!publishToHtml(bulletin.getFileID())) {    return; }    if (!readFileByChar(bulletin)) {      UIUtilities.showStaickTraceDialog(new BaseException(), this, "错误", "公告html文件的检查失败!");      //      this.listCursor.setCurrentObject(bulletin);      //      //      this.oldBulletin = (ZcEbBulletin) ObjectUtil.deepCopy(bulletin);      return;    }    ArrayList zl = new ArrayList();    zl.add(bulletin);    boolean isSuccess = true;    try {      requestMeta.setFuncId("send&publish");      this.getIZcEbBulletinServiceDelegate().newCommitFN(zl, requestMeta);    } catch (Exception e) {      isSuccess = false;      e.printStackTrace();      JOptionPane.showMessageDialog(self, "发布失败！" + e.getMessage(), "提示", JOptionPane.ERROR_MESSAGE);    }    if (isSuccess) {      HashMap parameter = new HashMap();      parameter.put("BULLETIN_ID", bulletin.getBulletinID());      List list = zcEbBaseServiceDelegate.queryDataForList("ZcEbBulletin.readBulletinById", parameter, requestMeta);      if (list != null && list.size() > 0) {        bulletin = (ZcEbBulletin) list.get(0);      }      this.listCursor.setCurrentObject(bulletin);      this.oldBulletin = (ZcEbBulletin) ObjectUtil.deepCopy(bulletin);      this.listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(self, "发布成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      this.refreshDataOnly();      setButtonStatus();    }  }}
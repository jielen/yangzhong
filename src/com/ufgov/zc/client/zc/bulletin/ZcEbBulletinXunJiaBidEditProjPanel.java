package com.ufgov.zc.client.zc.bulletin;import java.util.ArrayList;import java.util.Date;import java.util.List;import javax.swing.JOptionPane;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UserFuncBean;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.DateField;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.zc.WordFileUtil;import com.ufgov.zc.client.zc.project.integration.ZcEbProjectEditFrame;import com.ufgov.zc.client.zc.project.integration.ZcEbProjectListPanel;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BaseException;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.model.UserFunc;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.ZcEbBulletinConstants;import com.ufgov.zc.common.zc.model.ZcEbBulletin;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMold;import com.ufgov.zc.common.zc.model.ZcEbPlan;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbProjZbFile;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbBulletinWordMoldServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbPlanServiceDelegate;public class ZcEbBulletinXunJiaBidEditProjPanel extends AbstractZcEbBulletinEditProjPanel {  private DateFieldEditor fieldInputDate;  public ZcEbBulletinXunJiaBidEditProjPanel(ZcEbProjectEditFrame dself, ListCursor listCursor, String tabStatus, ZcEbProjectListPanel listPanel,  String fieldSn, ZcEbProj proj) {    super(dself, listCursor, tabStatus, listPanel, ZcEbBulletinConstants.COMPO_ZC_EB_BULLETIN_XUN_JIA_BID, fieldSn, proj);  }  public void callBackRefreshDate() {    ZcEbBulletin bulletin = (ZcEbBulletin) listCursor.getCurrentObject();    if (bulletin != null && bulletin.getProjCode() != null) {      IZcEbPlanServiceDelegate zcEbPlanServiceDelegate = (IZcEbPlanServiceDelegate) ServiceFactory.create(IZcEbPlanServiceDelegate.class,      "zcEbPlanServiceDelegate");      ElementConditionDto elementConditionDto = new ElementConditionDto();      elementConditionDto.setProjCode(bulletin.getProjCode());      List list = zcEbPlanServiceDelegate.getZcEbPlan(elementConditionDto, requestMeta);      if (list != null && list.size() > 0) {        ZcEbPlan plane = (ZcEbPlan) list.get(0);        bulletin.getZcPProMake().setZcXieYiEndDate(plane.getBidEndTime());      }      //setEditingObject(bulletin);    }  }  protected String refreshMainData() {    super.refreshMainData();    UserFunc userFunc = new UserFunc();    userFunc.setUserId(WorkEnv.getInstance().getCurrUserId());    userFunc.setCompoId(getCompId());    userFunc.setFuncId(releaseButton.getFuncId());    ZcEbBulletin bulletin = (ZcEbBulletin) listCursor.getCurrentObject();    if ("0".equals(bulletin.getBulletinStatus()) && UserFuncBean.isGrant(userFunc)) {      releaseButton.setVisible(true);    } else {      releaseButton.setVisible(false);    }    if (proj.getProcessInstId() != null && proj.getProcessInstId() < 0) {      editButton.setVisible(true);    } else {      editButton.setVisible(false);    }    return bulletin.getFileID();  }  public String getSqlMapSelectedProj() {    return "ZcEbProj.getZcEbProj";  }  protected ElementConditionDto getFindProjConditions() {    ElementConditionDto dto = new ElementConditionDto();    dto.setStatus("specialNum12345--");    dto.setManageCode(this.requestMeta.getSvUserID());    dto.setZcText0("'" + ZcSettingConstants.PITEM_OPIWAY_XJ + "'");    dto.setProjCode(this.fieldSn);    return dto;  }  @Override  protected String getBulletinType() {    // TCJLODO Auto-generated method stub    return ZcEbBulletinConstants.TYPE_BULLETIN_XUN_JIA_BID;  }  @Override  protected String getStatus() {    // TCJLODO Auto-generated method stub    IZcEbBaseServiceDelegate zcEbBaseServiceDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class,    "zcEbBaseServiceDelegate");    List status = zcEbBaseServiceDelegate.getForeignEntitySelectedData("ZcEbProj.getProjThuType", getFindProjConditions(), requestMeta);    if (status.size() == 0 || status.get(0) == null) {//状态有可能为空 add wangwei on 2011-10-26       return "";    }    return status.get(0).toString();  }  public String getSqlMapSelectedMold() {    return "ZcEbBulletinWordMold.getZcEbBulletinWordMoldXunJiaBid";  }  @Override  protected String getCompId() {    // TCJLODO Auto-generated method stub    return ZcEbBulletinConstants.COMPO_ZC_EB_BULLETIN_XUN_JIA_BID;  }  @Override  protected String getModelName() {    // TCJLODO Auto-generated method stub    return ZcEbBulletinConstants.TITLE_ZC_EB_BULLETIN_XUN_JIA_DA;  }  public boolean doPublish() {    requestMeta.setFuncId(releaseButton.getFuncId());    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return false;        }      } else {        listCursor.setCurrentObject(oldBulletin);      }    }    //因为模板中有发布时间，所以发布时 必须重新填充一次模板    ZcEbBulletin bulletin = (ZcEbBulletin) listCursor.getCurrentObject();    //loadWord(bulletin.getZcMakeCode(), bulletin.getMoldCode());//暂时取消自动填充    //    String fileID = saveBulletinContent();    //    bulletin.setFileID(fileID);    //    this.getIZcEbBulletinServiceDelegate().updateFN(bulletin, requestMeta);    String vistr = null;    if ((vistr = checkBeforePublish()) != null) {      JOptionPane.showMessageDialog(self, vistr, "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    if (bulletin.getBulletinStatus().equalsIgnoreCase(ZcEbBulletinConstants.STATUS_BULLETIN_BID_PUBLISHED)) {      UIUtilities.showStaickTraceDialog(new BaseException(), this, "错误", "公告已经发布,不需要再发布!");      return false;    }    ZcEbProjZbFile zcEbProjZbFile = this.getIZcEbBulletinServiceDelegate().getZcEbProjZbFile(bulletin.getProjCode(), "0", requestMeta);    String title = bulletin.getProjCode() + ".ztb";    String attachFileName = "";    //获得招标文件信息    if (zcEbProjZbFile != null && zcEbProjZbFile.getFileName() != null) {      attachFileName = zcEbProjZbFile.getFileName();      WordFileUtil.createFile(AsOptionMeta.getOptVal("OPT_ZC_ATTACH_FILE_TEMP"), AsOptionMeta.getOptVal("OPT_ZC_ATTACH_FILE_TEMP") + title, this,      WordFileUtil.getFileContent(zcEbProjZbFile.getFileId()));    }    //插入招标文件并转换公告为html网页    if (!publishToHtml(bulletin.getFileID(), attachFileName)) {      return false;    }    bulletin.setBulletinStatus(ZcEbBulletinConstants.STATUS_BULLETIN_BID_PUBLISHED);    bulletin.setEffectiveDate(new java.util.Date());    this.getIZcEbBulletinServiceDelegate().updateFN(bulletin, requestMeta);    this.listCursor.setCurrentObject(bulletin);    this.oldBulletin = (ZcEbBulletin) ObjectUtil.deepCopy(bulletin);    this.listPanel.refreshCurrentTabData();    JOptionPane.showMessageDialog(self, "发布成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    updateFieldEditorsEditable();    setButtonStatus();    refreshMainData();    publishFlag = 0;    return true;  }  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> list = super.createFieldEditors();    fieldInputDate = new DateFieldEditor("截止时间", "zcPProMake.zcXieYiEndDate", DateField.TimeTypeH24);    list.add(fieldInputDate);    return list;  }  protected String checkBeforePublish() {    Date curre = requestMeta.getSysDate();    ZcEbBulletin bulletin = (ZcEbBulletin) listCursor.getCurrentObject();    Date endDate = bulletin.getZcPProMake().getZcXieYiEndDate();    if (endDate == null) {      if (fieldInputDate != null)        fieldInputDate.setEnabled(true);      return "截止时间为空，不允许发布！";    }    if (curre.compareTo(endDate) > 0) {      if (fieldInputDate != null)        fieldInputDate.setEnabled(true);      return "截止时间必须晚于当前时间发布时间！";    }    return null;  }  protected void loadWord(String makeCode, String templeId) {    IZcEbBulletinWordMoldServiceDelegate zcEbBulletinWordMoldServiceDelegate = (IZcEbBulletinWordMoldServiceDelegate) ServiceFactory.create(    IZcEbBulletinWordMoldServiceDelegate.class, "zcEbBulletinWordMoldServiceDelegate");    ZcEbBulletinWordMold word = zcEbBulletinWordMoldServiceDelegate.selectMoldByPrimaryKey(templeId, requestMeta);    List selectedDatas = new ArrayList();    selectedDatas.add(word);    handlera.excute(selectedDatas);    doReplaceBookMarks();  }  public void doReplaceBookMarks() {    this.loadMoldButton.setEnabled(false);//填充完之后设为不可用    this.saveButton.setEnabled(true);    ZcEbBulletin bulletin = (ZcEbBulletin) listCursor.getCurrentObject();    ZcEbProj zcEbProj = this.getIZcEbProjServiceDelegate().getZcEbProjByProjCode(bulletin.getProjCode(), requestMeta);    String templeId = wordMold.getFileID().substring(0, wordMold.getFileID().length() - XUNJIA_TEMPLETE_AS_FILE_ID_EXT.length());    boolean isWaitFrelease = true;//"exec".equals(bulletin.getBulletinStatus());    AsFile file = this.getIZcEbProjServiceDelegate().getXunJiaWordContent(zcEbProj, requestMeta, templeId, isWaitFrelease);    file.setFileName(PATH + wordMold.getFileID() + ".doc");    // 创建临时文件    boolean isSucceed = WordFileUtil.createFile(PATH, file.getFileName(), this, file.getFileContent());    if (isSucceed) {      if (wordPane.isDocOpened()) {        wordPane.close();      }      wordPane.open(file.getFileName());    }    this.fileName = file.getFileName();    //WordFileUtil.delete(this.fileName);    wordPane.save(this.fileName);    ifRePalceBookMark = true;    ifLoadMold = false;  }}
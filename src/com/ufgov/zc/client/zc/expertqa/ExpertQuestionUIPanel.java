package com.ufgov.zc.client.zc.expertqa;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Rectangle;import java.awt.event.KeyEvent;import java.awt.event.KeyListener;import java.awt.event.MouseEvent;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.text.DateFormat;import java.text.MessageFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Locale;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JEditorPane;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTabbedPane;import javax.swing.JTextPane;import javax.swing.JTree;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.TreePath;import com.ufgov.zc.common.zc.model.ZcExpertQuestionAllMessage;public class ExpertQuestionUIPanel extends JPanel {  private static final long serialVersionUID = 1L;  private String projCode;  private String packCode;  private String packStatus;  private String object;  private String toObjectName; //  @jve:decl-index=0:  private String selfObjectName;  private Date sendTime = new Date();  public static boolean isChangeColor = false;  public int oldLength = 0;  public int newLength = 0;  //  public boolean isChangeColor() {  //    return isChangeColor;  //  }  //  //  public void setChangeColor(boolean isChangeColor) {  //    this.isChangeColor = isChangeColor;  //  }  /**   * 项目名称   */  private String proName;  /**   * 项目标段   */  private String probd;  /**   * 组织单位   */  private String orgUnit;  /**   * 采购单位   */  private String buyUnit;  /**   * 开标时间   */  private Date beginTime;  /**   * 供应商   */  private String offer;  private JFrame frame;  private JTree objectSelector = null;  private JScrollPane selectorScrollPane = null;  private JEditorPane jEditorPane = null;  private JScrollPane inputDeviceScrollPane = null;  private JButton senderButton = null;  private JButton closeButton = null;  private JScrollPane monitorScrollPane = null;  private JTextPane monitorTextPane = null;  private JTabbedPane monitorTabbedPane = null;  private JPanel currentMonitorPanel = null;  private JPanel historyMonitorPanel = null;  private JScrollPane historyMonitorScrollPane = null;  private JEditorPane historyMonitorEditorPane1 = null;  private JTabbedPane inputDeviceTabbedPane = null;  private JPanel inputDevicePanel = null;  private JButton tabButton = null;  private String question_prefix; //  @jve:decl-index=0:  private String question_content;  private JButton printJButton = null;  private int count = 10;  private Map statusMap;  private boolean isStop = false;  private List list;  public void setStop(boolean isStop) {    this.isStop = isStop;  }  public Map getStatusMap() {    return statusMap;  }  public void setStatusMap(Map statusMap) {    this.statusMap = statusMap;  }  public String getQuestion_prefix() {    return question_prefix;  }  public void setQuestion_prefix(String question_prefix) {    this.question_prefix = question_prefix;  }  public String getToObjectName() {    return toObjectName;  }  public void setToObjectName(String toObjectName) {    this.toObjectName = toObjectName;  }  public String getSelfObjectName() {    return selfObjectName;  }  public void setSelfObjectName(String selfObjectName) {    this.selfObjectName = selfObjectName;  }  /**   * This is the default constructor   */  public ExpertQuestionUIPanel(JFrame frame, String object, String selfObjectName, String projCode,  String packCode, String packStatus) {    super();    this.projCode = projCode;    this.packCode = packCode;    this.packStatus = packStatus;    this.object = object;    this.selfObjectName = selfObjectName;    this.frame = frame;    initialize();  }  public ExpertQuestionUIPanel(JFrame frame, String object, String selfObjectName, String projCode,  String packCode, String packStatus, String proName, String probd, String orgUnit, String buyUnit,  Date beginTime, String offer) {    super();    this.projCode = projCode;    this.packCode = packCode;    this.packStatus = packStatus;    this.object = object;    this.selfObjectName = selfObjectName;    this.frame = frame;    this.proName = proName;    this.probd = probd;    this.orgUnit = orgUnit;    this.buyUnit = buyUnit;    this.beginTime = beginTime;    this.offer = offer;    initialize();  }  /**   * This method initializes this   *    * @return void   */  private void initialize() {    this.setSize(669, 381);    this.setLayout(null);    this.add(getSelectorScrollPane(), null);    this.add(getSenderButton(), null);    this.add(getCloseButton(), null);    this.add(getMonitorTabbedPane(), null);    this.add(getInputDeviceTabbedPane(), null);    this.add(getTabButton(), null);    this.add(getPrintJButton(), null);    refreshMonitor();    frame.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        int option = JOptionPane.showConfirmDialog(null, "是否完全退出该系统？", "系统提示", JOptionPane.YES_NO_OPTION,        JOptionPane.QUESTION_MESSAGE);        if (option == JOptionPane.YES_OPTION) {          isStop = true;          frame.dispose();        }      }    });    statusMap = new HashMap();    initSize();  }  /**   * This method initializes objectSelector	   * 	   * @return javax.swing.JTree	   */  private JTree getObjectSelector() {    if (objectSelector == null) {      ObjectSelector selector = new ObjectSelector(object, projCode, packCode, packStatus);      objectSelector = new JTree(selector.getNode());      //      objectSelector = new JTree(selector.getNode());      objectSelector.addMouseListener(new java.awt.event.MouseAdapter() {        public void mouseClicked(MouseEvent e) {          doMouseClicked(e); // TCJLODO Auto-generated Event stub mouseClicked()        }      });    }    return objectSelector;  }  /**   * 执行鼠标点击事件，取得供应商名   */  public void doMouseClicked(MouseEvent e) {    TreePath path = objectSelector.getPathForLocation(e.getX(), e.getY());    String tempStr = "";    String noSelect = "";    if ("supplier".equals(object)) {      tempStr = "回复";      noSelect = "请选择专家:";    } else if ("expert".equals(object)) {      tempStr = "向";      noSelect = "请选择供应商:";    }    if (path != null) {      String[] pathName = path.toString().split(",");      String supplierName = pathName[1];      supplierName = supplierName.substring(1, supplierName.length() - 1);      supplierName = parseRex(supplierName).toString();      setToObjectName(supplierName);      setQuestion_prefix(tempStr + supplierName + "询标:");      inputDeviceScrollPane.setBorder(BorderFactory.createTitledBorder(getQuestion_prefix()));    } else {      setQuestion_prefix(noSelect);      inputDeviceScrollPane.setBorder(BorderFactory.createTitledBorder(getQuestion_prefix()));    }    if (tabButton.getText().equals("当前问答记录")) {      refreshHistoryMonitor();    }    if (objectSelector.getSelectionPath().getLastPathComponent() instanceof DefaultMutableTreeNode) {      DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) objectSelector.getSelectionPath()      .getLastPathComponent();      Object userObject = treeNode.getUserObject();      treeNode.setUserObject(parseRex(userObject));      objectSelector.updateUI();    }    //count = 0;  }  /**   * This method initializes selectorScrollPane	   * 	   * @return javax.swing.JScrollPane	   */  private JScrollPane getSelectorScrollPane() {    if (selectorScrollPane == null) {      selectorScrollPane = new JScrollPane();      selectorScrollPane.setBounds(new Rectangle(11, 10, 189, 359));      selectorScrollPane.setViewportView(getObjectSelector());    }    return selectorScrollPane;  }  /**   * This method initializes jEditorPane	   * 	   * @return javax.swing.JEditorPane	   */  private JEditorPane getJEditorPane() {    if (jEditorPane == null) {      jEditorPane = new JEditorPane();    }    jEditorPane.addKeyListener(new KeyListener() {      @Override      public void keyTyped(KeyEvent e) {      }      @Override      public void keyReleased(KeyEvent e) {      }      @Override      public void keyPressed(KeyEvent e) {        // TCJLODO Auto-generated method stub        if (e.isAltDown() && e.getKeyCode() == KeyEvent.VK_S) {          senderButton.doClick();        }      }    });    return jEditorPane;  }  /**   * This method initializes inputDeviceScrollPane	   * 	   * @return javax.swing.JScrollPane	   */  private JScrollPane getInputDeviceScrollPane() {    if (inputDeviceScrollPane == null) {      inputDeviceScrollPane = new JScrollPane();      String noSelect = "";      if ("supplier".equals(object)) {        noSelect = "请选择专家:";      } else if ("expert".equals(object)) {        noSelect = "请选择供应商:";      }      setQuestion_prefix(noSelect);      inputDeviceScrollPane.setBorder(BorderFactory.createTitledBorder(getQuestion_prefix()));      inputDeviceScrollPane.setViewportView(getJEditorPane());    }    return inputDeviceScrollPane;  }  /**   * This method initializes senderButton	   * 	   * @return javax.swing.JButton	   */  private JButton getSenderButton() {    if (senderButton == null) {      senderButton = new JButton();      senderButton.setBounds(new Rectangle(204, 345, 60, 23));      senderButton.setText("发送");      senderButton.addActionListener(new java.awt.event.ActionListener() {        public void actionPerformed(java.awt.event.ActionEvent e) {          String sendString = getQuestion_prefix(); // TCJLODO Auto-generated Event stub actionPerformed()          if (sendString.equals("请选择供应商:") || sendString.equals("请选择专家:")) {            JOptionPane.showMessageDialog(null, sendString, "信息提示", JOptionPane.INFORMATION_MESSAGE);            return;          } else {            if (jEditorPane.getText().trim().equals("")) {              JOptionPane.showMessageDialog(null, "发送消息不能为空！", "信息提示", JOptionPane.INFORMATION_MESSAGE);              return;            } else {              //todo 将信息发送到服务器、清除录入框的内容、显示器显示问答              Date date = new Date();              SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");              String time = format.format(date);              MessageSender messageSender = new MessageSender(object, selfObjectName, toObjectName, time,              jEditorPane.getText().trim(), projCode, packCode);              messageSender.start();              jEditorPane.setText("");            }          }        }      });    }    return senderButton;  }  /**   * This method initializes closeButton	   * 	   * @return javax.swing.JButton	   */  private JButton getCloseButton() {    if (closeButton == null) {      closeButton = new JButton();      //closeButton.setBounds(new Rectangle(204, 345, 60, 23));      //closeButton.setText("关闭");      closeButton.addActionListener(new java.awt.event.ActionListener() {        public void actionPerformed(java.awt.event.ActionEvent e) {          // TCJLODO Auto-generated Event stub actionPerformed()          int option = JOptionPane.showConfirmDialog(null, "是否完全退出该系统？", "系统提示", JOptionPane.YES_NO_OPTION,          JOptionPane.QUESTION_MESSAGE);          if (option == JOptionPane.YES_OPTION) {            isStop = true;            frame.dispose();          }        }      });    }    return closeButton;  }  /**   * This method initializes monitorScrollPane	   * 	   * @return javax.swing.JScrollPane	   */  private JScrollPane getMonitorScrollPane() {    if (monitorScrollPane == null) {      monitorScrollPane = new JScrollPane();      //      monitorScrollPane.setBorder(BorderFactory.createTitledBorder("问答记录："));      monitorScrollPane.setViewportView(getMonitorTextPane());    }    return monitorScrollPane;  }  /**   * This method initializes monitorTextPane	   * 	   * @return javax.swing.JTextPane	   */  private JTextPane getMonitorTextPane() {    if (monitorTextPane == null) {      monitorTextPane = new JTextPane();    }    return monitorTextPane;  }  /**   * This method initializes monitorTabbedPane	   * 	   * @return javax.swing.JTabbedPane	   */  private JTabbedPane getMonitorTabbedPane() {    if (monitorTabbedPane == null) {      monitorTabbedPane = new JTabbedPane();      monitorTabbedPane.setBounds(new Rectangle(204, 10, 455, 209));      monitorTabbedPane.addTab("当前问答记录", null, getCurrentMonitorPanel(), null);      monitorTabbedPane.addTab("历史问答记录", null, getHistoryMonitorPanel(), null);    }    return monitorTabbedPane;  }  /**   * This method initializes currentMonitorPanel	   * 	   * @return javax.swing.JPanel	   */  private JPanel getCurrentMonitorPanel() {    if (currentMonitorPanel == null) {      GridBagConstraints gridBagConstraints = new GridBagConstraints();      gridBagConstraints.fill = GridBagConstraints.BOTH;      gridBagConstraints.gridy = 0;      gridBagConstraints.weightx = 1.0;      gridBagConstraints.weighty = 1.0;      gridBagConstraints.gridx = 0;      currentMonitorPanel = new JPanel();      currentMonitorPanel.setLayout(new GridBagLayout());      currentMonitorPanel.add(getMonitorScrollPane(), gridBagConstraints);    }    return currentMonitorPanel;  }  /**   * This method initializes historyMonitorPanel	   * 	   * @return javax.swing.JPanel	   */  private JPanel getHistoryMonitorPanel() {    if (historyMonitorPanel == null) {      GridBagConstraints gridBagConstraints1 = new GridBagConstraints();      gridBagConstraints1.fill = GridBagConstraints.BOTH;      gridBagConstraints1.gridy = 0;      gridBagConstraints1.weightx = 1.0;      gridBagConstraints1.weighty = 1.0;      gridBagConstraints1.gridx = 0;      historyMonitorPanel = new JPanel();      historyMonitorPanel.setLayout(new GridBagLayout());      historyMonitorPanel.add(getHistoryMonitorScrollPane(), gridBagConstraints1);    }    return historyMonitorPanel;  }  /**   * This method initializes historyMonitorScrollPane	   * 	   * @return javax.swing.JScrollPane	   */  private JScrollPane getHistoryMonitorScrollPane() {    if (historyMonitorScrollPane == null) {      historyMonitorScrollPane = new JScrollPane();      historyMonitorScrollPane.setViewportView(getHistoryMonitorEditorPane1());    }    return historyMonitorScrollPane;  }  /**   * This method initializes historyMonitorEditorPane1	   * 	   * @return javax.swing.JEditorPane	   */  private JEditorPane getHistoryMonitorEditorPane1() {    if (historyMonitorEditorPane1 == null) {      historyMonitorEditorPane1 = new JEditorPane();    }    return historyMonitorEditorPane1;  }  /**   * This method initializes inputDeviceTabbedPane	   * 	   * @return javax.swing.JTabbedPane	   */  private JTabbedPane getInputDeviceTabbedPane() {    if (inputDeviceTabbedPane == null) {      inputDeviceTabbedPane = new JTabbedPane();      inputDeviceTabbedPane.setBounds(new Rectangle(204, 221, 455, 117));      inputDeviceTabbedPane.addTab("问题输入", null, getInputDevicePanel(), null);    }    return inputDeviceTabbedPane;  }  /**   * This method initializes inputDevicePanel	   * 	   * @return javax.swing.JPanel	   */  private JPanel getInputDevicePanel() {    if (inputDevicePanel == null) {      GridBagConstraints gridBagConstraints2 = new GridBagConstraints();      gridBagConstraints2.fill = GridBagConstraints.BOTH;      gridBagConstraints2.gridy = 0;      gridBagConstraints2.weightx = 1.0;      gridBagConstraints2.weighty = 1.0;      gridBagConstraints2.gridx = 0;      inputDevicePanel = new JPanel();      inputDevicePanel.setLayout(new GridBagLayout());      inputDevicePanel.add(getInputDeviceScrollPane(), gridBagConstraints2);    }    return inputDevicePanel;  }  /**   * This method initializes tabButton	   * 	   * @return javax.swing.JButton	   */  private JButton getTabButton() {    if (tabButton == null) {      tabButton = new JButton();      tabButton.setBounds(new Rectangle(542, 345, 117, 23));      tabButton.setText("历史问答记录");      tabButton.addActionListener(new java.awt.event.ActionListener() {        public void actionPerformed(java.awt.event.ActionEvent e) {          // TCJLODO Auto-generated Event stub actionPerformed()          if ("历史问答记录".equals(tabButton.getText())) {            if (toObjectName != null && !"".equals(toObjectName)) {              tabButton.setText("当前问答记录");              monitorTabbedPane.setSelectedIndex(1);              refreshHistoryMonitor();            } else {              String message = "";              if ("expert".equals(object)) {                message = "请选择供应商！";              } else if ("supplier".equals(object)) {                message = "请选择专家！";              }              JOptionPane.showMessageDialog(null, message, "信息提示", JOptionPane.INFORMATION_MESSAGE);              return;            }          } else if ("当前问答记录".equals(tabButton.getText())) {            tabButton.setText("历史问答记录");            monitorTabbedPane.setSelectedIndex(0);          }        }      });    }    return tabButton;  }  public void refreshHistoryMonitor() {    MonitorContent historyMonitor = new MonitorContent();    String expertName = "";    String supplierName = "";    if (object.equals("supplier")) {      expertName = toObjectName;      supplierName = selfObjectName;    } else if (object.equals("expert")) {      expertName = selfObjectName;      supplierName = toObjectName;    }    list = historyMonitor.getHistoryContent(projCode, packCode, expertName, supplierName);    if (list != null) {      if (list.size() > 0) {        String tempStr = "";        for (int i = 0; i < list.size(); i++) {          ZcExpertQuestionAllMessage bean = (ZcExpertQuestionAllMessage) list.get(i);          SimpleDateFormat formate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");          String tempTime = formate.format(bean.getSendTime());          tempStr += bean.getSelfObjectName() + "对" + bean.getToObjectName() + "说(" + tempTime + "):\n";          tempStr += "　　" + bean.getSendContent() + "\n";          //                  System.out.println(tempStr);        }        historyMonitorEditorPane1.setText(tempStr);      } else {        historyMonitorEditorPane1.setText("");      }    }  }  public void refreshMonitor() {    Runnable run = new Runnable() {      @Override      public void run() {        // TCJLODO Auto-generated method stub        while (!isStop) {          String expertName = "";          String supplierName = "";          if (object.equals("supplier")) {            expertName = toObjectName;            supplierName = selfObjectName;          } else if (object.equals("expert")) {            expertName = selfObjectName;            supplierName = toObjectName;          }          SimpleDateFormat formate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");          if (toObjectName != null && !"".equals(toObjectName)) {            toObjectName = parseRex(toObjectName).toString();            MonitorContent monitorContent = new MonitorContent(object, selfObjectName, toObjectName);            List list = monitorContent.getHistoryContent(projCode, packCode, expertName, supplierName);            List listexp = monitorContent.getHistoryExpContent(projCode, packCode, expertName, supplierName);            if (listexp != null) {              if (oldLength == 0) {                oldLength = listexp.size();              }              newLength = listexp.size();              if (newLength > oldLength) {                isChangeColor = true;                oldLength = newLength;              }            }            if (list != null) {              if (list.size() > 0) {                statusMap.put(toObjectName, list.size());                String tempStr = "";                int size = list.size();                int i = size - count > 0 ? size - count : 0;                for (; i < size; i++) {                  ZcExpertQuestionAllMessage bean = (ZcExpertQuestionAllMessage) list.get(i);                  String tempTime = formate.format(bean.getSendTime());                  tempStr += bean.getSelfObjectName() + "对" + bean.getToObjectName() + "说(" + tempTime                  + "):\n";                  tempStr += "　　" + bean.getSendContent() + "\n";                  formate.format(sendTime);                  formate.format(bean.getSendTime());                }                monitorTextPane.setText(tempStr);                monitorTextPane.setCaretPosition(monitorTextPane.getText().length());              } else {                monitorTextPane.setText("");              }            } else {              monitorTextPane.setText("");            }          }          try {            Message();          } catch (Exception e) {            e.printStackTrace();          }          try {            Thread.sleep(500);          } catch (InterruptedException e) {            // TCJLODO Auto-generated catch block            e.printStackTrace();          }        }      }    };    Thread thread = new Thread(run);    thread.start();  }  /**   * This method initializes printJButton    *     * @return javax.swing.JButton     */  private JButton getPrintJButton() {    if (printJButton == null) {      printJButton = new JButton();      printJButton.setBounds(new Rectangle(482, 345, 60, 23));      printJButton.setText("打印");      printJButton.addActionListener(new java.awt.event.ActionListener() {        public void actionPerformed(java.awt.event.ActionEvent e) {          // TCJLODO Auto-generated Event stub actionPerformed()          printQAMessage();          //          test();        }      });    }    return printJButton;  }  public void printQAMessage() {    try {      String expertName = "";      String supplierName = "";      if (object.equals("expert")) {        expertName = selfObjectName;        supplierName = toObjectName;      } else if (object.equals("supplier")) {        expertName = toObjectName;        supplierName = selfObjectName;      }      //      MessageFormat headerFormat = new MessageFormat("专家" + expertName + "就项目" + projCode + "中标段" + packCode      //        + "的质疑内容");      MessageFormat headerFormat = new MessageFormat("专家询标记录\n\n");      headerFormat.setLocale(Locale.CHINA);      //      String[] headerArgs = { projCode, packCode, expertName, supplierName };      //      double[] filelimits = { 0, 1, 2, 3 };      //    ChoiceFormat choiceFormat = new ChoiceFormat(filelimits, headerArgs);      //      headerFormat.setFormatByArgumentIndex(0, choiceFormat);      //      System.out.println(headerFormat.format(headerArgs));      Date date = new Date();      SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");      Object[] footerArgs = { dateFormat.format(date) };      MessageFormat footerFormat = new MessageFormat("第{0}页");      System.out.println(footerFormat.format(footerArgs));      // historyMonitorEditorPane1.print(headerFormat, footerFormat);      if (null != list && null != historyMonitorEditorPane1.getText()      && !"".equals(historyMonitorEditorPane1.getText())) {        JEditorPane printPane = new JEditorPane();        printPane.setContentType("text/html");        StringBuffer areaText = new StringBuffer();        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        areaText        .append("<html><body><div style='width:100%;text-align:center;font-size:14px;font-weight: bold;'>专家询标记录</div><br />");        areaText.append("<div style='width:100%;font-size:12px;font-weight: bold;'>项目概述：</div><br />");        areaText          .append("<div><table cellpadding='0' cellspacing='0' style='width:100%;font-size: 9px;margin: 0px;padding: 0px;word-break: keep-all;text-align: left'>");        areaText.append("<tr>");        areaText.append("<td nowrap style='font-weight: bold;width:10%;'>项目名称：</td>");        areaText.append("<td style='font-size:8px;'>");        areaText.append(proName);        areaText.append("</td>");        areaText.append("<td nowrap style='font-weight: bold;width:10%;'>项目标段：</td>");        areaText.append("<td style='font-size:8px;'>");        areaText.append(probd);        areaText.append("</td>");        areaText.append("</tr><tr>");        areaText.append("<td nowrap style='font-weight: bold;'>组织单位：</td>");        areaText.append("<td style='font-size:8px;'>");        areaText.append(orgUnit);        areaText.append("</td>");        areaText.append("<td nowrap style='font-weight: bold;'>采购单位：</td>");        areaText.append("<td style='font-size:8px;'>");        areaText.append(buyUnit);        areaText.append("</td>");        areaText.append("</tr><tr>");        areaText.append("<td nowrap style='font-weight: bold;'>开标时间：</td>");        areaText.append("<td style='font-size:8px;'>");        areaText.append(dateFormat.format(this.beginTime));        areaText.append("</td>");        areaText.append("<td nowrap style='font-weight: bold;'>供应商：</td>");        areaText.append("<td style='font-size:8px;'>");        areaText.append(offer);        areaText.append("</td>");        areaText.append("</tr><tr>");        areaText.append("<td style='font-weight: bold;'>专家：</td>");        areaText.append("<td style='font-size:8px;'>");        areaText.append(expertName);        areaText.append("</td>");        areaText.append("<td style='font-weight: bold;'>打印时间：</td>");        areaText.append("<td style='font-size:8px;'>");        areaText.append(dateFormat.format(new Date()));        areaText.append("</td>");        areaText.append("</tr>");        areaText.append("</table></div><br />");        areaText.append("<div style='width:100%;font-size:12px;font-weight: bold;'>询标内容：</div>");        areaText.append("<div topmargin='0' leftmargin='0' style='line-height:2px'>");        ZcExpertQuestionAllMessage bean = null;        for (int i = 0; i < list.size(); i++) {          bean = (ZcExpertQuestionAllMessage) list.get(i);          if (null != bean) {            areaText.append("<span style='font-size:7px;'>");            areaText.append(bean.getSelfObjectName());            areaText.append("&nbsp;&nbsp;对&nbsp;&nbsp;");            areaText.append(bean.getToObjectName());            areaText.append("&nbsp;&nbsp;说&nbsp;&nbsp;(");            areaText.append(format.format(bean.getSendTime()));            areaText.append(")：");            areaText.append("</span><br />");            areaText.append("<span style='font-size:9px;'>&nbsp;&nbsp;&nbsp;&nbsp;");            areaText.append(bean.getSendContent());            areaText.append("</span><br />");          }        }        areaText.append("</div></body></html>");        printPane.setText(areaText.toString());        printPane.print(null, footerFormat);      }    } catch (Exception e) {      // TCJLODO Auto-generated catch block      e.printStackTrace();    }  }  public void Message() {    if (null != objectSelector) {      DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) objectSelector.getModel().getRoot();      if (null != rootNode) {        int count = rootNode.getChildCount();        DefaultMutableTreeNode treeNode = null;        Object nodeName = null;        for (int i = 0; i < count; i++) {          treeNode = (DefaultMutableTreeNode) rootNode.getChildAt(i);          nodeName = treeNode.getUserObject();          nodeName = parseRex(nodeName);          if (null != nodeName && null != toObjectName && !nodeName.equals(toObjectName)) {            int oldSize = Integer.parseInt(null == statusMap.get(nodeName.toString()) ? "0" : statusMap.get(            nodeName.toString()).toString());            MonitorContent monitorContent = new MonitorContent(object, selfObjectName, nodeName.toString());            List list = monitorContent.getHistoryContent(projCode, packCode, selfObjectName, nodeName            .toString());            if (null != list) {              int newSize = list.size();              if (newSize > oldSize) {                treeNode.setUserObject(parseRex(nodeName) + "(new)");                objectSelector.updateUI();              }            }          }        }      }    }  }  public void initSize() {    if (null != objectSelector) {      DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) objectSelector.getModel().getRoot();      if (null != rootNode) {        int count = rootNode.getChildCount();        DefaultMutableTreeNode treeNode = null;        Object nodeName = null;        for (int i = 0; i < count; i++) {          treeNode = (DefaultMutableTreeNode) rootNode.getChildAt(i);          nodeName = treeNode.getUserObject();          nodeName = parseRex(nodeName);          if (null != nodeName) {            MonitorContent monitorContent = new MonitorContent(object, selfObjectName, nodeName.toString());            List list = monitorContent.getHistoryContent(projCode, packCode, selfObjectName, nodeName            .toString());            if (null != list) {              statusMap.put(nodeName.toString(), list.size());            }          }        }      }    }  }  public Object parseRex(Object str) {    if (null != str) {      str = str.toString().replace("(new)", "");    }    return str;  };} //  @jve:decl-index=0:visual-constraint="10,10"
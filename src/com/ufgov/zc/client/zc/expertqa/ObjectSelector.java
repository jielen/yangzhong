package com.ufgov.zc.client.zc.expertqa;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.tree.DefaultMutableTreeNode;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.zc.model.EvalPackProvider;import com.ufgov.zc.common.zc.model.ZcEbEvalBidTeam;import com.ufgov.zc.common.zc.model.ZcEbEvalBidTeamMember;import com.ufgov.zc.common.zc.publish.IZcEbEvalBidTeamServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;public class ObjectSelector {  private List<EvalPackProvider> supplierList = new ArrayList<EvalPackProvider>();  private List<ZcEbEvalBidTeamMember> expertList = new ArrayList<ZcEbEvalBidTeamMember>();  private DefaultMutableTreeNode root;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private IZcEbEvalServiceDelegate zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory  .create(IZcEbEvalServiceDelegate.class, "zcEbEvalServiceDelegate");  private IZcEbEvalBidTeamServiceDelegate zcEbEvalBidTeamServiceDelegate = (IZcEbEvalBidTeamServiceDelegate) ServiceFactory  .create(IZcEbEvalBidTeamServiceDelegate.class, "zcEbEvalBidTeamServiceDelegate");  public DefaultMutableTreeNode getNode() {    return root;  }  public void setNode(DefaultMutableTreeNode root) {    this.root = root;  }  public ObjectSelector() {  }  public ObjectSelector(String flag, String projCode, String packCode, String packStatus) {    if ("supplier".equals(flag)) {      //todo 调用取专家数据方法，生成专家树      String objectName = "专家";      getExpertTree(objectName, projCode, packCode);    }    if ("expert".equals(flag)) {      //todo 调用取供应商数据方法，生成供应商树      String objectName = "供应商列表";      getSupplierTree(objectName, projCode, packCode, packStatus);    }  }  public void getExpertTree(String objectName, String projCode, String packCode) {    List hierarchy = new ArrayList();    hierarchy.add(objectName);    ZcEbEvalBidTeam team = new ZcEbEvalBidTeam();    team.setProjCode(projCode);    team.setPackCode(packCode);    expertList = zcEbEvalBidTeamServiceDelegate.getEvalBidTeamMembers(team, requestMeta);    for (int i = 0; i < expertList.size(); i++) {      ZcEbEvalBidTeamMember member = expertList.get(i);      hierarchy.add(member.getExpertCode());    }    expertList.clear();    root = processHierarchy(hierarchy);  }  public void getSupplierTree(String objectName, String projCode, String packCode, String packStatus) {    List hierarchy = new ArrayList();    hierarchy.add(objectName);    Map map = new HashMap();    map.put("PACK_CODE", packCode);    map.put("PROJ_CODE", projCode);    map.put("packStatus", packStatus);    supplierList = zcEbEvalServiceDelegate.getProviderList(map, requestMeta);    for (int i = 0; i < supplierList.size(); i++) {      EvalPackProvider provider = supplierList.get(i);      hierarchy.add(provider.getProviderName());    }    supplierList.clear();    root = processHierarchy(hierarchy);  }  public DefaultMutableTreeNode processHierarchy(List hierarchy) {    DefaultMutableTreeNode node = new DefaultMutableTreeNode(hierarchy.get(0));    DefaultMutableTreeNode child;    for (int i = 1; i < hierarchy.size(); i++) {      Object nodeSpecifier = hierarchy.get(i);      child = new DefaultMutableTreeNode(nodeSpecifier);      node.add(child);    }    return node;  }}
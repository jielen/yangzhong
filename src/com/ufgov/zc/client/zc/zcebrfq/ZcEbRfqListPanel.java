/** * ZcEbRfqOpenBidListPanel.java * com.ufgov.gk.client.zc.openbid.rfqOpenBid * Administrator * 2010-9-10 */package com.ufgov.zc.client.zc.zcebrfq;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbRfqPackToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.ui.AbstractDataDisplay;import com.ufgov.zc.client.component.ui.AbstractEditListBill;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SaveableSearchConditionArea;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.component.ui.conditionitem.SearchConditionUtil;import com.ufgov.zc.client.util.ListUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.flowconsole.DataFlowConsoleCanvas;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.WFConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcEbRfqPack;import com.ufgov.zc.common.zc.publish.IZcEbRfqServiceDelegate;import java.awt.Color;import java.awt.Container;import java.awt.Dialog;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;/** * @author Administrator * */public class ZcEbRfqListPanel extends AbstractEditListBill implements ParentWindowAware {  private static final long serialVersionUID = 3138565417646326494L;  private static final Logger logger = Logger.getLogger(ZcEbRfqListPanel.class);  private ZcEbRfqListPanel self = this;  private Window parentWindow;  private String compoId = "ZC_EB_RFQ";  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private ElementConditionDto elementConditionDto = new ElementConditionDto();  public IZcEbRfqServiceDelegate zcEbRfqServiceDelegate = (IZcEbRfqServiceDelegate) ServiceFactory.create(IZcEbRfqServiceDelegate.class,  "zcEbRfqServiceDelegate");  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(compoId);  public BillElementMeta getBillElementMeta() {    return billElementMeta;  }  private final class DataDisplay extends MultiDataDisplay {    private DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays, AbstractSearchConditionArea conditionArea,    boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, ZcSettingConstants.TAB_ID_ZC_EB_RFQ);      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), " 询价开标管理", TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体",      Font.BOLD, 15), Color.BLUE));    }    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {              String tabStatus = d.getStatus();              JGroupableTable table = d.getTable();              MyTableModel model = (MyTableModel) table.getModel();              int row = table.getSelectedRow();              List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(model.getList(), table));              GkBaseDialog dialog = new GkBaseDialog(parentWindow, Dialog.ModalityType.APPLICATION_MODAL);          /* 注释掉，同一用一个界面来实现 20140531                           if ("success".equals(tabStatus)||"draft".equals(tabStatus)) {//draft:开标成功; success:询价开标结果                ZcEbRfqPack rfqPack = (ZcEbRfqPack) model.getList().get(row);                ZcEbRfqSummaryPanel summaryPanel = new ZcEbRfqSummaryPanel(rfqPack, self);                summaryPanel.setParentWindow(dialog);                dialog.add(summaryPanel);              } else {                ZcEbRfqEvalPackPanel panel = new ZcEbRfqEvalPackPanel(new ListCursor(viewList, row), tabStatus, self);                panel.setParentWindow(dialog);                dialog.add(panel);              }*/                            ZcEbRfqEvalPackPanel panel = new ZcEbRfqEvalPackPanel(new ListCursor(viewList, row), tabStatus, self);              panel.setParentWindow(dialog);              dialog.add(panel);                            dialog.setTitle("询价开标管理");              dialog.setSize(UIConstants.DIALOG_0_LEVEL_WIDTH, UIConstants.DIALOG_0_LEVEL_HEIGHT);              dialog.moveToScreenCenter();              dialog.setVisible(true);            }          }        });      }    }    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems, final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(compoId);      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setZcText0(ZcSettingConstants.ZC_EB_PUT_TYPE_XUNJIA);      elementConditionDto.setStatus(tableDisplay.getStatus());      elementConditionDto.setExecutor(requestMeta.getSvUserID());      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        public void before() {          assert c != null;          installLoadingComponent(c);        }        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        public TableModel execute() throws Exception {          List rfqPackList = self.zcEbRfqServiceDelegate.getZcEbRfqPackList(elementConditionDto, requestMeta);          return ZcEbRfqPackToTableModelConverter.convertToTableModel(rfqPackList);        }        public void success(TableModel model) {          setButtonsStatus();          tableDisplay.setTableModel(model);        }      });    }  }  static {    LangTransMeta.init("ZC%");  }  private void setButtonsStatus() {    String panelId = WFConstants.AUDIT_TAB_STATUS_TODO;    if (topDataDisplay != null && topDataDisplay.getActiveTableDisplay() != null) {      panelId = topDataDisplay.getActiveTableDisplay().getStatus();    }    if (WFConstants.AUDIT_TAB_STATUS_TOOPEN.equalsIgnoreCase(panelId) || "success".equalsIgnoreCase(panelId)) {//等待开标      traceButton.setVisible(false);    } else {      traceButton.setVisible(true);    }  }  /**   * 构造函数   */  public ZcEbRfqListPanel() {    UIUtilities.asyncInvoke(new DefaultInvokeHandler<List<SearchCondition>>() {      @Override      public List<SearchCondition> execute() throws Exception {        List<SearchCondition> needDisplaySearchConditonList = SearchConditionUtil.getNeedDisplaySearchConditonList(WorkEnv.getInstance()        .getCurrUserId(), ZcSettingConstants.TAB_ID_ZC_EB_RFQ);        return needDisplaySearchConditonList;      }      @Override      public void success(List<SearchCondition> needDisplaySearchConditonList) {        List<TableDisplay> showingDisplays = SearchConditionUtil.getNeedDisplayTableDisplay(needDisplaySearchConditonList);        init(createDataDisplay(showingDisplays), null);//调用父类方法        revalidate();        repaint();      }    });    requestMeta.setCompoId(compoId);  }  private AbstractSearchConditionArea topSearchConditionArea;  private AbstractSearchConditionArea createTopConditionArea() {    Map defaultValueMap = new HashMap();    topSearchConditionArea = new SaveableSearchConditionArea(ZcSettingConstants.CONDITION_ID_ZC_EB_RFQ, null, true, defaultValueMap, null);    return topSearchConditionArea;  }  private AbstractDataDisplay createDataDisplay(List<TableDisplay> showingDisplays) {    return new DataDisplay(SearchConditionUtil.getAllTableDisplay(ZcSettingConstants.TAB_ID_ZC_EB_RFQ), showingDisplays, createTopConditionArea(),    false);//true:显示收索条件区 false：不显示收索条件区  }  @Override  protected void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");//    toolBar.add(traceButton);    toolBar.setCompoId(compoId);//    toolBar.add(traceDataButton);    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doTrace();      }    });    traceDataButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doTraceDataButton();      }    });  }  private void doTraceDataButton() {    List beanList = getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择一条要进行跟踪的数据！", "错误", JOptionPane.ERROR_MESSAGE);      return;    }    ZcEbRfqPack sh = (ZcEbRfqPack) beanList.get(0);    DataFlowConsoleCanvas dfc = new DataFlowConsoleCanvas(sh.getProjCode(), this.compoId);    dfc.showWindow();  }  private void doTrace() {    ZcUtil.showTraceDialog(getCheckedList(), this);  }  public List getCheckedList() {    List<ZcEbRfqPack> beanList = new ArrayList<ZcEbRfqPack>();    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    MyTableModel model = (MyTableModel) table.getModel();    //Modal的数据    List list = model.getList();    Integer[] checkedRows = table.getCheckedRows();    for (Integer checkedRow : checkedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      ZcEbRfqPack bean = (ZcEbRfqPack) list.get(accordDataRow);      beanList.add(bean);    }    return beanList;  }  public void refreshCurrentTabData() {    topSearchConditionArea.doSearch();  }  public static void main(String[] args) throws Exception {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        //        UIManager.getDefaults().put("SplitPaneUI", BigButtonSplitPaneUI.class.getName());        ZcEbRfqListPanel bill = new ZcEbRfqListPanel();        JFrame frame = new JFrame("frame");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }}
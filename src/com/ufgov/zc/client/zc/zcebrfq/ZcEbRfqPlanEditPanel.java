package com.ufgov.zc.client.zc.zcebrfq;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcEbPlan;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.publish.IZcEbPlanServiceDelegate;import java.awt.Color;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.Date;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.border.TitledBorder;import org.apache.log4j.Logger;public class ZcEbRfqPlanEditPanel extends AbstractMainSubEditPanel {  private static final Logger logger = Logger.getLogger(ZcEbRfqPlanEditPanel.class);  private IZcEbPlanServiceDelegate zcEbPlanServiceDelegate = (IZcEbPlanServiceDelegate) ServiceFactory  .create(IZcEbPlanServiceDelegate.class, "zcEbPlanServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_PLAN";  private FuncButton saveButton = new SaveButton();  private FuncButton editButton = new EditButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private ZcEbPlan zcEbPlan;  private ZcEbProj zcEbProj;  private ZcEbPlan oldPlan;  private String tabStatus;  private ZcEbRfqPlanEditPanel self = this;  private GkBaseDialog parent;  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  TextFieldEditor projNameEditor = new TextFieldEditor(LangTransMeta  .translate(ZcElementConstants.FIELD_TRANS_PROJ_NAME), "projName");  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId);  public ZcEbRfqPlanEditPanel(ZcEbRfqPlanDialog parent, ZcEbProj zcEbProj) {    super(ZcEbPlan.class, BillElementMeta.getBillElementMetaWithoutNd("ZC_EB_PLAN"));    this.tabStatus = tabStatus;    this.parent = parent;    this.zcEbProj = zcEbProj;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),    LangTransMeta.translate("延期询价项目计划管理"), TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD,    15), Color.BLUE));    this.colCount = 2;    init();    requestMeta.setCompoId(compoId);    if (zcEbPlan == null) {//新增页面      zcEbPlan = new ZcEbPlan();      ElementConditionDto dto = new ElementConditionDto();      dto.setProjCode(zcEbProj.getProjCode());      ZcEbPlan plan = (ZcEbPlan) zcEbPlanServiceDelegate.getZcEbPlan(dto, requestMeta).get(0);      if (plan != null) {        zcEbPlan.setSellStartTime(plan.getSellStartTime());        zcEbPlan.setSellEndTime(plan.getSellEndTime());        zcEbPlan.setBidEndTime(plan.getBidEndTime());        zcEbPlan.setOpenBidTime(plan.getOpenBidTime());        zcEbPlan.setProjCode(plan.getProjCode());        zcEbPlan.setProjName(plan.getProjName());        zcEbPlan.setOpenBidAddress(plan.getOpenBidAddress());        zcEbPlan.setDocPrice(plan.getDocPrice());        zcEbPlan.setDocSeller(plan.getDocSeller());        zcEbPlan.setDocSellAddress(plan.getDocSellAddress());        zcEbPlan.setDocSellPhone(plan.getDocSellPhone());      }      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      setDefualtValue(zcEbPlan, ZcSettingConstants.PAGE_STATUS_NEW);    }    refreshData();    setButtonStatus();    updateFieldEditorsEditable();  }  /**   * 设置工具条上按钮的可用性   *    * Administrator   * 2010-5-15   */  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.exitButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.helpButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcUtil.setButtonEnable(this.btnStatusList, ZcSettingConstants.BILL_STATUS_ALL, this.pageStatus,    this.compoId, zcEbPlan.getProcessInstId());  }  private void refreshData() {    // TODO Auto-generated method stub    this.setEditingObject(zcEbPlan);    setOldObject();  }  private void setDefualtValue(ZcEbPlan plan, String pageStatus) {    if (pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {      plan.setCreator(this.requestMeta.getSvUserName());      plan.setCreateDate(this.requestMeta.getSysDate());      plan.setNd(this.requestMeta.getSvNd());    }  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)    || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null        && (fd.getFieldName().equals("creator") || fd.getFieldName().equals("createDate")        || fd.getFieldName().equals("status") || fd.getFieldName().equals("projName"))) {          fd.setEnabled(false);        } else {          fd.setEnabled(true);        }      }    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }    }  }  private void setOldObject() {    oldPlan = (ZcEbPlan) ObjectUtil.deepCopy(zcEbPlan);  }  public List<AbstractFieldEditor> createFieldEditors() {    // TODO Auto-generated method stub    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    TextFieldEditor editor0 = new TextFieldEditor("采购项目", "projCode");    editorList.add(editor0);    DateFieldEditor df = new DateFieldEditor("招标文件发售时间", "sellStartTime", DateFieldEditor.TimeTypeH24);    editorList.add(df);    df = new DateFieldEditor("招标文件停售时间", "sellEndTime", DateFieldEditor.TimeTypeH24);    editorList.add(df);    df = new DateFieldEditor("投标截止时间", "bidEndTime", DateFieldEditor.TimeTypeH24);    editorList.add(df);    df = new DateFieldEditor("开标时间", "openBidTime", DateFieldEditor.TimeTypeH24);    editorList.add(df);    TextFieldEditor editor11 = new TextFieldEditor("开标地点", "openBidAddress");    editorList.add(editor11);    editor11 = new TextFieldEditor("招标文件价格", "docPrice");    editorList.add(editor11);    editor11 = new TextFieldEditor("招标文件发售联系人", "docSeller");    editorList.add(editor11);    editor11 = new TextFieldEditor("招标文件发售地址", "docSellAddress");    editorList.add(editor11);    editor11 = new TextFieldEditor("招标文件发售电话", "docSellPhone");    editorList.add(editor11);    TextFieldEditor editor12 = new TextFieldEditor("备注", "remark");    editorList.add(editor12);    TextFieldEditor editor10 = new TextFieldEditor("创建人", "creator");    editorList.add(editor10);    DateFieldEditor editor6 = new DateFieldEditor("创建日期", "createDate");    editorList.add(editor6);    return editorList;  }  @Override  public JComponent createSubBillPanel() {    return new JPanel();  }  /* (non-Javadoc)   * @see com.ufgov.gk.client.component.zc.AbstractMainSubEditPanel#initToolBar(com.ufgov.gk.client.component.JFuncToolBar)   */  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        // TODO Auto-generated method stub        doSave();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });  }  private void doAdd() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;    ZcEbPlan plan = new ZcEbPlan();    setDefualtValue(plan, ZcSettingConstants.PAGE_STATUS_NEW);    setEditingObject(plan);    refreshData();    updateFieldEditorsEditable();    setDefualtValue(plan, this.pageStatus);    setButtonStatus();  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  public void doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    this.parent.dispose();  }  public boolean doSave() {    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    if (!checkBeforeSave())      return false;    boolean success = true;    String errorInfo = "";    try {      zcEbPlan = this.zcEbPlanServiceDelegate.save(zcEbPlan, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.oldPlan = (ZcEbPlan) ObjectUtil.deepCopy(zcEbPlan);      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      setButtonStatus();      setOldObject();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  private boolean checkBeforeSave() {    List notNullBillElementList = this.billElementMeta.getNotNullBillElement();    StringBuilder errorInfo = new StringBuilder();    String validateInfo = ZcUtil.validateBillElementNull(zcEbPlan, notNullBillElementList);    if (validateInfo.length() != 0) {      errorInfo.append("").append(validateInfo.toString()).append("\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    Date sellStart = zcEbPlan.getSellStartTime();    Date sellEnd = zcEbPlan.getSellEndTime();    Date bidDate = zcEbPlan.getBidEndTime();    Date openBidDate = zcEbPlan.getOpenBidTime();    if (sellEnd.before(sellStart)) {      errorInfo.append("招标文件停售时间不能早于开始发售时间").append("\n");    }    if (bidDate.before(sellEnd)) {      errorInfo.append("投标截止时间不能早于招标文件停售时间").append("\n");    }    if (openBidDate.before(bidDate)) {      errorInfo.append("开标时间不能早于投标截止时间").append("\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  public void doHelp() {  }  private void stopTableEditing(JTablePanel panel) {    JPageableFixedTable table = panel.getTable();    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldPlan).equals(DigestUtil.digest(zcEbPlan));  }}
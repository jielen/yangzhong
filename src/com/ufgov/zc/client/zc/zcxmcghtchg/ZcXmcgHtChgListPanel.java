package com.ufgov.zc.client.zc.zcxmcghtchg;import java.awt.Color;import java.awt.Container;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcXmcgHtChgToTableModelConverter;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.ui.AbstractDataDisplay;import com.ufgov.zc.client.component.ui.AbstractEditListBill;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SaveableSearchConditionArea;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.component.ui.conditionitem.AsValComboboxConditionItem2;import com.ufgov.zc.client.component.ui.conditionitem.ConditionFieldConstants;import com.ufgov.zc.client.component.ui.conditionitem.SearchConditionUtil;import com.ufgov.zc.client.util.ListUtil;import com.ufgov.zc.client.zc.flowconsole.DataFlowConsoleCanvas;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcXmcgHt;import com.ufgov.zc.common.zc.model.ZcXmcgHtChg;import com.ufgov.zc.common.zc.publish.IZcXmcgHtChgServiceDelegate;public class ZcXmcgHtChgListPanel extends AbstractEditListBill implements ParentWindowAware {  private static final long serialVersionUID = 5518331807480036571L;  private static final Logger logger = Logger.getLogger(ZcXmcgHtChgListPanel.class);  private ZcXmcgHtChgListPanel self = this;  public ZcXmcgHtChgListPanel getSelf() {    return self;  }  private Window parentWindow;  private String compoId = "ZC_XMCG_HT_CHG";  public String getCompoId() {    return compoId;  }  protected RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  protected ElementConditionDto elementConditionDto = new ElementConditionDto();  // private IZcEbBaseServiceDelegate zcEbBaseServiceDelegate =  // (IZcEbBaseServiceDelegate)  // ServiceFactory.create(IZcEbBaseServiceDelegate.class,  //  // "zcEbBaseServiceDelegate");  private IZcXmcgHtChgServiceDelegate zcXmcgHtChgServiceDelegate = (IZcXmcgHtChgServiceDelegate) ServiceFactory.create(    IZcXmcgHtChgServiceDelegate.class,    "zcXmcgHtChgServiceDelegate");  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  private final class DataDisplay extends MultiDataDisplay {    private DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays, AbstractSearchConditionArea conditionArea,    boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, ZcSettingConstants.TAB_ID_ZC_XMCG_HT_CHG);      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "合同变更", TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体",      Font.BOLD, 15), Color.BLUE));    }    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {              String tabStatus = d.getStatus();              JGroupableTable table = d.getTable();              MyTableModel model = (MyTableModel) table.getModel();              int row = table.getSelectedRow();              List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(model.getList(), table));              new ZcXmcgHtChgDialog(getSelf(), viewList, row, tabStatus);            }          }        });      }    }    @Override    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems, final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(getCompoId());      elementConditionDto.setExecutor(WorkEnv.getInstance().getCurrUserId());      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setStatus(tableDisplay.getStatus());      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        @Override        public void before() {          assert c != null;          installLoadingComponent(c);        }        @Override        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        @Override        public TableModel execute() throws Exception {          return ZcXmcgHtChgToTableModelConverter.convertToTableModel(self.zcXmcgHtChgServiceDelegate            .getZcXmcgHtChg(elementConditionDto, requestMeta));        }        @Override        public void success(TableModel model) {          tableDisplay.setTableModel(model);          setButtonsVisiable();        }      });    }  }  static {    LangTransMeta.init("ZC%");  }  /**   *    * 构造函数   */  public ZcXmcgHtChgListPanel() {    createPanel();    requestMeta.setCompoId(getCompoId());  }  protected void createPanel() {    UIUtilities.asyncInvoke(new DefaultInvokeHandler<List<SearchCondition>>() {      @Override      public List<SearchCondition> execute() throws Exception {        List<SearchCondition> needDisplaySearchConditonList = SearchConditionUtil.getNeedDisplaySearchConditonListJoinRole(WorkEnv.getInstance()        .getCurrUserId(), ZcSettingConstants.TAB_ID_ZC_XMCG_HT_CHG);        return needDisplaySearchConditonList;      }      @Override      public void success(List<SearchCondition> needDisplaySearchConditonList) {        List<TableDisplay> showingDisplays = SearchConditionUtil.getNeedDisplayTableDisplay(needDisplaySearchConditonList);        init(createDataDisplay(showingDisplays), null);// 调用父类方法        revalidate();        repaint();      }    });  }  protected AbstractSearchConditionArea topSearchConditionArea;  private AbstractSearchConditionArea createTopConditionArea() {    Map defaultValueMap = new HashMap();    topSearchConditionArea = new SaveableSearchConditionArea(ZcSettingConstants.CONDITION_ID_ZC_XMCG_HT_CHG, null, false, defaultValueMap, null);    AbstractSearchConditionItem item = this.topSearchConditionArea.getCondItemsByCondiFieldCode(ConditionFieldConstants.ZC_VS_HT_CHG_STATUS);    if (item != null) {      ((AsValComboboxConditionItem2) item).setValueByCode("0");    }    return topSearchConditionArea;  }  private AbstractDataDisplay createDataDisplay(List<TableDisplay> showingDisplays) {    return new DataDisplay(    SearchConditionUtil.getAllTableDisplayJoinRole(WorkEnv.getInstance().getCurrUserId(), ZcSettingConstants.TAB_ID_ZC_XMCG_HT_CHG), showingDisplays,    createTopConditionArea(), true);// true:显示搜索条件区 false：不显示搜索条件区  }  @Override  protected void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(getCompoId());    toolBar.add(addButton);    toolBar.add(sendButton);    toolBar.add(suggestPassButton);//填写意见审核通过    toolBar.add(deleteButton);    toolBar.add(traceButton);    toolBar.add(helpButton);    toolBar.add(traceDataButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSend();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    traceDataButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doTraceDataButton();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAuditPass();      }    });  }  private void doTraceDataButton() {    List beanList = getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择一条要进行跟踪的数据！", "错误", JOptionPane.ERROR_MESSAGE);      return;    }    ZcXmcgHt sh = (ZcXmcgHt) beanList.get(0);    DataFlowConsoleCanvas dfc = new DataFlowConsoleCanvas(sh.getZcMakeCode(), getCompoId());    dfc.showWindow();  }  public void refreshCurrentTabData() {    topSearchConditionArea.doSearch();  }  public List<ZcXmcgHtChg> getCheckedList() {    List<ZcXmcgHtChg> beanList = new ArrayList<ZcXmcgHtChg>();    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    MyTableModel model = (MyTableModel) table.getModel();    // Modal的数据    List list = model.getList();    Integer[] checkedRows = table.getCheckedRows();    for (Integer checkedRow : checkedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      ZcXmcgHtChg bean = (ZcXmcgHtChg) list.get(accordDataRow);      beanList.add(bean);    }    return beanList;  }  protected void doAdd() {    new ZcXmcgHtChgDialog(self, new ArrayList(1), -1, topDataDisplay.getActiveTableDisplay().getStatus());  }  private void doSend() {    List<ZcXmcgHtChg> ckList = this.getCheckedList();    if (ckList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要送审的记录！", "提示", JOptionPane.ERROR_MESSAGE);      return;    }    boolean success = true;    String errorInfo = "";    try {      requestMeta.setFuncId(this.sendButton.getFuncId());      for (int i = 0; i < ckList.size(); i++) {        ZcXmcgHtChg zcXmcgHtChg = (ZcXmcgHtChg) ckList.get(i);        zcXmcgHtChg.setAuditorId(WorkEnv.getInstance().getCurrUserId());        this.zcXmcgHtChgServiceDelegate.newCommitFN(zcXmcgHtChg, false, requestMeta);      }    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    }  }  private void doAuditPass() {    List<ZcXmcgHtChg> ckList = this.getCheckedList();    if (ckList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    String errorInfo = "";    try {      requestMeta.setFuncId(this.suggestPassButton.getFuncId());      for (int i = 0; i < ckList.size(); i++) {        ZcXmcgHtChg zcXmcgHtChg = (ZcXmcgHtChg) ckList.get(i);        zcXmcgHtChg.setAuditorId(WorkEnv.getInstance().getCurrUserId());        zcXmcgHtChg.setComment(commentDialog.getComment());        this.zcXmcgHtChgServiceDelegate.auditFN(zcXmcgHtChg, requestMeta);      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doDelete() {    List<ZcXmcgHtChg> beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要删除的记录！", "提示", JOptionPane.ERROR_MESSAGE);      return;    }    int num = JOptionPane.showConfirmDialog(this, "是否删除当前选中所有合同", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      ZcXmcgHtChg zcXmcgHtChg = null;      String errorInfo = "";      try {        requestMeta.setFuncId(deleteButton.getFuncId());        for (int i = 0; i < beanList.size(); i++) {          zcXmcgHtChg = (ZcXmcgHtChg) beanList.get(i);          if (!"0".equals(zcXmcgHtChg.getZcHtStatus())) {            JOptionPane.showMessageDialog(this, "所选记录中第【" + (i + 1) + "】条记录处于非编辑状态合同，不可以删除！", "提示", JOptionPane.ERROR_MESSAGE);            return;          }          this.zcXmcgHtChgServiceDelegate.deleteByPrimaryKeyFN(zcXmcgHtChg.getZcHtChgId(), false, WorkEnv.getInstance().getWebRoot(), requestMeta);        }      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  public static void main(String[] args) throws Exception {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        // UIManager.getDefaults().put("SplitPaneUI",        // BigButtonSplitPaneUI.class.getName());        ZcXmcgHtChgListPanel bill = new ZcXmcgHtChgListPanel();        JFrame frame = new JFrame("frame");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(getCompoId());  public BillElementMeta getBillElementMeta() {    return billElementMeta;  }}
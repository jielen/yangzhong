package com.ufgov.zc.client.zc.present;import java.awt.Color;import java.awt.Container;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbPresentToTableModelConverter;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.ViewButton;import com.ufgov.zc.client.component.ui.AbstractDataDisplay;import com.ufgov.zc.client.component.ui.AbstractEditListBill;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SaveableSearchConditionArea;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.component.ui.conditionitem.SearchConditionUtil;import com.ufgov.zc.client.util.ListUtil;import com.ufgov.zc.client.zc.question.ZcEbQuestionDialog;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.WFConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZCQuestion;import com.ufgov.zc.common.zc.model.ZcEbPresent;import com.ufgov.zc.common.zc.publish.IZcEbPresentServiceDelegate;public class ZcEbPresentListPanel extends AbstractEditListBill implements ParentWindowAware {  /**   *    */  private static final long serialVersionUID = 1L;  private ZcEbPresentListPanel self = this;  public static final String compoId = "ZC_EB_PRESENT";  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private ElementConditionDto elementConditionDto = new ElementConditionDto();  private AddButton addButton = new AddButton();  private DeleteButton deleteButton = new DeleteButton();  private HelpButton helpButton = new HelpButton();  private FuncButton editButton = new EditButton();  private FuncButton viewButton = new ViewButton();  private IZcEbPresentServiceDelegate delegate = (IZcEbPresentServiceDelegate) ServiceFactory.create(IZcEbPresentServiceDelegate.class,  "ZcEbPresentServiceDelegate");  public IZcEbPresentServiceDelegate getDelegate() {    return delegate;  }  public void setDelegate(IZcEbPresentServiceDelegate delegate) {    this.delegate = delegate;  }  private final class DataDisplay extends MultiDataDisplay {    private DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays, AbstractSearchConditionArea conditionArea,    boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, ZcSettingConstants.TAB_ID_ZC_EB_PRESENT_TAB);      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "开标大会致辞列表", TitledBorder.CENTER, TitledBorder.TOP, new Font(      "宋体", Font.BOLD, 15), Color.BLUE));    }    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {              String tabStatus = d.getStatus();              JGroupableTable table = d.getTable();              MyTableModel model = (MyTableModel) table.getModel();              int row = table.getSelectedRow();              List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(model.getList(), table));              if ("doing".equals(topDataDisplay.getActiveTableDisplay().getStatus())) {                new ZcEbPresentDialog(self, viewList, row, ZcSettingConstants.PAGE_STATUS_EDIT);              } else {                new ZcEbPresentDialog(self, viewList, row, ZcSettingConstants.PAGE_STATUS_BROWSE);              }            }          }        });      }    }    @Override    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems, final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(compoId);      elementConditionDto.setExecutor(WorkEnv.getInstance().getCurrUserId());      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setStatus(tableDisplay.getStatus());      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        @Override        public void before() {          assert c != null;          installLoadingComponent(c);        }        @Override        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        @Override        public TableModel execute() throws Exception {          return ZcEbPresentToTableModelConverter.convertToTableModel(delegate.getPresentList(elementConditionDto, requestMeta));        }        @Override        public void success(TableModel model) {          tableDisplay.setTableModel(model);          setButtonsVisiable();          setButtonStatus();        }      });    }  }  static {    LangTransMeta.init("ZC%");  }  public ZcEbPresentListPanel() {    UIUtilities.asyncInvoke(new DefaultInvokeHandler<List<SearchCondition>>() {      @Override      public List<SearchCondition> execute() throws Exception {        List<SearchCondition> needDisplaySearchConditonList = SearchConditionUtil.getNeedDisplaySearchConditonList(WorkEnv.getInstance()        .getCurrUserId(), ZcSettingConstants.TAB_ID_ZC_EB_PRESENT_TAB);        return needDisplaySearchConditonList;      }      @Override      public void success(List<SearchCondition> needDisplaySearchConditonList) {        List<TableDisplay> showingDisplays = SearchConditionUtil.getNeedDisplayTableDisplay(needDisplaySearchConditonList);        init(createDataDisplay(showingDisplays), null);//调用父类方法        revalidate();        repaint();      }    });    requestMeta.setCompoId(compoId);  }  private AbstractDataDisplay createDataDisplay(List<TableDisplay> showingDisplays) {    return new DataDisplay(SearchConditionUtil.getAllTableDisplay(ZcSettingConstants.TAB_ID_ZC_EB_PRESENT_TAB), showingDisplays,    createTopConditionArea(), true);//true:显示收索条件区 false：不显示收索条件区  }  private AbstractSearchConditionArea topSearchConditionArea;  private AbstractSearchConditionArea createTopConditionArea() {    Map defaultValueMap = new HashMap();    topSearchConditionArea = new SaveableSearchConditionArea(ZcSettingConstants.CONDTION_ID_ZC_EB_PRESENT, null, false, defaultValueMap, null);    return topSearchConditionArea;  }  protected void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(deleteButton);    toolBar.add(helpButton);    //toolBar.add(editButton);    toolBar.add(viewButton);    addButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    viewButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doView();      }    });  }  private void doEdit() {    open(ZcSettingConstants.PAGE_STATUS_EDIT);  }  private void doView() {    open(ZcSettingConstants.PAGE_STATUS_BROWSE);  }  private void open(String status) {    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    if (beanList.size() > 1) {      JOptionPane.showMessageDialog(this, "只能选用一条数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    try {      List viewList = new ArrayList();      viewList.add(beanList.get(0));      new ZcEbPresentDialog(self, viewList, 1, status);    } catch (Exception e) {    }  }  private List getCheckedList() {    List<ZcEbPresent> beanList = new ArrayList<ZcEbPresent>();    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    MyTableModel model = (MyTableModel) table.getModel();    // Modal的数据    List list = model.getList();    Integer[] checkedRows = table.getCheckedRows();    for (Integer checkedRow : checkedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      ZcEbPresent present = (ZcEbPresent) list.get(accordDataRow);      beanList.add(present);    }    return beanList;  }  public void doAdd() {    new ZcEbPresentDialog(self, new ArrayList(1), -1, topDataDisplay.getActiveTableDisplay().getStatus());  }  public void doDelete() {    //删除方法    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int num = JOptionPane.showConfirmDialog(this, "确认删除？", "提示", JOptionPane.YES_NO_CANCEL_OPTION);    if (num == JOptionPane.YES_OPTION) {      try {        for (int i = 0; i < beanList.size(); i++) {          delegate.deleteFN((ZcEbPresent) beanList.get(i), requestMeta);        }      } catch (Exception e) {        e.printStackTrace();      }      JOptionPane.showMessageDialog(this, "删除成功！", " 提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    }  }  public void doHelp() {  }  public Window getParentWindow() {    return null;  }  public void setParentWindow(Window window) {  }  public static void main(String[] args) {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        //        UIManager.getDefaults().put("SplitPaneUI", BigButtonSplitPaneUI.class.getName());        ZcEbPresentListPanel bill = new ZcEbPresentListPanel();        JFrame frame = new JFrame("开标大会致辞");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }  public void refreshCurrentTabData() {    topSearchConditionArea.doSearch();  }  public void setButtonStatus() {    String panel = topDataDisplay.getActiveTableDisplay().getStatus();    System.out.println(panel);    if ("doing".equals(panel)) {      deleteButton.setVisible(true);    } else {      deleteButton.setVisible(false);    }  }}
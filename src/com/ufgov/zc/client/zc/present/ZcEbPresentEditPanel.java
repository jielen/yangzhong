package com.ufgov.zc.client.zc.present;import java.awt.Color;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ComponentAdapter;import java.awt.event.ComponentEvent;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.BlankOutButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.EnableButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.LoadMoldButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.WordFileUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.bulletinmold.IWordMoldFn;import com.ufgov.zc.client.zc.bulletinmold.ZcEbWordMoldFnHandler;import com.ufgov.zc.client.zc.ztb.activex.WordPane;import com.ufgov.zc.common.console.model.AsEmp;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMold;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMoldParam;import com.ufgov.zc.common.zc.model.ZcEbOpenBidTeamMember;import com.ufgov.zc.common.zc.model.ZcEbPresent;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbSignup;public class ZcEbPresentEditPanel extends AbstractMainSubEditPanel implements IWordMoldFn {  /**   *    */  private static final long serialVersionUID = 1L;  private static final Logger logger = Logger.getLogger(ZcEbPresentEditPanel.class);  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_PRESENT";  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private String sqlMapSelectedProj = "ZcEbPresent.getProjList";  private String sqlMapSelectedMold = "ZcEbBulletinWordMold.getZcEbPresentWordMold";  private String replaceValue = "";  private String fileName = "";  private ListCursor listCursor;  private String tabStatus;  private boolean ifLoadMold = false;  private boolean ifRePalceBookMark = true;  private ZcEbPresentListPanel listPanel;  private ZcEbPresentEditPanel self = this;  private GkBaseDialog parent;  private JTabbedPane tabPane = new JTabbedPane();  private WordPane wordPane = new WordPane();  private FuncButton saveButton = new SaveButton();  private FuncButton editButton = new EditButton();  public FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton nextButton = new NextButton();  public FuncButton printButton = new PrintButton();  private LoadMoldButton loadMoldButton = new LoadMoldButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  /**   * 启用按钮   */  private EnableButton enableButton = new EnableButton();  /**   * 作废按钮   */  private BlankOutButton unableButton = new BlankOutButton();  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  String columNames[] = { "项目编号", "项目名称", "采购类型" };  ZcEbProjFnHandler handler = new ZcEbProjFnHandler(columNames);  ForeignEntityFieldEditor fieldZcMakeCode = new ForeignEntityFieldEditor(this.sqlMapSelectedProj, 20, handler, columNames, "项目名称", "projName");  TextFieldEditor fieldZcMakeName = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_NAME), "moldName");  String moldColumNames[] = { "模板编号", "模板名称", "公告模板类型", "状态", "备注" };  private ZcEbWordMoldFnHandler handlera = new ZcEbWordMoldFnHandler(moldColumNames, this);  ForeignEntityFieldEditor fieldMoldName = new ForeignEntityFieldEditor(this.sqlMapSelectedMold, 20, handlera, moldColumNames, "选择模板", "moldName");  private ZcEbPresent oldPresent;  public ZcEbPresentEditPanel(ZcEbPresentDialog parent, ListCursor listCursor, String tabStatus, ZcEbPresentListPanel listPanel) {    super(new ZcEbPresent(), "ZC_EB_PRESENT");    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "开标大会致辞", TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 2;    init();    requestMeta.setCompoId(compoId);    WordFileUtil.setDir("bulletin");    addSubPane();    refreshData();    setButtonStatus();    updateFieldEditorsEditable();  }  /**   * 设置工具条上按钮的可用性   */  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      //编辑      ButtonStatus bs = new ButtonStatus();      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      bs.addBillStatus("0");      btnStatusList.add(bs);      //修改      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      //填充模板      bs = new ButtonStatus();      bs.setButton(this.loadMoldButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      //删除      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addBillStatus("0");      btnStatusList.add(bs);      //上一步      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      //下一步      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbPresent present = (ZcEbPresent) this.listCursor.getCurrentObject();    String billStatus = present.getStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, present.getProcessInstId());  }  private String refreshMainData() {    ZcEbPresent present = (ZcEbPresent) this.listCursor.getCurrentObject();    if (present == null) {      present = new ZcEbPresent();      present.setStatus("0");      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      List lst = new ArrayList();      lst.add(present);      this.listCursor.setDataList(lst, -1);      listCursor.setCurrentObject(present);    }    ableEdit();    this.setEditingObject(present);    setOldObject();    setButtonStatus();    if (tabStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      toolBar.setVisible(false);      fieldEditorPanel.setVisible(false);    }    return present.getFileID();  }  private void ableEdit() {    //编辑状态停止    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      //浏览状态下      fieldZcMakeCode.setEnabled(false);      fieldMoldName.setEnabled(false);    } else {      fieldZcMakeCode.setEnabled(true);      fieldMoldName.setEnabled(true);    }  }  public void refreshData() {    String fileID = refreshMainData();    refreshSubTableData(fileID);  }  private void refreshSubTableData(String fileID) {    if (wordPane.isDocOpened()) {      wordPane.close();    }    if (fileID != null && !fileID.equals("")) {      this.fileName = WordFileUtil.loadMold(fileID);    } else {      this.fileName = WordFileUtil.loadDefaultMold();    }    if (!self.isShowing()) {      parent.addComponentListener(new ComponentAdapter() {        public void componentShown(ComponentEvent e) {          wordPane.open(self.fileName);        }      });    } else {      wordPane.open(this.fileName);    }  }  private void addSubPane() {    //下面一句是为了打开word后刷新窗口    parent.setSize(parent.getSize().width + 1, parent.getSize().height + 1);    wordPane.addPropertyChangeListener(WordPane.EVENT_NAME_OPEN_CALLBACK, new PropertyChangeListener() {      public void propertyChange(PropertyChangeEvent evt) {        //打开文件完成之后的回调函数        boolean isSuccess = (Boolean) evt.getNewValue();        if (isSuccess) {          //下面一句是为了打开word后刷新窗口          parent.setSize(parent.getSize().width - 1, parent.getSize().height - 1);        }      }    });    tabPane.addTab("开标大会致辞内容", wordPane);  }  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();  }  private void setOldObject() {    oldPresent = (ZcEbPresent) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  public boolean isDataChanged() {    //如果载入了模板并且进行了数据填充，说明数据已经修改    if (ifLoadMold && ifRePalceBookMark) {      return true;    } else {      return !DigestUtil.digest(oldPresent).equals(DigestUtil.digest(listCursor.getCurrentObject()));    }  }  public JComponent createSubBillPanel() {    return this.tabPane;  }  private void projCodeChange() {    ZcEbPresent present = (ZcEbPresent) this.listCursor.getCurrentObject();    for (AbstractFieldEditor editor : this.fieldEditors) {      if (editor.getFieldName().equals("zcMakeCode")) {        Object obj = editor.getValue();        if (obj == null || obj.toString().trim().length() == 0) {          this.fieldMoldName.setValue("");          this.fieldZcMakeName.setEditObject(present);          this.fieldMoldName.setEditObject(present);          this.fieldMoldName.setEnabled(true);          break;        }      }    }    loadMoldButton.setEnabled(true);  }  public String doOpenMold(List valueList, ZcEbBulletinWordMold bulletinMold) {    if (wordPane != null && wordPane.isDocOpened()) {      wordPane.close();    }    String moldFileName = WordFileUtil.loadMold(bulletinMold.getFileID());    if (moldFileName == null || moldFileName.length() == 0) {      //没有成功载入模板，关闭wordPane        if (wordPane != null && wordPane.isDocOpened())        wordPane.close();      return "";    }    wordPane.open(moldFileName);    fileName = moldFileName;//zcEbWordPanel.getFileName();    StringBuffer sb = new StringBuffer();    for (Iterator it = valueList.iterator(); it.hasNext();) {      ZcEbBulletinWordMoldParam zcEbBulletinWordMoldParam = (ZcEbBulletinWordMoldParam) it.next();      sb.append(zcEbBulletinWordMoldParam.getParamName());      sb.append("$$$$$");      sb.append(zcEbBulletinWordMoldParam.getParamValue());      sb.append("@@@@@");    }    return sb.toString();  }  private String saveBulletinContent() {    String fileID = "";    if (fileName != null && fileName.length() != 0)      fileID = WordFileUtil.uploadBulletinWordConstent(fileName);    return fileID;  }  private boolean checkBeforeSave() {    ZcEbPresent present = (ZcEbPresent) this.listCursor.getCurrentObject();    return true;  }  /**   * 创建字段对象   */  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    //项目    fieldZcMakeCode.addValueChangeListener(new ValueChangeListener() {      @Override      public void valueChanged(ValueChangeEvent e) {        projCodeChange();      }    });    fieldZcMakeCode.setEnabled(true);    //模板选择    editorList.add(fieldZcMakeCode);    fieldMoldName.setEnabled(true);    editorList.add(fieldMoldName);    return editorList;  }  /**   * 以下添加按钮和按钮方法   */  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    addButtonMenu(this.tabStatus);    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    loadMoldButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doReplaceBookMarks();      }    });    deleteButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrint();      }    });    enableButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZcEbPresent present = (ZcEbPresent) listCursor.getCurrentObject();        present.setStatus("1");        listCursor.setCurrentObject(present);        doSave();      }    });    unableButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZcEbPresent present = (ZcEbPresent) listCursor.getCurrentObject();        present.setStatus("2");        listCursor.setCurrentObject(present);        doSave();      }    });  }  protected void doPrint() {    //打印致辞文档    try {      this.wordPane.print();    } catch (RuntimeException e) {      // TCJLODO Auto-generated catch block      e.printStackTrace();      JOptionPane.showMessageDialog(this, "请确认系统已经打开致辞，再进行打印！", "提示", JOptionPane.INFORMATION_MESSAGE);    }  }  public void doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    if (wordPane != null && wordPane.isDocOpened()) {      wordPane.close();    }    this.parent.dispose();  }  private void doDelete() {    ZcEbPresent present = (ZcEbPresent) this.listCursor.getCurrentObject();    this.listPanel.getDelegate().deleteFN(present, requestMeta);    listCursor.removeCurrentObject();    listCursor.next();    refreshData();  }  private void refreshAll(ZcEbPresent afterSaveBill, boolean isRefreshButton) {    this.listCursor.setCurrentObject(afterSaveBill);    refreshData();  }  public boolean doSave() {    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      setButtonStatus();      return false;    }    if (!ifRePalceBookMark) {      JOptionPane.showMessageDialog(self, "没有填充公告内容，请点击【填充模板】按钮生成正式致辞后再保存！", "提示", JOptionPane.ERROR_MESSAGE);      return false;    }    ZcEbPresent present = (ZcEbPresent) this.listCursor.getCurrentObject();    present.setFileID(saveBulletinContent());    ZcEbPresent afterBill = this.listPanel.getDelegate().updateFN(present, requestMeta);    this.listCursor.setCurrentObject(afterBill);    setButtonStatus();    wordPane.setEnabled(false);    JOptionPane.showMessageDialog(self, "保存成功", "提示", JOptionPane.ERROR_MESSAGE);    this.listPanel.refreshCurrentTabData();    refreshData();    return true;  }  public void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    ableEdit();    setButtonStatus();  }  public void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldPresent);      }    }    listCursor.next();    refreshData();    setButtonStatus();  }  public void doReplaceBookMarks() {    this.loadMoldButton.setEnabled(false);//填充完之后设为不可用    if (replaceValue != null && !replaceValue.equals("")) {      wordPane.replaceBookMarks(this.replaceValue);    }    WordFileUtil.delete(this.fileName);    wordPane.save(this.fileName);    this.fileName = this.fileName;    ifRePalceBookMark = true;    ifLoadMold = false;  }  private void addButtonMenu(String tabStatus) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(this.listPanel.compoId);    toolBar.add(editButton);    toolBar.add(loadMoldButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    toolBar.add(printButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    //toolBar.add(enableButton);    //toolBar.add(unableButton);  }  public void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldPresent);      }    }    listCursor.previous();    refreshData();    setButtonStatus();  }  private void refreshWordPane(ZcEbPresent present) {    if (wordPane.isDocOpened()) {      wordPane.close();    }    String fileID = "";    if (fileID != null && !fileID.equals("")) {      this.fileName = WordFileUtil.loadMold(fileID);      wordPane.open(this.fileName);    } else {      this.fileName = WordFileUtil.loadDefaultMold();      wordPane.open(this.fileName);    }  }  /**   * 选择项目外部部件信息   * @author admin   *   */  private class ZcEbProjFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbProjFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        //取出项目再根据项目获取一系列信息、比如开标组、供应商等。        ZcEbProj proj = (ZcEbProj) object;        ZcEbPresent present = (ZcEbPresent) listCursor.getCurrentObject();        present.setProjCode(proj.getProjCode());        present.setProjName(proj.getProjName());        present.setProjType(proj.getPurType());        String projCode = proj.getProjCode();        ElementConditionDto dto = new ElementConditionDto();        dto.setProjCode(projCode);        //获取预算单位信息(名字)        AsEmp emp = listPanel.getDelegate().getComplany(dto, requestMeta);        if (emp != null) {          present.setCgdanwei(emp.getEmpName());        }        //获取开标组信息(大会工作人员)        List listZcEbOpenBidTeamMember = listPanel.getDelegate().getZcEbOpenBidTeamMemberList(dto, requestMeta);        doOpenBidTeamMember(listZcEbOpenBidTeamMember);        //获取供应商信息        List listSupplier = listPanel.getDelegate().getSupplierList(dto, requestMeta);        doSupplier(listSupplier);        fieldMoldName.setEditObject(present);      }      projCodeChange();      fieldMoldName.setEnabled(true);      refreshData();    }    //处理开标组人员方法    public void doOpenBidTeamMember(List list) {      ZcEbPresent present = (ZcEbPresent) listCursor.getCurrentObject();      String worker = "";      List listZcEbOpenBidTeamMember = list;      if (listZcEbOpenBidTeamMember != null) {        for (int i = 0; i < listZcEbOpenBidTeamMember.size(); i++) {          ZcEbOpenBidTeamMember member = (ZcEbOpenBidTeamMember) listZcEbOpenBidTeamMember.get(i);          if ("1".equals(member.getMemberType())) {            present.setZhuchiren(member.getMemberName());          } else if ("2".equals(member.getMemberType())) {            worker = worker + "监标人" + member.getMemberName() + "/br";          } else if ("3".equals(member.getMemberType())) {            worker = worker + "唱标人" + member.getMemberName() + "/br";          } else if ("4".equals(member.getMemberType())) {            worker = worker + "记录人" + member.getMemberName() + "/br";          } else if ("5".equals(member.getMemberType())) {            worker = worker + "采购人" + member.getMemberName() + "/br";          } else if ("6".equals(member.getMemberType())) {            worker = worker + "公证员" + member.getMemberName() + "/br";          } else if ("7".equals(member.getMemberType())) {            worker = worker + "检查员" + member.getMemberName() + "/br";          } else if ("8".equals(member.getMemberType())) {            worker = worker + "其他" + member.getMemberName() + "/br";          }        }      }      present.setOpenBidMember(worker);    }    //处理报名供应商方法    public void doSupplier(List list) {      ZcEbPresent present = (ZcEbPresent) listCursor.getCurrentObject();      String supplierStr = "";      if (list != null) {        present.setGmxywjsjsl(list.size() + "");        present.setSdxywjsl(list.size() + "");        present.setFileType("xxxxxx");        present.setZgysdw("");        present.setZgysDate("");        present.setCgzxzgysdb("");        present.setZgyshgsl(list.size() + "");        for (int i = 0; i < list.size(); i++) {          ZcEbSignup signup = (ZcEbSignup) list.get(i);          supplierStr = supplierStr + signup.getProviderName() + "/br";        }      }      present.setGysxx(supplierStr);    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE", rowData.getPurType());      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }  }  public boolean getIfLoadMold() {    return this.ifLoadMold;  }  public boolean getIfRePalceBookMark() {    return this.ifRePalceBookMark;  }  public ListCursor getListCursor() {    return this.listCursor;  }  public JPanel getWindowObject() {    return this;  }  public WordPane getWordPane() {    return this.wordPane;  }  public void setIfLoadMold(boolean ifLoadMold) {    this.ifLoadMold = ifLoadMold;    if (this.ifLoadMold) {    }  }  public void setIfRePalceBookMark(boolean ifRePalceBookMark) {    this.ifRePalceBookMark = ifRePalceBookMark;  }  public void setMoldName(String wordName) {    ZcEbPresent present = (ZcEbPresent) listCursor.getCurrentObject();    present.setMoldName(wordName);    fieldMoldName.setEditObject(present);  }  public void setReplaceValue(String replaceValue) {    this.replaceValue = replaceValue;  }  public void setWordMold(ZcEbBulletinWordMold bulletinMold) {  }  public String getPackCode() {    return null;  }  public String getWordMoldViewId() {    return ((ZcEbPresent) this.listCursor.getCurrentObject()).getProjCode();  }}
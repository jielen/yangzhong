package com.ufgov.zc.client.zc.zcebentrust;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.component.zc.dataexchange.DataExchangeListPanel;import com.ufgov.zc.client.component.zc.dataexchange.model.ABaseData;import com.ufgov.zc.client.component.zc.dataexchange.model.AttachmentFile;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.DataExchangeLog;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.model.ZcEbEntrustDetail;import com.ufgov.zc.common.zc.publish.IZcEbEntrustServiceDelegate;import java.io.File;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;/** * 批办单 导入，导出 *  * @author Administrator *  */public class ZcEbEntrustDataExchangeExecutor extends ABaseData {  private static final long serialVersionUID = -8511120826152031881L;  private transient IZcEbEntrustServiceDelegate zcEbEntrustServiceDelegate;  @Override  public int doExportData(ElementConditionDto dto, RequestMeta meta,  String saveRootPath) {    zcEbEntrustServiceDelegate = getZcEbEntrustServiceDelegate();    DataExchangeListPanel.setProgressText(this.getDataTypeName()    + "正在查询需要导出的记录...");    if (this.getNeedExportDataRedoList() != null    && this.getNeedExportDataRedoList().size() > 0) {      dto.setPmAdjustCodeList(this.getNeedExportDataList());      this.setDataList(zcEbEntrustServiceDelegate      .findTransData(dto, meta));    } else {      this.setDataList(new ArrayList<ZcEbEntrust>());    }    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "查询到【"    + this.getDataList().size() + "】条记录...");    List fileList = this.getDataList();    int currRecordSeq = 1;    // 将附件信息存储到map中    if (this.attachmentDataMap == null) {      this.attachmentDataMap = new HashMap<String, Map<String, AttachmentFile>>();    } else {      this.attachmentDataMap.clear();    }    List<DataExchangeLog> exportDataList = new ArrayList<DataExchangeLog>();    String parentDirectory = new File(saveRootPath).getParentFile()    .getParentFile().getAbsolutePath();    String entrustFileDirName = "Entrust_file";    String bulletinFilePath = parentDirectory + File.separator    + entrustFileDirName;    makeDirs(bulletinFilePath);    try {      for (Iterator iterator = fileList.iterator(); iterator.hasNext();) {        ZcEbEntrust zee = (ZcEbEntrust) iterator.next();        // zee.setSn("111111");        String path = bulletinFilePath + File.separator;        downFile(entrustFileDirName, zee.getZcImpFileBlobid(), zee        .getZcImpFile(), zee.getSn(), path, meta);        List detailList = zee.getDetailList();        // int i = 0;        for (Iterator iterator2 = detailList.iterator(); iterator2        .hasNext();) {          ZcEbEntrustDetail d = (ZcEbEntrustDetail) iterator2.next();          // d.setSnd(zee.getSn() + "-" + i);          // i++;          downFile(entrustFileDirName, d.getZcPitemAttachBlobid(), d          .getZcPitemAttach(), d.getSnd(), path, meta);        }        DataExchangeLog log = makeDataExchangeLog(meta.getSvUserID(),        "导出成功", "", null, "OUT", zee);        exportDataList.add(log);        successRecordMap.put(zee.getSn(), this.getDataExchangeRedo(zee        .getSn()));      }    } catch (Exception e) {      // TODO Auto-generated catch block      e.printStackTrace();      // returnMap.put("errorMessage", "建立文件失败");    }    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "第【"    + currRecordSeq + "】条记录相关数据和文件抓取完成...");    currRecordSeq++;    return this.getDataList().size();  }  @Override  public int doImportData(ElementConditionDto dto, RequestMeta meta,  String rootPath) {    DataExchangeListPanel.setProgressText(this.getDataTypeName()    + "开始进行数据导入...");    // Map<String, Boolean> filesSent = new HashMap<String, Boolean>();           zcEbEntrustServiceDelegate = getZcEbEntrustServiceDelegate();    ZcEbEntrust zeas = null;    int succCount = 0;    List<DataExchangeLog> logList = new ArrayList<DataExchangeLog>();    try {   // 先进行文件发送和保存，只有保存成功后，才能够往下走      toSendFiles(rootPath, meta);      for (Iterator iterator = this.dataList.iterator(); iterator      .hasNext();) {        zeas = (ZcEbEntrust) iterator.next();        AttachmentFile attFile = this.attachmentDataMap.get(zeas.getSn()).get(zeas.getSn());        zcEbEntrustServiceDelegate.impEntrust(zeas, meta);        // 写日志        DataExchangeLog log = new DataExchangeLog();        log.setDataTypeID(this.getDataTypeID());        log.setDataTypeName(this.getDataTypeName());        log.setGentType("IN");        // log.setDetailInfo(submitRes);        // log.setExceptText(e.getMessage());        log.setOptDateTime(new Date());        log.setRecSrcID(zeas.getSn());        log.setRecSrcName(zeas.getAuditorName());        log.setRecSrcTab(this.getMainTableName());        log.setRecStatus("导入成功");        log.setUserID(meta.getSvUserID());        logList.add(log);        succCount++;      }    } catch (Exception e) {      // TODO Auto-generated catch block      e.printStackTrace();// 写日志      DataExchangeLog log = new DataExchangeLog();      log.setDataTypeID(this.getDataTypeID());      log.setDataTypeName(this.getDataTypeName());      log.setGentType("IN");      // log.setDetailInfo("");      log.setExceptText(e.getMessage());      log.setOptDateTime(new Date());      log.setRecSrcID(zeas.getSn());      log.setRecSrcName(zeas.getAuditorName());      log.setRecSrcTab(this.getMainTableName());      log.setRecStatus("导入失败");      log.setUserID(meta.getSvUserID());      logList.add(log);    } finally {      this.getExchangeDataLogModel().setImportDataList(logList);    }    return succCount;  }  @Override  public Map<String, Map<String, AttachmentFile>> getAttachmentDataMap() {    // TODO Auto-generated method stub    return null;  }  public IZcEbEntrustServiceDelegate getZcEbEntrustServiceDelegate() {    if (this.zcEbEntrustServiceDelegate == null) {      zcEbEntrustServiceDelegate = (IZcEbEntrustServiceDelegate) ServiceFactory      .create(IZcEbEntrustServiceDelegate.class,      "zcEbEntrustServiceDelegate");    }    return zcEbEntrustServiceDelegate;  }  private DataExchangeLog makeDataExchangeLog(String userID, String succFail,  String exceptionMsg, String detail, String type, ZcEbEntrust bid) {    DataExchangeLog log = new DataExchangeLog();    log.setDataTypeID(this.getDataTypeID());    log.setDataTypeName(this.getDataTypeName());    log.setUserID(userID);    log.setRecStatus(succFail);    log.setDetailInfo(detail);    log.setExceptText(exceptionMsg);    log.setGentType(type);    log.setOptDateTime(new Date());    log.setRecSrcID(bid.getSn());    log.setRecSrcName(bid.getAuditorName());    log.setRecSrcTab(this.getMainTableName());    return log;  }}
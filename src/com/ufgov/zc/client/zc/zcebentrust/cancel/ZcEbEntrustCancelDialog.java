package com.ufgov.zc.client.zc.zcebentrust.cancel;import java.awt.BorderLayout;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog;import java.awt.Dimension;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbEntrustCancelToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.celleditor.MoneyCellEditor;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.cellrenderer.NumberCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.CompanyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldCellEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.IntFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.OrgFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityTreeHandler;import com.ufgov.zc.common.zc.model.ZcBaseBill;import com.ufgov.zc.common.zc.model.ZcEbEntrustCancel;import com.ufgov.zc.common.zc.model.ZcEbEntrustCancelDetail;public class ZcEbEntrustCancelDialog extends GkBaseDialog {	private static final long serialVersionUID = 1L;	private ZcEbEntrustCancelDialog self = this;	private ZcEbEntrustCancelEditPanel editPanel;	@SuppressWarnings("unchecked")	public ZcEbEntrustCancelDialog(ZcEbEntrustCancelListPanel listPanel,			List beanList, int editingRow, String tabStatus) {		super(listPanel.getParentWindow(),				Dialog.ModalityType.APPLICATION_MODAL);		editPanel = new ZcEbEntrustCancelEditPanel(new ListCursor(beanList,				editingRow), tabStatus, listPanel);		setLayout(new BorderLayout());		add(editPanel);		this.setTitle("任务取消");		this.setSize(UIConstants.DIALOG_2_LEVEL_WIDTH,				UIConstants.DIALOG_2_LEVEL_HEIGHT);		this.moveToScreenCenter();		this.setVisible(true);	}	public ZcEbEntrustCancelDialog(Window parentWindow, List viewList, int row,			String tabStatus) {	}	public ZcEbEntrustCancelDialog() {	}	public class ZcEbEntrustCancelEditPanel extends AbstractMainSubEditPanel {		private RequestMeta requestMeta = WorkEnv.getInstance()				.getRequestMeta();		private String compoId = "ZC_EB_ENTRUST_CANCEL";		private FuncButton traceButton = new TraceButton();		private FuncButton previousButton = new PreviousButton();		private FuncButton nextButton = new NextButton();		private FuncButton exitButton = new ExitButton();		private FuncButton sendButton = new SendButton();		private FuncButton saveButton = new SaveButton();		private AddButton addButton = new AddButton();		private EditButton editButton = new EditButton();		private DeleteButton deleteButton = new DeleteButton();		// 工作流收回		private FuncButton callbackButton = new CallbackButton();		private FuncButton auditPassButton = new SuggestAuditPassButton(); // 审核通过		private FuncButton unAuditButton = new UnauditButton(); // 销审		private FuncButton unTreadButton = new UntreadButton(); // 退回		private ListCursor listCursor;		private ZcEbEntrustCancel oldEntrust;		private ZcEbEntrustCancelListPanel listPanel;		private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;		private String status = "0";		private ElementConditionDto detailDto = null;		// 任务明细		JTabbedPane itemTabPane = null;		private JTablePanel tablePanel = new JTablePanel();		private JFuncToolBar subPackTableToolbar;		private JFuncToolBar subTableToolbar;		private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();		public ZcEbEntrustCancelEditPanel(ListCursor listCursor,				String tabStatus, ZcEbEntrustCancelListPanel listPanel) {			super(ZcEbEntrustCancel.class, BillElementMeta					.getBillElementMetaWithoutNd("ZC_EB_ENTRUST_CANCEL"));			this.listCursor = listCursor;			this.listPanel = listPanel;			this.workPanel.setBorder(BorderFactory.createTitledBorder(					BorderFactory.createEtchedBorder(), "任务取消",					TitledBorder.CENTER, TitledBorder.TOP,					new Font("宋体", Font.BOLD, 15), Color.BLUE));			this.colCount = 3;			requestMeta.setCompoId(compoId);			init();			refreshData();		}		public ZcEbEntrustCancelEditPanel() {		}		private void setOldObject() {			oldEntrust = (ZcEbEntrustCancel) ObjectUtil.deepCopy(listCursor					.getCurrentObject());		}		public List<AbstractFieldEditor> createFieldEditors() {			List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();			TextFieldEditor sn = new TextFieldEditor(					LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_SN),					"sn");			TextFieldEditor snCode = new TextFieldEditor("任务单编号", "snCode");			ElementConditionDto dto = new ElementConditionDto();			dto.setNd(this.requestMeta.getSvNd());			dto.setCoCode(this.requestMeta.getSvCoCode());			String[] columNames = { "任务单编号", "通知书编号", "采购项目", "项目预算", "采购方式",					"文件经办人", "开标经办人" };			EntrustHandler entrustHandler = new EntrustHandler(columNames);			ForeignEntityFieldEditor makeCode = new ForeignEntityFieldEditor(					"ZcEbEntrustCancel.getZcEbEntrustForCancel", dto, 20,					entrustHandler, columNames, "通知书编号", "zcMakeCode");			TextFieldEditor editor0 = new TextFieldEditor("采购项目", "zcMakeName");			MoneyFieldEditor editor1 = new MoneyFieldEditor(					LangTransMeta							.translate(ZcElementConstants.FIELD_TRANS_ZC_MONEY_BI_SUM),					"zcMoneyBiSum");			AsValFieldEditor editor3 = new AsValFieldEditor(					LangTransMeta							.translate(ZcElementConstants.FIELD_TRANS_ZC_PIFU_CGFS),					"zcPifuCgfs",					"ZC_VS_PITEM_OPIWAY");			IForeignEntityTreeHandler companyHandler = new IForeignEntityTreeHandler() {				@Override				public void excute(List selectedDatas) {				}				@Override				public boolean isMultipleSelect() {					return false;				}				@Override				public boolean isSelectLeaf() {					return false;				}			};			CompanyFieldEditor editor2 = new CompanyFieldEditor(					LangTransMeta							.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_NAME),					"coCode",					companyHandler);			OrgFieldEditor zcZgCsCode = new OrgFieldEditor(					LangTransMeta							.translate(ZcElementConstants.FIELD_TRANS_ZC_ZG_CS_CODE),					"orgCode", true);			// 年度			IntFieldEditor zcCoCodeNd = new IntFieldEditor(					LangTransMeta							.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_CODE_ND),					"nd");			TextFieldEditor editor4 = new TextFieldEditor(					LangTransMeta							.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_LINKMAN),					"zcMakeLinkman");			TextFieldEditor editor5 = new TextFieldEditor(					LangTransMeta							.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_TEL),					"zcMakeTel");			TextFieldEditor editor10 = new TextFieldEditor(					LangTransMeta							.translate(ZcElementConstants.FIELD_TRANS_REMARK),					"remark");			DateFieldEditor editor9 = new DateFieldEditor(					LangTransMeta							.translate(ZcElementConstants.FIELD_TRANS_ENTRUST_DATE),					"zcInputDate");			DateFieldEditor editor8 = new DateFieldEditor("下达时间", "zcWeitoDate");			AsValFieldEditor editor11 = new AsValFieldEditor(					LangTransMeta							.translate(ZcElementConstants.FIELD_TRANS_STATUS),					"status",					"ZC_VS_ENTRUST_STATUS");			// editorList.add(sn);			editorList.add(makeCode);			editorList.add(snCode);			editorList.add(editor0);			editorList.add(editor1);			editorList.add(editor3);			editorList.add(editor2);			zcZgCsCode.setVisible(false);			editorList.add(zcZgCsCode);			editorList.add(zcCoCodeNd);			editorList.add(editor4);			editorList.add(editor5);			editorList.add(editor10);			editorList.add(editor8);			editor9.setVisible(false);			editorList.add(editor9);			editorList.add(editor11);			return editorList;		}		@Override		public void initToolBar(JFuncToolBar toolBar) {			toolBar.setModuleCode("ZC");			toolBar.setCompoId(compoId);			toolBar.add(editButton);			toolBar.add(deleteButton);			toolBar.add(saveButton);			toolBar.add(sendButton);			toolBar.add(traceButton);			toolBar.add(unAuditButton);			toolBar.add(previousButton);			toolBar.add(nextButton);			toolBar.add(auditPassButton);			toolBar.add(callbackButton);			toolBar.add(unTreadButton);			toolBar.add(exitButton);			editButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					doEdit();				}			});			deleteButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					doDelete();				}			});			saveButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 保存					doSave();				}			});			sendButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					doSend();				}			});			auditPassButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					doAudit();				}			});			callbackButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 收回					doCallback();				}			});			unAuditButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					doUnaudit();				}			});			unTreadButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					doUntread();				}			});			traceButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					doTrace();				}			});			previousButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					doPrevious();				}			});			nextButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					doNext();				}			});			exitButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					doExit();				}			});		}		protected void doDelete() {			int num = JOptionPane					.showConfirmDialog(this, "是否删除当前单据", "删除确认", 0);			if (num == JOptionPane.YES_OPTION) {				boolean success = true;				ZcEbEntrustCancel zcEbEntrustCancel = null;				String errorInfo = "";				try {					requestMeta.setFuncId(deleteButton.getFuncId());					zcEbEntrustCancel = (ZcEbEntrustCancel) this.listCursor							.getCurrentObject();					this.listPanel.zcEbEntrustCancelServiceDelegate							.deleteZcEbEntrustCancelFN(zcEbEntrustCancel,									this.requestMeta);				} catch (Exception e) {					logger.error(e.getMessage(), e);					success = false;					errorInfo += e.getMessage();				}				if (success) {					this.listCursor.removeCurrentObject();					JOptionPane.showMessageDialog(this, "删除成功！", "提示",							JOptionPane.INFORMATION_MESSAGE);					this.refreshData();					this.listPanel.refreshCurrentTabData();				} else {					JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo,							"错误", JOptionPane.ERROR_MESSAGE);				}			}		}		protected void doEdit() {			this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;			setButtonStatus();			updateFieldEditorsEditable();		}		private void setButtonStatus() {			if (this.btnStatusList.size() == 0) {				ButtonStatus bs = new ButtonStatus();				bs.setButton(this.addButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.editButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				// bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);				bs.addBillStatus(status);				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.saveButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);				bs.addBillStatus(status);				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.deleteButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				bs.addBillStatus(status);				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.unAuditButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				bs.addBillStatus(status);				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.exitButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);				bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.previousButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.nextButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				btnStatusList.add(bs);			}			ZcEbEntrustCancel obj = (ZcEbEntrustCancel) (this.listCursor					.getCurrentObject());			String billStatus = obj.getStatus();			ZcUtil.setButtonEnable(this.btnStatusList, billStatus,					this.pageStatus, this.compoId, obj.getProcessInstId());			setSubTableButton();		}		private void setSubTableButton() {			if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)					|| this.pageStatus							.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {				if (this.subPackTableToolbar != null) {					this.subPackTableToolbar.setEnabled(true);				}				if (this.subTableToolbar != null) {					this.subTableToolbar.setEnabled(true);				}			} else {				if (this.subPackTableToolbar != null) {					this.subPackTableToolbar.setEnabled(false);				}				if (this.subTableToolbar != null) {					this.subTableToolbar.setEnabled(false);				}			}		}		private void doPrevious() {			listCursor.previous();			refreshData();		}		private void doNext() {			listCursor.next();			refreshData();		}		public void doExit() {			self.closeDialog();		}		private boolean checkBeforeSave() {			List notNullBillElementList = BillElementMeta					.getBillElementMetaWithoutNd("ZC_EB_ENTRUST_CANCEL")					.getNotNullBillElement();			ZcEbEntrustCancel zcEbEntrust = (ZcEbEntrustCancel) this.listCursor					.getCurrentObject();			StringBuilder errorInfo = new StringBuilder();			String validateInfo = ZcUtil.validateBillElementNull(zcEbEntrust,					notNullBillElementList);			if (validateInfo.length() != 0) {				errorInfo.append(validateInfo.toString()).append("\n");			} else if (zcEbEntrust.getPackNum() > 0) {				if (zcEbEntrust.getPackList() == null						|| zcEbEntrust.getPackList().size() == 0) {					errorInfo.append("请添加要取消的包\n");				} else {					for (int i = 0; i < zcEbEntrust.getPackList().size(); i++) {						ZcEbEntrustCancelDetail detail = (ZcEbEntrustCancelDetail) zcEbEntrust								.getPackList().get(i);						if (detail.getPackCode() == null								|| "".equals(detail.getPackCode())) {							errorInfo.append("包名不能为空\n");							break;						}					}				}			}			if (errorInfo.length() != 0) {				JOptionPane.showMessageDialog(this, errorInfo.toString(), "提示",						JOptionPane.WARNING_MESSAGE);				return true;			}			return false;		}		public boolean doSave() {			if (checkBeforeSave()) {				return false;			}			if (!isDataChanged()) {				JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示",						JOptionPane.INFORMATION_MESSAGE);				return false;			}			ZcEbEntrustCancel afterSaveBill = (ZcEbEntrustCancel) this.listCursor					.getCurrentObject();			boolean success = true;			String errorInfo = "";			try {				requestMeta.setFuncId(saveButton.getFuncId());				afterSaveBill = listPanel.zcEbEntrustCancelServiceDelegate						.saveZcEbEntrustCancelFN(afterSaveBill, requestMeta);				listCursor.setCurrentObject(afterSaveBill);			} catch (Exception e) {				logger.error(e.getMessage(), e);				success = false;				errorInfo += e.getMessage();			}			if (success) {				this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;				this.refreshData();				JOptionPane.showMessageDialog(this, "保存成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.listPanel.refreshCurrentTabData();			} else {				JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo,						"错误", JOptionPane.ERROR_MESSAGE);			}			return success;		}		private void doSend() {			ZcEbEntrustCancel entrust = (ZcEbEntrustCancel) this.listCursor					.getCurrentObject();			if (entrust == null) {				return;			}			ZcEbEntrustCancel afterSaveBill = null;			String errorInfo = "";			boolean success = true;			try {				requestMeta.setFuncId(sendButton.getFuncId());				afterSaveBill = this.listPanel.zcEbEntrustCancelServiceDelegate						.newCommitFN(entrust, requestMeta);			} catch (Exception e) {				success = false;				logger.error(e.getMessage(), e);				errorInfo += e.getMessage();			}			if (success) {				this.refreshData();				JOptionPane.showMessageDialog(this, "送审成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.listPanel.refreshCurrentTabData();			} else {				JOptionPane.showMessageDialog(this, "送审失败 ！" + errorInfo, "错误",						JOptionPane.ERROR_MESSAGE);			}		}		/*		 * 		 * 收回		 */		private void doCallback() {			boolean success = true;			ZcEbEntrustCancel afterSaveBill = null;			String errorInfo = "";			try {				requestMeta.setFuncId(this.callbackButton.getFuncId());				ZcEbEntrustCancel entrust = (ZcEbEntrustCancel) this.listCursor						.getCurrentObject();				entrust.setAuditorId(WorkEnv.getInstance().getCurrUserId());				afterSaveBill = listPanel.zcEbEntrustCancelServiceDelegate						.callbackFN(entrust, requestMeta);			} catch (Exception e) {				success = false;				logger.error(e.getMessage(), e);				errorInfo += e.getMessage();			}			if (success) {				this.refreshData();				JOptionPane.showMessageDialog(this, "收回成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.listPanel.refreshCurrentTabData();			} else {				JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误",						JOptionPane.ERROR_MESSAGE);			}		}		private void doUnaudit() {			ZcEbEntrustCancel entrust = (ZcEbEntrustCancel) ObjectUtil					.deepCopy(this.listCursor.getCurrentObject());			if (entrust == null) {				return;			}			ZcEbEntrustCancel afterSaveBill = null;			String errorInfo = "";			boolean success = true;			try {				requestMeta.setFuncId(unAuditButton.getFuncId());				afterSaveBill = this.listPanel.zcEbEntrustCancelServiceDelegate						.unAuditFN(entrust, requestMeta);			} catch (Exception e) {				success = false;				logger.error(e.getMessage(), e);				errorInfo += e.getMessage();			}			if (success) {				this.refreshData();				JOptionPane.showMessageDialog(this, "销审成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.listPanel.refreshCurrentTabData();			} else {				JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误",						JOptionPane.ERROR_MESSAGE);			}		}		private void doAudit() {			ZcEbEntrustCancel entrust = (ZcEbEntrustCancel) this.listCursor					.getCurrentObject();			if (entrust == null) {				return;			}			GkCommentDialog commentDialog = new GkCommentDialog(					DefaultKeyboardFocusManager							.getCurrentKeyboardFocusManager().getActiveWindow(),					ModalityType.APPLICATION_MODAL);			if (commentDialog.cancel) {				return;			}			ZcEbEntrustCancel afterSaveBill = null;			String errorInfo = "";			boolean success = true;			try {				requestMeta.setFuncId(this.auditPassButton.getFuncId());				if(WorkEnv.getInstance().containRole("CG_CGZX_FZR")){				  entrust.setRoleId("CG_CGZX_FZR");				}			  if(WorkEnv.getInstance().containRole("CG_CGCZ")){          entrust.setRoleId("CG_CGCZ");        }				entrust.setComment(commentDialog.getComment());				afterSaveBill = this.listPanel.zcEbEntrustCancelServiceDelegate						.auditFN(entrust, requestMeta);			} catch (Exception e) {				success = false;				logger.error(e.getMessage(), e);				errorInfo += e.getMessage();			}			if (success) {				this.refreshData();				JOptionPane.showMessageDialog(this, "审核成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.listPanel.refreshCurrentTabData();			} else {				JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误",						JOptionPane.ERROR_MESSAGE);			}		}		private void doUntread() {			ZcEbEntrustCancel entrust = (ZcEbEntrustCancel) this.listCursor					.getCurrentObject();			if (entrust == null) {				return;			}			ZcEbEntrustCancel afterSaveBill = null;			String errorInfo = "";			boolean success = true;			try {				requestMeta.setFuncId(this.unTreadButton.getFuncId());				afterSaveBill = this.listPanel.zcEbEntrustCancelServiceDelegate						.untreadFN(entrust, requestMeta);			} catch (Exception e) {				success = false;				logger.error(e.getMessage(), e);				errorInfo += e.getMessage();			}			if (success) {				this.refreshData();				JOptionPane.showMessageDialog(this, "退回成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.listPanel.refreshCurrentTabData();			} else {				JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误",						JOptionPane.ERROR_MESSAGE);			}		}		private void doTrace() {			ZcBaseBill bean = (ZcBaseBill) this.listCursor.getCurrentObject();			if (bean == null) {				return;			}			ZcUtil.showTraceDialog(bean, compoId);		}		public boolean isDataChanged() {			if (!this.saveButton.isVisible()) {				return false;			}			return !DigestUtil.digest(oldEntrust).equals(					DigestUtil.digest(listCursor.getCurrentObject()));		}		public JComponent createSubBillPanel() {			// 任务明细			itemTabPane = new JTabbedPane();			tablePanel.init();			tablePanel.setTablePreferencesKey(this.getClass().getName()					+ "_table");			tablePanel.getTable().setShowCheckedColumn(true);			tablePanel.getSearchBar().setVisible(false);			tablePanel.getTable().getTableRowHeader()					.setPreferredSize(new Dimension(50, 0));			this.subPackTableToolbar = new JFuncToolBar();			JButton addBtn1 = new JButton("添加");			JButton insertBtn1 = new JButton("插入");			JButton delBtn1 = new JButton("删除");			this.subPackTableToolbar.add(addBtn1);			this.subPackTableToolbar.add(insertBtn1);			this.subPackTableToolbar.add(delBtn1);			tablePanel.add(this.subPackTableToolbar, BorderLayout.SOUTH);			addBtn1.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					ZcEbEntrustCancel entrust = (ZcEbEntrustCancel) listCursor							.getCurrentObject();					ZcEbEntrustCancelDetail detail = new ZcEbEntrustCancelDetail();					detail.setEntrustCancelId(entrust.getEntrustCancelId());					detail.setTempId(Guid.genID());					addSub(tablePanel, new ZcEbEntrustCancelDetail());				}			});			insertBtn1.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					ZcEbEntrustCancel entrust = (ZcEbEntrustCancel) listCursor							.getCurrentObject();					ZcEbEntrustCancelDetail detail = new ZcEbEntrustCancelDetail();					detail.setEntrustCancelId(entrust.getEntrustCancelId());					detail.setTempId(Guid.genID());					insertSub(tablePanel, new ZcEbEntrustCancelDetail());				}			});			delBtn1.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					deleteSub(tablePanel);				}			});			itemTabPane.setMinimumSize(new Dimension(240, 300));			itemTabPane.addTab("任务明细", tablePanel);			return itemTabPane;		}		private void stopTableEditing() {			JPageableFixedTable itemTable = this.tablePanel.getTable();			if (itemTable.isEditing()) {				itemTable.getCellEditor().stopCellEditing();			}		}		private void setTableItemEditor(JTable table) {			table.setDefaultEditor(String.class, new TextCellEditor());			if (detailDto == null) {				detailDto = new ElementConditionDto();			}			String[] columNames = { "分包编码", "分包名称", "分包预算" };			PackHandler entrustHandler = new PackHandler(columNames);			ForeignEntityFieldCellEditor pack = new ForeignEntityFieldCellEditor(					"ZcEbEntrustCancel.selectDetailForCancel", this.detailDto,					20, entrustHandler, columNames, "", "packName");			SwingUtil.setTableCellEditor(table, "ZC_FIELD_PACK_NAME", pack);			// SwingUtil.setTableCellRenderer(table, "ZC_FIELD_PACK_SUM", new			// NumberCellRenderer());			SwingUtil.setTableCellEditor(table, "ZC_FIELD_PACK_SUM",					new MoneyCellEditor(false));			SwingUtil.setTableCellRenderer(table, "ZC_FIELD_PACK_SUM",					new NumberCellRenderer());		}		private void refreshData() {			ZcEbEntrustCancel entrust = (ZcEbEntrustCancel) listCursor					.getCurrentObject();			if (entrust == null || entrust.getEntrustCancelId() == null					|| "".equals(entrust.getEntrustCancelId())) {				// 新增页面				entrust = new ZcEbEntrustCancel();				entrust.setEntrustCancelId("");				setDefualtValue(entrust);				this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;				List lst = new ArrayList();				lst.add(entrust);				this.listCursor.setDataList(lst, -1);			} else {				entrust = listPanel.zcEbEntrustCancelServiceDelegate						.selectByKey(entrust.getEntrustCancelId(), requestMeta);				listCursor.setCurrentObject(entrust);			}			if (entrust.getPackList() == null					|| entrust.getPackList().size() == 0) {				this.itemTabPane.removeAll();			}			setEditingObject((ZcEbEntrustCancel) this.listCursor					.getCurrentObject());			refreshSubTableData(entrust);			setButtonStatus(entrust, requestMeta, listCursor);			updateFieldEditorsEditable();			setButtonStatus();			setOldObject();		}		@Override		protected void updateFieldEditorsEditable() {			super.updateFieldEditors();			BeanTableModel itemModel = (BeanTableModel) this.tablePanel					.getTable().getModel();			if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)					|| this.pageStatus							.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {				for (AbstractFieldEditor fd : this.fieldEditors) {					if ("zcMakeCode".equals(fd.getFieldName())							|| "remark".equals(fd.getFieldName())) {						fd.setEnabled(true);					} else {						fd.setEnabled(false);					}				}				itemModel.setEditable(true);			} else if (this.pageStatus					.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {				for (AbstractFieldEditor fd : this.fieldEditors) {					fd.setEnabled(false);				}				itemModel.setEditable(false);			}		}		private void refreshSubTableData(ZcEbEntrustCancel entrust) {			tablePanel.setTableModel(ZcEbEntrustCancelToTableModelConverter					.convertDetailToTableModel(entrust.getPackList()));			ZcUtil.translateColName(this.tablePanel.getTable(),					ZcEbEntrustCancelToTableModelConverter.getItemInfo());			setTableItemEditor(this.tablePanel.getTable());		}		private void setDefualtValue(ZcEbEntrustCancel entrust) {			entrust.setStatus(status);			entrust.setNd(this.requestMeta.getSvNd());			entrust.setZcWeitoDate(this.requestMeta.getSysDate());			entrust.setZcInputCode(this.requestMeta.getSvUserID());			entrust.setZcInputDate(this.requestMeta.getSysDate());			entrust.setAgency(this.requestMeta.getSvCoCode());			entrust.setAgencyName(this.requestMeta.getSvCoName());			entrust.setOrgCode(this.requestMeta.getSvOrgCode());			entrust.setCoCode(this.requestMeta.getSvCoCode());		}		private class PackHandler implements IForeignEntityHandler {			private String[] columNames;			PackHandler(String[] columNames) {				this.columNames = columNames;			}			public boolean beforeSelect(ElementConditionDto dto) {				ZcEbEntrustCancel bean = (ZcEbEntrustCancel) self.editPanel.listCursor						.getCurrentObject();				if (bean.getPackList() != null) {					StringBuffer sb = new StringBuffer();					ZcEbEntrustCancelDetail dt = null;					for (int i = 0; i < bean.getPackList().size(); i++) {						dt = (ZcEbEntrustCancelDetail) bean.getPackList()								.get(i);						sb.append("'").append(dt.getPackCode()).append("',");					}					sb.append("' '");					dto.setZcText0(sb.toString());				}				return true;			}			@Override			public void excute(List selectedDatas) {				JTable table = self.editPanel.tablePanel.getTable();				BeanTableModel model = (BeanTableModel) table.getModel();				int k = table.getSelectedRow();				if (k < 0)					return;				int k2 = table.convertRowIndexToModel(k);				for (Object object : selectedDatas) {					ZcEbEntrustCancelDetail item = (ZcEbEntrustCancelDetail) object;					ZcEbEntrustCancel bean = (ZcEbEntrustCancel) self.editPanel.listCursor							.getCurrentObject();					ZcEbEntrustCancelDetail detail = (ZcEbEntrustCancelDetail) bean							.getPackList().get(k2);					detail.setPackCode(item.getPackCode());					detail.setPackName(item.getPackName());					detail.setPackDesc(item.getPackDesc());					detail.setPackSum(item.getPackSum());					self.editPanel.setEditingObject(bean);					// refreshSubData(bean.getBiList());					self.editPanel.listCursor.setCurrentObject(bean);				}			}			@Override			public boolean isMultipleSelect() {				// TCJLODO Auto-generated method stub				return false;			}			@Override			public TableModel createTableModel(List showDatas) {				Object data[][] = new Object[showDatas.size()][columNames.length];				for (int i = 0; i < showDatas.size(); i++) {					ZcEbEntrustCancelDetail item = (ZcEbEntrustCancelDetail) showDatas							.get(i);					int col = 0;					data[i][col++] = item.getPackName();					data[i][col++] = item.getPackDesc();					data[i][col++] = item.getPackSum();				}				MyTableModel model = new MyTableModel(data, columNames) {					public boolean isCellEditable(int row, int colum) {						return false;					}				};				return model;			}		}		private class EntrustHandler implements IForeignEntityHandler {			private String[] columNames;			EntrustHandler(String[] columNames) {				this.columNames = columNames;			}			@Override			public void excute(List selectedDatas) {				for (Object object : selectedDatas) {					ZcEbEntrustCancel entrust = (ZcEbEntrustCancel) object;					ZcEbEntrustCancel bean = (ZcEbEntrustCancel) self.editPanel.listCursor							.getCurrentObject();					bean.setSn(entrust.getSn());					bean.setZcMakeCode(entrust.getZcMakeCode());					bean.setZcMakeName(entrust.getZcMakeName());					bean.setZcMakeLinkman(entrust.getZcMakeLinkman());					bean.setZcMakeTel(entrust.getZcMakeTel());					bean.setZcMoneyBiSum(entrust.getZcMoneyBiSum());					bean.setZcPifuCgfs(entrust.getZcPifuCgfs());					bean.setZcWeitoDate(entrust.getZcWeitoDate());					bean.setProjBidMan(entrust.getProjBidMan());					bean.setProjDocMan(entrust.getProjDocMan());					bean.setSnCode(entrust.getSnCode());					bean.setPackNum(entrust.getPackNum());					bean.setOrgCode(entrust.getOrgCode());					if (bean.getPackList() != null) {						bean.getPackList().clear();					}					self.editPanel.itemTabPane.removeAll();					if (entrust.getPackNum() > 0) {						self.editPanel.itemTabPane.addTab("任务明细", tablePanel);					}					detailDto.setZcMakeCode(bean.getSn());					self.editPanel.setEditingObject(bean);					self.editPanel.refreshSubTableData(bean);					// refreshSubData(bean.getBiList());					self.editPanel.listCursor.setCurrentObject(bean);				}			}			@Override			public boolean isMultipleSelect() {				// TCJLODO Auto-generated method stub				return false;			}			public void afterClear() {				ZcEbEntrustCancel bean = (ZcEbEntrustCancel) self.editPanel.listCursor						.getCurrentObject();				bean.setSn("");				bean.setSnCode("");			}			@Override			public TableModel createTableModel(List showDatas) {				Object data[][] = new Object[showDatas.size()][columNames.length];				for (int i = 0; i < showDatas.size(); i++) {					ZcEbEntrustCancel item = (ZcEbEntrustCancel) showDatas							.get(i);					int col = 0;					data[i][col++] = item.getSnCode();					data[i][col++] = item.getZcMakeCode();					data[i][col++] = item.getZcMakeName();					data[i][col++] = item.getZcMoneyBiSum();					data[i][col++] = AsValDataCache.getName(							"ZC_VS_PITEM_OPIWAY", item.getZcPifuCgfs());					data[i][col++] = item.getProjDocMan();					data[i][col++] = item.getProjBidMan();				}				MyTableModel model = new MyTableModel(data, columNames) {					public boolean isCellEditable(int row, int colum) {						return false;					}				};				return model;			}		}	}}
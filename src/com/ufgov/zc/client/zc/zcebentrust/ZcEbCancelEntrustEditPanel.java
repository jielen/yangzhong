package com.ufgov.zc.client.zc.zcebentrust;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE;import static com.ufgov.zc.common.system.constants.ZcElementConstants.FIELD_TRANS_ZC_PITEM_ARR_DATE;import java.awt.BorderLayout;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Dimension;import java.awt.Font;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JSplitPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbCancelEntrustModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JSaveableSplitPane;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.WorkflowTrace;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.IsSendToNextButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.celleditor.DateCellEditor;import com.ufgov.zc.client.component.table.celleditor.IntCellEditor;import com.ufgov.zc.client.component.table.celleditor.MoneyCellEditor;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.celleditor.zc.ZcBCatalogueCellEditor;import com.ufgov.zc.client.component.table.cellrenderer.DateCellRenderer;import com.ufgov.zc.client.component.table.cellrenderer.NumberCellRenderer;import com.ufgov.zc.client.component.table.codecelleditor.FileCellEditor;import com.ufgov.zc.client.component.ui.conditionitem.ConditionFieldConstants;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextAreaFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcEbCancelEntrust;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.publish.IZcEbCancelEntrustDelegate;/** * 终止暂停任务 * @author wuwba * */public class ZcEbCancelEntrustEditPanel extends AbstractMainSubEditPanel {  /**   *    */  private static final long serialVersionUID = 1L;  protected static final Logger logger = Logger.getLogger(ZcEbCanCelEntrustDialog.class);  public static final String compoId = "ZC_EB_CANCEL_ENTRUST";  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private RequestMeta requestMeta;  private FuncButton addButton = new AddButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  public FuncButton printButton = new PrintButton();  //送主任审核  public FuncButton isSendToNextButton = new IsSendToNextButton();  //工作流送审  private FuncButton sendButton = new SendButton();  // 工作流收回  private FuncButton callbackButton = new CallbackButton();  // 工作流填写意见审核通过  private FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流销审  private FuncButton unAuditButton = new UnauditButton();  // 工作流退回  private FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  private FuncButton traceButton = new TraceButton();  private ListCursor listCursor;  private ZcEbCancelEntrust oldZcEbCancelEntrust;  private ZcEbCancelEntrustEditPanel self = this;  private String tabStatus;  private ZcEbCancelEntrustListPanel listPanel;  private GkBaseDialog parent;  private IZcEbCancelEntrustDelegate cancelEntrustDelegate;  public ZcEbCancelEntrustEditPanel(ZcEbCanCelEntrustDialog parent, ListCursor listCursor, String tabStatus, ZcEbCancelEntrustListPanel listPanel) {    super(ZcEbCancelEntrust.class, listPanel.getBillElementMeta());    this.tabStatus = tabStatus;    this.listCursor = listCursor;    this.listPanel = listPanel;    this.parent = parent;    cancelEntrustDelegate = listPanel.getCancelEntrustDelegate();    requestMeta = listPanel.getRequestMeta();    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),    LangTransMeta.translate(ZcElementConstants.TITLE_FIELD_CANCEL_ENTRUST), TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15),    Color.BLUE));    this.colCount = 3;    init();    refreshData();  }  private void refreshData() {    ZcEbCancelEntrust cancelEntrust = (ZcEbCancelEntrust) this.listCursor.getCurrentObject();    if (cancelEntrust == null) {      cancelEntrust = new ZcEbCancelEntrust();      ZcEbEntrust ebEntrust = new ZcEbEntrust();      cancelEntrust.setZcEbEntrust(ebEntrust);      cancelEntrust.setStatus("draft");      cancelEntrust.setInputDate(requestMeta.getSysDate());      cancelEntrust.setNd(requestMeta.getSvNd());      //通过fnew判断是新增      //this.requestMeta.setFuncId("fnew");      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      List lst = new ArrayList();      lst.add(cancelEntrust);      this.listCursor.setDataList(lst, -1);      listCursor.setCurrentObject(cancelEntrust);    } else {      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    }    setEditingObject(cancelEntrust);    setButtonStatus(cancelEntrust, requestMeta, listCursor);    refreshSubTableData(cancelEntrust.getZcEbEntrust().getDetailList());    stopEditing();    setOldObject();  }  protected void updateFieldEditors() {    for (AbstractFieldEditor editor : fieldEditors) {      editor.setEditObject(editingObject);    }    for (AbstractFieldEditor editor : msgEditors) {      editor.setEditObject(editingObject);    }  }  private ForeignEntityFieldEditor snEditor;  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    //采购计划-外部实体选择任务单    String[] columNames = { "任务编号", "任务名称", "采购单位" };    ZcEbEntrustFnHandler handler = new ZcEbEntrustFnHandler(columNames);    ElementConditionDto dto = new ElementConditionDto();    dto.setWfcompoId(compoId);    dto.setExecutor(requestMeta.getSvUserID());    ForeignEntityFieldEditor snEditor = new ForeignEntityFieldEditor("ZcEbCancelEntrust.getZcEbEntrustList", dto, 20, handler, columNames,    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_SN), "zcEbEntrust.zcMakeCode");    editorList.add(snEditor);    //采购内容    TextFieldEditor cgnr = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_CGNR), "zcEbEntrust.zcMakeName");    cgnr.setEnabled(false);    editorList.add(cgnr);    //采购金额    MoneyFieldEditor cgje = new MoneyFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_SUM), "cgje");    cgje.setEnabled(false);    editorList.add(cgje);    //采购单位    TextFieldEditor cgdw = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_CGDW), "zcEbEntrust.agencyName");    cgdw.setEnabled(false);    editorList.add(cgdw);    //采购代理机构    TextFieldEditor dljg = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_AGEY_CODE),    "zcEbEntrust.agencyName");    dljg.setEnabled(false);    editorList.add(dljg);    //采购方式    AsValFieldEditor cgfs = new AsValFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_CGFS),    "zcEbEntrust.zcPifuCgfs", "ZC_VS_PITEM_OPIWAY");    cgfs.setEnabled(false);    editorList.add(cgfs);    //录入日期    DateFieldEditor inputDate = new DateFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_CANCEL_DATE), "inputDate");    inputDate.setEnabled(false);    editorList.add(inputDate);    AsValFieldEditor status = new AsValFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_CANCEL_STATUS), "status",    ConditionFieldConstants.ZC_VS_CANCEL_ENTRUST_STATUS);    status.setEnabled(false);    editorList.add(status);    return editorList;  }  public class ZcEbEntrustFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbEntrustFnHandler(String columNames[]) {      this.columNames = columNames;    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbEntrust rowData = (ZcEbEntrust) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getZcMakeCode();        data[i][col++] = rowData.getZcMakeName();        data[i][col++] = rowData.getZcMoneyBiSum();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }        public Class getColumnClass(int column) {          if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {            for (int row = 0; row < this.getRowCount(); row++) {              if (getValueAt(row, column) != null) {                return getValueAt(row, column).getClass();              }            }          }          return Object.class;        }      };      return model;    }    public void excute(List selectedDatas) {      ZcEbCancelEntrust cancelEntrust = (ZcEbCancelEntrust) listCursor.getCurrentObject();      for (Object obj : selectedDatas) {        ZcEbEntrust ebEntrust = (ZcEbEntrust) obj;        cancelEntrust.setZcEbEntrust(ebEntrust);        cancelEntrust.setCgje(ebEntrust.getZcMoneyBiSum());        cancelEntrust.setCgdwCode(ebEntrust.getCoCode());        cancelEntrust.setCgdwName(ebEntrust.getCoName());        cancelEntrust.setCgfs(ebEntrust.getZcPifuCgfs());        cancelEntrust.setCgnr(ebEntrust.getZcMakeName());        cancelEntrust.setDljgCode(ebEntrust.getAgency());        cancelEntrust.setDljgName(ebEntrust.getAgency());        cancelEntrust.setLinkMan(ebEntrust.getZcMakeLinkman());        cancelEntrust.setLinkManTel(ebEntrust.getZcMakeTel());      }      self.setEditingObject(cancelEntrust);      refreshSubTableData(cancelEntrust.getZcEbEntrust().getDetailList());    }    public boolean isMultipleSelect() {      return false;    }    public void afterClear() {      ZcEbCancelEntrust cancelEntrust = (ZcEbCancelEntrust) listCursor.getCurrentObject();      cancelEntrust.setZcEbEntrust(null);      cancelEntrust.setCgdwName(null);      cancelEntrust.setCgnr(null);      cancelEntrust.setLinkMan(null);      cancelEntrust.setLinkManTel(null);      cancelEntrust.setCgje(null);    }  }  public JComponent createSubBillPanel() {    //显示采购明细    JTabbedPane itemTabPane = createItemPane();    //显示意见栏    JTabbedPane opinionTabPane = createopinionPane();    JSaveableSplitPane splitPane = new JSaveableSplitPane(JSplitPane.VERTICAL_SPLIT, itemTabPane, opinionTabPane);    splitPane.setDividerDefaultLocation(this.getClass().getName() + "_splitPane_dividerLocation", 150);    splitPane.setContinuousLayout(true);    splitPane.setOneTouchExpandable(true);    // 只显示向下的箭头    splitPane.setDividerSize(10);    splitPane.setBackground(self.getBackground());    return splitPane;  }  private JTablePanel tablePanel;  /**   * 创建采购明细   */  private JTabbedPane createItemPane() {    JTabbedPane pane = new JTabbedPane();    tablePanel = new JTablePanel();    tablePanel.init();    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_table");    tablePanel.getTable().setShowCheckedColumn(true);    tablePanel.getSearchBar().setVisible(false);    tablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 0));    pane.add("采购明细", tablePanel);    return pane;  }  private void refreshSubTableData(List deList) {    tablePanel.setTableModel(ZcEbCancelEntrustModelConverter.convertDetailToTableModel(deList));    tablePanel.getTable().setEnabled(false);  }  private void setTableItemEditor(JTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    SwingUtil.setTableCellEditor(table, FIELD_TRANS_ZC_PITEM_ARR_DATE, new DateCellEditor());    SwingUtil.setTableCellRenderer(table, FIELD_TRANS_ZC_PITEM_ARR_DATE, new DateCellRenderer());    SwingUtil.setTableCellEditor(table, FIELD_TRANS_ZC_CATALOGUE_CODE, new ZcBCatalogueCellEditor());    SwingUtil.setTableCellEditor(table, ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH, new FileCellEditor("zcPitemAttachBlobid",    (BeanTableModel) table.getModel()));    SwingUtil.setTableCellEditor(table, "ZC_FIELD_ZC_ITEM_SUM", new MoneyCellEditor(false));    SwingUtil.setTableCellRenderer(table, "ZC_FIELD_ZC_ITEM_SUM", new NumberCellRenderer());    SwingUtil.setTableCellEditor(table, "ZC_MER_PRICE", new MoneyCellEditor(false));    SwingUtil.setTableCellRenderer(table, "ZC_MER_PRICE", new NumberCellRenderer());    SwingUtil.setTableCellEditor(table, "ZC_FIELD_ZC_CAIG_NUM", new IntCellEditor(false));  }  private List<AbstractFieldEditor> msgEditors = new ArrayList<AbstractFieldEditor>();  /**   * 创建各处意见   */  private AbstractFieldEditor cgdwOpinion;  private AbstractFieldEditor cgcOpinion;  private AbstractFieldEditor dljgOpinion;  private JTabbedPane createopinionPane() {    JTabbedPane tabPane = new JTabbedPane();    JPanel pane = new JPanel();    pane.setLayout(new GridLayout(3, 1));    //采购单位    JPanel paneCgdw = new JPanel(new BorderLayout());    paneCgdw.setBorder(BorderFactory.createTitledBorder(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_CANCEL_CGDW_OPINION)));    cgdwOpinion = new TextAreaFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_CANCEL_CGDW_OPINION), "cgdwOpinion");    paneCgdw.add(cgdwOpinion);    msgEditors.add(cgdwOpinion);    //采购处    JPanel paneCgc = new JPanel(new BorderLayout());    paneCgc.setBorder(BorderFactory.createTitledBorder(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_CANCEL_CGC_OPINION)));    cgcOpinion = new TextAreaFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_CANCEL_CGC_OPINION), "cgcOpinion");    paneCgc.add(cgcOpinion);    msgEditors.add(cgcOpinion);    //采购代理机构    JPanel paneDljg = new JPanel(new BorderLayout());    paneDljg.setBorder(BorderFactory.createTitledBorder(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_CANCEL_DLJG_OPINION)));    dljgOpinion = new TextAreaFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_ENTRUST_CANCEL_DLJG_OPINION), "dljgOpinion");    paneDljg.add(dljgOpinion);    msgEditors.add(dljgOpinion);    pane.add(paneCgdw, 0);    pane.add(paneCgc, 1);    pane.add(paneDljg, 2);    tabPane.add(pane, "处理意见");    return tabPane;  }  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(deleteButton);    toolBar.add(saveButton);    toolBar.add(editButton);    toolBar.add(exitButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(sendButton);    toolBar.add(callbackButton);    toolBar.add(suggestPassButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(traceButton);    toolBar.add(isSendToNextButton);    //添加    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    //删除    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    //保存    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    //修改    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    //退出    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    //上一条    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPreviousButton();      }    });    //下一条    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    //送审    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSendButton();      }    });    //收回    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doCallbackButton();      }    });    //手动提交    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSuggestPassButton((ZcEbCancelEntrust) listCursor.getCurrentObject(), ZcSettingConstants.IS_GOON_AUDIT_NO, null);      }    });    //销审    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doUnAuditButton();      }    });    //退回    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doUnTreadButton();      }    });    //流程跟踪    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doTraceButton();      }    });    //送主任    isSendToNextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSuggestPassButton((ZcEbCancelEntrust) listCursor.getCurrentObject(), ZcSettingConstants.IS_GOON_AUDIT_YES, null);      }    });  }  private void doAdd() {  }  private void doSave() {    if (checkBeforeSave()) {      return;    }    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    ZcEbCancelEntrust afterCancelEntrust = null;    boolean success = true;    String errorInfo = "";    try {      ZcEbCancelEntrust zcEbCancelEntrust = (ZcEbCancelEntrust) this.listCursor.getCurrentObject();      afterCancelEntrust = this.cancelEntrustDelegate.updateZcEbCancelEntrust(zcEbCancelEntrust, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listPanel.refreshCurrentTabData();      this.listCursor.setCurrentObject(afterCancelEntrust);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      refreshData();      listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doDelete() {    boolean success = true;    String errorInfo = "";    int num = JOptionPane.showConfirmDialog(this, "是否删除此单据");    if (num != JOptionPane.YES_OPTION) {      return;    } else {      try {        ZcEbCancelEntrust zcEbCancelEntrust = (ZcEbCancelEntrust) this.listCursor.getCurrentObject();        this.cancelEntrustDelegate.deleteZcEbCancelEntrust(zcEbCancelEntrust, requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        listCursor.removeCurrentObject();        listCursor.next();        refreshData();        listPanel.refreshCurrentTabData();        JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      } else {        JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doEdit() {    for (AbstractFieldEditor editor : msgEditors) {      editor.setEnabled(true);    }    snEditor.setEditable(true);  }  private void doExit() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      this.parent.dispose();    }  }  private void doPreviousButton() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      listCursor.setCurrentObject(oldZcEbCancelEntrust);      listCursor.previous();      refreshData();    }  }  private void doNext() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      listCursor.setCurrentObject(oldZcEbCancelEntrust);      listCursor.next();      refreshData();    }  }  private void doSendButton() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZcEbCancelEntrust afterSaveBill = null;      String errorInfo = "";      ZcEbCancelEntrust cancelEntrust = (ZcEbCancelEntrust) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      try {        requestMeta.setFuncId(this.sendButton.getFuncId());        cancelEntrust.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = this.cancelEntrustDelegate.newCommitFN(cancelEntrust, requestMeta);      } catch (Exception ex) {        errorInfo += ex.getMessage();        logger.error(ex.getMessage(), ex);        success = false;        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      }      if (success) {        this.listCursor.setCurrentObject(afterSaveBill);        JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      } else {        JOptionPane.showMessageDialog(this, "送审失败！", "提示", JOptionPane.INFORMATION_MESSAGE);      }      listPanel.refreshCurrentTabData();      refreshData();    }  }  private void doCallbackButton() {    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZcEbCancelEntrust afterSaveBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZcEbCancelEntrust cancelEntrust = (ZcEbCancelEntrust) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());        cancelEntrust.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getCancelEntrustDelegate().callbackFN(cancelEntrust, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        this.listCursor.setCurrentObject(afterSaveBill);        JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        refreshData();        listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doSuggestPassButton(ZcEbCancelEntrust cancelEntrust, Integer isGoonAudit, String defaultMsg) {    GkCommentDialog commentDialog = null;    if (defaultMsg == null) {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL);    } else {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL, defaultMsg);    }    if (commentDialog.cancel) {      return;    }    boolean success = true;    String errorInfo = "";    ZcEbCancelEntrust afterSaveBill = null;    try {      isGoonAudit = isGoonAudit == null ? 0 : isGoonAudit;      cancelEntrust.setIsGoonAudit(isGoonAudit);      cancelEntrust.setComment(commentDialog.getComment());      cancelEntrust.setAuditorId(WorkEnv.getInstance().getCurrUserId());      listPanel.getCancelEntrustDelegate().updateZcEbCancelEntrust(cancelEntrust, requestMeta);      afterSaveBill = listPanel.getCancelEntrustDelegate().suggestPassFN(cancelEntrust, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listCursor.setCurrentObject(afterSaveBill);      refreshData();      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doUnAuditButton() {    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZcEbCancelEntrust afterSaveBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZcEbCancelEntrust cancelEntrust = (ZcEbCancelEntrust) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());        cancelEntrust.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getCancelEntrustDelegate().unAuditFN(cancelEntrust, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        this.listCursor.setCurrentObject(afterSaveBill);        JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        refreshData();        listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doUnTreadButton() {    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      boolean success = true;      ZcEbCancelEntrust afterSaveBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZcEbCancelEntrust cancelEntrust = (ZcEbCancelEntrust) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());        cancelEntrust.setAuditorId(WorkEnv.getInstance().getCurrUserId());        afterSaveBill = listPanel.getCancelEntrustDelegate().unTreadFN(cancelEntrust, requestMeta);      } catch (Exception e) {        success = false;        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        refreshData();        listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doTraceButton() {    ZcEbCancelEntrust bean = (ZcEbCancelEntrust) this.listCursor.getCurrentObject();    if (bean == null) {      return;    }    ZcUtil.showTraceDialog(bean, compoId);  }  private boolean isDataChanged() {    return !DigestUtil.digest(oldZcEbCancelEntrust).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  private void setOldObject() {    oldZcEbCancelEntrust = (ZcEbCancelEntrust) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  //锁定数据不可编辑  private void stopEditing() {    ZcEbCancelEntrust cancelEntrust = (ZcEbCancelEntrust) this.listCursor.getCurrentObject();    if (this.pageStatus == ZcSettingConstants.PAGE_STATUS_NEW) {      cgdwOpinion.setEnabled(true);      cgcOpinion.setEnabled(false);      dljgOpinion.setEnabled(false);    } else if (this.pageStatus == ZcSettingConstants.PAGE_STATUS_BROWSE) {      for (AbstractFieldEditor editor : msgEditors) {        editor.setEnabled(false);      }      for (AbstractFieldEditor editor : fieldEditors) {        editor.setEnabled(false);      }    }    updateWFEditorEditable(cancelEntrust, requestMeta);  }  //保存前检查  private boolean checkBeforeSave() {    return false;  }}
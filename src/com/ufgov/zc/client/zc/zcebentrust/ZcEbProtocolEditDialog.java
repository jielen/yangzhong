/**    * @(#) project: ZC * @(#) file: ZcEbProtocolEditDialog.java *  * Copyright 2010 UFGOV, Inc. All rights reserved. * UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. *  */package com.ufgov.zc.client.zc.zcebentrust;import java.awt.BorderLayout;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Dimension;import java.awt.Font;import java.awt.GraphicsConfiguration;import java.awt.GraphicsDevice;import java.awt.GraphicsEnvironment;import java.awt.Image;import java.awt.Insets;import java.awt.Toolkit;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ComponentAdapter;import java.awt.event.ComponentEvent;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.util.ArrayList;import java.util.Date;import java.util.Iterator;import java.util.List;import javax.swing.BorderFactory;import javax.swing.ImageIcon;import javax.swing.JComponent;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AgreeButton;import com.ufgov.zc.client.component.button.AuditFinalPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.DisTrackRevisionsButton;import com.ufgov.zc.client.component.button.DisagreeButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.IsSendToNextButton;import com.ufgov.zc.client.component.button.LoadMoldButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SendToProcurementUnitButton;import com.ufgov.zc.client.component.button.SendToXieBanButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.button.ViewTrackRevisionsButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.ui.conditionitem.ConditionFieldConstants;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.CompanyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.datacache.CompanyDataCache;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.WordFileUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.bulletinmold.IWordMoldFn;import com.ufgov.zc.client.zc.bulletinmold.ZcEbWordMoldFnHandler;import com.ufgov.zc.client.zc.ztb.activex.WordPane;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcBaseBill;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMold;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMoldParam;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.model.ZcEbProtocol;/** *  * @ClassName: ZcEbProtocolEditDialog *  * @Description: 签定委托代理协议编辑页面 *  * @date: 2010-4-26 下午08:33:44 *  * @version: V1.0 *  * @since: 1.0 *  * @author: eleven *  * @modify: */public class ZcEbProtocolEditDialog extends JFrame {	protected static final Logger logger = Logger			.getLogger(ZcEbProtocolEditDialog.class);	public static final String PATH = ZcUtil.dir + "protocol/";	private static final long serialVersionUID = -56873481859200532L;	private ZcEbProtocolEditDialog self = this;	private ZcEbProtocolEditPanel editPanel;	private AsFile file = new AsFile();	public ZcEbProtocolEditDialog() {		this(new ZcEbProtocolListPanel(), new ArrayList(1), -1, "0");	}	public ZcEbProtocolEditDialog(List beanList, int editingRow,			String tabStatus) {		this(new ZcEbProtocolListPanel(), beanList, editingRow, tabStatus);	}	public ZcEbProtocolEditDialog(ZcEbProtocolListPanel listPanel,			List beanList, int editingRow, String tabStatus) {		// super(listPanel.getParentWindow(),		// Dialog.ModalityType.APPLICATION_MODAL);		editPanel = new ZcEbProtocolEditPanel(new ListCursor(beanList,				editingRow), tabStatus, listPanel);		setLayout(new BorderLayout());		add(editPanel);		this.setTitle("签订委托代理协议");		this.setSize(UIConstants.DIALOG_0_LEVEL_WIDTH,				UIConstants.DIALOG_0_LEVEL_HEIGHT);		// this.moveToScreenCenter();		this.pack();		// editPanel.refreshTempletData();		this.setVisible(true);		this.setMaxSizeWindow();		Image image = new ImageIcon(this.getClass().getResource(				"/img/windowicon.jpg")).getImage();		this.setIconImage(image);	}	private boolean yesConfirmed = true;	protected boolean dialogIsClosing() {		if (editPanel.isDataChanged() && yesConfirmed) {			int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存",					"保存确认", 0);			if (num == JOptionPane.YES_OPTION) {				boolean flag = editPanel.doSave();				if (flag) {					// 删除临时文件					editPanel.wordPane.closeNotSave();					// editPanel.deleteTempWordFile();				}				return flag;			} else {				// 删除临时文件				editPanel.wordPane.closeNotSave();				// editPanel.deleteTempWordFile();				yesConfirmed = false;			}		} else {			// 删除临时文件			editPanel.wordPane.closeNotSave();			// editPanel.deleteTempWordFile();		}		return true;	}	private class ZcEbProtocolEditPanel extends AbstractMainSubEditPanel			implements IWordMoldFn {		private static final long serialVersionUID = -2539657260090189021L;		public static final String compoId = "ZC_EB_PROTOCOL";		private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();		private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;		private RequestMeta requestMeta;		private FuncButton addButton = new AddButton();		private FuncButton previousButton = new PreviousButton();		private FuncButton saveButton = new SaveButton();		private FuncButton deleteButton = new DeleteButton();		private FuncButton editButton = new EditButton();		private FuncButton nextButton = new NextButton();		private FuncButton exitButton = new ExitButton();		public FuncButton printButton = new PrintButton();		public FuncButton isSendToNextButton = new IsSendToNextButton();		// 填充模板		private LoadMoldButton loadMoldButton = new LoadMoldButton();		// 工作流送审		private FuncButton sendButton = new SendButton();		// 工作流收回		private FuncButton callbackButton = new CallbackButton();		// 工作流填写意见审核通过		private FuncButton suggestPassButton = new SuggestAuditPassButton();		// 工作流终审核通过		private FuncButton auditFianlPassButton = new AuditFinalPassButton();		// 工作流销审		private FuncButton unAuditButton = new UnauditButton();		// 工作流退回		private FuncButton unTreadButton = new UntreadButton();		// 工作流流程跟踪		private FuncButton traceButton = new TraceButton();		// 送采购单位确认		private FuncButton sendToProcurementUnitButton = new SendToProcurementUnitButton();		// 同意		private FuncButton agreeButton = new AgreeButton();		// 不同意		private FuncButton disagreeButton = new DisagreeButton();		// 送协办人审核		private FuncButton sendToXieBanButton = new SendToXieBanButton();		// 显示痕迹		private FuncButton viewTrackRevisionsButton = new ViewTrackRevisionsButton();		// 隐藏痕迹		private FuncButton disTrackRevisionsButton = new DisTrackRevisionsButton();		// word是否被修改了、只要一点击修改都提示word被修改了		private boolean isEdited = false;		private ListCursor listCursor;		private ZcEbProtocol oldProtocol;		private String tabStatus;		private ZcEbProtocolListPanel listPanel;		private WordPane wordPane = new WordPane();		private String replaceValue = "";		private boolean ifLoadMold = false;		private boolean ifRePalceBookMark = false;		private ForeignEntityFieldEditor snFiled;		private String fileName;		private String moldColumNames[] = { "模板编号", "模板名称", "公告模板类型", "状态",				"备注" };		private ZcEbWordMoldFnHandler handlera = new ZcEbWordMoldFnHandler(				moldColumNames, this);		private String sqlMapSelectedMold = "ZcEbBulletinWordMold.getZcProtocolWordMold";		private ElementConditionDto findWordMoldCondition = new ElementConditionDto();		private ForeignEntityFieldEditor fieldMoldName = new ForeignEntityFieldEditor(				this.sqlMapSelectedMold, findWordMoldCondition, 20, handlera,				moldColumNames, "载入模板", "protFile");		public ZcEbProtocolEditPanel(ListCursor listCursor, String tabStatus,				ZcEbProtocolListPanel listPanel) {			super(ZcEbProtocol.class, listPanel.getBillElementMeta());			this.listCursor = listCursor;			this.tabStatus = tabStatus;			this.listPanel = listPanel;			requestMeta = listPanel.getRequestMeta();			this.workPanel					.setBorder(BorderFactory.createTitledBorder(							BorderFactory.createEtchedBorder(), "签订委托代理协议",							TitledBorder.CENTER,							TitledBorder.TOP, new Font("宋体", Font.BOLD, 15),							Color.BLUE));			this.colCount = 3;			WordFileUtil.setDir("protocol");			init();			requestMeta = listPanel.getRequestMeta();			addWordPane();			refreshData();			setButtonStatus();			// setFieldMoldNameStatus();			updateFieldEditorsEditable();		}		private void refreshData() {			ZcEbProtocol protocol = (ZcEbProtocol) this.listCursor					.getCurrentObject();			if (protocol == null) {				this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;				// 新增的单据				protocol = new ZcEbProtocol();				protocol.setStatus("0");				protocol.setNd(WorkEnv.getInstance().getTransNd());				protocol.setSignDate(new Date());				protocol.setOrgCode(requestMeta.getSvOrgCode());				protocol.setExecutor(requestMeta.getSvUserID());				protocol.setExecuteDate(new Date());				listCursor.getDataList().add(protocol);				this.fileName = WordFileUtil.loadDefaultMold();				isEdited = true;			} else {				wordPane.setEnabled(false);				this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;				protocol = this.listPanel.getZcEbProtocolServiceDelegate()						.getZcEbProtocolByProtCode(protocol.getProtCode(),								requestMeta);				listCursor.setCurrentObject(protocol);				this.fileName = WordFileUtil.loadMold(protocol						.getProtFileBlobid());				ifRePalceBookMark = true;			}			this.setEditingObject(protocol);			setOldObject();			// 根据工作流模版设置字段是否可编辑			updateWFEditorEditable(protocol, requestMeta);			// 根据工作流模版设置功能按钮是否可用			setButtonStatus(protocol, requestMeta, this.listCursor);			// 收回的数据只能修改不能保存			if (editButton.isVisible()) {				saveButton.setVisible(true);			}			Long processInstId = protocol.getProcessInstId();			if (processInstId == null || processInstId.longValue() < 0) {				sendToProcurementUnitButton.setVisible(false);				sendToXieBanButton.setVisible(false);			}			if (!self.isShowing()) {				self.addComponentListener(new ComponentAdapter() {					public void componentShown(ComponentEvent e) {						if (self.editPanel.fileName != null) {							if (pageStatus									.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {								wordPane.openAndProtect(fileName, "1");							} else if (isEdited) {								wordPane.open(fileName);							}						}					}				});			} else {				refreshWordPane(protocol);			}			tabPane.repaint();		}		private void refreshWordPane(ZcEbProtocol protocol) {			if (wordPane.isDocOpened()) {				wordPane.close();			}			String fileID = protocol.getProtFileBlobid();			if (fileID != null && !fileID.equals("")) {				this.fileName = WordFileUtil.loadMold(fileID);				// wordPane.open(this.fileName);				if (this.pageStatus						.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {					wordPane.openAndProtect(this.fileName, "1");				} else if (isEdited) {					wordPane.open(this.fileName);				}			} else {				this.fileName = WordFileUtil.loadDefaultMold();				wordPane.open(this.fileName);			}		}		private void addWordPane() {			// 下面一句是为了打开word后刷新窗口			self.setSize(self.getSize().width + 1, self.getSize().height + 1);			wordPane.addPropertyChangeListener(					WordPane.EVENT_NAME_OPEN_CALLBACK,					new PropertyChangeListener() {						public void propertyChange(PropertyChangeEvent evt) {							// 打开文件完成之后的回调函数							boolean isSuccess = (Boolean) evt.getNewValue();							if (isSuccess) {								// 下面一句是为了打开word后刷新窗口								self.setSize(self.getSize().width - 1,										self.getSize().height - 1);								// String defaultFileID =								// AsOptionMeta.getOptVal("OPT_ZC_BULLTIN_DEFAULT_FILE_ID");								// String opId =								// wordPane.getOpenFile().getName();								// if (opId != null &&								// !opId.startsWith(defaultFileID)) {//如果不是								// 默认word 则设置填充按钮为可用								// loadMoldButton.setEnabled(true);								// }							}						}					});			tabPane.addTab("委托代理协议书", wordPane);			wordPane.setEnabled(false);		}		private JTabbedPane tabPane = new JTabbedPane();		public JComponent createSubBillPanel() {			return this.tabPane;		}		private void setOldObject() {			oldProtocol = (ZcEbProtocol) ObjectUtil.deepCopy(listCursor					.getCurrentObject());		}		public List<AbstractFieldEditor> createFieldEditors() {			List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();			// AutoNumFieldEditor protCode = new AutoNumFieldEditor("委托协议编号",			// "protCode");			// editorList.add(protCode);			String columNames[] = { "任务编号", "委托项目名称", "项目预算", "采购类型", "委托日期",					"单位代码", "采购人", "备注", "联系人" };			ZcEbEntrustFnHandler handler = new ZcEbEntrustFnHandler(columNames);			ElementConditionDto elementCondtiontDto = new ElementConditionDto();			// 这里将批办单部件名称传到后台，根据这个 部件的数字权限筛选弹出对话框的数据			elementCondtiontDto.setWfcompoId("ZC_EB_AUDIT_SHEET");			elementCondtiontDto.setZcText0("5");			elementCondtiontDto.setExecutor(requestMeta.getSvUserID());			snFiled = new ForeignEntityFieldEditor(					"ZcEbEntrust.getZcEbEntrustWithPiBanProtocol",					elementCondtiontDto, 20, handler, columNames, "委托项目",					"zcEbEntrust.zcMakeCode");			editorList.add(snFiled);			fieldMoldName.getField().setEnabled(false);			snFiled.getField().setEnabled(false);			snFiled.setMinimumSize(new Dimension(600, 400));			snFiled.addValueChangeListener(new ValueChangeListener() {				public void valueChanged(ValueChangeEvent e) {					ZcEbProtocol zcEbProtocol = (ZcEbProtocol) listCursor							.getCurrentObject();					zcEbProtocol.setSn(null);					zcEbProtocol.getZcEbEntrust().setZcMakeCode(null);					zcEbProtocol.getZcEbEntrust().setZcMakeName(null);					zcEbProtocol.getZcEbEntrust().setZcPifuCgfs(null);					zcEbProtocol.getZcEbEntrust().setZcMoneyBiSum(null);					zcEbProtocol.getZcEbEntrust().setAuditorName(null);					zcEbProtocol.getZcEbEntrust().setExecuteDate(null);					zcEbProtocol.getZcEbEntrust().setCoCode(null);					zcEbProtocol.getZcEbEntrust().setCoName(null);					zcEbProtocol.getZcEbEntrust().setRemark(null);					fieldMoldName.setEnabled(false);					setEditingObject(zcEbProtocol);				}			});			DateFieldEditor signDate = new DateFieldEditor("签订时间", "signDate");			// signDate.setEnabled(false);			editorList.add(signDate);			AsValFieldEditor status = new AsValFieldEditor("状态", "status",					ConditionFieldConstants.ZC_VS_PROTOCOL_STATUS);			status.setEnabled(false);			editorList.add(status);			editorList.add(fieldMoldName);			TextFieldEditor zcMakeName = new TextFieldEditor("委托项目名称",					"zcEbEntrust.zcMakeName");			editorList.add(zcMakeName);			CompanyFieldEditor zcCoCode = new CompanyFieldEditor(					LangTransMeta							.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_NAME),					"zcEbEntrust.coCode");			editorList.add(zcCoCode);			MoneyFieldEditor zcMoneyBiSum = new MoneyFieldEditor("项目预算",					"zcEbEntrust.zcMoneyBiSum");			editorList.add(zcMoneyBiSum);			AsValFieldEditor zcPifuCgfs = new AsValFieldEditor("采购方式",					"zcEbEntrust.zcPifuCgfs", "ZC_VS_PITEM_OPIWAY");			editorList.add(zcPifuCgfs);			TextFieldEditor remark = new TextFieldEditor("备注", "remark");			// remark.setEnabled(false);			editorList.add(remark);			return editorList;		}		@Override		public void initToolBar(JFuncToolBar toolBar) {			toolBar.setModuleCode("ZC");			toolBar.setCompoId(ZcEbProtocolListPanel.compoId);			// toolBar.add(addButton);			toolBar.add(editButton);			toolBar.add(loadMoldButton);			toolBar.add(saveButton);			toolBar.add(sendButton);			toolBar.add(suggestPassButton);			toolBar.add(isSendToNextButton);			toolBar.add(auditFianlPassButton);			toolBar.add(sendToProcurementUnitButton);			toolBar.add(agreeButton);			toolBar.add(disagreeButton);			toolBar.add(sendToXieBanButton);			toolBar.add(callbackButton);			toolBar.add(unAuditButton);			toolBar.add(unTreadButton);			toolBar.add(traceButton);			toolBar.add(deleteButton);			// toolBar.add(printButton);			toolBar.add(previousButton);			toolBar.add(nextButton);			toolBar.add(viewTrackRevisionsButton);			toolBar.add(disTrackRevisionsButton);			toolBar.add(exitButton);			loadMoldButton.setEnabled(false);			viewTrackRevisionsButton.setVisible(false);			disTrackRevisionsButton.setVisible(true);			addButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 新增					doAdd();				}			});			editButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					doEdit();				}			});			saveButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 保存					doSave();				}			});			deleteButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 删除					doDelete();				}			});			sendButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 送审					doSend();				}			});			callbackButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 收回					doCallback();				}			});			isSendToNextButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					doSendNext();				}			});			suggestPassButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent arg0) {					// 填写意见审核					doSuggestPass();				}			});			auditFianlPassButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 终审					doAudit();				}			});			sendToProcurementUnitButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 送采购单位确认					doSendToProcurementUnit();				}			});			agreeButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 同意					doAgree();				}			});			disagreeButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 不同意					doDisagree();				}			});			sendToXieBanButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 送协办人					doSendToXieBan();				}			});			unAuditButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 销审					doUnaudit();				}			});			unTreadButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 退回					doUntread();				}			});			traceButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 流程跟踪					doTrace();				}			});			previousButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 上一页					doPrevious();				}			});			nextButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 下一页					doNext();				}			});			viewTrackRevisionsButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 显示痕迹					wordPane.viewTrackRevisions(true);					viewTrackRevisionsButton.setVisible(false);					disTrackRevisionsButton.setVisible(true);				}			});			disTrackRevisionsButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 隐藏痕迹					wordPane.viewTrackRevisions(false);					viewTrackRevisionsButton.setVisible(true);					disTrackRevisionsButton.setVisible(false);				}			});			exitButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 退出					doExit();				}			});			loadMoldButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					// 填充模板					doLoadMoldButton();				}			});			printButton.addActionListener(new ActionListener() {				public void actionPerformed(ActionEvent e) {					doPrint();				}			});		}		private void doPrint() {			try {				this.wordPane.print();			} catch (RuntimeException e) {				// TCJLODO Auto-generated catch block				e.printStackTrace();				JOptionPane.showMessageDialog(this, "请确认系统已经打开中标通知书，再进行打印！",						"提示", JOptionPane.INFORMATION_MESSAGE);			}		}		/*		 * 		 * 填写意见审核		 */		private void doSuggestPass() {			ZcEbProtocol zcEbProtocol = (ZcEbProtocol) this.listCursor					.getCurrentObject();			requestMeta.setFuncId(this.suggestPassButton.getFuncId());			String jianShenRoleId = AsOptionMeta					.getOptVal("OPT_ZC_CGZX_JSKY_ROLE");// 监审组员角色			if (WorkEnv.getInstance().containRole(jianShenRoleId)) {// 如果是监审员，则不修改审批状态				Integer auditFlag = zcEbProtocol.getIsGoonAudit();				executeAudit(zcEbProtocol, auditFlag, null);			} else {				executeAudit(zcEbProtocol, ZcSettingConstants.IS_GOON_AUDIT_NO,						null);			}		}		/**		 * 		 * 送协办人		 */		private void doSendToXieBan() {			ZcEbProtocol zcEbProtocol = (ZcEbProtocol) this.listCursor					.getCurrentObject();			requestMeta.setFuncId(this.sendToXieBanButton.getFuncId());			executeAudit(zcEbProtocol, ZcSettingConstants.SEND_TO_XIE_BAN, null);		}		/*		 * 		 * 终审		 */		private void doAudit() {			ZcEbProtocol zcEbProtocol = (ZcEbProtocol) this.listCursor					.getCurrentObject();			requestMeta.setFuncId(this.auditFianlPassButton.getFuncId());			executeAudit(zcEbProtocol, ZcSettingConstants.SEND_TO_FINAL, null);		}		/**		 * 		 * 同意		 */		private void doAgree() {			ZcEbProtocol zcEbProtocol = (ZcEbProtocol) this.listCursor					.getCurrentObject();			requestMeta.setFuncId(this.agreeButton.getFuncId());			Integer auditFlag = zcEbProtocol.getIsGoonAudit();			auditFlag = ZcUtil.getAuditFlagValue(auditFlag, 0, requestMeta);			executeAudit(zcEbProtocol, auditFlag, null);		}		/**		 * 		 * 不同意		 */		private void doDisagree() {			ZcEbProtocol zcEbProtocol = (ZcEbProtocol) this.listCursor					.getCurrentObject();			requestMeta.setFuncId(this.disagreeButton.getFuncId());			Integer auditFlag = zcEbProtocol.getIsGoonAudit();			auditFlag = ZcUtil.getAuditFlagValue(auditFlag, 1, requestMeta);			executeAudit(zcEbProtocol, auditFlag,					ZcSettingConstants.AUDIT_DISAGREE_DEFULT_MESSAGE);		}		/**		 * 		 * 送采购单位确认		 */		private void doSendToProcurementUnit() {			ZcEbProtocol zcEbProtocol = (ZcEbProtocol) this.listCursor					.getCurrentObject();			requestMeta.setFuncId(this.sendToProcurementUnitButton.getFuncId());			GkCommentDialog commentDialog = null;			commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager					.getCurrentKeyboardFocusManager().getActiveWindow(),			ModalityType.APPLICATION_MODAL);			if (commentDialog.cancel) {				return;			}			boolean success = true;			String errorInfo = "";			ZcEbProtocol afterSaveProtocol = null;			try {				zcEbProtocol						.setIsGoonAudit(ZcSettingConstants.IS_GOON_AUDIT_YES);				zcEbProtocol.setComment(commentDialog.getComment());				zcEbProtocol						.setAuditorId(WorkEnv.getInstance().getCurrUserId());				listPanel.getZcEbProtocolServiceDelegate().saveFN(zcEbProtocol,						requestMeta);				afterSaveProtocol = listPanel.getZcEbProtocolServiceDelegate()						.sendToProcurementUnitFN(zcEbProtocol, requestMeta);			} catch (Exception e) {				success = false;				logger.error(e.getMessage(), e);				errorInfo += e.getMessage();			}			if (success) {				this.refreshAll(afterSaveProtocol, true);				JOptionPane.showMessageDialog(this, "审核成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.listPanel.refreshCurrentTabData();			} else {				JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误",						JOptionPane.ERROR_MESSAGE);			}		}		/**		 * 		 * 送主任		 */		private void doSendNext() {			ZcEbProtocol zcEbProtocol = (ZcEbProtocol) this.listCursor					.getCurrentObject();			requestMeta.setFuncId(this.isSendToNextButton.getFuncId());			executeAudit(zcEbProtocol, ZcSettingConstants.IS_GOON_AUDIT_YES,					null);		}		private void executeAudit(ZcEbProtocol zcEbProtocol,				Integer isGoonAudit, String defaultMsg) {			GkCommentDialog commentDialog = null;			if (defaultMsg == null) {				commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager						.getCurrentKeyboardFocusManager().getActiveWindow(),				ModalityType.APPLICATION_MODAL);			} else {				commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager						.getCurrentKeyboardFocusManager().getActiveWindow(),				ModalityType.APPLICATION_MODAL, defaultMsg);			}			if (commentDialog.cancel) {				return;			}			boolean success = true;			String errorInfo = "";			ZcEbProtocol afterSaveProtocol = null;			try {				isGoonAudit = isGoonAudit == null ? 0 : isGoonAudit;				zcEbProtocol.setIsGoonAudit(isGoonAudit);				zcEbProtocol.setComment(commentDialog.getComment());				zcEbProtocol						.setAuditorId(WorkEnv.getInstance().getCurrUserId());				listPanel.getZcEbProtocolServiceDelegate().saveFN(zcEbProtocol,						requestMeta);				afterSaveProtocol = listPanel.getZcEbProtocolServiceDelegate()						.auditFN(zcEbProtocol, requestMeta);			} catch (Exception e) {				success = false;				logger.error(e.getMessage(), e);				errorInfo += e.getMessage();			}			if (success) {				this.refreshAll(afterSaveProtocol, true);				JOptionPane.showMessageDialog(this, "审核成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.listPanel.refreshCurrentTabData();			} else {				JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误",						JOptionPane.ERROR_MESSAGE);			}		}		public void doEdit() {			this.isEdited = true;			this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;			updateFieldEditorsEditable();			setButtonStatus();			wordPane.unProtectDoc("1");			wordPane.addTrackRevisions(true, requestMeta.getEmpName());			ZcEbProtocol zcEbProtocol = (ZcEbProtocol) listCursor					.getCurrentObject();			findWordMoldCondition.setType(zcEbProtocol.getZcEbEntrust()					.getZcPifuCgfs());		}		@Override		protected void updateFieldEditorsEditable() {			super.updateFieldEditors();			if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)					|| this.pageStatus							.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {				for (AbstractFieldEditor fd : this.fieldEditors) {					if (fd.getFieldName() != null							&& (fd.getFieldName().equals("protCode")									|| fd.getFieldName().equals("status")									|| fd.getFieldName().equals(											"zcEbEntrust.zcMakeName")									|| fd.getFieldName().equals(											"zcEbEntrust.coCode") || fd									.getFieldName().equals(											"zcEbEntrust.zcMoneyBiSum"))							|| fd.getFieldName().equals(									"zcEbEntrust.zcPifuCgfs")							|| fd.getFieldName().equals("signDate")) {						fd.setEnabled(false);					} else {						fd.setEnabled(true);					}				}				if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {					fieldMoldName.setEnabled(false);				}			} else if (this.pageStatus					.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {				for (AbstractFieldEditor fd : this.fieldEditors) {					fd.setEnabled(false);				}			}		}		private void doLoadMoldButton() {			this.loadMoldButton.setEnabled(false);// 填充完之后设为不可用			if (replaceValue != null && !replaceValue.equals("")) {				wordPane.replaceBookMarks(this.replaceValue);			}			WordFileUtil.delete(this.fileName);			wordPane.save(this.fileName);			ifRePalceBookMark = true;			// ifLoadMold = false;		}		private void doPrevious() {			listCursor.previous();			refreshData();		}		private void doNext() {			listCursor.next();			refreshData();		}		private void viewTrackRevisions() {			wordPane.addTrackRevisions(true, requestMeta.getEmpName());		}		private void doExit() {			// 修改时提示确认保存信息			if (isDataChanged()					&& isEdited					&& JOptionPane.showConfirmDialog(this, "请您确认是否要保存已修改的数据？",							"退出确认", 0) == 0) {			} else {				self.setVisible(false);			}		}		private void refreshAll(ZcEbProtocol afterSaveProj,				boolean isRefreshButton) {			this.listCursor.setCurrentObject(afterSaveProj);			this.setEditingObject(afterSaveProj);			// this.refreshWordPane(afterSaveProj);			setOldObject();			if (isRefreshButton) {				setButtonStatus(afterSaveProj, requestMeta, this.listCursor);				// 收回的数据只能修改不能保存				if (editButton.isVisible()) {					saveButton.setVisible(true);				}			}		}		/*		 * 		 * 新增		 */		private void doAdd() {			// deleteTempWordFile();			this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;			this.listCursor = new ListCursor(new ArrayList(1), -1);			refreshData();			this.saveButton.setVisible(true);			this.deleteButton.setVisible(true);			this.sendButton.setVisible(true);		}		/**		 * 		 * 保存前校验		 * 		 * @param ZcEbRequirement		 * 		 * @return		 */		private boolean checkBeforeSave() {			// List notNullBillElementList =			// this.listPanel.getBillElementMeta().getNotNullBillElement();			// List notNullPackBillElementList =			// self.detailPackBillElementMeta.getNotNullBillElement();			// List notNullPackReqBillElementList =			// self.detailPackReqBillElementMeta.getNotNullBillElement();			// ZcEbProj zcEbProj = (ZcEbProj)			// this.listCursor.getCurrentObject();			// StringBuilder errorInfo = new StringBuilder();			// String validateInfo = ZcUtil.validateBillElementNull(zcEbProj,			// notNullBillElementList);			// String validatePackInfo =			// ZcUtil.validateDetailBillElementNull(zcEbProj.getPackList(),			// notNullPackBillElementList, false);			// String validatePackReqInfo = new String();			// for (Object pack : zcEbProj.getPackList()) {			// validatePackReqInfo =			// ZcUtil.validateDetailBillElementNull(((ZcEbPack)			// pack).getRequirementDetailList(), notNullPackReqBillElementList,			// false);			// if (validatePackReqInfo.length() != 0) {			// break;			// }			// }			// if (validateInfo.length() != 0) {			// errorInfo.append("立项划分标段：\n").append(validateInfo.toString()).append("\n");			// }			// if (validatePackInfo.length() != 0) {			// errorInfo.append("项目划分标段：\n").append(validatePackInfo.toString()).append("\n");			// }			// if (validatePackReqInfo.length() != 0) {			// errorInfo.append("标段需求明细：\n").append(validatePackReqInfo.toString()).append("\n");			// }			// if (errorInfo.length() != 0) {			// JOptionPane.showMessageDialog(this, errorInfo.toString(), "提示",			// JOptionPane.WARNING_MESSAGE);			// return true;			// }			return false;		}		public void doDelete() {			boolean success = true;			String errorInfo = "";			int num = JOptionPane.showConfirmDialog(this, "确定删除吗", "删除确认", 0);			if (num != 0) {				return;			}			try {				requestMeta.setFuncId(deleteButton.getFuncId());				listPanel						.getZcEbProtocolServiceDelegate()						.deleteFN(								((ZcEbProtocol) listCursor.getCurrentObject())										.getProtCode(),								this.requestMeta);				// deleteTempWordFile();			} catch (Exception e) {				// logger.error(e.getMessage(), e);				success = false;				errorInfo += e.getMessage();			}			if (success) {				JOptionPane.showMessageDialog(this, "删除成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;				this.listPanel.refreshCurrentTabData();				this.listCursor.removeCurrentObject();				this.refreshData();				setButtonStatus();			} else {				JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo,						"错误", JOptionPane.ERROR_MESSAGE);			}		}		public boolean doSave() {			if (checkBeforeSave()) {				return false;			}			if (!isDataChanged() && !isEdited) {				JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;				return false;			}			if (ifRePalceBookMark == false) {				JOptionPane.showMessageDialog(this, "请先填充模板.", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;				return false;			}			ZcEbProtocol afterSaveProtocol = null;			boolean success = true;			String errorInfo = "";			try {				ZcEbProtocol protocol = (ZcEbProtocol) listCursor						.getCurrentObject();				protocol.setProtFileContent(file.getFileContent());				requestMeta.setFuncId(saveButton.getFuncId());				wordPane.save(this.fileName);				String fileID = saveBulletinContent();				protocol.setProtFileBlobid(fileID);				afterSaveProtocol = listPanel.getZcEbProtocolServiceDelegate()						.saveFN(protocol, this.requestMeta);			} catch (Exception e) {				// logger.error(e.getMessage(), e);				success = false;				errorInfo += e.getMessage();			}			if (success) {				this.refreshAll(afterSaveProtocol, true);				JOptionPane.showMessageDialog(this, "保存成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;				updateFieldEditorsEditable();				this.refreshData();				this.setButtonStatus();				this.listPanel.refreshCurrentTabData();				isEdited = false;			} else {				JOptionPane.showMessageDialog(this, "保存失败 ！" + errorInfo, "错误",						JOptionPane.ERROR_MESSAGE);			}			return success;		}		private String saveBulletinContent() {			String fileID = "";			if (fileName != null && fileName.length() != 0)				fileID = WordFileUtil.uploadBulletinWordConstent(fileName);			return fileID;		}		/*		 * 		 * 送审		 */		private void doSend() {			if (checkBeforeSave()) {				return;			}			boolean success = true;			ZcEbProtocol afterSaveProtocol = null;			String errorInfo = "";			try {				requestMeta.setFuncId(this.sendButton.getFuncId());				ZcEbProtocol protocol = (ZcEbProtocol) this.listCursor						.getCurrentObject();				protocol.setAuditorId(WorkEnv.getInstance().getCurrUserId());				afterSaveProtocol = listPanel.getZcEbProtocolServiceDelegate()						.newCommitFN(protocol, requestMeta);			} catch (Exception e) {				success = false;				logger.error(e.getMessage(), e);				errorInfo += e.getMessage();			}			if (success) {				this.refreshAll(afterSaveProtocol, true);				JOptionPane.showMessageDialog(this, "送审成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;				this.listPanel.refreshCurrentTabData();			} else {				JOptionPane.showMessageDialog(this, "送审失败 ！" + errorInfo, "错误",						JOptionPane.ERROR_MESSAGE);			}		}		/*		 * 		 * 收回		 */		private void doCallback() {			boolean success = true;			ZcEbProtocol afterSaveProtocol = null;			String errorInfo = "";			try {				requestMeta.setFuncId(this.callbackButton.getFuncId());				ZcEbProtocol protocol = (ZcEbProtocol) this.listCursor						.getCurrentObject();				protocol.setAuditorId(WorkEnv.getInstance().getCurrUserId());				afterSaveProtocol = listPanel.getZcEbProtocolServiceDelegate()						.callbackFN(protocol, requestMeta);			} catch (Exception e) {				success = false;				logger.error(e.getMessage(), e);				errorInfo += e.getMessage();			}			if (success) {				this.refreshAll(afterSaveProtocol, true);				JOptionPane.showMessageDialog(this, "收回成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.listPanel.refreshCurrentTabData();			} else {				JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误",						JOptionPane.ERROR_MESSAGE);			}		}		/*		 * 		 * 销审		 */		private void doUnaudit() {			boolean success = true;			ZcEbProtocol afterSaveProtocol = null;			String errorInfo = "";			try {				requestMeta.setFuncId(unAuditButton.getFuncId());				ZcEbProtocol protocol = (ZcEbProtocol) this.listCursor						.getCurrentObject();				protocol.setAuditorId(WorkEnv.getInstance().getCurrUserId());				afterSaveProtocol = listPanel.getZcEbProtocolServiceDelegate()						.unAuditFN(protocol, requestMeta);			} catch (Exception e) {				success = false;				logger.error(e.getMessage(), e);				errorInfo += e.getMessage();			}			if (success) {				this.refreshAll(afterSaveProtocol, true);				JOptionPane.showMessageDialog(this, "销审成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.listPanel.refreshCurrentTabData();			} else {				JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误",						JOptionPane.ERROR_MESSAGE);			}		}		/*		 * 		 * 退回		 */		private void doUntread() {			if (checkBeforeSave()) {				return;			}			if (isDataChanged()) {				JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",						JOptionPane.INFORMATION_MESSAGE);				return;			}			GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(					DefaultKeyboardFocusManager							.getCurrentKeyboardFocusManager()							.getActiveWindow(), ModalityType.APPLICATION_MODAL);			if (commentDialog.cancel) {				return;			}			boolean success = true;			ZcEbProtocol afterSaveProtocol = null;			String errorInfo = "";			try {				requestMeta.setFuncId(unTreadButton.getFuncId());				ZcEbProtocol protocol = (ZcEbProtocol) this.listCursor						.getCurrentObject();				protocol.setAuditorId(WorkEnv.getInstance().getCurrUserId());				protocol.setComment(commentDialog.getComment());				afterSaveProtocol = listPanel.getZcEbProtocolServiceDelegate()						.untreadFN(protocol, requestMeta);			} catch (Exception e) {				success = false;				logger.error(e.getMessage(), e);				errorInfo += e.getMessage();			}			if (success) {				this.refreshAll(afterSaveProtocol, true);				JOptionPane.showMessageDialog(this, "退回成功！", "提示",						JOptionPane.INFORMATION_MESSAGE);				this.listPanel.refreshCurrentTabData();			} else {				JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误",						JOptionPane.ERROR_MESSAGE);			}		}		/*		 * 		 * 流程跟踪		 */		private void doTrace() {			ZcBaseBill bean = (ZcBaseBill) this.listCursor.getCurrentObject();			if (bean == null) {				return;			}			ZcUtil.showTraceDialog(bean, compoId);		}		public boolean isDataChanged() {			if (ifLoadMold && ifRePalceBookMark) {				return true;			} else {				return !DigestUtil.digest(this.oldProtocol).equals(						DigestUtil.digest(listCursor.getCurrentObject()));			}		}		private void setFieldMoldNameStatus() {			if (this.snFiled == null || this.snFiled.getValue() == null					|| this.snFiled.getValue().toString().length() == 0) {				this.fieldMoldName.setEnabled(false);			} else {				this.fieldMoldName.setEnabled(true);			}		}		public void setLoadMoldButtonStatus() {			if (this.snFiled == null || this.snFiled.getValue() == null					|| this.snFiled.getValue().toString().length() == 0					|| fieldMoldName == null					|| fieldMoldName.getValue() == null					|| fieldMoldName.getValue().toString().length() == 0) {				this.loadMoldButton.setEnabled(false);			} else {				this.loadMoldButton.setEnabled(true);			}		}		public class ZcEbEntrustFnHandler implements IForeignEntityHandler {			private String columNames[];			public ZcEbEntrustFnHandler(String columNames[]) {				this.columNames = columNames;			}			public void excute(List selectedDatas) {				ZcEbProtocol zcEbProtocol = (ZcEbProtocol) listCursor						.getCurrentObject();				for (Object object : selectedDatas) {					ifRePalceBookMark = false;					ZcEbEntrust entrust = (ZcEbEntrust) object;					zcEbProtocol.setSn(entrust.getSn());					zcEbProtocol.getZcEbEntrust().setZcMakeCode(							entrust.getZcMakeCode());					zcEbProtocol.getZcEbEntrust().setZcMakeName(							entrust.getZcMakeName());					zcEbProtocol.getZcEbEntrust().setZcPifuCgfs(							entrust.getZcPifuCgfs());					zcEbProtocol.getZcEbEntrust().setZcMoneyBiSum(							entrust.getZcMoneyBiSum());					zcEbProtocol.getZcEbEntrust().setAuditorName(							entrust.getAuditorName());					zcEbProtocol.getZcEbEntrust().setExecuteDate(							entrust.getExecuteDate());					zcEbProtocol.getZcEbEntrust()							.setCoCode(entrust.getCoCode());					zcEbProtocol.getZcEbEntrust()							.setCoName(entrust.getCoName());					zcEbProtocol.getZcEbEntrust()							.setRemark(entrust.getRemark());					zcEbProtocol.getZcEbEntrust().setZcMakeLinkman(							entrust.getZcMakeLinkman());					zcEbProtocol.getZcEbEntrust()							.setAgency(entrust.getAgency());					zcEbProtocol.setZcMakeCode(entrust.getZcMakeCode());					zcEbProtocol.setAgency(entrust.getAgency());					zcEbProtocol.setName(entrust.getZcMakeName());					findWordMoldCondition.setType(entrust.getZcPifuCgfs());					// fieldMoldName.setValue("");					fieldMoldName.setEditObject(zcEbProtocol);					if (zcEbProtocol.getProtCode() == null) {						handlera.flashReplaceValue();					} else {						zcEbProtocol.setProtFile("");						zcEbProtocol.setProtFileBlobid(null);						refreshWordPane(zcEbProtocol);					}					setEditingObject(zcEbProtocol);				}				setFieldMoldNameStatus();				setLoadMoldButtonStatus();			}			@Override			public TableModel createTableModel(List showDatas) {				Object data[][] = new Object[showDatas.size()][columNames.length];				for (int i = 0; i < showDatas.size(); i++) {					ZcEbEntrust rowData = (ZcEbEntrust) showDatas.get(i);					int col = 0;					// data[i][col++] = rowData.getSn();					data[i][col++] = rowData.getZcMakeCode();					data[i][col++] = rowData.getZcMakeName();					data[i][col++] = rowData.getZcMoneyBiSum();					data[i][col++] = AsValDataCache.getName(							"ZC_VS_PITEM_OPIWAY", rowData.getZcPifuCgfs());					// data[i][col++] = rowData.getAuditorName();					data[i][col++] = rowData.getExecuteDate();					data[i][col++] = rowData.getCoCode();					data[i][col++] = CompanyDataCache.getName(rowData							.getCoCode());					data[i][col++] = rowData.getRemark();					data[i][col++] = rowData.getZcMakeLinkman();				}				MyTableModel model = new MyTableModel(data, columNames) {					public boolean isCellEditable(int row, int colum) {						return false;					}					public Class getColumnClass(int column) {						if ((column >= 0) && (column < getColumnCount())								&& this.getRowCount() > 0) {							for (int row = 0; row < this.getRowCount(); row++) {								if (getValueAt(row, column) != null) {									return getValueAt(row, column).getClass();								}							}						}						return Object.class;					}				};				return model;			}			@Override			public boolean isMultipleSelect() {				return false;			}		}		public String doOpenMold(List valueList,				ZcEbBulletinWordMold bulletinMold) {			if (wordPane != null) {				wordPane.close();			}			String moldFileName = WordFileUtil.loadMold(bulletinMold					.getFileID());			if (moldFileName == null || moldFileName.length() == 0) {				// 没有成功载入模板，关闭wordPane				if (wordPane != null && wordPane.isDocOpened())					wordPane.close();				return "";			}			// loadMoldButton.setEnabled(false);			wordPane.open(moldFileName);			fileName = moldFileName;			StringBuffer sb = new StringBuffer();			for (Iterator it = valueList.iterator(); it.hasNext();) {				ZcEbBulletinWordMoldParam zcEbBulletinWordMoldParam = (ZcEbBulletinWordMoldParam) it						.next();				sb.append(zcEbBulletinWordMoldParam.getParamName());				sb.append("$$$$$");				sb.append(zcEbBulletinWordMoldParam.getParamValue());				sb.append("@@@@@");			}			return sb.toString();		}		private void setButtonStatus() {			if (this.btnStatusList.size() == 0) {				ButtonStatus bs = new ButtonStatus();				bs = new ButtonStatus();				bs.setButton(this.editButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.saveButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);				bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				btnStatusList.add(bs);				// bs = new ButtonStatus();				// bs.setButton(this.loadMoldButton);				// bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);				// bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);				// bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				// btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.deleteButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				bs.addBillStatus("0");				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.sendButton);				bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				bs.addBillStatus("0");				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.previousButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.traceButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.nextButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.viewTrackRevisionsButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				btnStatusList.add(bs);				bs = new ButtonStatus();				bs.setButton(this.disTrackRevisionsButton);				bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);				bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);				btnStatusList.add(bs);			}			ZcEbProtocol ht = (ZcEbProtocol) this.listCursor.getCurrentObject();			String billStatus = ht.getStatus();			ZcUtil.setButtonEnable(this.btnStatusList, billStatus,					this.pageStatus, compoId, ht.getProcessInstId());		}		@Override		public boolean getIfLoadMold() {			// TCJLODO Auto-generated method stub			return this.ifLoadMold;		}		@Override		public boolean getIfRePalceBookMark() {			// TCJLODO Auto-generated method stub			return this.ifRePalceBookMark;		}		@Override		public ListCursor getListCursor() {			// TCJLODO Auto-generated method stub			return this.listCursor;		}		@Override		public JPanel getWindowObject() {			// TCJLODO Auto-generated method stub			return this;		}		@Override		public WordPane getWordPane() {			// TCJLODO Auto-generated method stub			return this.wordPane;		}		@Override		public void setIfLoadMold(boolean ifLoadMold) {			// TCJLODO Auto-generated method stub			this.ifLoadMold = ifLoadMold;			if (this.ifLoadMold) {				this.setLoadMoldButtonStatus();			}		}		@Override		public void setIfRePalceBookMark(boolean ifRePalceBookMark) {			// TCJLODO Auto-generated method stub			this.ifRePalceBookMark = ifRePalceBookMark;		}		@Override		public String getWordMoldViewId() {			// TCJLODO Auto-generated method stub			ZcEbProtocol zcEbProtocol = (ZcEbProtocol) listCursor					.getCurrentObject();			return zcEbProtocol.getSn();		}		@Override		public void setMoldName(String wordName) {			// TCJLODO Auto-generated method stub			ZcEbProtocol zcEbProtocol = (ZcEbProtocol) listCursor					.getCurrentObject();			zcEbProtocol.setProtFile(wordName);			fieldMoldName.setEditObject(zcEbProtocol);		}		@Override		public void setReplaceValue(String replaceValue) {			// TCJLODO Auto-generated method stub			this.replaceValue = replaceValue;		}		@Override		public void setWordMold(ZcEbBulletinWordMold bulletinMold) {			// TCJLODO Auto-generated method stub		}		@Override		public String getPackCode() {			// TCJLODO Auto-generated method stub			return null;		}	}	public void setMaxSizeWindow() {		GraphicsEnvironment ge = GraphicsEnvironment				.getLocalGraphicsEnvironment();		GraphicsDevice gs = ge.getDefaultScreenDevice();		GraphicsConfiguration gc = gs.getDefaultConfiguration();		Insets insets = Toolkit.getDefaultToolkit().getScreenInsets(gc);		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();		this.setSize(screenSize.getSize().width, screenSize.getSize().height				- insets.bottom);	}}
package com.ufgov.zc.client.zc.zcebguarantee;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbGuaranteeToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.OpenNotepadButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SaveSendButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.notepad.ZcNotepadDialog;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcEbGuarantee;import com.ufgov.zc.common.zc.model.ZcEbGuaranteeDetail;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.publish.IZcEbGuaranteeServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbProjServiceDelegate;/** *  * @author Administrator *  */public class ZcEbGuaranteeEditPanel extends AbstractMainSubEditPanel {  private static final Logger logger = Logger.getLogger(ZcEbGuaranteeEditPanel.class);  private IZcEbGuaranteeServiceDelegate zcEbGuaranteeServiceDelegate = (IZcEbGuaranteeServiceDelegate) ServiceFactory.create(  IZcEbGuaranteeServiceDelegate.class, "zcEbGuaranteeServiceDelegate");  protected IZcEbProjServiceDelegate zcEbProjServiceDelegate = (IZcEbProjServiceDelegate) ServiceFactory.create(IZcEbProjServiceDelegate.class,  "zcEbProjServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_GUARANTEE";  private FuncButton saveButton = new SaveButton();  private FuncButton traceButton = new TraceButton();  private FuncButton callbackButton = new CallbackButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton saveAndSendButton = new SaveSendButton();  private FuncButton sendButton = new SendButton();  public FuncButton openNotepadButton = new OpenNotepadButton();  private ListCursor listCursor;  private ZcEbGuarantee oldGuarantee;  private String tabStatus;  private ZcEbGuaranteeListPanel listPanel;  private JTablePanel tablePanel = new JTablePanel();  private ZcEbGuaranteeEditPanel self = this;  private MoneyFieldEditor depositeField;  private MoneyFieldEditor undepositeField;  private AsValFieldEditor statusField;  private GkBaseDialog parent;  public ZcEbGuaranteeEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus, ZcEbGuaranteeListPanel listPanel) {    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("投标保证金管理"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    init();    requestMeta.setCompoId(compoId);    refreshData();    setButtonStatus();  }  private void setButtonStatus() {    // TODO Auto-generated method stub  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    TextFieldEditor editor0 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJ_CODE), "projCode");    editorList.add(editor0);    editor0.setEnabled(false);    TextFieldEditor editor1 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJ_NAME), "projName");    editorList.add(editor1);    editor1.setEnabled(false);    TextFieldEditor editor2 = new TextFieldEditor("供应商", "providerName");    editorList.add(editor2);    editor2.setEnabled(false);    TextFieldEditor editor5 = new TextFieldEditor("地址", "address");    editorList.add(editor5);    editor5.setEnabled(false);    TextFieldEditor editor3 = new TextFieldEditor("联系人", "linkMan");    editorList.add(editor3);    editor3.setEnabled(false);    TextFieldEditor editor4 = new TextFieldEditor("联系电话", "phone");    editorList.add(editor4);    editor4.setEnabled(false);    editor4 = new TextFieldEditor("开户银行", "bankName");    editorList.add(editor4);    editor4.setEnabled(false);    editor4 = new TextFieldEditor("银行帐号", "accCode");    editorList.add(editor4);    editor4.setEnabled(false);    MoneyFieldEditor editor6 = new MoneyFieldEditor("缴纳金额", "guaranteeSum");    editorList.add(editor6);    editor6.setEnabled(false);    this.depositeField = editor6;    MoneyFieldEditor unTreadSum = new MoneyFieldEditor("退回金额", "unTreadSum");    editorList.add(unTreadSum);    unTreadSum.setEnabled(false);    this.undepositeField = unTreadSum;    AsValFieldEditor editor7 = new AsValFieldEditor("状态", "isPayGuarantee", "VS_ZC_EB_GUARANTEE_STATUS");    editorList.add(editor7);    editor7.setEnabled(false);    this.statusField = editor7;    AsValFieldEditor editor8 = new AsValFieldEditor("支付方式", "payType", "VS_ZC_EB_GUARANTEE_PAY_TYPE");    editorList.add(editor8);    TextFieldEditor editor9 = new TextFieldEditor("支付凭证", "payBillNum");    editorList.add(editor9);    TextFieldEditor editor10 = new TextFieldEditor("受理人", "operator");    editorList.add(editor10);    DateFieldEditor editor11 = new DateFieldEditor("缴纳时间", "payDate");    editorList.add(editor11);    return editorList;  }  @Override  public JComponent createSubBillPanel() {    JTabbedPane tabPane = new JTabbedPane();    tablePanel.init();    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_table");    tablePanel.getTable().setShowCheckedColumn(false);    tablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 0));    setTableCell(tablePanel.getTable());    tabPane.addTab("投标标段", tablePanel);    return tabPane;  }  private void setTableCell(JPageableFixedTable table) {    // SwingUtil.setTableCellEditor(table,columnIdentifier, cellEditor)  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(saveButton);    toolBar.add(sendButton);    toolBar.add(saveAndSendButton);    toolBar.add(callbackButton);    toolBar.add(deleteButton);    toolBar.add(traceButton);    toolBar.add(openNotepadButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        // TODO Auto-generated method stub        doSave();      }    });    openNotepadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doOpenNotepad();      }    });  }  private void doOpenNotepad() {    ZcEbGuarantee sheet = (ZcEbGuarantee) this.listCursor.getCurrentObject();    String sn = fetchSn(sheet);    if (sn != null) {      new ZcNotepadDialog(sn, parent);    }  }  public String fetchSn(ZcEbGuarantee sheet) {    String sn = null;    if (sheet.getProjCode() == null || "".equals(sheet.getProjCode())) {      JOptionPane.showMessageDialog(this, "项目为空不能记录相关信息 ！", "错误", JOptionPane.ERROR_MESSAGE);      return sn;    }    ZcEbProj proj = zcEbProjServiceDelegate.getZcEbProjByProjCode(sheet.getProjCode(), requestMeta);    if (proj == null) {      JOptionPane.showMessageDialog(this, "项目为空不能记录相关信息 ！", "错误", JOptionPane.ERROR_MESSAGE);      return sn;    }    List packs = proj.getPackList();    if (packs == null || packs.size() == 0 || ((ZcEbPack) (packs.get(0))).getEntrustCode() == null) {      JOptionPane.showMessageDialog(this, "请先创建分包信息，再记录相关信息 ！", "错误", JOptionPane.ERROR_MESSAGE);      return sn;    }    sn = ((ZcEbPack) (packs.get(0))).getEntrustCode();    return sn;  }  private void doPrevious() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldGuarantee);      }    }    listCursor.previous();    refreshData();  }  private void doNext() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldGuarantee);      }    }    listCursor.next();    refreshData();  }  public void doExit() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    this.parent.dispose();  }  public boolean doSave() {    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生改变，无需保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return true;    }    ZcEbGuarantee guarantee = (ZcEbGuarantee) this.listCursor.getCurrentObject();    if (guarantee.getOperator() == null)      guarantee.setOperator(this.requestMeta.getSvUserName());    if (guarantee.getPayDate() == null)      guarantee.setPayDate(this.requestMeta.getSysDate());    this.listPanel.getGuaranteServiceDelegate().updateZcEbGuaranteeFN(guarantee, this.requestMeta);    this.oldGuarantee = (ZcEbGuarantee) ObjectUtil.deepCopy(guarantee);    this.listPanel.refreshCurrentTabData(listCursor.getDataList());    boolean success = true;    String errorInfo = "";    try {      this.listPanel.getGuaranteServiceDelegate().updateZcEbGuaranteeFN(guarantee, this.requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(guarantee);      this.oldGuarantee = (ZcEbGuarantee) ObjectUtil.deepCopy(guarantee);      this.listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      //updateFieldEditorsEditable();      setButtonStatus();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  private void stopTableEditing() {    JPageableFixedTable table = this.tablePanel.getTable();    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldGuarantee).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  private void refreshSubTableData(List deList) {    tablePanel.setTableModel(ZcEbGuaranteeToTableModelConverter.convertGuaranteeDeToTableModel(deList));  }  private void refreshData() {    ZcEbGuarantee guarantee = (ZcEbGuarantee) listCursor.getCurrentObject();    if (null == guarantee.getIsPayGuarantee() || "0".equals(guarantee.getIsPayGuarantee())) {      guarantee.setPayType("4");    }    this.setEditingObject(guarantee);    List detailList = new ArrayList();    if (guarantee != null && guarantee.getDetailList() == null) {      detailList = zcEbGuaranteeServiceDelegate.getZcEbGuaranteeDetail(guarantee.getSignupId(), requestMeta);      guarantee.setDetailList(detailList);    }    refreshSubTableData(guarantee.getDetailList());    setOldObject();    setTableProperty(tablePanel.getTable());    addTableLisenter(tablePanel.getTable());  }  private void addTableLisenter(JPageableFixedTable table) {    // TODO Auto-generated method stub    final BeanTableModel model = (BeanTableModel) (table.getModel());    model.addTableModelListener(new TableModelListener() {      public void tableChanged(TableModelEvent e) {        if (e.getColumn() >= 0 && "IS_PAY_GUARANTEE".equals(model.getColumnIdentifier(e.getColumn()))) {          self.caculateDeposite(model.getDataBeanList());          self.setStatus();        }      }    });  }  protected void setStatus() {    ZcEbGuarantee guarantee = (ZcEbGuarantee) listCursor.getCurrentObject();    /**      * 存在多个标段的情况：     * 所有标段都未缴纳的为未缴纳     * 当所有标段的情况都是已缴纳单据的状态为已缴纳     * 当所有的标段的状态都是已经退回的单据为已退回     * 一部分缴纳，一部分未缴纳的情况为部分缴纳。     * 一部分退回，一部分未退回的情况为部分退回。     */    int noPay = 0, pay = 0, rtn = 0, brtn = 0;    int packs = guarantee.getDetailList().size();    for (Object obj : guarantee.getDetailList()) {      ZcEbGuaranteeDetail detail = (ZcEbGuaranteeDetail) obj;      if (detail.getIsPayGuarantee() != null && detail.getIsPayGuarantee().equals("1")) {        pay++;      } else if (detail.getIsPayGuarantee() != null && detail.getIsPayGuarantee().equals("2")) {        rtn++;      } else if (detail.getIsPayGuarantee() != null && detail.getIsPayGuarantee().equals("0")) {        noPay++;      } else if ("3".equals(detail.getIsPayGuarantee())) {        brtn = 3;      }    }    if (pay == packs) {      guarantee.setIsPayGuarantee("1");//已缴纳    } else if (rtn == packs) {      guarantee.setIsPayGuarantee("2");//已退回    } else if (noPay > 0 && pay > 0 && noPay + pay == packs) {      guarantee.setIsPayGuarantee("4");//部分缴纳（已缴纳和未缴纳组成）    } else if (rtn > 0 && pay > 0 && rtn + pay == packs) {      guarantee.setIsPayGuarantee("5");//部分退回（已缴纳和已退回组成）    } else if (rtn > 0 && noPay > 0 && rtn + noPay == packs) {      guarantee.setIsPayGuarantee("2");//已退回（已退回和未缴纳组成）    } else if (noPay == 1) {      guarantee.setIsPayGuarantee("0");//未缴纳    }    if (brtn == 3) {      guarantee.setIsPayGuarantee("3");    }    this.statusField.setEditObject(guarantee);  }  protected void caculateDeposite(List<ZcEbGuaranteeDetail> guaranteeDetaillist) {    // TODO Auto-generated method stub    BigDecimal sum = new BigDecimal(0);    BigDecimal unTreadSum = new BigDecimal(0);    for (ZcEbGuaranteeDetail detail : guaranteeDetaillist) {      BigDecimal bidDeposit = new BigDecimal(0);      if (detail.getBidDeposit() == null || "".equals(detail.getBidDeposit())) {      } else {        bidDeposit = detail.getBidDeposit();      }      if (detail.getIsPayGuarantee() != null && detail.getIsPayGuarantee().equals("1")) {        sum = sum.add(bidDeposit);      }      if (detail.getIsPayGuarantee() != null && detail.getIsPayGuarantee().equals("2")) {        unTreadSum = unTreadSum.add(bidDeposit);      }    }    ZcEbGuarantee g = (ZcEbGuarantee) this.listCursor.getCurrentObject();    g.setGuaranteeSum(sum);    g.setUnTreadSum(unTreadSum);    if (this.depositeField != null) {      this.depositeField.setEditObject(g);    }    if (this.undepositeField != null) {      this.undepositeField.setEditObject(g);    }  }  private void setTableProperty(JTable table) {    ZcUtil.translateColName(table, "ZC_EB_");    SwingUtil.setTableCellEditor(table, "IS_PAY_GUARANTEE", new AsValComboBoxCellEditor("VS_ZC_EB_GUARANTEE_STATUS"));    SwingUtil.setTableCellRenderer(table, "IS_PAY_GUARANTEE", new AsValCellRenderer("VS_ZC_EB_GUARANTEE_STATUS"));  }  private void setOldObject() {    oldGuarantee = (ZcEbGuarantee) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }}
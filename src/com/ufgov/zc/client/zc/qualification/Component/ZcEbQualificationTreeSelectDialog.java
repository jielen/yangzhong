package com.ufgov.zc.client.zc.qualification.Component;import java.awt.Dialog;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JOptionPane;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JButtonTextField;import com.ufgov.zc.client.component.JTreeSelectDialog;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityDataCache;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.TreeNodeValueObject;import com.ufgov.zc.common.zc.model.ZcEbSupQualification;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;public class ZcEbQualificationTreeSelectDialog extends JTreeSelectDialog {  protected TextFieldEditor triggerFieldName;  protected boolean selectedTailFlag = false;  public ZcEbQualificationTreeSelectDialog(Dialog dialog, boolean modal, JButtonTextField triggerField) {    super(dialog, modal, triggerField);    this.triggerFieldName = triggerFieldName;  }  public ZcEbQualificationTreeSelectDialog(Dialog dialog, boolean modal, JButtonTextField triggerField, boolean selectedTailFlag) {    super(dialog, modal, triggerField, selectedTailFlag);    this.triggerFieldName = triggerFieldName;    this.selectedTailFlag = selectedTailFlag;  }  private static final long serialVersionUID = -4407933154954926841L;  public void initTitle() {    LangTransMeta.init("ZC%");    this.setTitle("供应商资质列表");  }  public void initDataBufferList() {    IZcEbBaseServiceDelegate delegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class, "zcEbBaseServiceDelegate");    RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();    ElementConditionDto dto = new ElementConditionDto();    dto.setStatus("2");    dataBufferList = (List) ForeignEntityDataCache.getDataMap().get(ForeignEntityDataCache.CACHE_ZC_EB_QUALIFICATION);    if (dataBufferList != null && dataBufferList.size() > 0) {    } else {      dataBufferList = delegate.queryDataForList("ZC_EB_SUP_QUALIFICATION.selectByDto", dto, requestMeta);      ForeignEntityDataCache.setData(ForeignEntityDataCache.CACHE_ZC_EB_QUALIFICATION, dataBufferList);    }    for (int i = 0; i < dataBufferList.size(); i++) {      ZcEbSupQualification rowData = (ZcEbSupQualification) dataBufferList.get(i);      this.triggerField.dataMap.put(rowData.getQualifId(), rowData);    }    this.triggerField.filteredDataList = dataBufferList;    initSelectTree();  }  private List genTreeData() {    List filteredList = dataBufferList;    Map map = new HashMap();    for (Object o : filteredList) {      ZcEbSupQualification cpy = (ZcEbSupQualification) o;      cpy.setName(cpy.getQualifName());      cpy.setCode(cpy.getQualifId());      map.put(cpy.getQualifId(), cpy);    }    List rootZcBCatalogueList = new ArrayList();    List childrenZcBCatalogueList = new ArrayList();    for (Object o : filteredList) {      TreeNodeValueObject cpy = (TreeNodeValueObject) o;      if (map.get(cpy.getParentCode()) == null) {        rootZcBCatalogueList.add(cpy);      } else {        childrenZcBCatalogueList.add(cpy);      }    }    Map childrenMap = new HashMap();    for (int i = 0; i < childrenZcBCatalogueList.size(); i++) {      TreeNodeValueObject child = (TreeNodeValueObject) childrenZcBCatalogueList.get(i);      List childrenList = (List) childrenMap.get(child.getParentCode());      if (childrenList != null) {        childrenList.add(child);      } else {        List tempList = new ArrayList();        tempList.add(child);        childrenMap.put(child.getParentCode(), tempList);      }    }    for (int i = 0; i < rootZcBCatalogueList.size(); i++) {      ZcEbSupQualification company = (ZcEbSupQualification) rootZcBCatalogueList.get(i);      this.setZcBCatalogueChildren(company, childrenMap);    }    return rootZcBCatalogueList;  }  protected void initSelectTree() {    DefaultMutableTreeNode root = new DefaultMutableTreeNode("供应商资质");    this.triggerField.filteredDataList = dataBufferList;//this.genFilterDataList()    List companyTreeList = genTreeData();    treeNodeMap.clear();    for (Object o : companyTreeList) {      TreeNodeValueObject nodeValueObj = (TreeNodeValueObject) o;      DefaultMutableTreeNode node = new DefaultMutableTreeNode(nodeValueObj);      root.add(node);      treeNodeMap.put(nodeValueObj, node);      this.setChildNode(nodeValueObj, node);    }    this.getSelectTree().setModel(new DefaultTreeModel(root));  }  private void setZcBCatalogueChildren(ZcEbSupQualification company, Map childrenMap) {    List childrenList = (List) childrenMap.get(company.getQualifId());    if (childrenList != null) {      company.setChildrenList(childrenList);      for (int i = 0; i < childrenList.size(); i++) {        ZcEbSupQualification c = (ZcEbSupQualification) childrenList.get(i);        setZcBCatalogueChildren(c, childrenMap);      }    }  }  private void setChildNode(TreeNodeValueObject nodeValueObj, DefaultMutableTreeNode node) {    if (nodeValueObj.getChildrenList().size() > 0) {      for (Object o : nodeValueObj.getChildrenList()) {        TreeNodeValueObject c = (TreeNodeValueObject) o;        DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(c);        node.add(childNode);        treeNodeMap.put(c, childNode);        setChildNode(c, childNode);      }    }  }  public void doOK() {    DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectTree.getLastSelectedPathComponent();    int selected = selectTree.getSelectionCount();    if (selected == 0) {      JOptionPane.showMessageDialog(self, "请选择数据!", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    } else if (selected > 1) {      JOptionPane.showMessageDialog(self, "只能选择一条数据！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    if (node.getUserObject() instanceof String) {      return;    }    if (node.getChildCount() > 0 && isSelectTailTag) {      JOptionPane.showMessageDialog(self, "请选择末级节点!", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    triggerField.setValue(node.getUserObject());    closeDialog();  }}
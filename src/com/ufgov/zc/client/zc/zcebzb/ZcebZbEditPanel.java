/** * ZcEbSignupEditPanel.java * com.ufgov.gk.client.zc.zcebsignup * Administrator * 2010-4-29 */package com.ufgov.zc.client.zc.zcebzb;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcebZbToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.WorkflowTrace;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AuditPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.celleditor.zc.ZcBCatalogueCellEditor;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.SupplierFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcBaseBill;import com.ufgov.zc.common.zc.model.ZcEbProjChange;import com.ufgov.zc.common.zc.model.ZcEbSupplier;import com.ufgov.zc.common.zc.model.ZcPProMakeExt;import com.ufgov.zc.common.zc.model.ZcebZb;import com.ufgov.zc.common.zc.model.ZcebZbItem;import com.ufgov.zc.common.zc.publish.IZcebZbServiceDelegate;import java.awt.BorderLayout;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Dimension;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;/** * @author Administrator * */public class ZcebZbEditPanel extends AbstractMainSubEditPanel {  private static final Logger logger = Logger.getLogger(ZcebZbEditPanel.class);  private IZcebZbServiceDelegate zcebZbServiceDelegate = (IZcebZbServiceDelegate) ServiceFactory.create(IZcebZbServiceDelegate.class,  "zcebZbServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_ZB";  private FuncButton addButton = new AddButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  //  private FuncButton auditButton=new AuditButton();  //  private FuncButton unAuditButton=new UnauditButton();  //  private FuncButton sendButton=new SendButton();  // 工作流送审  private FuncButton sendButton = new SendButton();  // 工作流收回  private FuncButton callbackButton = new CallbackButton();  // 工作流填写意见审核通过  private FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流审核通过  private FuncButton auditPassButton = new AuditPassButton();  // 工作流销审  private FuncButton unAuditButton = new UnauditButton();  // 工作流退回  private FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  private FuncButton traceButton = new TraceButton();  private final ListCursor listCursor;  private ZcebZb oldSignup;  private String tabStatus;  private ZcebZbListPanel listPanel;  private JTablePanel tablePanel = new JTablePanel();  private ZcebZbEditPanel self = this;  private GkBaseDialog parent;  private String suSqlMapSelectedId = "ZcEbSignup.getZcEbSupplier";  private String proMakeSqlMapSelectedId = "ZC_P_PRO_MAKE.getProMake";  private String proMakeChgSqlMapSelectedId = "ZcEbProjChange.getOriginalZcEbProjByDto";  private ElementConditionDto proMakeChgDto = new ElementConditionDto();  private ForeignEntityFieldEditor chgEditor;  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private JFuncToolBar subPackTableToolbar;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  ElementConditionDto packDto = new ElementConditionDto();  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId);  private BillElementMeta detailBillElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId + "_ITEM");  public ZcebZbEditPanel(ZcebZbDialog parent, ListCursor listCursor, String tabStatus, ZcebZbListPanel listPanel) {    // TODO Auto-generated constructor stub    super(ZcebZb.class, BillElementMeta.getBillElementMetaWithoutNd("ZC_EB_ZB"));    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("中标管理"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    //    this.auditButton.setText("备案");    //    this.unAuditButton.setText("取消备案");    //    this.sendButton.setText("提交备案");    requestMeta.setCompoId(compoId);    refreshData();    //    setButtonStatus();    //    updateFieldEditorsEditable();  }  /**   * 设置工具条上按钮的可用性   *    * Administrator   * 2010-5-15   */  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs.setButton(this.addButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      bs.addBillStatus("3");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus("0");      bs.addBillStatus("3");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      bs.addBillStatus("3");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.sendButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      bs.addBillStatus("3");      btnStatusList.add(bs);      //      bs = new ButtonStatus();      //      bs.setButton(this.auditButton);      //      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      //      bs.addBillStatus("1");      //      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.unAuditButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("2");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.exitButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.helpButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcebZb obj = (ZcebZb) (this.listCursor.getCurrentObject());    String billStatus = obj.getStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, obj.getProcessInstId());    setSubTableButton();  }  /**   * 设置字表下面的按钮状态   *    * Administrator   * 2010-5-15   */  private void setSubTableButton() {    if (this.subPackTableToolbar != null) {      if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {        this.subPackTableToolbar.setEnabled(true);      } else {        this.subPackTableToolbar.setEnabled(false);      }    }  }  private void refreshData() {    // TODO Auto-generated method stub    ZcebZb zb = (ZcebZb) listCursor.getCurrentObject();    if (zb == null) {//新增页面      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      zb = new ZcebZb();      //      zb.setSignupId(Guid.genID());      setDefualtValue(zb, ZcSettingConstants.PAGE_STATUS_NEW);      //新插入一行数据      ZcebZbItem item = new ZcebZbItem();      item.setTempGuid(Guid.genID());      zb.getItems().add(item);      List lst = new ArrayList();      lst.add(zb);      this.listCursor.setDataList(lst, -1);    } else {      zb = this.zcebZbServiceDelegate.getZcebZbById(zb, this.requestMeta);    }    List detailList = new ArrayList();    if (zb != null && (zb.getItems() == null || zb.getItems().size() == 0)) {      detailList = zcebZbServiceDelegate.getZcebZbItem(zb.getBidCode(), requestMeta);      zb.setItems(detailList == null ? new ArrayList() : detailList);    }    listCursor.setCurrentObject(zb);    refreshSubTableData(zb.getItems());    setOldObject();    this.setEditingObject(zb);    updateFieldEditorsEditable();    // 根据工作流模版设置字段是否可编辑    updateWFEditorEditable(zb, requestMeta);    // 根据工作流模版设置功能按钮是否可用    setButtonStatus((ZcebZb) listCursor.getCurrentObject(), requestMeta, this.listCursor);    initScrollBarValue();  }  private void setDefualtValue(ZcebZb zb, String pageStatus) {    if (pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {      zb.setInputor(this.requestMeta.getSvUserName());      zb.setInputDate(this.requestMeta.getSysDate());      zb.setNd(this.requestMeta.getSvNd());      zb.setStatus("0");    }  }  private void refreshSubTableData(List deList) {    ZcebZbToTableModelConverter mc = new ZcebZbToTableModelConverter();    tablePanel.setTableModel(mc.convertZbItemToTableModel(deList));    setTableProperty(tablePanel.getTable());    setTableCell(tablePanel.getTable());  }  /* (non-Javadoc)   * @see com.ufgov.gk.client.component.zc.AbstractMainSubEditPanel#updateFieldEditorsEditable()   */  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null        && (fd.getFieldName().equals("inputor") || fd.getFieldName().equals("inputDate") || fd.getFieldName().equals("status")        || fd.getFieldName().equals("bidCode") || fd.getFieldName().equals("bidType") || fd.getFieldName().equals("realBidType")        || fd.getFieldName().equals("coName") || fd.getFieldName().equals("buySum"))) {          fd.setEnabled(false);        } else {          fd.setEnabled(true);        }      }      projCodeChange();      this.tablePanel.getTable().setEnabled(true);    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      this.tablePanel.getTable().setEnabled(false);    }  }  private void setTableProperty(JTable table) {    ZcUtil.translateColName(table, "ZC_EB_");    SwingUtil.setTableCellEditor(table, "CATALOGUE_CODE", new ZcBCatalogueCellEditor());    SwingUtil.setTableCellEditor(table, "IS_JNJS", new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellRenderer(table, "IS_JNJS", new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellEditor(table, "IS_ZZCX", new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellRenderer(table, "IS_ZZCX", new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellEditor(table, "IS_LSHB", new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellRenderer(table, "IS_LSHB", new AsValCellRenderer("VS_Y/N"));  }  private void setOldObject() {    oldSignup = (ZcebZb) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  /* (non-Javadoc)   * @see com.ufgov.gk.client.component.zc.AbstractMainSubEditPanel#createFieldEditors()   */  @Override  public List<AbstractFieldEditor> createFieldEditors() {    // TODO Auto-generated method stub    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    String columNames[] = { "编码", "采购项目", "单位代码", "单位名称" };    ZcebProMakeFnHandler projHandler = new ZcebProMakeFnHandler(columNames);    ElementConditionDto dto = new ElementConditionDto();    //    dto.setCoCode(this.requestMeta.getSvCoCode());    dto.setZcText0("exec");    dto.setNd(this.requestMeta.getSvNd());    dto.setCoCode(this.requestMeta.getSvCoCode());    dto.setZcText2("Z01");    ForeignEntityFieldEditor editor0 = new ForeignEntityFieldEditor(this.proMakeSqlMapSelectedId, dto, 20, projHandler, columNames, "采购项目",    "makeName");    editorList.add(editor0);    editor0.addValueChangeListener(new ValueChangeListener() {      @Override      public void valueChanged(ValueChangeEvent e) {        projCodeChange();      }    });    TextFieldEditor coNameEditor = new TextFieldEditor("采购单位", "coName");    editorList.add(coNameEditor);    MoneyFieldEditor makeSumEditor = new MoneyFieldEditor("项目预算", "buySum");    editorList.add(makeSumEditor);    columNames = new String[] { "编码", "原采购方式", "变更后采购方式", "变更金额", "变更原因" };    ZcebProMakeChgHandler projChgHandler = new ZcebProMakeChgHandler(columNames);    this.chgEditor = new ForeignEntityFieldEditor(this.proMakeChgSqlMapSelectedId, this.proMakeChgDto, 20, projChgHandler, columNames, "变更单",    "chgBillCode");    editorList.add(chgEditor);    TextFieldEditor chgReason = new TextFieldEditor("变更原因", "chgBillName");    editorList.add(chgReason);    MoneyFieldEditor zcMoneyBiSum = new MoneyFieldEditor("变更金额", "chgBidSum");    editorList.add(zcMoneyBiSum);    AsValFieldEditor zcPitemOpiway = new AsValFieldEditor("招标方式", "bidType", "ZC_VS_PITEM_OPIWAY");    editorList.add(zcPitemOpiway);    zcPitemOpiway = new AsValFieldEditor("变更后招标方式", "realBidType", "ZC_VS_PITEM_OPIWAY");    editorList.add(zcPitemOpiway);    TextFieldEditor editor = new TextFieldEditor("中标內容", "bidContent");    editorList.add(editor);    MoneyFieldEditor editorm = new MoneyFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FIELD_PACK_BUDGET), "packSum");    editorList.add(editorm);    editorm = new MoneyFieldEditor("中标金额", "bidSum");    editorList.add(editorm);    String suColumNames[] = { "供应商代码", "供应商名称", "联系人", "电话", "审核人", "地址", "邮编" };//, "审核日期", "状态" };    ZcebSupplierFnHandler handler = new ZcebSupplierFnHandler(suColumNames);    ElementConditionDto suDto = new ElementConditionDto();    suDto.setZcText0("2");//只选择已经启用的供应商    SupplierFieldEditor supplierEditor = new SupplierFieldEditor(this.suSqlMapSelectedId, suDto, 20, handler, suColumNames, "中标供应商", "suName");    editorList.add(supplierEditor);    editor = new TextFieldEditor("供应商地址", "suAddress");    editorList.add(editor);    editor = new TextFieldEditor("供应商联系人", "suLinkman");    editorList.add(editor);    editor = new TextFieldEditor("供应商电话", "suTel");    editorList.add(editor);    AsValFieldEditor editorv = new AsValFieldEditor("国内外", "gnw", "ZC_VS_GNW");    editorList.add(editorv);    editorv = new AsValFieldEditor("省内外", "snw", "ZC_VS_SNW");    editorList.add(editorv);    editorv = new AsValFieldEditor("中小企业", "isZxqy", "VS_Y/N");    editorList.add(editorv);    //    editor = new TextFieldEditor("中标通知书", "bidNotice");    //    editorList.add(editor);    editor = new TextFieldEditor("录入人", "inputor");    editorList.add(editor);    DateFieldEditor editor11 = new DateFieldEditor("录入日期", "inputDate");    editorList.add(editor11);    AsValFieldEditor editorvv = new AsValFieldEditor("状态", "status", "ZC_VS_BID_STATUS");    editorList.add(editorvv);    return editorList;  }  private void projCodeChange() {    ZcebZb zb = (ZcebZb) this.listCursor.getCurrentObject();    for (AbstractFieldEditor editor : this.fieldEditors) {      if (editor.getFieldName().equals("makeName")) {        Object obj = editor.getValue();        if (obj == null || obj.toString().trim().length() == 0) {          zb.setMakeCode(null);          zb.setMakeName(null);          zb.setBuySum(null);          zb.setCoCode(null);          zb.setCoName(null);          zb.setChgBillCode(null);          zb.setChgBidSum(null);          zb.setChgBillName(null);          zb.setBidType(null);          zb.setRealBidType(null);          zb.setBidContent(null);          for (AbstractFieldEditor fd : this.fieldEditors) {            if (fd.getFieldName() != null            && (fd.getFieldName().equals("chgBillCode") || fd.getFieldName().equals("chgBillName") || fd.getFieldName().equals("chgBidSum") || fd            .getFieldName().equals("realBidType"))) {              fd.setEnabled(false);            }          }          break;        } else {          this.proMakeChgDto.setDattr1(zb.getMakeCode());          this.chgEditor.updateDto(this.proMakeChgDto);          for (AbstractFieldEditor fd : this.fieldEditors) {            if (fd.getFieldName() != null && (fd.getFieldName().equals("chgBillCode")            //                || fd.getFieldName().equals("chgBillName")              //                || fd.getFieldName().equals("chgBidSum")              //                || fd.getFieldName().equals("realBidType")              )) {              fd.setEnabled(true);            }          }        }      }    }    setEditingObject(zb);  }  /**   * 供应商外部部件选择类   * @author Administrator   *   */  private class ZcebSupplierFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcebSupplierFnHandler(String columNames[]) {      this.columNames = columNames;    }    /* (non-Javadoc)     * @see com.ufgov.gk.common.zc.foreignentity.IForeignEntityHandler#excute(java.util.List)     */    @Override    public void excute(List selectedDatas) {      // TODO Auto-generated method stub      for (Object object : selectedDatas) {        ZcEbSupplier supplier = (ZcEbSupplier) object;        //        System.out.println(supplier.getName());        ZcebZb zb = (ZcebZb) listCursor.getCurrentObject();        zb.setSuCode(supplier.getCode());        zb.setSuName(supplier.getName());        zb.setSuLinkman(supplier.getLinkMan());        zb.setSuAddress(supplier.getAddress());        zb.setSuTel(supplier.getPhone());        zb.setGnw(supplier.getGnw());        zb.setSnw(supplier.getSnw());        zb.setIsZxqy(supplier.getIsZxqy());        setEditingObject(zb);      }    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbSupplier rowData = (ZcEbSupplier) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getCode();        data[i][col++] = rowData.getName();        data[i][col++] = rowData.getLinkMan();        data[i][col++] = rowData.getPhone();        data[i][col++] = rowData.getOperator();        data[i][col++] = rowData.getAddress();        data[i][col++] = rowData.getZipCode();        //        data[i][col++] = rowData.getOperDate();        //        data[i][col++] = rowData.getStatus();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      // TODO Auto-generated method stub      return false;    }  }  /**   * 项目选择部件   * @author Administrator   *   */  private class ZcebProMakeFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcebProMakeFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      // TODO Auto-generated method stub      for (Object object : selectedDatas) {        ZcPProMakeExt proj = (ZcPProMakeExt) object;        //        System.out.println(supplier.getName());        ZcebZb zb = (ZcebZb) listCursor.getCurrentObject();        zb.setMakeCode(proj.getZcMakeCode());        zb.setMakeName(proj.getZcMakeName());        zb.setCoCode(proj.getCoCode());        zb.setCoName(proj.getZcCoName());        zb.setBuySum(proj.getZcMoneyBiSum());        zb.setBidContent(proj.getZcMakeName());        zb.setBidType(proj.getZcPitemOpiway());        setEditingObject(zb);      }      projCodeChange();    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcPProMakeExt rowData = (ZcPProMakeExt) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getZcMakeCode();        data[i][col++] = rowData.getZcMakeName();        data[i][col++] = rowData.getCoCode();        data[i][col++] = rowData.getZcCoName();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      // TODO Auto-generated method stub      return false;    }  }  /**   * 变更单选择部件   * @author Administrator   *   */  private class ZcebProMakeChgHandler implements IForeignEntityHandler {    private String columNames[];    public ZcebProMakeChgHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      // TODO Auto-generated method stub      for (Object object : selectedDatas) {        ZcEbProjChange chg = (ZcEbProjChange) object;        //        System.out.println(supplier.getName());        ZcebZb zb = (ZcebZb) listCursor.getCurrentObject();        zb.setChgBillCode(chg.getProjCode());        zb.setChgBillName(chg.getChangeReasonMemo());        zb.setChgBidSum(chg.getProjSum());        zb.setBidType(chg.getPurSrcType());        zb.setRealBidType(chg.getPurType());        setEditingObject(zb);      }    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProjChange rowData = (ZcEbProjChange) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", rowData.getPurSrcType());        data[i][col++] = AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", rowData.getPurType());        data[i][col++] = rowData.getProjSum();        data[i][col++] = rowData.getChangeReasonMemo();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      // TODO Auto-generated method stub      return false;    }  }  /* (non-Javadoc)   * @see com.ufgov.gk.client.component.zc.AbstractMainSubEditPanel#createSubBillPanel()   */  @Override  public JComponent createSubBillPanel() {    JTabbedPane tabPane = new JTabbedPane();    tablePanel.init();    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_table");    tablePanel.getTable().setShowCheckedColumn(false);    tablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 0));    tabPane.addTab("标的构成", tablePanel);    this.subPackTableToolbar = new JFuncToolBar();    JButton addBtn1 = new JButton("添加");    JButton insertBtn1 = new JButton("插入");    JButton delBtn1 = new JButton("删除");    this.subPackTableToolbar.add(addBtn1);    this.subPackTableToolbar.add(insertBtn1);    this.subPackTableToolbar.add(delBtn1);    tablePanel.add(this.subPackTableToolbar, BorderLayout.SOUTH);    addBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        addSub(tablePanel);      }    });    insertBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        insertSub(tablePanel);      }    });    delBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        deleteSub(tablePanel);      }    });    return tabPane;  }  protected Integer[] deleteSub(JTablePanel tablePanel) {    JPageableFixedTable table = tablePanel.getTable();    stopTableEditing();    int[] selectedRows = table.getSelectedRows();    if (selectedRows.length == 0) {      JOptionPane.showMessageDialog(self, "没有选择数据！", "提示", JOptionPane.INFORMATION_MESSAGE);      return null;    }    BeanTableModel tableModel = ((BeanTableModel) table.getModel());    int[] selRows = new int[selectedRows.length];    for (int i = 0; i < selRows.length; i++) {      selRows[i] = table.convertRowIndexToModel(selectedRows[i]);    }    Arrays.sort(selRows);    for (int i = selRows.length - 1; i >= 0; i--) {      tableModel.deleteRow(selRows[i]);    }    return null;  }  private void insertSub(JTablePanel tablePanel) {    tablePanel.getTable().clearSelection();    stopTableEditing();    BeanTableModel editTableModel = (BeanTableModel) tablePanel.getTable().getModel();    ZcebZbItem bean = new ZcebZbItem();    bean.setTempGuid(Guid.genID());    ZcebZb zb = (ZcebZb) listCursor.getCurrentObject();    bean.setBidCode(zb.getBidCode());    editTableModel.insertRow(editTableModel.getRowCount(), bean);    int selectedRow = tablePanel.getTable().getSelectedRow();    if (selectedRow != -1) {      editTableModel.insertRow(selectedRow + 1, bean);    } else {      editTableModel.insertRow(editTableModel.getRowCount(), bean);    }  }  private void addSub(JTablePanel tablePanel) {    tablePanel.getTable().clearSelection();    stopTableEditing();    BeanTableModel editTableModel = (BeanTableModel) tablePanel.getTable().getModel();    ZcebZbItem bean = new ZcebZbItem();    ZcebZb zb = (ZcebZb) listCursor.getCurrentObject();    bean.setTempGuid(Guid.genID());    bean.setBidCode(zb.getBidCode());    editTableModel.insertRow(editTableModel.getRowCount(), bean);  }  private void setTableCell(JPageableFixedTable table) {  }  /* (non-Javadoc)   * @see com.ufgov.gk.client.component.zc.AbstractMainSubEditPanel#initToolBar(com.ufgov.gk.client.component.JFuncToolBar)   */  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    toolBar.add(sendButton);    toolBar.add(suggestPassButton);    toolBar.add(auditPassButton);    toolBar.add(callbackButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(traceButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    deleteButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        // TODO Auto-generated method stub        doDelete();      }    });    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        // TODO Auto-generated method stub        doSave();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 送审        doSend();      }    });    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 收回        doCallback();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        stopTableEditing();        // 填写意见审核        doSuggestPass();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 审核        doAudit();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 销审        doUnaudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 退回        doUntread();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 流程跟踪        doTrace();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });  }  /*   * 流程跟踪   */  private void doTrace() {    ZcBaseBill bean = (ZcBaseBill) this.listCursor.getCurrentObject();    if (bean == null) {      return;    }    ZcUtil.showTraceDialog(bean, compoId);  }  /*   * 退回   */  private void doUntread() {    if (!checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcebZb afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unTreadButton.getFuncId());      ZcebZb zb = (ZcebZb) this.listCursor.getCurrentObject();      zb.setAuditorId(WorkEnv.getInstance().getCurrUserId());      zb.setComment(commentDialog.getComment());      afterSaveBill = this.zcebZbServiceDelegate.untreadFN(zb, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 销审   */  private void doUnaudit() {    boolean success = true;    ZcebZb afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unAuditButton.getFuncId());      ZcebZb zb = (ZcebZb) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      zb.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = this.zcebZbServiceDelegate.unAuditFN(zb, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 填写意见审核   */  private void doSuggestPass() {    if (!checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcebZb afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.suggestPassButton.getFuncId());      ZcebZb zb = (ZcebZb) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      zb.setComment(commentDialog.getComment());      zb.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = this.zcebZbServiceDelegate.auditFN(zb, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 收回   */  private void doCallback() {    boolean success = true;    ZcebZb afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.callbackButton.getFuncId());      ZcebZb zb = (ZcebZb) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      zb.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = this.zcebZbServiceDelegate.callbackFN(zb, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 送审   */  private void doSend() {    boolean success = true;    ZcebZb afterSaveBill = null;    String errorInfo = "";    if (!checkBeforeSave()) {      return;    }    try {      requestMeta.setFuncId(this.sendButton.getFuncId());      ZcebZb zb = (ZcebZb) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      zb.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = this.zcebZbServiceDelegate.newCommitFN(zb, requestMeta);    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    }  }  private void doAdd() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;    ZcebZb zb = new ZcebZb();    setDefualtValue(zb, ZcSettingConstants.PAGE_STATUS_NEW);    listCursor.setCurrentObject(zb);    //新插入一行数据    ZcebZbItem item = new ZcebZbItem();    item.setTempGuid(Guid.genID());    zb.getItems().add(item);    setEditingObject(zb);    refreshData();    updateFieldEditorsEditable();    setDefualtValue(zb, this.pageStatus);    setButtonStatus();  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  private void doDelete() {    ZcebZb zb = (ZcebZb) this.listCursor.getCurrentObject();    int num = JOptionPane.showConfirmDialog(this, "确认删除当前数据？", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      String errorInfo = "";      try {        this.zcebZbServiceDelegate.deleteByPrimaryKeyFN(zb.getBidCode(), this.requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(self, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;        //          this.doNext();        listCursor.removeCurrentObject();        //          listCursor.next();        refreshData();        //          setButtonStatus();        this.listPanel.refreshCurrentTabData();        updateFieldEditorsEditable();        setButtonStatus();      } else {        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  /*   * 审核   */  private void doAudit() {    if (!checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    ZcebZb afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.auditPassButton.getFuncId());      ZcebZb zb = (ZcebZb) this.listCursor.getCurrentObject();      zb.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = this.zcebZbServiceDelegate.auditFN(zb, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doUnAudit() {    ZcebZb zb = (ZcebZb) this.listCursor.getCurrentObject();    zb.setStatus("3");    boolean success = true;    String errorInfo = "";    try {      this.zcebZbServiceDelegate.updateZcebZbFN(zb, this.requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listPanel.refreshCurrentTabData();      this.oldSignup = (ZcebZb) ObjectUtil.deepCopy(zb);      JOptionPane.showMessageDialog(self, "取消备案成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      updateFieldEditorsEditable();      setButtonStatus();    } else {      JOptionPane.showMessageDialog(this, "取消备案失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      zb.setStatus(this.oldSignup.getStatus());    }  }  private void doPrevious() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldSignup);      }    }    listCursor.previous();    refreshData();    setButtonStatus();  }  private void doNext() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldSignup);      }    }    listCursor.next();    refreshData();    setButtonStatus();  }  public void doExit() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    this.parent.dispose();  }  public boolean doSave() {    stopTableEditing();    //    if (!isDataChanged()) {    //      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);    //      return false;    //    }    ZcebZb zb = (ZcebZb) this.listCursor.getCurrentObject();    //    if (!validateData(zb, this.compoId))    //      return false;    if (!checkBeforeSave())      return false;    boolean success = true;    String errorInfo = "";    try {      zb = this.zcebZbServiceDelegate.saveFN(zb, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(zb);      this.oldSignup = (ZcebZb) ObjectUtil.deepCopy(zb);      this.listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      setButtonStatus();      setOldObject();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  private boolean checkBeforeSave() {    List notNullBillElementList = this.billElementMeta.getNotNullBillElement();    List notNullDetailBillElementList = this.detailBillElementMeta.getNotNullBillElement();    ZcebZb zb = (ZcebZb) this.listCursor.getCurrentObject();    StringBuilder errorInfo = new StringBuilder();    String validateInfo = ZcUtil.validateBillElementNull(zb, notNullBillElementList);    String validateDetailInfo = ZcUtil.validateDetailBillElementNull(zb.getItems(), notNullDetailBillElementList, true);    if (validateInfo.length() != 0) {      errorInfo.append("").append(validateInfo.toString()).append("\n");    }    if (validateDetailInfo.length() != 0) {      errorInfo.append("").append(validateDetailInfo.toString()).append("\n");    }    //检查单价总价关系    for (Object obj : zb.getItems()) {      ZcebZbItem item = (ZcebZbItem) obj;      if (item.getAmount() != null && item.getPrice() != null && item.getSums() != null) {        if (item.getSums().compareTo(item.getAmount().multiply(item.getPrice())) != 0) {          errorInfo.append("中标明细里单价*数量不等于总价金额\n");          break;        }      }    }    //检查总价和中标金额、分包预算、变更金额、总预算、已录入中标金额的关系    BigDecimal itemSums = new BigDecimal(0);//总价        BigDecimal buySums = new BigDecimal(0);    BigDecimal chgSums = new BigDecimal(0);    BigDecimal packSums = new BigDecimal(0);    BigDecimal bidsums = new BigDecimal(0);    BigDecimal otherBidSums = new BigDecimal(0);//本项目其他已经提交的中标金额    buySums = zb.getBuySum() == null ? buySums : zb.getBuySum();    bidsums = zb.getBidSum() == null ? bidsums : zb.getBidSum();    if (zb.getChgBillCode() != null) {      chgSums = zb.getChgBidSum() == null ? chgSums : zb.getChgBidSum();    }    packSums = zb.getPackSum() == null ? packSums : zb.getPackSum();    for (Object obj : zb.getItems()) {      ZcebZbItem item = (ZcebZbItem) obj;      if (item.getSums() != null)        itemSums = itemSums.add(item.getSums());    }    if (bidsums.compareTo(itemSums) != 0) {      errorInfo.append("中标明细里总价和不等于中标金额\n");    }    if (packSums.compareTo(bidsums) == -1) {      errorInfo.append("分包预算不能小于中标金额\n");    }    if (zb.getChgBillCode() != null && zb.getChgBidSum() != null && zb.getChgBidSum().compareTo(packSums) == -1) {      errorInfo.append("分包预算不能大于变更金额\n");    }    if (buySums.compareTo(packSums) == -1) {      errorInfo.append("分包预算不能大于项目预算\n");    }    otherBidSums = this.zcebZbServiceDelegate.getOtherBidSums(zb, this.requestMeta);    otherBidSums = otherBidSums == null ? new BigDecimal(0) : otherBidSums;    if (buySums.compareTo(bidsums.add(otherBidSums)) == -1) {      errorInfo.append("该采购项目已经录入了中标金额：" + otherBidSums.doubleValue() + ",加上目前录入的中标金额，已经超出项目预算\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  public void doHelp() {    setButtonStatus();  }  private void stopTableEditing() {    JPageableFixedTable table = this.tablePanel.getTable();    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }  }  public boolean isDataChanged() {    //return !DigestUtil.digest(oldSignup).equals(DigestUtil.digest(listCursor.getCurrentObject()));    return false;  }  private void refreshAll(ZcebZb afterSaveBill, boolean isRefreshButton) {    this.listCursor.setCurrentObject(afterSaveBill);    refreshData();    if (isRefreshButton) {      setButtonStatus(afterSaveBill, requestMeta, this.listCursor);    }  }  private void initScrollBarValue() {    this.tablePanel.getScrollPane().getHorizontalScrollBar().setValue(0);    this.tablePanel.getScrollPane().getVerticalScrollBar().setValue(0);  }}
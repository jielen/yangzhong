package com.ufgov.zc.client.zc.intranetandbidnet;import java.awt.BorderLayout;import java.awt.Container;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.File;import java.util.ArrayList;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextField;import javax.swing.SwingUtilities;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.zc.ZcEbProCompletionHandler;import com.ufgov.zc.client.component.zc.dataexchange.model.CommonDataExchangeOperator;import com.ufgov.zc.client.component.zc.fieldeditor.EntrustFieldEditor;import com.ufgov.zc.client.zc.ztb.component.ProgressGlassPane;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.common.console.model.AsEmp;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbPackReq;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbProjZbFile;import com.ufgov.zc.common.zc.model.ZcEbRequirement;import com.ufgov.zc.common.zc.model.ZcEbSignup;import com.ufgov.zc.common.zc.model.ZcEbSignupPackDetail;import com.ufgov.zc.common.zc.publish.IIntranetDataExpServiceDelegate;public class IntranetDataExpDialog extends IntrantAndBidnetAbstractDialog {  /**   *    */  private static final long serialVersionUID = 488445928619028230L;  private IntranetDataExpDialog self = this;  private IIntranetDataExpServiceDelegate intranetDataExpServiceDelegate = (IIntranetDataExpServiceDelegate) ServiceFactory.create(  IIntranetDataExpServiceDelegate.class, "intranetDataExpServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String projectCode = null;  private EntrustFieldEditor entrustFieldEditor;  private JButton jButtonExec;  public IntranetDataExpDialog() {    Container container = self.getContentPane();    container.setLayout(new BorderLayout(6, 6));    container.removeAll();    ZcEbProCompletionHandler handler = new ZcEbProCompletionHandler("ZcEbProj.getZcEbProj") {      public void excute(List selectedDatas) {        if (selectedDatas == null && selectedDatas.size() == 0) {          JOptionPane.showMessageDialog(self, "请选择一个项目进行导出！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        if (selectedDatas.size() > 1) {          JOptionPane.showMessageDialog(self, "请只选择一个项目进行导出！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        ZcEbProj zepa = (ZcEbProj) selectedDatas.get(0);        projectCode = zepa.getProjCode();        entrustFieldEditor.getField().setValue(projectCode + "---" + zepa.getProjName());      }    };    JPanel panel3 = new JPanel(new BorderLayout(1, 2));    panel3.add(new JLabel("选择项目:"), BorderLayout.WEST);    ElementConditionDto entrustDto = new ElementConditionDto();    entrustDto.setStatus("exec");    entrustFieldEditor = new EntrustFieldEditor(handler.getSqlId(), entrustDto, 20, handler, handler.getColumNames(),    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_EB_ZC_MAKE_CODE), "proCode");    panel3.add(entrustFieldEditor, BorderLayout.CENTER);    container.add(panel3, BorderLayout.NORTH);    JPanel middle = new JPanel(new BorderLayout());    JPanel inner = new JPanel(new BorderLayout(4, 4));    JPanel panel2 = new JPanel(new BorderLayout(4, 4));    panel2.add(new JLabel("导出位置:"), BorderLayout.WEST);    final JTextField savePathTF = new JTextField();    savePathTF.setName("pathTextField");    panel2.add(savePathTF, BorderLayout.CENTER);    JButton jButton = makeBrowerButton(savePathTF, true);    panel2.add(jButton, BorderLayout.EAST);    inner.add(panel2, BorderLayout.NORTH);    middle.add(inner, BorderLayout.CENTER);    JScrollPane scrollPane = this.makeTextAreaScrollPanel();    inner.add(scrollPane, BorderLayout.CENTER);    container.add(middle, BorderLayout.CENTER);    JPanel panel4 = new JPanel();    jButtonExec = new JButton("执行导出");    jButtonExec.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        if (savePathTF.getText() == null || "".equals(savePathTF.getText())) {          JOptionPane.showMessageDialog(self, "请指定导出文件的存放位置...", "提示", JOptionPane.OK_OPTION);          return;        }        if (!CommonDataExchangeOperator.checkFilePath(savePathTF.getText())) {          JOptionPane.showMessageDialog(self, "路径中存在非法字符，请检查...", "提示", JOptionPane.OK_OPTION);          return;        }        self.progressText.setLength(0);        //savePathTF.setText(self.saveHistoryDir(savePathTF.getText(), "export_dir"));        if (entrustFieldEditor.getField().getValue() == null || "".equals(entrustFieldEditor.getField().getValue())) {          JOptionPane.showMessageDialog(self, "请选择需要导出的项目...");          return;        }        savePathTF.setText(savePathTF.getText().trim() + File.separator + entrustFieldEditor.getField().getValue().toString().trim());        makeProgressGlassPane(savePathTF.getText().trim(), projectCode, true);      }    });    panel4.add(jButtonExec);    container.add(panel4, BorderLayout.SOUTH);  }  public void expExecute(String path, String projCode, ProgressGlassPane glassPane) {    try {      glassPane.getTimer().start();      isJobRunning = true;      jButtonExec.setEnabled(false);      setFlagFile(path, INTRANET_DATA_FLAG);      IIntranetDataExpServiceDelegate inexpd = intranetDataExpServiceDelegate;      ZcEbProj proj = inexpd.getProjectData(projCode, requestMeta);      saveAsXml(proj, path, "zcEbProj");      progressText.append("项目 表导出完毕\n");      List packList = inexpd.getZcEbPackData(projCode, requestMeta);      saveAsXml(packList, path, "zcEbPack");      progressText.append("分包 表导出完毕\n");      List packReqList = inexpd.getZcEbPackReqData(projCode, requestMeta);      saveAsXml(packReqList, path, "pack_req_list");      progressText.append("分包需求 表导出完毕\n");      List planList = inexpd.getZcEbPlanData(projCode, requestMeta);      saveAsXml(planList, path, "plan_list");      progressText.append("计划 表导出完毕\n");      ZcEbProjZbFile zepfile = inexpd.getZcEbProjZbFileData(projCode, requestMeta);      saveAsXml(zepfile, path, "ZcEbProjZbFile");      progressText.append("招标文件 表导出完毕\n");      List signupDataList = inexpd.getZcEbSignupData(projCode, requestMeta);      saveAsXml(signupDataList, path, "signupDataList");      progressText.append("供应商报名 表导出完毕\n");      List<String> signupIdList = getSignupIdListList(signupDataList);      List signupPackList = inexpd.getZcEbSignupPackDetailData(signupIdList, requestMeta);      saveAsXml(signupPackList, path, "signupPackList");      progressText.append("报名分包 表导出完毕\n");      List<String> entrustCodeList = getEntrustCodeList(packList);      List entrustList = inexpd.getZcEbEntrustData(entrustCodeList, requestMeta);      saveAsXml(entrustList, path, "entrustList");      progressText.append("采购任务单 表导出完毕\n");      List zcEbEntrustList = inexpd.getZcEbEntrustDetailData(entrustCodeList, requestMeta);      saveAsXml(zcEbEntrustList, path, "zcEbEntrustList");      progressText.append("采购任务单明细 表导出完毕\n");      List zcEbAuditSheet = inexpd.getZcEbAuditSheetData(entrustCodeList, requestMeta);      saveAsXml(zcEbAuditSheet, path, "zcEbAuditSheet");      progressText.append("采购批判单 表导出完毕\n");      List zcEbRequirement = inexpd.getZcEbRequirementData(entrustCodeList, requestMeta);      saveAsXml(zcEbRequirement, path, "zcEbRequirement");      progressText.append("项目需求确认 表导出完毕\n");      List<String> reqCodeList = getReqCodeList(zcEbRequirement);      List zcEbRequirementDetail = inexpd.getZcEbRequirementDetailData(reqCodeList, requestMeta);      saveAsXml(zcEbRequirementDetail, path, "zcEbRequirementDetail");      progressText.append("项目需求确认明细 表导出完毕\n");      List detailCodes = getZcEbPackReqDetailCodes(packReqList);      List zZcEbPackReqDetail = inexpd.getZcEbPackReqDetailData(detailCodes, requestMeta);      saveAsXml(zZcEbPackReqDetail, path, "pack_req_detail_list");      progressText.append("分包明细  表导出完毕\n");      List<String> zcMakeCodeList = getZcMakeCodeList(entrustList);      if (zcMakeCodeList != null && zcMakeCodeList.size() > 0) {        List zcPProMakeList = inexpd.getZcPProMakeData(zcMakeCodeList, requestMeta);        saveAsXml(zcPProMakeList, path, "zcPProMakeList");        progressText.append("采购计划 表导出完毕\n");        List zcPProMitemBiList = inexpd.getZcPProMitemBiData(zcMakeCodeList, requestMeta);        saveAsXml(zcPProMitemBiList, path, "zcPProMitemBiList");        progressText.append("采购计划资金明细 表导出完毕\n");        List zcPProMitemList = inexpd.getZcPProMitemData(zcMakeCodeList, requestMeta);        saveAsXml(zcPProMitemList, path, "zcPProMitemList");        progressText.append("采购计划需求 表导出完毕\n");      }      List zcEbFormulaList = inexpd.getZcEbFormulaData(projCode, requestMeta);      saveAsXml(zcEbFormulaList, path, "zcEbFormulaList");      progressText.append("项目需求确认 表导出完毕\n");      List<String> formulaCodeList = getFormulaCodeList(zcEbFormulaList);      List zcEbFormulaItemList = inexpd.getZcEbFormulaItemData(formulaCodeList, requestMeta);      saveAsXml(zcEbFormulaItemList, path, "zcEbFormulaItemList");      progressText.append("项目需求确认明细 表导出完毕\n");      List zcEbFormulaParamList = inexpd.getZcEbFormulaParamData(formulaCodeList, requestMeta);      saveAsXml(zcEbFormulaParamList, path, "zcEbFormulaParamList");      progressText.append("评审参数 表导出完毕\n");      List<String> userIdList = getUserIdList(signupDataList);      List asUserList = inexpd.getUserData(userIdList, requestMeta);      saveAsXml(asUserList, path, "userList");      progressText.append("用户 表导出完毕\n");      List userGroupList = inexpd.getAsUserGroupData(userIdList, requestMeta);      saveAsXml(userGroupList, path, "userGroupList");      progressText.append("用户组 表导出完毕\n");      List asEmpList = inexpd.getAsEmpData(userIdList, requestMeta);      saveAsXml(asEmpList, path, "asEmpList");      progressText.append("人员 表导出完毕\n");      List<String> empCodeList = getEmpCodeList(asEmpList);      List positionList = inexpd.getPositionData(empCodeList, requestMeta);      saveAsXml(positionList, path, "asEmpPositionList");      progressText.append("职员任职情况 表导出完毕\n");      List<String> fileIdList = getFileIdList(zepfile, signupDataList, signupPackList);      List asFileList = inexpd.getAsFileData(fileIdList, requestMeta);      saveAsXml(asFileList, path, "asFile");      progressText.append("文件登记 表导出完毕\n");      List<String> zcSuCodeList = getZcSuCodeList(signupDataList);      List supplierList = inexpd.getZcEbSupplierData(zcSuCodeList, requestMeta);      saveAsXml(supplierList, path, "supplierList");      progressText.append("供应商信息 表导出完毕\n");      progressText.append("所有表导出完毕\n");      progressText.append("对导出文件进行打包，加密！\n");      saveAsZip(path);      PubFunction.deleteFile(path, false);      progressText.append("对导出文件进行打包，加密完毕！\n");      publishProgressText();      glassPane.getTimer().stop();      glassPane.getProgressBar().setValue(100);      glassPane.getProgressInfo().setHorizontalAlignment(SwingUtilities.CENTER);      glassPane.setVisible(false);      isJobRunning = false;      jButtonExec.setEnabled(true);    } catch (Exception e) {      // TCJLODO Auto-generated catch block      e.printStackTrace();      progressText.append(e.getMessage() + "\n导出终止！");      publishProgressText();      glassPane.getTimer().stop();      glassPane.setVisible(false);      isJobRunning = false;      jButtonExec.setEnabled(true);    }  }  private List<String> getZcSuCodeList(List signupDataList) {    Set<String> providerCodeList = new HashSet<String>();    for (Iterator iterator = signupDataList.iterator(); iterator.hasNext();) {      ZcEbSignup it = (ZcEbSignup) iterator.next();      providerCodeList.add(it.getProviderCode());    }    return new ArrayList<String>(providerCodeList);  }  private List<String> getSignupIdListList(List signupDataList) {    Set<String> signupIdList = new HashSet<String>();    for (Iterator iterator = signupDataList.iterator(); iterator.hasNext();) {      ZcEbSignup it = (ZcEbSignup) iterator.next();      signupIdList.add(it.getSignupId());    }    return new ArrayList<String>(signupIdList);  }  private List<String> getFileIdList(ZcEbProjZbFile zepfile, List signupDataList, List signupPackList) {    Set<String> asfileIdList = new HashSet<String>();    if (zepfile != null) {      asfileIdList.add(zepfile.getFileId());    }    if (signupDataList != null) {      for (Iterator iterator = signupDataList.iterator(); iterator.hasNext();) {        ZcEbSignup si = (ZcEbSignup) iterator.next();        if (si.getBidDocFileId() != null) {          asfileIdList.add(si.getBidDocFileId());        }      }    }    if (signupPackList != null) {      for (Iterator iterator = signupPackList.iterator(); iterator.hasNext();) {        ZcEbSignupPackDetail sp = (ZcEbSignupPackDetail) iterator.next();        if (sp.getBidDocId() != null) {          asfileIdList.add(sp.getBidDocId());        }      }    }    return new ArrayList<String>(asfileIdList);  }  private List<String> getEmpCodeList(List asEmpList) {    Set<String> asEmpCodeList = new HashSet<String>();    for (Iterator iterator = asEmpList.iterator(); iterator.hasNext();) {      AsEmp it = (AsEmp) iterator.next();      asEmpCodeList.add(it.getEmpCode());    }    return new ArrayList<String>(asEmpCodeList);  }  private List<String> getUserIdList(List signupDataList) {    Set<String> userIdList = new HashSet<String>();    for (Iterator iterator = signupDataList.iterator(); iterator.hasNext();) {      ZcEbSignup it = (ZcEbSignup) iterator.next();      userIdList.add(it.getProviderCode());    }    return new ArrayList<String>(userIdList);  }  private List<String> getFormulaCodeList(List zcEbFormulaList) {    Set<String> formulaCodeList = new HashSet<String>();    for (Iterator iterator = zcEbFormulaList.iterator(); iterator.hasNext();) {      ZcEbFormula it = (ZcEbFormula) iterator.next();      formulaCodeList.add(it.getFormulaCode());    }    return new ArrayList<String>(formulaCodeList);  }  private List<String> getZcMakeCodeList(List entrustList) {    Set<String> zcMakeCodeList = new HashSet<String>();    for (Iterator iterator = entrustList.iterator(); iterator.hasNext();) {      ZcEbEntrust it = (ZcEbEntrust) iterator.next();      if (it != null && it.getZcMakeCode() != null) {        zcMakeCodeList.add(it.getZcMakeCode());      }    }    return new ArrayList<String>(zcMakeCodeList);  }  private List<String> getReqCodeList(List zcEbRequirement) {    Set<String> reqCodeList = new HashSet<String>();    for (Iterator iterator = zcEbRequirement.iterator(); iterator.hasNext();) {      ZcEbRequirement it = (ZcEbRequirement) iterator.next();      reqCodeList.add(it.getReqCode());    }    return new ArrayList<String>(reqCodeList);  }  public List<String> getEntrustCodeList(List packList) {    Set<String> entrustCodeList = new HashSet<String>();    for (Iterator iterator = packList.iterator(); iterator.hasNext();) {      ZcEbPack it = (ZcEbPack) iterator.next();      entrustCodeList.add(it.getEntrustCode());    }    return new ArrayList<String>(entrustCodeList);  }  public List<String> getPackCodeList(List packList) {    Set<String> packCodeList = new HashSet<String>();    for (Iterator iterator = packList.iterator(); iterator.hasNext();) {      ZcEbPack it = (ZcEbPack) iterator.next();      packCodeList.add(it.getPackCode());    }    return new ArrayList<String>(packCodeList);  }  private List getZcEbPackReqDetailCodes(List zcEbPackReqList) {    List<String> keyIdsList = new ArrayList<String>();    for (Iterator iterator = zcEbPackReqList.iterator(); iterator.hasNext();) {      ZcEbPackReq pr = (ZcEbPackReq) iterator.next();      keyIdsList.add(pr.getDetailCode().toString());    }    return keyIdsList;  }}
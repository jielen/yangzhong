package com.ufgov.zc.client.zc.intranetandbidnet;import java.awt.Color;import java.awt.Dimension;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseMotionAdapter;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.io.File;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import javax.swing.JButton;import javax.swing.JDialog;import javax.swing.JFileChooser;import javax.swing.JOptionPane;import javax.swing.JScrollPane;import javax.swing.JTextArea;import javax.swing.JTextField;import javax.swing.filechooser.FileFilter;import org.apache.tools.zip.ZipFile;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.zc.dataexchange.model.CommonDataExchangeOperator;import com.ufgov.zc.client.component.zc.dataexchange.model.Configuration;import com.ufgov.zc.client.zc.project.integration.zbbook.TemplateCopyPanel;import com.ufgov.zc.client.zc.ztb.ZipDirFile;import com.ufgov.zc.client.zc.ztb.component.ProgressGlassPane;import com.ufgov.zc.client.zc.ztb.fileResumeBroken.download.ResumeBrokenDownloads;import com.ufgov.zc.client.zc.ztb.fileResumeBroken.upload.ResumeBrokenUploads;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.model.AsFile;public abstract class IntrantAndBidnetAbstractDialog extends JDialog {  /**   *    */  private static final long serialVersionUID = 2648266172887068096L;  protected static final String CONFIG_TEMP_FILE_DIR = "c:/ufgov/temp/";  protected static final String CONFIG_FILE_PATH = "c:/ufgov/config/dataexchange.properties";  protected static final String FLAG_FILE_NAME = "flagww";  protected static final String BID_NETWORD_DATA_FLAG = "BID";  protected static final String INTRANET_DATA_FLAG = "intranet";  protected static final String JCZW_ENTRUST_DATA_FLAG = "jczw_entrust";  protected static final String DLJG_AUDIT_SHEET_DATA_FLAG = "dljg_audit_sheet";  protected static final String FLAG_KEY = "key";  protected static final String FU_JIAN_DIR = "files";  public static final String WORK_FLOW_FILE_NAME = "zcWorkflowList";  protected static final String DATA_EXCHAGE_FILE_NAME = "zcDataExchangeList";  protected static final Map<String, String> TRANS_MAP = new HashMap<String, String>();  static {    TRANS_MAP.put("userList", "用户");    TRANS_MAP.put("asEmpList", "人员");    TRANS_MAP.put("userGroupList", "用户组");    TRANS_MAP.put("asEmpPositionList", "职员任职情况");    TRANS_MAP.put("zcEbOpenbidTeamList", "开标组成员");    TRANS_MAP.put("zcEbPackExpertList", "开标组对应的分包");    TRANS_MAP.put("zcEbProjectLivingChange", "采购方式现场变更");    TRANS_MAP.put("zcEbProjChg", "采购方式变更");    TRANS_MAP.put("zcEbEcbjPlan", "供应商二次报价计划");    TRANS_MAP.put("zcEbEcbjItem", "供应商二次报价");    TRANS_MAP.put("zcEbExpertOpinion", "专家评审意见");    TRANS_MAP.put("zcEbEvalResult", "专家评审表");    TRANS_MAP.put("zcEbEvalReport", "评审报告");    TRANS_MAP.put("zcEbPackEvalResult", "专家评审汇总");    TRANS_MAP.put("zcEbEvalParam", "评审参数设置");    TRANS_MAP.put("zcEbOpenbidTeamMember", "开标组成员");    TRANS_MAP.put("zcEbOpenbidteamPack", "开标组对应的分包");    TRANS_MAP.put("zcEbProj", "项目");    TRANS_MAP.put("zcEbPack", "项目分包");    TRANS_MAP.put("zcEbSignup", "报名");    TRANS_MAP.put("asFile", "附件登记");    TRANS_MAP.put("pack_req_list", "分包需求");    TRANS_MAP.put("pack_req_detail_list", "分包明细");    TRANS_MAP.put("plan_list", "计划");    TRANS_MAP.put("ZcEbProjZbFile", "招标文件");    TRANS_MAP.put("signupDataList", "供应商报名");    TRANS_MAP.put("signupPackList", "报名分包");    TRANS_MAP.put("entrustList", "采购任务单");    TRANS_MAP.put("zcEbEntrustList", "采购任务单明细");    TRANS_MAP.put("zcEbAuditSheet", "采购批判单");    TRANS_MAP.put("zcEbRequirement", "项目需求确认");    TRANS_MAP.put("zcEbRequirementDetail", "项目需求确认明细");    TRANS_MAP.put("zcPProMakeList", "采购计划");    TRANS_MAP.put("zcPProMitemBiList", "采购计划资金明细");    TRANS_MAP.put("zcPProMitemList", "采购计划需求");    TRANS_MAP.put("zcEbFormulaList", "指标集");    TRANS_MAP.put("zcEbFormulaItemList", "指标项");    TRANS_MAP.put("zcEbFormulaParamList", "指标参数");    TRANS_MAP.put("supplierList", "供应商信息");    TRANS_MAP.put("zcEbProtocol", "委托协议信息");    TRANS_MAP.put("zcEbBidConditionList", "供应商资质信息");    TRANS_MAP.put("zcEbXunJiaList", "询价信息");    TRANS_MAP.put("bulletinList", "公告信息");    TRANS_MAP.put("mitemMerList", "采购计划电子竞价商品明细信息");    TRANS_MAP.put("bidBulletinList", "招标公告信息");    TRANS_MAP.put("winBulletinList", "中标公告信息");    TRANS_MAP.put("zcEbEntrustCancelList", "任务取消");  }  protected Configuration config = new Configuration(CONFIG_FILE_PATH);  protected static StringBuffer progressText = new StringBuffer();  protected JTextArea textArea = new JTextArea();  protected boolean isJobRunning;  protected Thread refreshThread = null;  private transient IBaseDataServiceDelegate baseDataServiceDelegate = null;  protected void saveAsXml(Object inst, String path, String fileName) {    CommonDataExchangeOperator.saveObjectToXmlFile(inst, path + File.separator + fileName + ".xml");  }  protected final IntrantAndBidnetAbstractDialog self = this;  public static String getTransName(String key) {    String v = TRANS_MAP.get(key);    if (v != null) {      return v;    }    return "";  }  public void showDialog(String title, int width, int height) {    this.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);    this.setTitle(title);    this.setSize(width, height);    this.setLocationRelativeTo(null);//自动居中显示    this.setModal(true);    this.setResizable(false);    this.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent arg0) {        if (isJobRunning) {          int select = JOptionPane.showConfirmDialog(self, "任务正在运行，是否退出？");          if (select != 0) {            return;          }        }        isJobRunning = false;        self.setVisible(false);      }    });    //界面有关参数设置必须在setVisible之前，否则不起作用;    self.setVisible(true);  }  protected JButton makeBrowerButton(final JTextField textField, final boolean isSave) {    JButton button = new JButton("浏览");    button.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        if (isSave) {          textField.setText(showJFileSaveChooser());        } else {          textField.setText(showJFileOpenChooser());        }        self.toFront();      }    });    return button;  }  private String showJFileSaveChooser() {    JFileChooser chooser = new JFileChooser();    chooser.setDialogType(JFileChooser.SAVE_DIALOG);    chooser.setDialogTitle("导出并存到");    String path = config.getValue("export_dir");    if (path == null || "".equals(path)) {      path = "c:/";    }    chooser.setCurrentDirectory(new File(path));    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);    int r = chooser.showSaveDialog(this);    if (r == JFileChooser.APPROVE_OPTION) {      return chooser.getSelectedFile().getPath();    }    return new File(".").getAbsolutePath();  }  protected JScrollPane makeTextAreaScrollPanel() {    textArea = null;    textArea = new JTextArea();    textArea.setLayout(null);    textArea.setEditable(false);    textArea.setLineWrap(true);    return new JScrollPane(textArea);  }  public String saveHistoryDir(String dirValue, String key) {    String parent = dirValue;    if (!dirValue.endsWith(".tdes")) {      dirValue = dirValue + File.separator + CommonDataExchangeOperator.getDateFromToday(0, "yyyyMMdd");    }    File file = new File(dirValue);    if (file.exists()) {      if (file.isDirectory()) {        if (file.listFiles().length > 0) {          parent = dirValue;          dirValue = dirValue + File.separator + CommonDataExchangeOperator.getDateFromToday(0, "yyyyMMdd");        } else {          if (dirValue.endsWith(":/") || dirValue.endsWith(":\\")) {            parent = dirValue.substring(0, dirValue.indexOf(":") + 2);            dirValue = dirValue + File.separator + CommonDataExchangeOperator.getDateFromToday(0, "yyyyMMdd");          } else {            parent = file.getParentFile().getAbsolutePath();          }        }      } else {        parent = file.getParentFile().getAbsolutePath();      }    } else {      parent = file.getParentFile().getAbsolutePath();    }    config.setValue(key, parent);    config.saveFile(CONFIG_FILE_PATH, "config for data_exchange");    dirValue = (new File(dirValue)).getAbsolutePath();    return dirValue;  }  protected void publishProgressText() {    textArea.setText(self.progressText.toString());  }  protected void makeProgressGlassPane(final String filePath, final String projectCode, final boolean isExp) {    final ProgressGlassPane glassPane = new ProgressGlassPane() {      private static final long serialVersionUID = 1L;      public int getProgressBarValue() {        while (getTimer().isRunning()) {          return (int) (Math.random() * 100);        }        return 100;      }      public String getProgressBarString() {        publishProgressText();        isJobRunning = true;        return "...";      }    };    self.getRootPane().setGlassPane(glassPane);    glassPane.addMouseListener(new MouseAdapter() {    });    glassPane.addMouseMotionListener(new MouseMotionAdapter() {    });    glassPane.getProgressBar().setPreferredSize(new Dimension(200, 20));    glassPane.getProgressBar().setBackground(Color.RED);    glassPane.setVisible(true);    refreshThread = new Thread(new Runnable() {      public void run() {        self.progressText = new StringBuffer();        if (isExp) {          self.expExecute(filePath, projectCode, glassPane);        } else {          impExecute(filePath, glassPane);        }      }    });    refreshThread.start();  }  private String showJFileOpenChooser() {    JFileChooser chooser = new JFileChooser();    chooser.setDialogTitle("从文件导入数据");    chooser.setDialogType(JFileChooser.OPEN_DIALOG);    String path = config.getValue("import_dir");    if (path == null || "".equals(path)) {      path = "c:\\";    }    chooser.setCurrentDirectory(new File(path));    chooser.setFileFilter(new FileFilter() {      public boolean accept(File f) {        return f.getName().toLowerCase().endsWith(".zip") || f.isDirectory();      }      public String getDescription() {        return "";      }    });    int r = chooser.showOpenDialog(this);    if (r == JFileChooser.APPROVE_OPTION) {      return chooser.getSelectedFile().getPath();    }    return new File(".").getAbsolutePath();  }  protected void saveAsZip(String path) throws Exception {    String fileName = path.substring(path.lastIndexOf(File.separator) + 1) + ".zip";    File targetFile = new File(path.substring(0, path.lastIndexOf(File.separator)) + File.separator + fileName);    if (!targetFile.exists()) {      targetFile.createNewFile();    }    ZipDirFile.zip(path, targetFile.getAbsolutePath(), null);  }  protected String unZip2Path(String filePath) throws Exception {    File zfile = new File(filePath);    String name = zfile.getName();    String tPath = CONFIG_TEMP_FILE_DIR + name.substring(0, name.lastIndexOf("."));    File tempDir = new File(tPath);    if (tempDir.exists()) {      PubFunction.deleteFile(tempDir);    }    PubFunction.checkAndMakeDirs(tPath);    ZipFile zipFile = new ZipFile(zfile, ZcSettingConstants.UTF8);    TemplateCopyPanel.unzipFileToDestDir(zipFile, tPath);    return tPath;  }  protected void expExecute(String filePath, String projectCode, ProgressGlassPane glassPane) {  }  protected void impExecute(String path, ProgressGlassPane glassPane) {  }  protected void setFlagFile(String path, String fileType) {    HashMap<String, String> tf = new HashMap<String, String>();    tf.put(FLAG_KEY, fileType);    saveAsXml(tf, path, FLAG_FILE_NAME);  }  protected String downFile(List<AsFile> asFile, String path, RequestMeta meta, String projCode) {    if (asFile == null)      return null;    String ip = WorkEnv.getInstance().getWebRoot();    File f = new File(path);    String targetPath = f.getParent() + File.separator + FU_JIAN_DIR + File.separator;    for (Iterator iterator = asFile.iterator(); iterator.hasNext();) {      AsFile asFile2 = (AsFile) iterator.next();      if (asFile2 != null && asFile2.getFilePath() != null) {        //        System.out.println("WorkEnv.getInstance().getWebIp():" + ip);        //        System.out.println("asFile2.getFileId():" + asFile2.getFileId());        //        System.out.println("path:" + path);        //        System.out.println("targetPath:" + targetPath);        ResumeBrokenDownloads resumeBrokenDownloads = new ResumeBrokenDownloads(asFile2.getFileId(), projCode, targetPath, ip);        Map returnMap = resumeBrokenDownloads.downloadFile();        if (null != returnMap.get("ERRORMESSAGE") && !"".equals(returnMap.get("ERRORMESSAGE"))) {          throw new RuntimeException(returnMap.get("ERRORMESSAGE").toString());        }      }    }    return targetPath;  }  protected void uploadFile(File ztbf) {    String ip = WorkEnv.getInstance().getWebRoot() + "/ZC/";    //    System.out.println("ztbf.getName():" + ztbf.getName());    //    System.out.println("ip:" + ip);    //    System.out.println("ztbf.getParent():" + ztbf.getParent());    ResumeBrokenUploads resumeBrokenUploads = new ResumeBrokenUploads(ztbf.getName(), ip, ztbf.getParent(), "fileUploads");    resumeBrokenUploads.uploadFile();  }  protected IBaseDataServiceDelegate getBaseDataServiceDelegate() {    if (this.baseDataServiceDelegate == null) {      baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class, "baseDataServiceDelegate");    }    return this.baseDataServiceDelegate;  }}
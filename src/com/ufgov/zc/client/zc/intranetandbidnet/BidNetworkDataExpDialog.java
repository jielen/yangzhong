package com.ufgov.zc.client.zc.intranetandbidnet;import java.awt.BorderLayout;import java.awt.Container;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.File;import java.util.ArrayList;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextField;import javax.swing.SwingUtilities;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.zc.ZcEbProCompletionHandler;import com.ufgov.zc.client.component.zc.dataexchange.model.CommonDataExchangeOperator;import com.ufgov.zc.client.component.zc.fieldeditor.EntrustFieldEditor;import com.ufgov.zc.client.zc.ztb.component.ProgressGlassPane;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.common.console.model.AsEmp;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcEbOpenBidTeam;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbSignup;import com.ufgov.zc.common.zc.model.ZcEbSignupPackDetail;import com.ufgov.zc.common.zc.publish.IBidNetworkDataExpDelegate;public class BidNetworkDataExpDialog extends IntrantAndBidnetAbstractDialog {  /**   *    */  private static final long serialVersionUID = -975365478759735730L;  private BidNetworkDataExpDialog self = this;  private IBidNetworkDataExpDelegate bidNetworkDataExpDelegate = (IBidNetworkDataExpDelegate) ServiceFactory.create(IBidNetworkDataExpDelegate.class,  "bidNetworkDataExpDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String projectCode = null;  private EntrustFieldEditor entrustFieldEditor;  private JButton jButtonExec;  public BidNetworkDataExpDialog() {    Container container = self.getContentPane();    container.setLayout(new BorderLayout(6, 6));    container.removeAll();    ZcEbProCompletionHandler handler = new ZcEbProCompletionHandler("ZcEbProj.getZcEbProj") {      public void excute(List selectedDatas) {        if (selectedDatas == null && selectedDatas.size() == 0) {          JOptionPane.showMessageDialog(self, "请选择一个项目进行导出！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        if (selectedDatas.size() > 1) {          JOptionPane.showMessageDialog(self, "请只选择一个项目进行导出！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        ZcEbProj zepa = (ZcEbProj) selectedDatas.get(0);        projectCode = zepa.getProjCode();        entrustFieldEditor.getField().setValue(projectCode + "---" + zepa.getProjName());      }    };    JPanel panel3 = new JPanel(new BorderLayout(1, 2));    panel3.add(new JLabel("选择项目:"), BorderLayout.WEST);    ElementConditionDto entrustDto = new ElementConditionDto();    entrustDto.setStatus("exec");    entrustFieldEditor = new EntrustFieldEditor(handler.getSqlId(), entrustDto, 20, handler, handler.getColumNames(),    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_EB_ZC_MAKE_CODE), "proCode");    panel3.add(entrustFieldEditor, BorderLayout.CENTER);    container.add(panel3, BorderLayout.NORTH);    JPanel middle = new JPanel(new BorderLayout());    JPanel inner = new JPanel(new BorderLayout(4, 4));    JPanel panel2 = new JPanel(new BorderLayout(4, 4));    panel2.add(new JLabel("导出位置:"), BorderLayout.WEST);    final JTextField savePathTF = new JTextField();    savePathTF.setName("pathTextField");    panel2.add(savePathTF, BorderLayout.CENTER);    JButton jButton = makeBrowerButton(savePathTF, true);    panel2.add(jButton, BorderLayout.EAST);    inner.add(panel2, BorderLayout.NORTH);    middle.add(inner, BorderLayout.CENTER);    JScrollPane scrollPane = this.makeTextAreaScrollPanel();    inner.add(scrollPane, BorderLayout.CENTER);    container.add(middle, BorderLayout.CENTER);    JPanel panel4 = new JPanel();    jButtonExec = new JButton("执行导出");    jButtonExec.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        if (savePathTF.getText() == null || "".equals(savePathTF.getText())) {          JOptionPane.showMessageDialog(self, "请指定导出文件的存放位置...", "提示", JOptionPane.OK_OPTION);          return;        }        if (!CommonDataExchangeOperator.checkFilePath(savePathTF.getText())) {          JOptionPane.showMessageDialog(self, "路径中存在非法字符，请检查...", "提示", JOptionPane.OK_OPTION);          return;        }        self.progressText.setLength(0);        //savePathTF.setText(self.saveHistoryDir(savePathTF.getText(), "export_dir"));        if (entrustFieldEditor.getField().getValue() == null || "".equals(entrustFieldEditor.getField().getValue())) {          JOptionPane.showMessageDialog(self, "请选择需要导出的项目...");          return;        }        savePathTF.setText(savePathTF.getText().trim() + File.separator + entrustFieldEditor.getField().getValue().toString().trim());        makeProgressGlassPane(savePathTF.getText().trim(), projectCode, true);      }    });    panel4.add(jButtonExec);    container.add(panel4, BorderLayout.SOUTH);  }  public void expExecute(String path, String projCode, ProgressGlassPane glassPane) {    try {      glassPane.getTimer().start();      isJobRunning = true;      jButtonExec.setEnabled(false);      setFlagFile(path, BID_NETWORD_DATA_FLAG);      progressText.append("开始导出  用户 表\n");      List expertIdCardList = bidNetworkDataExpDelegate.getExpertIdCard(projCode, requestMeta);      List userList = bidNetworkDataExpDelegate.getAsUser(expertIdCardList, requestMeta);      saveAsXml(userList, path, "userList");      progressText.append("用户 表导出完毕\n");      progressText.append("开始导出 人员\n");      List asEmpList = bidNetworkDataExpDelegate.getAsEmp(expertIdCardList, requestMeta);      saveAsXml(asEmpList, path, "asEmpList");      progressText.append("人员 表导出完毕\n");      progressText.append("开始导出 用户组\n");      List userGroupList = bidNetworkDataExpDelegate.getAsUserGroup(expertIdCardList, requestMeta);      saveAsXml(userGroupList, path, "userGroupList");      progressText.append("用户组 表导出完毕\n");      progressText.append("开始导出 职员任职情况\n");      List<String> empCodeList = getEmpCodeList(asEmpList);      List asEmpPositionList = bidNetworkDataExpDelegate.getAsEmpPosition(empCodeList, requestMeta);      saveAsXml(asEmpPositionList, path, "asEmpPositionList");      progressText.append("职员任职情况 表导出完毕\n");      progressText.append("开始导出 开标组成员\n");      List zcEbOpenbidTeamList = bidNetworkDataExpDelegate.getZcEbOpenbidTeam(projCode, requestMeta);      saveAsXml(zcEbOpenbidTeamList, path, "zcEbOpenbidTeamList");      progressText.append("开标组成员 表导出完毕\n");      progressText.append("开始导出 开标组对应的分包\n");      List zcEbPackExpertList = bidNetworkDataExpDelegate.getZcEbPackExpert(projCode, requestMeta);      saveAsXml(zcEbPackExpertList, path, "zcEbPackExpertList");      progressText.append("开标组对应的分包 表导出完毕\n");      progressText.append("开始导出 采购方式现场变更\n");      List zcEbProjectLivingChange = bidNetworkDataExpDelegate.getZcEbProjectLivingChange(projCode, requestMeta);      saveAsXml(zcEbProjectLivingChange, path, "zcEbProjectLivingChange");      progressText.append("采购方式现场变更 表导出完毕\n");      progressText.append("开始导出 采购方式变更表\n");      List zcEbProjChg = bidNetworkDataExpDelegate.getZcEbProjChg(projCode, requestMeta);      saveAsXml(zcEbProjChg, path, "zcEbProjChg");      progressText.append("采购方式变更表导出完毕\n");      progressText.append("开始导出 供应商二次报价计划表\n");      List zcEbEcbjPlan = bidNetworkDataExpDelegate.getZcEbEcbjPlan(projCode, requestMeta);      saveAsXml(zcEbEcbjPlan, path, "zcEbEcbjPlan");      progressText.append("供应商二次报价计划 表导出完毕\n");      progressText.append("开始导出 供应商二次报价 表\n");      List zcEbEcbjItem = bidNetworkDataExpDelegate.getZcEbEcbjItem(projCode, requestMeta);      saveAsXml(zcEbEcbjItem, path, "zcEbEcbjItem");      progressText.append("供应商二次报价 表导出完毕\n");      progressText.append("开始导出 专家评审意见 表\n");      List zcEbExpertOpinion = bidNetworkDataExpDelegate.getZcEbExpertOpinion(projCode, requestMeta);      saveAsXml(zcEbExpertOpinion, path, "zcEbExpertOpinion");      progressText.append("专家评审意见 表导出完毕\n");      progressText.append("开始导出 专家评审表  表\n");      List zcEbEvalResult = bidNetworkDataExpDelegate.getZcEbEvalResult(projCode, requestMeta);      saveAsXml(zcEbEvalResult, path, "zcEbEvalResult");      progressText.append("专家评审表 表导出完毕\n");      progressText.append("开始导出 评审报告 表\n");      List zcEbEvalReport = bidNetworkDataExpDelegate.getZcEbEvalReport(projCode, requestMeta);      saveAsXml(zcEbEvalReport, path, "zcEbEvalReport");      progressText.append("评审报告 表导出完毕\n");      progressText.append("开始导出 专家评审汇总 表\n");      List zcEbPackEvalResult = bidNetworkDataExpDelegate.getZcEbPackEvalResult(projCode, requestMeta);      saveAsXml(zcEbPackEvalResult, path, "zcEbPackEvalResult");      progressText.append("专家评审汇总 表导出完毕\n");      progressText.append("开始导出 评审参数设置\n");      List zcEbEvalParam = bidNetworkDataExpDelegate.getZcEbEvalParam(projCode, requestMeta);      saveAsXml(zcEbEvalParam, path, "zcEbEvalParam");      progressText.append("评审参数设置 表导出完毕\n");      progressText.append("开始导出 开标组成员\n");      List<String> teamCodes = getTeamCodes(zcEbOpenbidTeamList);      List zcEbOpenbidTeamMember = bidNetworkDataExpDelegate.getZcEbOpenbidTeamMember(teamCodes, requestMeta);      saveAsXml(zcEbOpenbidTeamMember, path, "zcEbOpenbidTeamMember");      progressText.append("开标组成员 表导出完毕\n");      progressText.append("开始导出 开标组对应的分包\n");      List zcEbOpenbidteamPack = bidNetworkDataExpDelegate.getZcEbOpenbidteamPack(projCode, requestMeta);      saveAsXml(zcEbOpenbidteamPack, path, "zcEbOpenbidteamPack");      progressText.append("开标组对应的分包 表导出完毕\n");      progressText.append("开始导出 项目表\n");      List zcEbProj = bidNetworkDataExpDelegate.getZcEbProj(projectCode, requestMeta);      saveAsXml(zcEbProj, path, "zcEbProj");      progressText.append("项目 表导出完毕\n");      progressText.append("开始导出 项目分包 表\n");      List zcEbPack = bidNetworkDataExpDelegate.getZcEbPack(projCode, requestMeta);      saveAsXml(zcEbPack, path, "zcEbPack");      progressText.append("项目分包 表导出完毕\n");      progressText.append("开始导出 报名 表\n");      List zcEbSignup = bidNetworkDataExpDelegate.getZcEbSignup(projCode, requestMeta);      saveAsXml(zcEbSignup, path, "zcEbSignup");      progressText.append("报名 表导出完毕\n");      progressText.append("开始导出 报名分包\n");      List signupId = getSignupIdListList(zcEbSignup);      List zcEbSignupPack = bidNetworkDataExpDelegate.getZcEbSignupPack(signupId, requestMeta);      saveAsXml(zcEbSignupPack, path, "zcEbSignupPack");      progressText.append("报名分包 表导出完毕\n");      progressText.append("开始导出 附件登记\n");      List asFileId = getAsFileId(zcEbSignupPack);      List asFile = bidNetworkDataExpDelegate.getAsFile(asFileId, requestMeta);      saveAsXml(asFile, path, "asFile");      progressText.append("附件登记 表导出完毕\n");      progressText.append("对导出文件进行打包，加密！\n");      saveAsZip(path);      PubFunction.deleteFile(path, false);      progressText.append("对导出文件进行打包，加密完毕！\n");      progressText.append("开始下载附件\n");      String fujianFileDir = downFile(asFile, path, requestMeta, projectCode);      updateFilesName(fujianFileDir, projCode);      progressText.append("附件下载完毕\n");      progressText.append("所有数据导出完毕\n");      publishProgressText();      glassPane.getTimer().stop();      glassPane.getProgressBar().setValue(100);      glassPane.getProgressInfo().setHorizontalAlignment(SwingUtilities.CENTER);      glassPane.setVisible(false);      isJobRunning = false;      jButtonExec.setEnabled(true);    } catch (Exception e) {      e.printStackTrace();      progressText.append(e.getMessage() + "\n导出终止！");      publishProgressText();      glassPane.getTimer().stop();      glassPane.setVisible(false);      isJobRunning = false;      jButtonExec.setEnabled(true);    }  }  private void updateFilesName(String fujianFileDir, String projectCode) {    // TCJLODO Auto-generated method stub    if (fujianFileDir == null || projectCode == null)      return;    File dir = new File(fujianFileDir);    if (!dir.exists()) {      return;    }    File[] files = dir.listFiles();    for (int i = 0; i < files.length; i++) {      String fileName = files[i].getName();      String dest = files[i].getName();      if (fileName.startsWith(projectCode)) {        dest = fileName.substring(projectCode.length() + 1);      }      if (dest.endsWith(".ztb")) {        dest = dest.substring(0, dest.length() - ".ztb".length());      }      dest = files[i].getParent() + File.separator + dest;      files[i].renameTo(new File(dest));    }  }  private List getAsFileId(List zcEbSignupPack) {    // TCJLODO Auto-generated method stub    Set<String> asFileList = new HashSet<String>();    for (Iterator iterator = zcEbSignupPack.iterator(); iterator.hasNext();) {      ZcEbSignupPackDetail sp = (ZcEbSignupPackDetail) iterator.next();      asFileList.add(sp.getTbylbFileId());      asFileList.add(sp.getBidDocId());    }    return new ArrayList<String>(asFileList);  }  private List<String> getTeamCodes(List zcEbOpenbidTeamList) {    Set<String> teamCodeList = new HashSet<String>();    for (Iterator iterator = zcEbOpenbidTeamList.iterator(); iterator.hasNext();) {      ZcEbOpenBidTeam it = (ZcEbOpenBidTeam) iterator.next();      teamCodeList.add(it.getTeamCode());    }    return new ArrayList<String>(teamCodeList);  }  private List<String> getEmpCodeList(List asEmpList) {    Set<String> asEmpCodeList = new HashSet<String>();    for (Iterator iterator = asEmpList.iterator(); iterator.hasNext();) {      AsEmp it = (AsEmp) iterator.next();      if (it == null) {        continue;      }      asEmpCodeList.add(it.getEmpCode());    }    return new ArrayList<String>(asEmpCodeList);  }  private List<String> getSignupIdListList(List signupDataList) {    Set<String> signupIdList = new HashSet<String>();    for (Iterator iterator = signupDataList.iterator(); iterator.hasNext();) {      ZcEbSignup it = (ZcEbSignup) iterator.next();      signupIdList.add(it.getSignupId());    }    return new ArrayList<String>(signupIdList);  }  public static void main(String[] args) {    BidNetworkDataExpDialog d = new BidNetworkDataExpDialog();    d.updateFilesName("D:\\data_UFIDA_COMPO\\files", "111");  }}
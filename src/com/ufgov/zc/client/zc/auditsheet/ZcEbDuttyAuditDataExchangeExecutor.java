package com.ufgov.zc.client.zc.auditsheet;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.component.zc.dataexchange.DataExchangeListPanel;import com.ufgov.zc.client.component.zc.dataexchange.model.ABaseData;import com.ufgov.zc.client.component.zc.dataexchange.model.AttachmentFile;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.DataExchangeLog;import com.ufgov.zc.common.zc.model.ZcEbAuditSheet;import com.ufgov.zc.common.zc.publish.IZcEbAuditSheetServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbBulletinServiceDelegate;/** * 任务单 导入，导出 */public class ZcEbDuttyAuditDataExchangeExecutor extends ABaseData {  private static final long serialVersionUID = 5812901857474963087L;  private transient IZcEbAuditSheetServiceDelegate auditServiceDelegate;  @Override  public int doExportData(ElementConditionDto dto, RequestMeta meta,  String saveRootPath) {    auditServiceDelegate = getAuditServiceDelegate();    DataExchangeListPanel.setProgressText(this.getDataTypeName()    + "正在查询需要导出的记录...");    if (this.getNeedExportDataRedoList() != null    && this.getNeedExportDataRedoList().size() > 0) {      dto.setPmAdjustCodeList(this.getNeedExportDataList());      this.setDataList(auditServiceDelegate.findTransData(dto, meta));    } else {      this.setDataList(new ArrayList<ZcEbAuditSheet>());    }    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "查询到【"    + this.getDataList().size() + "】条记录...");    int currRecordSeq = 1;    List<DataExchangeLog> exportDataList = new ArrayList<DataExchangeLog>();    for (Iterator iterator = this.getDataList().iterator(); iterator    .hasNext();) {      ZcEbAuditSheet zeas = (ZcEbAuditSheet) iterator.next();      DataExchangeLog log = makeDataExchangeLog(meta.getSvUserID(),      "导出成功", "", null, "OUT", zeas);      exportDataList.add(log);      successRecordMap.put(zeas.getSheetId(), this      .getDataExchangeRedo(zeas.getSheetId()));      DataExchangeListPanel.setProgressText(this.getDataTypeName() + "第【"      + currRecordSeq + "】条记录相关数据和文件抓取完成...");      currRecordSeq++;    }    this.getExchangeDataLogModel().setExportDataList(exportDataList);    DataExchangeListPanel.setProgressText(this.getDataTypeName()    + "主要的数据抓取和导出过程完毕...");    return this.getDataList().size();  }  private IZcEbAuditSheetServiceDelegate getAuditServiceDelegate() {    if (this.auditServiceDelegate == null) {      auditServiceDelegate = (IZcEbAuditSheetServiceDelegate) ServiceFactory      .create(IZcEbBulletinServiceDelegate.class,      "zcEbAuditSheetServiceDelegate");    }    return this.auditServiceDelegate;  }  @Override  public int doImportData(ElementConditionDto dto, RequestMeta meta,  String readRootPath) {    DataExchangeListPanel.setProgressText(this.getDataTypeName()    + "开始进行数据导入...");    Map<String, Boolean> filesSent = new HashMap<String, Boolean>();    // 先进行文件发送和保存，只有保存成功后，才能够往下走    toSendFiles(readRootPath, filesSent, meta);    auditServiceDelegate = getAuditServiceDelegate();    int succCount = 0;    String submitRes = null;    ZcEbAuditSheet zeas = null;    List<DataExchangeLog> logList = new ArrayList<DataExchangeLog>();    try {      for (Iterator iterator = this.dataList.iterator(); iterator      .hasNext();) {        zeas = (ZcEbAuditSheet) iterator.next();        zeas.setExecuteDate(null);// 此处 待改        auditServiceDelegate.insertFN(zeas, meta);        // 写日志        DataExchangeLog log = new DataExchangeLog();        log.setDataTypeID(this.getDataTypeID());        log.setDataTypeName(this.getDataTypeName());        log.setGentType("IN");        // log.setDetailInfo(submitRes);        // log.setExceptText(e.getMessage());        log.setOptDateTime(new Date());        log.setRecSrcID(zeas.getSheetId());        log.setRecSrcName(zeas.getAuditorName());        log.setRecSrcTab(this.getMainTableName());        log.setRecStatus("导入成功");        log.setUserID(meta.getSvUserID());        logList.add(log);        succCount++;      }    } catch (RuntimeException e) {      e.printStackTrace();      // 写日志      DataExchangeLog log = new DataExchangeLog();      log.setDataTypeID(this.getDataTypeID());      log.setDataTypeName(this.getDataTypeName());      log.setGentType("IN");      // log.setDetailInfo("");      log.setExceptText(e.getMessage());      log.setOptDateTime(new Date());      log.setRecSrcID(zeas.getSheetId());      log.setRecSrcName(zeas.getAuditorName());      log.setRecSrcTab(this.getMainTableName());      log.setRecStatus("导入失败");      log.setUserID(meta.getSvUserID());      logList.add(log);    } finally {      this.getExchangeDataLogModel().setImportDataList(logList);    }    return succCount;  }  private void toSendFiles(String readRootPath,  Map<String, Boolean> filesSent, RequestMeta meta) {    // Iterator<String> it = this.attachmentDataMap.keySet().iterator();    // while (it.hasNext()) {    // Map<String, AttachmentFile> curr =    // this.attachmentDataMap.get(it.next());    // Iterator<String> tempIt = curr.keySet().iterator();    // Boolean submitRes = true;    // String bulletinID = null;    // while (tempIt.hasNext()) {    // AttachmentFile attFile = curr.get(tempIt.next());    // bulletinID = attFile.getBelongToIdentify();    // submitRes = submitRes && doSendFiles(attFile, rootPath, meta);    // }    // filesSent.put(bulletinID, submitRes);    // }  }  private DataExchangeLog makeDataExchangeLog(String userID, String succFail,  String exceptionMsg, String detail, String type, ZcEbAuditSheet bid) {    DataExchangeLog log = new DataExchangeLog();    log.setDataTypeID(this.getDataTypeID());    log.setDataTypeName(this.getDataTypeName());    log.setUserID(userID);    log.setRecStatus(succFail);    log.setDetailInfo(detail);    log.setExceptText(exceptionMsg);    log.setGentType(type);    log.setOptDateTime(new Date());    log.setRecSrcID(bid.getSheetId());    log.setRecSrcName(bid.getAuditorName());    log.setRecSrcTab(this.getMainTableName());    return log;  }  @Override  public Map<String, Map<String, AttachmentFile>> getAttachmentDataMap() {    return this.attachmentDataMap;  }}
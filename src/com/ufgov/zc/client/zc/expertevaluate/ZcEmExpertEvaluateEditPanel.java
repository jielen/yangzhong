package com.ufgov.zc.client.zc.expertevaluate;import java.awt.Color;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.table.JGroupableTableHeader;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.ZcEmExpertEvaluateToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityDialog;import com.ufgov.zc.client.component.zc.fieldeditor.FractionDigitsFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.EmExpertSelectionBill;import com.ufgov.zc.common.zc.model.EmExpertType;import com.ufgov.zc.common.zc.publish.IZcEmExpertEvaluateServiceDelegate;public class ZcEmExpertEvaluateEditPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = -8330517047010771537L;  private static final Logger logger = Logger.getLogger(ZcEmExpertEvaluateEditPanel.class);  protected IZcEmExpertEvaluateServiceDelegate zcEmExpertEvaluateServiceDelegate;  protected RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EM_EXPERT_EVALUATE";  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  @SuppressWarnings("unchecked")  private final ListCursor listCursor;  private EmExpertSelectionBill currentBill;  private EmExpertSelectionBill oldBill;  private ZcEmExpertEvaluateListPanel listPanel;  private ZcEmExpertEvaluateEditPanel self = this;  private GkBaseDialog parent;  private JTablePanel expertListJTabelPanel = new JTablePanel("expertListJTabelPanel");  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId);  @SuppressWarnings("unchecked")  public ZcEmExpertEvaluateEditPanel(ZcEmExpertEvaluateDialog dialog, ListCursor listCursor,  String tabStatus, ZcEmExpertEvaluateListPanel listPanel) {    super(new EmExpertType(), listPanel.compoId);    this.compoId = listPanel.compoId;    this.listCursor = listCursor;    this.listPanel = listPanel;    this.zcEmExpertEvaluateServiceDelegate = listPanel.getZcEmExpertEvaluateServiceDelegate();    this.parent = dialog;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),    this.listPanel.getTitle(), TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15),    Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();  }  @SuppressWarnings("unchecked")  public ZcEmExpertEvaluateEditPanel(ZcEmExpertEvaluateDialog dialog, ListCursor listCursor,  String tabStatus, ZcEmExpertEvaluateListPanel listPanel, ForeignEntityDialog forenEntityDialog) {    this(dialog, listCursor, tabStatus, listPanel);  }  @SuppressWarnings("unchecked")  private void refreshData() {    this.currentBill = (EmExpertSelectionBill) this.listCursor.getCurrentObject();    Map<String, String> m = new HashMap<String, String>();    m.put("EM_BILL_CODE", currentBill.getBillCode());    List expertEval = zcEmExpertEvaluateServiceDelegate.getExpertEvaluationList(m, requestMeta);    currentBill.setExpertEvaluationList(expertEval);    currentBill.setDbDigest(DigestUtil.digest(currentBill));    this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    setEditingObject(currentBill);    setButtonStatus();    refreshSubTableData(currentBill);    setSubTableCellEditor();    translateSubTableColumn();    updateFieldEditorsEditable();    setOldObject();  }  @SuppressWarnings("unchecked")  private void refreshSubTableData(EmExpertSelectionBill bill) {    expertListJTabelPanel.setTableModel(ZcEmExpertEvaluateToTableModelConverter    .convertEmExpertEvaluationToTableMode(bill.getExpertEvaluationList()));  }  private void setButtonStatus() {    if (ZcSettingConstants.PAGE_STATUS_BROWSE.equals(pageStatus)) {      editButton.setEnabled(true);      saveButton.setEnabled(false);      deleteButton.setEnabled(true);      exitButton.setEnabled(true);      helpButton.setEnabled(true);      previousButton.setEnabled(true);      nextButton.setEnabled(true);    } else if (ZcSettingConstants.PAGE_STATUS_EDIT.equals(pageStatus)) {      editButton.setEnabled(false);      saveButton.setEnabled(true);      deleteButton.setEnabled(false);      exitButton.setEnabled(true);      helpButton.setEnabled(true);      previousButton.setEnabled(false);      nextButton.setEnabled(false);    } else if (ZcSettingConstants.PAGE_STATUS_NEW.equals(pageStatus)) {      editButton.setEnabled(false);      saveButton.setEnabled(true);      deleteButton.setEnabled(false);      exitButton.setEnabled(true);      helpButton.setEnabled(true);      previousButton.setEnabled(false);      nextButton.setEnabled(false);    }  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)    || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      expertListJTabelPanel.getTable().setEnabled(true);    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      expertListJTabelPanel.getTable().setEnabled(false);    }  }  private void setOldObject() {    this.oldBill = (EmExpertSelectionBill) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    TextFieldEditor billCodeEditor = new TextFieldEditor("抽取登记编码", "billCode");    editorList.add(billCodeEditor);    TextFieldEditor proMakeCodeEditor = new TextFieldEditor("项目编码", "makeCode");    editorList.add(proMakeCodeEditor);    TextFieldEditor makeNameEditor = new TextFieldEditor("项目名称", "makeName");    editorList.add(makeNameEditor);    TextFieldEditor contactCompanyEditor = new TextFieldEditor("采购单位", "contactCompany");    editorList.add(contactCompanyEditor);    TextFieldEditor contactPersonEditor = new TextFieldEditor("联系人", "contactPerson");    editorList.add(contactPersonEditor);    TextFieldEditor telEditor = new TextFieldEditor("联系电话", "contactPhone");    editorList.add(telEditor);    AsValFieldEditor billTypeEditor = new AsValFieldEditor("抽取单类别", "expertBillType",    "EM_VS_EXPERT_BILL_TYPE");    editorList.add(billTypeEditor);    AsValFieldEditor cgfsEditor = new AsValFieldEditor("采购方式", "emFs", "ZC_VS_PITEM_OPIWAY");    editorList.add(cgfsEditor);    TextFieldEditor guarderCodeEditor = new TextFieldEditor("监抽人名称", "guarderCode");    editorList.add(guarderCodeEditor);    TextFieldEditor billPlaceEditor = new TextFieldEditor("评标地点", "billPlace");    editorList.add(billPlaceEditor);    DateFieldEditor tendersTimeEditor = new DateFieldEditor("开始时间", "tendersTime",    DateFieldEditor.TimeTypeH24);    editorList.add(tendersTimeEditor);    FractionDigitsFieldEditor estimateTimeEditor = new FractionDigitsFieldEditor(false, "预计工时(天)",    "estimateTime", 1);    editorList.add(estimateTimeEditor);    TextFieldEditor agencyNameEditor = new TextFieldEditor("代理机构", "zjdwName");    editorList.add(agencyNameEditor);    DateFieldEditor inputorDateEditor = new DateFieldEditor("录入日期", "inputorDate");    editorList.add(inputorDateEditor);    AsValFieldEditor statusEditor = new AsValFieldEditor("状态", "billStatus", "EM_VS_BILL_STATUS");    editorList.add(statusEditor);    return editorList;  }  private void translateSubTableColumn() {    ZcUtil.translateColName(expertListJTabelPanel.getTable(), ZcEmExpertEvaluateToTableModelConverter.expertEvalColumns);  }  private void setSubTableCellEditor() {    SwingUtil.setTableCellRenderer(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX1, new AsValCellRenderer("ZC_VS_ABILITY_GRADE"));    SwingUtil.setTableCellRenderer(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX2, new AsValCellRenderer("ZC_VS_ABILITY_GRADE"));    SwingUtil.setTableCellRenderer(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX3, new AsValCellRenderer("ZC_VS_ABILITY_GRADE"));    SwingUtil.setTableCellRenderer(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX4, new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX5, new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX6, new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX7, new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX8, new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX9, new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX10, new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX11, new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX12, new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellRenderer(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX13, new AsValCellRenderer("VS_Y/N"));    SwingUtil.setTableCellEditor(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX1, new AsValComboBoxCellEditor("ZC_VS_ABILITY_GRADE"));    SwingUtil.setTableCellEditor(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX2, new AsValComboBoxCellEditor("ZC_VS_ABILITY_GRADE"));    SwingUtil.setTableCellEditor(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX3, new AsValComboBoxCellEditor("ZC_VS_ABILITY_GRADE"));    SwingUtil.setTableCellEditor(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX4, new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX5, new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX6, new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX7, new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX8, new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX9, new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX10, new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX11, new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX12, new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellEditor(expertListJTabelPanel.getTable(),    ZcEmExpertEvaluateToTableModelConverter.EM_EXPERT_INDEX13, new AsValComboBoxCellEditor("VS_Y/N"));  }  public JComponent createSubBillPanel() {    JTabbedPane tabPane = new JTabbedPane();    expertListJTabelPanel.init();    JGroupableTableHeader header = expertListJTabelPanel.getTable().getTableHeader();    header.addColumnGroup("评审的公平性、公正性和准确性", new String[] { "EM_EXPERT_INDEX4", "EM_EXPERT_INDEX5",    "EM_EXPERT_INDEX6", "EM_EXPERT_INDEX7" });    header.addColumnGroup("工作纪律和工作态度", new String[] { "EM_EXPERT_INDEX8", "EM_EXPERT_INDEX9",    "EM_EXPERT_INDEX10", "EM_EXPERT_INDEX11", "EM_EXPERT_INDEX12", "EM_EXPERT_INDEX13" });    expertListJTabelPanel.getSearchBar().setVisible(false);    tabPane.addTab("专家列表", expertListJTabelPanel);    return tabPane;  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doSave();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  @SuppressWarnings("unchecked")  private void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {        return;        }      } else {        listCursor.setCurrentObject(this.oldBill);      }    }    listCursor.previous();    refreshData();    setButtonStatus();  }  @SuppressWarnings("unchecked")  private void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {        return;        }      } else {        listCursor.setCurrentObject(this.oldBill);      }    }    listCursor.next();    refreshData();    setButtonStatus();  }  public void doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {        return;        }      }    }    this.parent.dispose();  }  @SuppressWarnings("unchecked")  public boolean doSave() {    if (!checkBeforeSave()) {    return false;    }    boolean success = true;    String errorInfo = "";    try {      currentBill = zcEmExpertEvaluateServiceDelegate.saveFN(currentBill, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(currentBill);      this.listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      setButtonStatus();      setOldObject();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  private boolean checkBeforeSave() {    return true;  }  public void doHelp() {    setButtonStatus();  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldBill).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  public String getPageStatus() {    return pageStatus;  }  public void setPageStatus(String pageStatus) {    this.pageStatus = pageStatus;  }}
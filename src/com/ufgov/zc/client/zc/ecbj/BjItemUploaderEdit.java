/**   * @(#) project: ZFCG* @(#) file: BjItemUploaderEdit.java* * Copyright 2011 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.ecbj;import java.awt.Color;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.border.TitledBorder;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.DateField;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.SelectFileFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcEbEcbjItem;import com.ufgov.zc.common.zc.publish.IZcEbEcbjServiceDelegate;/*** @ClassName: BjItemUploaderEdit* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2011-2-19 下午03:04:10* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class BjItemUploaderEdit extends AbstractMainSubEditPanel {  private GkBaseDialog parent;  private ZcEbEcbjItem oldZcEbEcbjItem = new ZcEbEcbjItem();  private ZcEbEcbjItem zcEbEcbjItem;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private FuncButton saveButton = new SaveButton();  private FuncButton editButton = new EditButton();  private BjItemUploaderEdit self = this;  private ZcEbEcbjEditPanel zcEbEcbjEditPanel;  SelectFileFieldEditor upFile;  public IZcEbEcbjServiceDelegate zcEbEcbjServiceDelegate = (IZcEbEcbjServiceDelegate) ServiceFactory.create(IZcEbEcbjServiceDelegate.class,  "zcEbEcbjServiceDelegate");  public BjItemUploaderEdit(GkBaseDialog parent, ZcEbEcbjEditPanel zcEbEcbjEditPanel, ZcEbEcbjItem zcEbEcbjItem) {    this.zcEbEcbjItem = zcEbEcbjItem;    this.zcEbEcbjEditPanel = zcEbEcbjEditPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("再次报价"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 2;    init();    refreshData();    updateFieldEditorsEditable();  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    TextFieldEditor editor0 = new TextFieldEditor("报价次数", "bjNo");    editor0.setEnabled(false);    editorList.add(editor0);    DateFieldEditor editor1 = new DateFieldEditor("报价时间", "bjTime", DateField.TimeTypeH24);    editor1.setEnabled(false);    editorList.add(editor1);    TextFieldEditor editor2 = new TextFieldEditor("上传者", "upLoader");    editor2.setEnabled(false);    editorList.add(editor2);    AsValFieldEditor editor3 = new AsValFieldEditor("开标状态", "status", "ZC_VS_OPEN_BID_STATUS");    editor3.setEnabled(false);    editorList.add(editor3);    this.upFile = new SelectFileFieldEditor("投标文件", "fileName", "fileId", true, true, true, true);    this.upFile.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        ZcEbEcbjItem item = (ZcEbEcbjItem) getEditingObject();        if (upFile.getFileUploader().getFile() != null) {          item.setFileId(upFile.getFileUploader().getFile().getFileId());        }      }    });    //在开标之前报价文件不可见。    upFile.setEnabled(false);    editorList.add(upFile);    return editorList;  }  /**   *    */  @Override  public JComponent createSubBillPanel() {    return new JPanel();  }  private void refreshData() {    setEditingObject(zcEbEcbjItem);    setOldObject();  }  private void setOldObject() {    this.oldZcEbEcbjItem = (ZcEbEcbjItem) ObjectUtil.deepCopy(zcEbEcbjItem);  }  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();  }  public void initToolBar(JFuncToolBar toolBar) {    toolBar.add(editButton);    toolBar.add(saveButton);    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();        upFile.setEnabled(true);      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });  }  private void doEdit() {  }  private void doSave() {    //    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    ZcEbEcbjItem item = (ZcEbEcbjItem) getEditingObject();    if (!checkBeforeSave())      return;    boolean success = true;    String errorInfo = "";    try {      zcEbEcbjServiceDelegate.saveFN(item, requestMeta);    } catch (Exception e) {      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.oldZcEbEcbjItem = (ZcEbEcbjItem) ObjectUtil.deepCopy(item);      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      zcEbEcbjEditPanel.refreshData();    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return;    }  }  private boolean checkBeforeSave() {    return true;  }  public void doHelp() {  }  public boolean isDataChanged() {    ZcEbEcbjItem item = (ZcEbEcbjItem) getEditingObject();    return !DigestUtil.digest(oldZcEbEcbjItem).equals(DigestUtil.digest(item));  }}
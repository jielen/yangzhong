/** * ZcEbEcbjEditPanel.java * com.ufgov.gk.client.zc.openbid * Administrator * 2010-5-22 */package com.ufgov.zc.client.zc.ecbj;import java.awt.Color;import java.awt.Dialog;import java.awt.Dimension;import java.awt.Font;import java.awt.GridLayout;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.io.File;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.SwingUtilities;import javax.swing.border.TitledBorder;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbEcbjItemToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.EcBjButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.celleditor.DateCellEditor;import com.ufgov.zc.client.component.table.celleditor.MoneyCellEditor;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.cellrenderer.DateCellRenderer;import com.ufgov.zc.client.component.table.cellrenderer.NumberCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.activeztb.TbDocService;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcEbEcbj;import com.ufgov.zc.common.zc.model.ZcEbEcbjItem;import com.ufgov.zc.common.zc.model.ZcEbEcbjPlan;/** * @author Administrator * */public class ZcEbEcbjEditPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = -7096834819505641043L;  private static final Logger logger = Logger.getLogger(ZcEbEcbjEditPanel.class);  private IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class,  "baseDataServiceDelegate");  private TbDocService tb = new TbDocService();  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_ECBJ";  private FuncButton previousButton = new PreviousButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton ecbj = new EcBjButton();  private final ListCursor listCursor;  private String tabStatus;  private ZcEbEcbjListPanel listPanel;  JTabbedPane bjTabPane = null;  JTabbedPane bjTableTabPane = null;  private JPanel jpanel = new JPanel();  private JPanel nullPanel = new JPanel();  public JTablePanel biTablePanel = new JTablePanel();  private ZcEbEcbjEditPanel self = this;  private GkBaseDialog parent;  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private String ecbjFileDownLoadPath;  TextFieldEditor remarkEditor;  HashMap<String, JPanel> sumarryPanelCach = new HashMap<String, JPanel>();  public ZcEbEcbjEditPanel(ZcEbEcbjDialog parent, ListCursor listCursor, String tabStatus, ZcEbEcbjListPanel listPanel) {    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("报价管理"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 2;    init();    requestMeta.setCompoId(compoId);    refreshData();    updateFieldEditorsEditable();  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    TextFieldEditor editor0 = new TextFieldEditor("项目代码", "projCode");    editorList.add(editor0);    editor0 = new TextFieldEditor("项目名称", "projName");    editorList.add(editor0);    editor0 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE), "packCode");    editorList.add(editor0);    editor0 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME), "packName");    editorList.add(editor0);    editor0 = new TextFieldEditor("投标人", "providerName");    editorList.add(editor0);    DateFieldEditor editor11 = new DateFieldEditor("二次开标日期", "openBidDate");    editorList.add(editor11);    AsValFieldEditor editor8 = new AsValFieldEditor("开标状态", "openBidStatus", "ZC_VS_OPEN_BID_STATUS");    editorList.add(editor8);    return editorList;  }  /**   *    */  @Override  public JComponent createSubBillPanel() {    final ZcEbEcbj openBid = (ZcEbEcbj) listCursor.getCurrentObject();    bjTabPane = new JTabbedPane();    biTablePanel.init();    biTablePanel.getSearchBar().setVisible(false);    biTablePanel.setTablePreferencesKey(this.getClass().getName() + "_biTable");    biTablePanel.getTable().setShowCheckedColumn(true);    biTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    bjTabPane.addTab("报价信息", biTablePanel);    JPanel panel = new JPanel(new GridLayout(2, 1));    bjTableTabPane = new JTabbedPane();    bjTableTabPane.addTab("报价一览表", jpanel);    panel.add(bjTabPane);    panel.add(bjTableTabPane);    return panel;  }  public void refreshData() {    ZcEbEcbj bj = (ZcEbEcbj) listCursor.getCurrentObject();    this.setEditingObject(bj);    ElementConditionDto elementConditionDto = new ElementConditionDto();    elementConditionDto.setZcText0(bj.getSignupPackId());    List<ZcEbEcbjItem> list = listPanel.zcEbEcbjServiceDelegate.getZcEbEcbjItemList(elementConditionDto, requestMeta);    for (int i = 0; i < list.size(); i++) {      ZcEbEcbjItem item = (ZcEbEcbjItem) list.get(i);      item.setFileOldId(item.getFileId());    }    String projCode = bj.getProjCode();    String packCode = bj.getPackCode();    String providerCode = bj.getProviderCode();    ecbjFileDownLoadPath = projCode + File.separator + packCode + File.separator + tb.TB_DOC_TYPE_ECBJ + File.separator;    tb.setFileDownloadPath(tb.getDownloadFilePath() + File.separator + ecbjFileDownLoadPath);    bj.setBjItemList(list);    biTablePanel.setTableModel(ZcEbEcbjItemToTableModelConverter.convertSubBiTableData(bj.getBjItemList()));    // 翻译从表表头列    ZcUtil.translateColName(biTablePanel.getTable(), ZcEbEcbjItemToTableModelConverter.biInfo);    // 设置从表列类型    setBjTableEditor(biTablePanel.getTable());    //     设置从表监听     //    addBjTableLisenter(biTablePanel.getTable());    // 根据工作流模版设置字段是否可编辑    biTablePanel.getTable().addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() == 1 && SwingUtilities.isLeftMouseButton(e)) {          JPageableFixedTable table = biTablePanel.getTable();          BeanTableModel model = (BeanTableModel) table.getModel();          int selectRows = table.getSelectedRow();          List dataList = model.getDataBeanList();          int accordDataRow = table.convertRowIndexToModel(selectRows);          ZcEbEcbjItem item = (ZcEbEcbjItem) dataList.get(accordDataRow);          //控制报价一览表的显示。          if (item != null && item.getFileId() != null && item.getStatus().equals(ZcSettingConstants.FIELD_TRANS_ZC_BJ_OPEN)) {            File file = new File(tb.getFileDownloadPath() + File.separator + item.getFileId());            if (!file.exists()) {              tb.downLoadEcBjFile(item.getFileId());            }            List<String> paramList = new ArrayList<String>();            paramList.add(item.getProjName());            paramList.add(item.getPackName());            paramList.add(GV.NODE_NAME_TBYLB);            paramList.add("Y");            jpanel = tb.getEcbjSummaryTable(file, paramList);            bjTableTabPane.removeAll();            bjTableTabPane.addTab("第" + item.getBjNo() + "报价", jpanel);          } else {            bjTableTabPane.removeAll();            bjTableTabPane.addTab("报价一览表", nullPanel);          }        }      }    });    this.fitTable();    bjTabPane.repaint();  }  private void setBjTableEditor(JPageableFixedTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    SwingUtil.setTableCellEditor(table, "BJSUM", new MoneyCellEditor(false));    SwingUtil.setTableCellRenderer(table, "BJSUM", new NumberCellRenderer());    SwingUtil.setTableCellEditor(table, "BJ_TIME", new DateCellEditor());    SwingUtil.setTableCellRenderer(table, "BJ_TIME", new DateCellRenderer());  }  private void addBjTableLisenter(final JPageableFixedTable table) {    final BeanTableModel model = (BeanTableModel) (table.getModel());    model.addTableModelListener(new TableModelListener() {      public void tableChanged(TableModelEvent e) {        if (e.getColumn() >= 0 && ("FILE_NAME".equals(model.getColumnIdentifier(e.getColumn())))) {          if (e.getType() == TableModelEvent.UPDATE) {            int k = table.getSelectedRow();            if (k < 0)              return;            ZcEbEcbjItem item = (ZcEbEcbjItem) (model.getBean(table.convertRowIndexToView(k)));            if (item.getFileName() == null) {              baseDataServiceDelegate.deleteFile(item.getFileId(), requestMeta);              item.setFileId(null);            }            if (item.getFileId() != null) {              //下载报价文件              File file = tb.downLoadEcBjFile(item.getFileId());              //获取报价金额                            item.setBjSum(tb.getEcbjSum(file));              item.setFileOldId(item.getFileId());            }            model.fireTableRowsUpdated(k, k);          }        }      }    });  }  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null && (fd.getFieldName().equals("ecbjDocName"))) {          fd.setEnabled(true);        } else {          fd.setEnabled(false);        }      }    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }    }  }  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(ecbj);    toolBar.add(exitButton);    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    ecbj.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEcbj();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();  }  private void doPrevious() {    listCursor.previous();    refreshData();  }  private void doEcbj() {    /**     * 判断报价单中最新的报价单的状态：     * 1：如果最新报价单没有开标，并且没有到报价截止时间，上传的报价单，将会覆盖最新报价单：     *:2：如果报价单的单据都已经开标，而且项目分包的状态改为了重新开标。将会从新新增一个报价单，上传新的报价单。     * 3：竞争性谈判结束，不允许进行报价，可以根据分包的状态进行控制。。     *     *      */    /**     * 判断上传时间是否在该次报价的时间允许范围内。     *      */    ZcEbEcbj zcEbEcbj = (ZcEbEcbj) this.listCursor.getCurrentObject();    if (!toCheckAllowBaoJia(zcEbEcbj)) {      return;    }    if (ZcSettingConstants.PACK_STATUS_EVAL_COMPLETE.equals(zcEbEcbj.getPackStatus())) {      JOptionPane.showMessageDialog(self, "报价结束不允许报价！", "提示", JOptionPane.ERROR_MESSAGE);      return;    }    /**     * 判断是否存在最新的报价单，如果没有新增。     */    GkBaseDialog dialog = new GkBaseDialog(parent, "再次报价", Dialog.ModalityType.APPLICATION_MODAL);    BjItemUploaderEdit panel;    List list = zcEbEcbj.getBjItemList();    if (list.size() > 0 && ((ZcEbEcbjItem) list.get(list.size() - 1)).getStatus().equals(ZcSettingConstants.FIELD_TRANS_ZC_BJ_NO_OPEN)) {      panel = new BjItemUploaderEdit(dialog, self, (ZcEbEcbjItem) list.get(list.size() - 1));      dialog.add(panel);    } else {      ZcEbEcbjItem newItem = new ZcEbEcbjItem();      newItem.setProjCode(zcEbEcbj.getProjCode());      newItem.setProjName(zcEbEcbj.getProjName());      newItem.setPackCode(zcEbEcbj.getPackCode());      newItem.setPackName(zcEbEcbj.getPackName());      newItem.setProviderCode(zcEbEcbj.getProviderCode());      newItem.setProviderName(zcEbEcbj.getProviderName());      newItem.setBjNo(zcEbEcbj.getBjItemList().size() + 1 + "");      newItem.setStatus("0");      newItem.setBjTime(new Date());      newItem.setSignupPackId(zcEbEcbj.getSignupPackId());      newItem.setUpLoader(requestMeta.getSvUserName());      panel = new BjItemUploaderEdit(dialog, self, newItem);      dialog.add(panel);    }    dialog.setSize(UIConstants.DIALOG_2_LEVEL_WIDTH, UIConstants.DIALOG_2_LEVEL_HEIGHT);    dialog.moveToScreenCenter();    dialog.setVisible(true);  }  private boolean toCheckAllowBaoJia(ZcEbEcbj zcEbEcbj) {    ElementConditionDto dto = new ElementConditionDto();    dto.setPackCode(zcEbEcbj.getPackCode());    dto.setProjCode(zcEbEcbj.getProjCode());    List list = listPanel.zcEbEcbjServiceDelegate.getZcEbEcbjPlanList(dto, requestMeta);    int size = list.size();    if (size == 0) {      JOptionPane.showMessageDialog(self, "当前标段当前没有处于【再次报价】流程中，无法报价...", "提示", JOptionPane.ERROR_MESSAGE);      return false;    }    //已经按照报价的轮数进行了升序排序，所以取最后一个就可以了    ZcEbEcbjPlan plan = (ZcEbEcbjPlan) list.get(list.size() - 1);    Date currTime = new Date();    SimpleDateFormat sdf = new SimpleDateFormat(ZcSettingConstants.SIMPLE_DATE_FORMAT_FULL);    if (currTime.after(plan.getEndTime())) {      JOptionPane.showMessageDialog(self, "当前标段已经过了截止时间【" + sdf.format(plan.getEndTime()) + "】，无法报价...", "提示", JOptionPane.ERROR_MESSAGE);      return false;    }    if (currTime.before(plan.getStartTime())) {      JOptionPane.showMessageDialog(self, "当前标段还没有到开始时间【" + sdf.format(plan.getStartTime()) + "】...", "提示", JOptionPane.ERROR_MESSAGE);      return false;    }    return true;  }  private void doNext() {    listCursor.next();    refreshData();  }  public void doExit() {    this.parent.dispose();  }}
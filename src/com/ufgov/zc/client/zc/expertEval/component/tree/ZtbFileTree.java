/**   * @(#) project: ZFCG* @(#) file: ZtbFileTree.java* * Copyright 2011 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.expertEval.component.tree;import java.awt.BorderLayout;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTree;import javax.swing.SwingUtilities;import javax.swing.event.TreeExpansionEvent;import javax.swing.event.TreeExpansionListener;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.DefaultTreeSelectionModel;import javax.swing.tree.TreePath;import com.ufgov.zc.client.zc.expertEval.Constants;import com.ufgov.zc.client.zc.expertEval.component.ztbPanel.ZtbFileSplitPane;import com.ufgov.zc.client.zc.ztb.component.JTreeCellRenderer;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.util.EventPropertyName;import com.ufgov.zc.client.zc.ztb.util.GV;/*** @ClassName: ZtbFileTree* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2011-6-18 下午07:35:45* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZtbFileTree extends JPanel {  private static final long serialVersionUID = 2116938467826570576L;  private JTree tree;  private TreePath currentPath;  private TreePath lastPath;  private SmartTreeNode currentNode;  private SmartTreeNode treeNode;  private DefaultTreeModel defaultTreeModel;  public DefaultTreeModel getDefaultTreeModel() {    return defaultTreeModel;  }  public ZtbFileTree(SmartTreeNode treeNode) {    this.treeNode = treeNode;    initComponents();    paintScreen();  }  public void paintScreen() {    setLayout(new BorderLayout());    add(new JScrollPane(tree), BorderLayout.CENTER);  }  public void initComponents() {    this.tree = new JTree(treeNode);    this.defaultTreeModel = (DefaultTreeModel) this.tree.getModel();    this.tree.expandRow(1);    this.tree.setRootVisible(true);    this.tree.setCellRenderer(new JTreeCellRenderer());    this.tree.setEditable(treeNode.isRenameable());    DefaultTreeSelectionModel defaultTreeSelectionModel = new DefaultTreeSelectionModel();    defaultTreeSelectionModel.setSelectionMode(DefaultTreeSelectionModel.SINGLE_TREE_SELECTION);    this.tree.setSelectionModel(defaultTreeSelectionModel);    this.tree.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (GV.NODE_TYPE_PACK_RP.equals(treeNode.getNodeType())) {          if (SwingUtilities.isRightMouseButton(e)) {          } else {            if (e.getClickCount() == 1) {              doLeftMouseClick(e);            } else {              doLeftMouseDbClickRP(e);              if (currentNode == null) {                return;              }            }          }        } else {          if (SwingUtilities.isRightMouseButton(e)) {          } else {            if (e.getClickCount() == 1) {              doLeftMouseClick(e);            } else {              doLeftMouseDbClick(e);              if (currentNode == null) {                return;              }            }          }        }      }    });    this.tree.addTreeExpansionListener(new TreeExpansionListener() {      public void treeCollapsed(TreeExpansionEvent e) {        changeNodeUnfoldStatus(e, false);      }      public void treeExpanded(TreeExpansionEvent e) {        changeNodeUnfoldStatus(e, true);      }    });  }  public void addNodeClickActionListener(final ZtbFileSplitPane ztbFileSplitPanel) {    //单击事件    this.addPropertyChangeListener(Constants.MOUSE_CLICK_PROPERTY_NAME, new PropertyChangeListener() {      public void propertyChange(PropertyChangeEvent evt) {        //showTreeNodeMeg();      }    });    //双击事件    this.addPropertyChangeListener(Constants.MOUSE_DBCLICK_PROPERTY_NAME, new PropertyChangeListener() {      public void propertyChange(PropertyChangeEvent evt) {        doNodeClickAction(ztbFileSplitPanel);      }    });  }  /**   * 记录一下当前节点是否展开或者收起   * @param e   * @param flag   */  private void changeNodeUnfoldStatus(TreeExpansionEvent e, boolean flag) {    SmartTreeNode node = null;    TreePath path = e.getPath();    if (path != null) {      node = (SmartTreeNode) path.getLastPathComponent();      node.setUnfold(flag);    }  }  private void doNodeClickAction(ZtbFileSplitPane ztbFileSplitPanel) {    ztbFileSplitPanel.refresh(currentNode);  }  public void doLeftMouseDbClick(MouseEvent e) {    getCurrentNode(e);    if (currentNode == null) {      return;    }    firePropertyChange(EventPropertyName.MOUSE_DBCLICK_PROPERTY_NAME, false, true);  }  /**   * 响应点树节点双击，先找到点对应的文件并打开，然后再在文件中定位   * @param e   */  protected void doLeftMouseDbClickRP(MouseEvent e) {    getCurrentNode(e);    if (currentNode == null) {      return;    }    //该事件触发后将在mainpanel中进行事件监听和响应    firePropertyChange(EventPropertyName.MOUSE_DBCLICK_PROPERTY_NAME, false, true);  }  public void getCurrentNode(MouseEvent e) {    this.lastPath = currentPath;    int x = e.getX();    int y = e.getY();    int row = tree.getRowForLocation(x, y);    currentPath = tree.getPathForRow(row);    if (currentPath != null) {      currentNode = (SmartTreeNode) currentPath.getLastPathComponent();      tree.setEditable(false);    } else {      currentNode = null;    }  }  public void doLeftMouseClick(MouseEvent e) {    getCurrentNode(e);    tree.revalidate();    tree.repaint();    //该事件触发后将在mainpanel中进行事件响应    firePropertyChange(EventPropertyName.MOUSE_CLICK_PROPERTY_NAME, false, true);  }  public int getCurrentRow() {    return tree.getRowForPath(currentPath);  }  public JTree getTree() {    return tree;  }  public void setTree(JTree tree) {    this.tree = tree;  }  public SmartTreeNode getCurrentNode() {    return currentNode;  }  public void setCurrentNode(SmartTreeNode currentNode) {    this.currentNode = currentNode;  }  public SmartTreeNode getTreeNode() {    return treeNode;  }  public void setTreeNode(SmartTreeNode treeNode) {    this.treeNode = treeNode;  }  public TreePath getCurrentPath() {    return currentPath;  }  public TreePath getLastPath() {    return lastPath;  }}
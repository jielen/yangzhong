/**   * @(#) project: ZFCG* @(#) file: CreateExpertEvalTable.java* * Copyright 2011 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.expertEval.component.evalItemPanel;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.Dialog;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JDialog;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTable;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import javax.swing.table.DefaultTableCellRenderer;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTableHeader;import com.ufgov.smartclient.component.table.cellrenderer.NumberCellRenderer;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.JTextAreaLabel;import com.ufgov.zc.client.component.button.CalItemButton;import com.ufgov.zc.client.component.button.CalcButton;import com.ufgov.zc.client.component.button.ClearAddScoreButton;import com.ufgov.zc.client.component.button.PassButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.table.celleditor.MoneyCellEditor;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.expertEval.Constants;import com.ufgov.zc.client.zc.expertEval.component.tableModelConverter.ZcEbExpertEvalTableToModelConverter;import com.ufgov.zc.client.zc.expertEval.service.ZcEbEvalCalItemRes;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.EvalExpert;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.EvalPackProvider;import com.ufgov.zc.common.zc.model.FormulaRootCode;import com.ufgov.zc.common.zc.model.ZcEbEvalItemResult;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.model.ZcEbEvalParam;import com.ufgov.zc.common.zc.publish.IZcEbEcbjServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;public class ZcEbExpertEvalPanel extends JPanel {  private ZcEbEvalPack evalPack;  private EvalExpert evalExpert;  public List<EvalPackProvider> providerDataList;  public List<EvalPackProvider> oldProviderDataList;  private String formulaType;  private ZcEbExpertEvalPanel self = this;  protected static final String compoId = "ZC_EB_EVAL_PACK";  private String complianceValsetID = "VS_ZC_EB_COMPLIANCE_VALUE";  protected RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  protected JTablePanel tablePanel = new JTablePanel();  private ZcEbExpertEvalTableToModelConverter modelConver;  List<ZcEbEvalItemResult> noChildItemList = new ArrayList<ZcEbEvalItemResult>();  List<ZcEbEvalItemResult> parentItemList = new ArrayList<ZcEbEvalItemResult>();  HashMap<String, JPanel> sumarryPanelCach = new HashMap<String, JPanel>();  public JDialog caclPriceDialog = new JDialog(null, "提示", Dialog.ModalityType.MODELESS);  public JDialog caclItemScoreDialog = new JDialog(null, "提示", Dialog.ModalityType.MODELESS);  private boolean canEdit = false;  private JFuncToolBar bottomToolBar = new JFuncToolBar();  public JTextAreaLabel itemDescArea;  public ZcEbEvalItemResult selectedBean;  public int currentRow;  public int currenColumn;  private Thread calItemScoreThread;  private Thread autoCallItemResThread;  private Thread calOtherItemScoreThread;  private Map<String, String> evalParamSelectMap = new HashMap<String, String>();  public IZcEbEvalServiceDelegate zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory.create(IZcEbEvalServiceDelegate.class,  "zcEbEvalServiceDelegate");  public IZcEbEcbjServiceDelegate zcEbEcbjServiceDelegate = (IZcEbEcbjServiceDelegate) ServiceFactory.create(IZcEbEcbjServiceDelegate.class,  "zcEbEcbjServiceDelegate");  public ZcEbExpertEvalPanel(ZcEbEvalPack evalPack, String formulaType, List<EvalPackProvider> providerDataList) {    this.evalPack = evalPack;    this.evalExpert = evalPack.getEvalExpert();    this.providerDataList = providerDataList;    this.formulaType = formulaType;    if (formulaType.equals(EvalItemType.SCORE) && evalPack.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_TECH_EVAL)) {      canEdit = true;    } else {      if (formulaType.equals(EvalItemType.COMPLIANICE) && evalPack.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_FU_HE_EVAL)) {        canEdit = true;      }    }    initComponent();    if (providerDataList != null) {      intTablePanel();    }    //    //自动计算价格分值    //    if (canEdit) {    //      autoCallItemRes();    //    }    setOldObject();  }  private void initComponent() {    this.setLayout(new BorderLayout());    tablePanel.init();    tablePanel.getSearchBar().setVisible(false);    tablePanel.getTable().setAutoResizeMode(JTable.AUTO_RESIZE_OFF);    bottomToolBar.setLayout(new FlowLayout(FlowLayout.CENTER, 0, 0));    bottomToolBar.setModuleCode("ZC");    bottomToolBar.setCompoId(compoId);    SaveButton saveButton = new SaveButton();    PassButton passButton = new PassButton();    CalcButton calcPriceButton = new CalcButton();    CalItemButton calcOtherButton = new CalItemButton();    ClearAddScoreButton clearScoreButton = new ClearAddScoreButton();    bottomToolBar.add(saveButton);    if (formulaType.equals(EvalItemType.SCORE)) {      bottomToolBar.add(calcPriceButton);      bottomToolBar.add(calcOtherButton);      bottomToolBar.add(clearScoreButton);    } else if (formulaType.equals(EvalItemType.COMPLIANICE)) {      bottomToolBar.add(passButton);    }    if (canEdit) {      saveButton.setEnabled(true);      calcPriceButton.setEnabled(true);      calcOtherButton.setEnabled(true);      passButton.setEnabled(true);      clearScoreButton.setEnabled(true);    } else {      saveButton.setEnabled(false);      calcPriceButton.setEnabled(false);      calcOtherButton.setEnabled(false);      passButton.setEnabled(false);      clearScoreButton.setEnabled(false);    }    tablePanel.getTable().getTableHeader().setReorderingAllowed(false);    //    if (formulaType.equals(EvalItemType.SCORE)) {    //      tablePanel.getTable().addMouseListener(new MouseAdapter() {    //        public void mouseExited(MouseEvent e) {    //          stopTableEditing();    //          super.mouseExited(e);    //        }    //      });    //    }    tablePanel.getTable().setFixedColumnId(Constants.PROVIDER_COLUMN_NAME);    itemDescArea = new JTextAreaLabel();    itemDescArea.setFont(new Font("宋体", Font.BOLD, 15));    bottomToolBar.setVisible(true);    tablePanel.add(bottomToolBar, BorderLayout.SOUTH);    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    passButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPass();      }    });    calcPriceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        //计算        doCalItemRes();      }    });    calcOtherButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        //计算        doCalOtherItemRes();      }    });    clearScoreButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        //计算        doCleraAddScore();      }    });    this.add(tablePanel, BorderLayout.CENTER);    this.add(itemDescArea, BorderLayout.SOUTH);  }  private void intTablePanel() {    //获取表头信息字段    intTableColumnItemList();    //初始化评审数据    initEvalItemList(providerDataList);    modelConver = new ZcEbExpertEvalTableToModelConverter(noChildItemList, this);    /**     * 根据获取的评审指标初始化二维表格     */    tablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    JGroupableTableHeader itemTableHeader = tablePanel.getTable().getTableHeader();    for (int i = 0; i < parentItemList.size(); i++) {      ZcEbEvalItemResult parentItem = parentItemList.get(i);      List<String> childNames = new ArrayList<String>();      for (int j = 0; j < parentItem.getChildItemList().size(); j++) {        if (formulaType.equals(EvalItemType.COMPLIANICE)) {          childNames.add(((ZcEbEvalItemResult) parentItem.getChildItemList().get(j)).getItemName());        } else {          if (((ZcEbEvalItemResult) parentItem.getChildItemList().get(j)).getStandardScore() != null) {            childNames.add(((ZcEbEvalItemResult) parentItem.getChildItemList().get(j)).getItemName() + "("            + ((ZcEbEvalItemResult) parentItem.getChildItemList().get(j)).getStandardScore() + ")");          } else {            childNames.add(((ZcEbEvalItemResult) parentItem.getChildItemList().get(j)).getItemName());          }        }      }      itemTableHeader.addColumnGroup(parentItemList.get(i).getItemName(), childNames.toArray());    }    refreshEvalTable();  }  private void refreshEvalTable() {    tablePanel.setTableModel(modelConver.convertToTableModel(providerDataList, canEdit));    //设置表格编辑框类型    if (formulaType.equals(EvalItemType.SCORE)) {      setScoreTabledetailEditor(tablePanel.getTable(), noChildItemList);    } else {      setComplTabledetailEditor(tablePanel.getTable(), noChildItemList);    }    //添加评审表格监听    addTableChangedLisenter(tablePanel.getTable());  }  private void addTableChangedLisenter(final JPageableFixedTable table) {    final MyTableModel model = (MyTableModel) table.getModel();    model.addTableModelListener(new TableModelListener() {      public void tableChanged(TableModelEvent e) {        int col = e.getColumn();        if (col >= 1 && col <= table.getColumnCount() - 1) {          if (e.getType() == TableModelEvent.UPDATE) {            int row = table.getSelectedRow();            if (row < 0)              return;            /**             * 同步表格里的数据  这里的col 和 row 是对应 view的 可以通过talbe.getVlaue(row,col)取值，不是对应model，如果要通过model去值，要             * convertRowIndexToModel和convertColumnIndexToModel进行转换。             */            int moderIndex = table.convertRowIndexToModel(row);            EvalPackProvider provider = (EvalPackProvider) model.getList().get(moderIndex);            if (formulaType.equals(EvalItemType.COMPLIANICE)) {              String valueStr = (String) table.getValueAt(row, col);              //最后一列存放的是符合性评审不通过的原因              if (col == table.getColumnCount() - 1) {                ZcEbEvalItemResult item = (ZcEbEvalItemResult) provider.getItemMap().get(FormulaRootCode.COMPLIANCE);                item.setComplianceUnpassReason(valueStr);              }              if (col < table.getColumnCount() - 2) {                ZcEbEvalItemResult sumItemResult = (ZcEbEvalItemResult) provider.getItemMap().get(FormulaRootCode.COMPLIANCE);                ZcEbEvalItemResult item = (ZcEbEvalItemResult) provider.getItemMap().get(noChildItemList.get(col - 1).getItemCode());                item.setComplianceEvalValue(valueStr);                if (item.getComplianceEvalValue() != null) {                  updateParentRes(item);                  item.setEvalDate(new Date());                  //因为符合性评审有两个汇总列。一个是符合性评审结果、一个是不通过原因;保存的汇总结果是在table.getColumnCount() - 2                  table.setValueAt(sumItemResult.getComplianceEvalValue(), row, table.getColumnCount() - 2);                }              }            } else {              if (col == table.getColumnCount() - 1) {                return;              }              ZcEbEvalItemResult item = (ZcEbEvalItemResult) provider.getItemMap().get(noChildItemList.get(col - 1).getItemCode());              ZcEbEvalItemResult sumItemResult = (ZcEbEvalItemResult) provider.getItemMap().get(FormulaRootCode.SCORE);              BigDecimal value = (BigDecimal) table.getValueAt(row, col);              if (value != null) {                item.setExpertEvalScore(value);              } else {                item.setExpertEvalScore(BigDecimal.ZERO);              }              if (item.getExpertEvalScore() != null) {                //打分的分值不能大于标准分值。                if (item.getExpertEvalScore().compareTo(item.getStandardScore()) == 1) {                  item.setExpertEvalScore(null);                  table.setValueAt(null, row, col);                  JOptionPane.showMessageDialog(self, "打分分值不能大于标准分值", "错误", JOptionPane.ERROR_MESSAGE);                  updateParentRes(item);                  //更改总分值                  table.setValueAt(sumItemResult.getExpertEvalScore(), row, table.getColumnCount() - 1);                  return;                }                //打分分值不能小于最少得分。                if (item.getLeastScore() != null && item.getExpertEvalScore().compareTo(item.getLeastScore()) == -1) {                  item.setExpertEvalScore(null);                  JOptionPane.showMessageDialog(self, "打分分值不能小于最少得分", "错误", JOptionPane.ERROR_MESSAGE);                  updateParentRes(item);                  //更改总分值                  table.setValueAt(sumItemResult.getExpertEvalScore(), row, table.getColumnCount() - 1);                  return;                }                item.setEvalDate(new Date());                updateParentRes(item);                //更改总分值                table.setValueAt(sumItemResult.getExpertEvalScore(), row, table.getColumnCount() - 1);              }            }          }        }      }    });  }  private void intTableColumnItemList() {    Map map1 = new HashMap();    map1.put("FORMULA_CODE", evalPack.getFormulaCode());    if (formulaType.equals(EvalItemType.COMPLIANICE)) {      map1.put("ITEM_CODE", FormulaRootCode.COMPLIANCE);      map1.put("ITEM_TYPE", EvalItemType.COMPLIANICE);    } else {      map1.put("ITEM_CODE", FormulaRootCode.SCORE);      map1.put("ITEM_TYPE", EvalItemType.SCORE);    }    List<ZcEbEvalItemResult> list = zcEbEvalServiceDelegate.getZcEbEvalFormulaItemList(map1, requestMeta);    for (int i = 0; i < list.size(); i++) {      ZcEbEvalItemResult item = list.get(i);      //只显示两级指标      if (FormulaRootCode.COMPLIANCE.equals(item.getItemCode()) || FormulaRootCode.SCORE.equals(item.getItemCode())) {        return;      }      List childItemList = new ArrayList();      for (int j = 0; j < list.size(); j++) {        ZcEbEvalItemResult childItem = list.get(j);        if (childItem.getParentItemCode() != null) {          if (childItem.getParentItemCode().equals(item.getItemCode())) {            childItem.setParentEvalItemResult(item);            childItemList.add(childItem);          }        }      }      item.setChildItemList(childItemList);      if (item.getChildItemList().size() > 0) {        parentItemList.add(item);      } else {        noChildItemList.add(item);      }    }  }  /**   *   * @Description: 初始化评审指标项  * @return void 返回类型  * @since 1.0   */  private void initEvalItemList(List<EvalPackProvider> providerDataList) {    for (int k = 0; k < providerDataList.size(); k++) {      List<ZcEbEvalItemResult> itemList;      List<ZcEbEvalItemResult> calcItemList = new ArrayList();      Map map = new HashMap();      if (formulaType.equals(EvalItemType.COMPLIANICE)) {        //        //添加一个汇总结果：        //        ZcEbEvalItemResult compItem = new ZcEbEvalItemResult();        //        compItem.setItemCode(FormulaRootCode.COMPLIANCE);        //        compItem.setItemType(EvalItemType.COMPLIANICE);        //        compItem.setFormulaCode(evalPack.getFormulaCode());        //        compItem.setItemName("符合性指标");        //        providerDataList.get(k).getComplEvalList().add(compItem);        itemList = providerDataList.get(k).getComplEvalList();      } else {        //        ZcEbEvalItemResult scoreItem = new ZcEbEvalItemResult();        //        //添加一个汇总结果：        //        scoreItem.setItemCode(FormulaRootCode.SCORE);        //        scoreItem.setItemType(EvalItemType.SCORE);        //        scoreItem.setFormulaCode(evalPack.getFormulaCode());        //        scoreItem.setItemName("技术性指标");        //        providerDataList.get(k).getScoreEvalList().add(scoreItem);        itemList = providerDataList.get(k).getScoreEvalList();      }      for (int i = 0; i < itemList.size(); i++) {        ZcEbEvalItemResult item = itemList.get(i);        if (item.getFormula() != null && (item.getIsAddScore() == null || EvalItemType.noAddScoreItem.equals(item.getIsAddScore()))) {          calcItemList.add(item);        }        List childItemList = new ArrayList();        for (int j = 0; j < itemList.size(); j++) {          ZcEbEvalItemResult childItem = itemList.get(j);          if (childItem.getParentItemCode() != null) {            if (childItem.getParentItemCode().equals(item.getItemCode())) {              childItem.setParentEvalItemResult(item);              childItemList.add(childItem);            }          }        }        if (childItemList.size() > 0) {          //是否汇总结果          item.setIsCompositeResult("Y");        } else {          item.setIsCompositeResult("N");        }        item.setChildItemList(childItemList);        if (item.getEvalDate() == null) {          item.setPackCode(evalPack.getPackCode());          item.setProviderCode(providerDataList.get(k).getProviderCode());          item.setProviderName(providerDataList.get(k).getProviderName());          item.setProjCode(evalPack.getProjCode());          item.setEvalExpertCode(evalExpert.getExpertCode());          item.setEvalExpert(evalExpert.getExpertName());        }        map.put(item.getItemCode(), item);      }      providerDataList.get(k).setItemMap(map);      providerDataList.get(k).setPriceItemList(calcItemList);    }  }  private void setComplTabledetailEditor(JPageableFixedTable table, List<ZcEbEvalItemResult> noChildItemList) {    SwingUtil.setTableCellEditor(table, Constants.PROVIDER_COLUMN_NAME, new TextCellEditor());    AsValCellRenderer asValCellRenderer = new AsValCellRenderer(complianceValsetID);    final AsValComboBoxCellEditor asValComboBoxCellEditor = new AsValComboBoxCellEditor(complianceValsetID);    for (int i = 0; i < noChildItemList.size(); i++) {      System.out.println(noChildItemList.get(i).getItemName());      SwingUtil.setTableCellEditor(table, noChildItemList.get(i).getItemName().trim(), asValComboBoxCellEditor);      SwingUtil.setTableCellRenderer(table, noChildItemList.get(i).getItemName().trim(), asValCellRenderer);    }    //设置汇总列的editor     SwingUtil.setTableCellEditor(table, Constants.COMPL_COLUMN_NAME, asValComboBoxCellEditor);    SwingUtil.setTableCellRenderer(table, Constants.COMPL_COLUMN_NAME, asValCellRenderer);  }  private void setScoreTabledetailEditor(JPageableFixedTable table, List<ZcEbEvalItemResult> noChildItemList) {    table.setDefaultEditor(String.class, new TextCellEditor());    DefaultTableCellRenderer render = new DefaultTableCellRenderer() {      public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {        if (isSelected) {          setBackground(Color.PINK);        }        return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);      }    };    SwingUtil.setTableCellRenderer(table, Constants.PROVIDER_COLUMN_NAME, render);    NumberCellRenderer numberCellRenderer1 = new NumberCellRenderer() {      public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {        if (table.getValueAt(row, column) != null) {          this.setFont(new Font("宋体", Font.BOLD, 18));          this.setText(table.getValueAt(row, column).toString());        } else {          this.setFont(new Font("宋体", Font.BOLD, 18));          this.setText(null);        }        if (isSelected && hasFocus) {          this.setBackground(Color.GREEN);        }        return this;      }    };    NumberCellRenderer numberCellRenderer = new NumberCellRenderer()    {      public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {        if (table.getValueAt(row, column) != null) {          this.setFont(new Font("宋体", Font.BOLD, 19));          this.setText(table.getValueAt(row, column).toString());        } else {          this.setFont(new Font("宋体", Font.BOLD, 19));          this.setText(null);        }        if (isSelected) {          this.setBackground(Color.PINK);        }        return this;      }    };    for (int i = 0; i < noChildItemList.size(); i++) {      if (noChildItemList.get(i).getFormula() != null) {        if (noChildItemList.get(i).getStandardScore() != null) {          SwingUtil.setTableCellEditor(table, noChildItemList.get(i).getItemName() + "(" + noChildItemList.get(i).getStandardScore() + ")",          new MoneyCellEditor(false, false));          SwingUtil.setTableCellRenderer(table, noChildItemList.get(i).getItemName() + "(" + noChildItemList.get(i).getStandardScore() + ")",          numberCellRenderer1);        } else {          SwingUtil.setTableCellEditor(table, noChildItemList.get(i).getItemName(), new MoneyCellEditor(false, false));          SwingUtil.setTableCellRenderer(table, noChildItemList.get(i).getItemName(), numberCellRenderer1);        }      } else {        SwingUtil.setTableCellEditor(table, noChildItemList.get(i).getItemName() + "(" + noChildItemList.get(i).getStandardScore() + ")",        new MoneyCellEditor(false, false));        SwingUtil.setTableCellRenderer(table, noChildItemList.get(i).getItemName() + "(" + noChildItemList.get(i).getStandardScore() + ")",        numberCellRenderer);      }    }    //设置汇总列editor     SwingUtil.setTableCellEditor(table, Constants.SCORE_COLUMN_NAME, new MoneyCellEditor(false, false));    SwingUtil.setTableCellRenderer(table, Constants.SCORE_COLUMN_NAME, numberCellRenderer);  }  public void stopTableEditing() {    JPageableFixedTable biTable = this.tablePanel.getTable();    if (biTable.isEditing()) {      biTable.getCellEditor().stopCellEditing();    }  }  public boolean doSave() {    stopTableEditing();    if (!canEdit) {      return false;    }    StringBuffer str = new StringBuffer();    //校验指标的评审情况    loop: for (int k = 0; k < providerDataList.size(); k++) {      EvalPackProvider provider = providerDataList.get(k);      if (formulaType.equals(EvalItemType.COMPLIANICE)) {        for (int i = 0; i < provider.getComplEvalList().size(); i++) {          ZcEbEvalItemResult item = (ZcEbEvalItemResult) provider.getComplEvalList().get(i);          if (item.getComplianceEvalValue() == null) {            str.append("供应商" + provider.getProviderName() + "没有评审完成\n");            continue loop;          }        }        ZcEbEvalItemResult sumItemResult = (ZcEbEvalItemResult) provider.getItemMap().get(FormulaRootCode.COMPLIANCE);        if (sumItemResult.getComplianceEvalValue() != null        && sumItemResult.getComplianceEvalValue().equals(ZcSettingConstants.COMPLIANCE_EVAL_NOPASS)        && (sumItemResult.getComplianceUnpassReason() == null || "".equals(sumItemResult.getComplianceUnpassReason()))) {          str.append("供应商" + provider.getProviderName() + "评审不通过，请不通过填写原因\n");        }      } else {        for (int i = 0; i < provider.getScoreEvalList().size(); i++) {          ZcEbEvalItemResult item = (ZcEbEvalItemResult) provider.getScoreEvalList().get(i);          if (item.getExpertEvalScore() == null && (item.getIsAddScore() == null || Constants.NO_ADDSCORE_ITEM.equals(item.getIsAddScore()))) {            str.append(">供应商" + provider.getProviderName() + "没有评审完成\n");            continue loop;          }        }      }    }    if (str.toString().length() > 0) {      str.append("");      itemDescArea.setForeground(Color.RED);      itemDescArea.setText(str.toString());    }    Map map = new HashMap();    map.put("projCode", evalPack.getProjCode());    map.put("packCode", evalPack.getPackCode());    map.put("evalExpertCode", evalPack.getEvalExpert().getExpertCode());    map.put("itemType", formulaType);    try {      zcEbEvalServiceDelegate.insertProEvalItemResultList(map, providerDataList, requestMeta);      JOptionPane.showMessageDialog(this, "保存成功!", "提示", JOptionPane.INFORMATION_MESSAGE);      return true;    } catch (Exception e) {      UIUtilities.showStaickTraceDialog(e, this, "保存时发生错误", e.getMessage());      return false;    }  }  public boolean isDataChanged() {    //    setOldObject();    //    //同步评审表格中的数据。    //    stopTableEditing();    return !DigestUtil.digest(oldProviderDataList).equals(DigestUtil.digest(providerDataList));  }  private void doPass() {    for (int k = 0; k < providerDataList.size(); k++) {      List<ZcEbEvalItemResult> itemList = providerDataList.get(k).getComplEvalList();      for (int i = 0; i < itemList.size(); i++) {        ZcEbEvalItemResult item = itemList.get(i);        item.setComplianceEvalValue(ZcSettingConstants.COMPLIANCE_EVAL_PASS);      }    }    refreshEvalTable();  }  //评标的分值修改了之后，逐级修改上级评分的结果  private void updateParentRes(ZcEbEvalItemResult itemResult) {    ZcEbEvalItemResult parentItemResult = itemResult.getParentEvalItemResult();    parentItemResult.updateEvalResult();    parentItemResult.setEvalDate(new Date());    if (parentItemResult.getParentItemCode() != null) {      updateParentRes(parentItemResult);    }  }  /**   *   * @Description: 自动计算价格分值  * @return void 返回类型  * @since 1.0   */  private void autoCallItemRes() {    for (int k = 0; k < providerDataList.size(); k++) {      for (int i = 0; i < providerDataList.get(k).getPriceItemList().size(); i++) {        ZcEbEvalItemResult item = (ZcEbEvalItemResult) providerDataList.get(k).getPriceItemList().get(i);        if (item.getExpertEvalScore() != null) {          return;        }      }    }    autoCallItemResThread = new Thread(new Runnable() {      public void run() {        evalParamSelectMap.clear();        evalParamSelectMap.put("packCode", evalPack.getPackCode());        evalParamSelectMap.put("projCode", evalPack.getProjCode());        evalParamSelectMap.put("formulaCode", evalPack.getFormulaCode());        List<ZcEbEvalParam> evalParamList = zcEbEvalServiceDelegate.getEvalParamResultList(evalParamSelectMap, requestMeta);        System.out.println("————————————————————————————————————获取评审参数成功：" + System.currentTimeMillis());        try {          StringBuffer resultStr = new StringBuffer();          for (int k = 0; k < providerDataList.size(); k++) {            //获得通用参数            //calItemRes 计算分值的处理类。            ZcEbEvalCalItemRes calItemRes = new ZcEbEvalCalItemRes(providerDataList.get(k).getScoreEvalList(), evalParamList, providerDataList.get(k));            for (int i = 0; i < providerDataList.get(k).getPriceItemList().size(); i++) {              ZcEbEvalItemResult item = (ZcEbEvalItemResult) providerDataList.get(k).getPriceItemList().get(i);              resultStr.append(calItemRes.calItemScore(item));            }          }          String calRes = resultStr.toString();          if (null != resultStr && !"".equals(calRes)) {            System.out.println("计算错误" + resultStr);            return;          } else {            System.out.println("计算成功");            refreshEvalTable();          }        } catch (Exception e) {          System.out.println(e.getMessage());        }      }    });    autoCallItemResThread.start();  }  /**   *   * @Description: 计算价格分  * @return void 返回类型  * @since 1.0   */  private void doCalItemRes() {    calItemScoreThread = new Thread(new Runnable() {      public void run() {        JPanel panel = new JPanel();        panel.setSize(300, 100);        panel.setMaximumSize(new Dimension(200, 100));        JLabel jLabel = new JLabel("正在计算价格分值，请稍等");        jLabel.setFont(new Font("宋体", Font.BOLD, 18));        jLabel.setBackground(Color.BLUE);        panel.add(jLabel, BorderLayout.NORTH);        panel.setVisible(true);        caclPriceDialog.add(panel);        caclPriceDialog.setMaximumSize(new Dimension(300, 100));        caclPriceDialog.setSize(300, 100);        ZcUtil.moveComponentToScreenCenter(caclPriceDialog);        caclPriceDialog.setVisible(true);        System.out.println("————————————————————————————————————开始计算价格分值：" + System.currentTimeMillis());        evalParamSelectMap.clear();        evalParamSelectMap.put("packCode", evalPack.getPackCode());        evalParamSelectMap.put("projCode", evalPack.getProjCode());        evalParamSelectMap.put("formulaCode", evalPack.getFormulaCode());        List<ZcEbEvalParam> evalParamList = zcEbEvalServiceDelegate.getEvalParamResultList(evalParamSelectMap, requestMeta);        System.out.println("————————————————————————————————————获取评审参数成功：" + System.currentTimeMillis());        try {          StringBuffer resultStr = new StringBuffer();          for (int k = 0; k < providerDataList.size(); k++) {            //获得通用参数            //calItemRes 计算分值的处理类。            ZcEbEvalCalItemRes calItemRes = new ZcEbEvalCalItemRes(providerDataList.get(k).getScoreEvalList(), evalParamList, providerDataList.get(k));            for (int i = 0; i < providerDataList.get(k).getPriceItemList().size(); i++) {              ZcEbEvalItemResult item = (ZcEbEvalItemResult) providerDataList.get(k).getPriceItemList().get(i);              resultStr.append(calItemRes.calItemScore(item));            }          }          String calRes = resultStr.toString();          if (null != resultStr && !"".equals(calRes)) {            caclPriceDialog.setVisible(false);            JOptionPane.showMessageDialog(self, calRes, "提示", JOptionPane.WARNING_MESSAGE);            return;          } else {            caclPriceDialog.setVisible(false);            //        System.out.println("————————————————————————————————————————————计算成功：" + System.currentTimeMillis());            JOptionPane.showMessageDialog(self, "计算成功!", "提示", JOptionPane.INFORMATION_MESSAGE);            refreshEvalTable();          }        } catch (Exception e) {          System.out.println(e.getMessage());        }      }    });    calItemScoreThread.start();  }  private void doCalOtherItemRes() {    calOtherItemScoreThread = new Thread(new Runnable() {      public void run() {        JPanel panel = new JPanel();        panel.setSize(300, 100);        panel.setMaximumSize(new Dimension(200, 100));        JLabel jLabel = new JLabel("正在计算指标分值，请稍等");        jLabel.setFont(new Font("宋体", Font.BOLD, 18));        jLabel.setBackground(Color.BLUE);        panel.add(jLabel, BorderLayout.NORTH);        panel.setVisible(true);        caclItemScoreDialog.add(panel);        caclItemScoreDialog.setMaximumSize(new Dimension(300, 100));        caclItemScoreDialog.setSize(300, 100);        ZcUtil.moveComponentToScreenCenter(caclItemScoreDialog);        caclItemScoreDialog.setVisible(true);        evalParamSelectMap.clear();        evalParamSelectMap.put("packCode", evalPack.getPackCode());        evalParamSelectMap.put("projCode", evalPack.getProjCode());        evalParamSelectMap.put("formulaCode", evalPack.getFormulaCode());        List<ZcEbEvalParam> evalParamList = zcEbEvalServiceDelegate.getEvalParamResultList(evalParamSelectMap, requestMeta);        try {          StringBuffer resultStr = new StringBuffer();          JPageableFixedTable biTable = self.tablePanel.getTable();          MyTableModel model = (MyTableModel) biTable.getModel();          EvalPackProvider provider = (EvalPackProvider) model.getList().get(currentRow);          //获得通用参数          //calItemRes 计算分值的处理类。          ZcEbEvalCalItemRes calItemRes = new ZcEbEvalCalItemRes(provider.getScoreEvalList(), evalParamList, provider);          if (selectedBean == null) {            caclItemScoreDialog.setVisible(false);            JOptionPane.showMessageDialog(self, "请选择指标，然后点击计算", "提示", JOptionPane.WARNING_MESSAGE);            return;          }          if (selectedBean.getFormula() == null) {            caclItemScoreDialog.setVisible(false);            JOptionPane.showMessageDialog(self, "该指标没有计算公式，请专家自主打分", "提示", JOptionPane.WARNING_MESSAGE);            return;          }          resultStr.append(calItemRes.calItemScore(selectedBean));          updateParentRes(selectedBean);          //更新汇总结果          ZcEbEvalItemResult sumItemResult = (ZcEbEvalItemResult) provider.getItemMap().get(FormulaRootCode.SCORE);          model.setValueAt(sumItemResult.getExpertEvalScore(), currentRow, model.getColumnCount() - 1);          String calRes = resultStr.toString();          if (null != resultStr && !"".equals(calRes)) {            caclItemScoreDialog.setVisible(false);            JOptionPane.showMessageDialog(self, calRes, "提示", JOptionPane.WARNING_MESSAGE);            return;          } else {            caclItemScoreDialog.setVisible(false);            JOptionPane.showMessageDialog(self, "计算成功!", "提示", JOptionPane.INFORMATION_MESSAGE);            refreshEvalTable();          }        } catch (Exception e) {          System.out.println(e.getMessage());        }      }    });    calOtherItemScoreThread.start();  }  private void doCleraAddScore() {    if (selectedBean == null || selectedBean.getFormula() == null) {      return;    }    if (selectedBean != null) {      JPageableFixedTable biTable = this.tablePanel.getTable();      MyTableModel model = (MyTableModel) biTable.getModel();      EvalPackProvider provider = (EvalPackProvider) model.getList().get(currentRow);      ZcEbEvalItemResult sumItemResult;      if (formulaType.equals(EvalItemType.COMPLIANICE)) {        sumItemResult = (ZcEbEvalItemResult) provider.getItemMap().get(FormulaRootCode.COMPLIANCE);        selectedBean.setComplianceEvalValue(null);      } else {        sumItemResult = (ZcEbEvalItemResult) provider.getItemMap().get(FormulaRootCode.SCORE);        selectedBean.setExpertEvalScore(null);      }      updateParentRes(selectedBean);      model.setValueAt(null, currentRow, currenColumn);      //更新汇总结果      model.setValueAt(sumItemResult.getExpertEvalScore(), currentRow, model.getColumnCount() - 1);    }  }  private void setOldObject() {    oldProviderDataList = (List) ObjectUtil.deepCopy(providerDataList);  }}
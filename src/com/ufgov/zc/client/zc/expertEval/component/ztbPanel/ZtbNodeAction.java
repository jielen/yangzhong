/**   * @(#) project: GK* @(#) file: ZcEbZTBFilePanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.expertEval.component.ztbPanel;import java.awt.BorderLayout;import java.awt.Dialog;import java.awt.Dimension;import java.awt.Rectangle;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.io.File;import java.util.ArrayList;import java.util.List;import java.util.UUID;import javax.swing.JDialog;import javax.swing.JProgressBar;import com.ufgov.zc.client.zc.ztb.activex.WordPane;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.table.TableBuilder;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;/** * * @ClassName: ZtbNodeAction* @Description: 响应招投标节点数点击事件* @date: 2011-6-18 上午11:03:00* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZtbNodeAction {  protected ZtbNodeAction self = this;  /*   * 开标一览表表格处理类   */  protected TableBuilder tableBuilder;  /*   * wordPane 用于显示word文件   */  protected WordPane wordPane;  /*   * 当前评审的标段根节点。   */  protected SmartTreeNode openedPackNode;  protected SmartTreeNode openedLeavesNode;  protected String openedFilePath;  private JProgressBar openWordProgressBar = null;  private JDialog progressDialog;  public ZtbNodeAction() {    intProgressDialog();  }  public void intProgressDialog() {    initProgressBar();    progressDialog = new JDialog(null, "提示", Dialog.ModalityType.MODELESS);    progressDialog.add(openWordProgressBar, BorderLayout.CENTER);    progressDialog.setUndecorated(true);    progressDialog.setAlwaysOnTop(true);  }  private void initProgressBar() {    if (openWordProgressBar == null) {      openWordProgressBar = new JProgressBar(0, 100);      openWordProgressBar.setStringPainted(true);      openWordProgressBar.setBounds(new Rectangle(101, 305, 420, 30));    }  }  public WordPane getWordPane() {    return wordPane;  }  public void setWordPane(WordPane wordPane) {    this.wordPane = wordPane;  }  /**   * 响应显示双击节点事件   */  public void showTreeNodeInfo(String path, final SmartTreeNode currNode, final ZtbFileSplitPane splitPane, final boolean isleft) {    if (currNode == null) {      return;    }    if (wordPane != null) {      wordPane.closeNotSave();    }    if (currNode != null) {      final String nodeType = currNode.getNodeType();      String isShowRMB = "N";      if (GV.NODE_TYPE_TBYLB.equals(nodeType) || GV.NODE_TYPE_ECBJB.equals(nodeType)) {        isShowRMB = "Y";      }      if (GV.NODE_TYPE_DOC.equals(nodeType) || GV.NODE_TYPE_RESPONSE_POINT.equals(nodeType)) {        String filePath = path;        File file = new File(filePath);        String openWordMessage = null;        if (wordPane == null) {          wordPane = new WordPane();          wordPane.setMinimumSize(new Dimension(0, 0));          wordPane.addPropertyChangeListener(wordPane.EVENT_NAME_OPEN_FINISH, new PropertyChangeListener() {            public void propertyChange(PropertyChangeEvent evt) {              // 打开文件完成之后的回调函数              boolean success = (Boolean) evt.getNewValue();              if (isleft) {                splitPane.setLeftLastDoubleClickResponseSuccess(success);                splitPane.firePropertyChange(splitPane.EVENT_LEFT_OPEN_SUCESS, !success, success);              } else {                splitPane.setRightLastDoubleClickResponseSuccess(success);              }              if (!success) {                if (wordPane != null) {                  wordPane.closeNotSave();                }                return;              } else {                progressDialog.setVisible(false);                if (GV.NODE_TYPE_RESPONSE_POINT.equals(nodeType)) {                  wordPane.selectBookMark(currNode.getNodeGUID());                }              }              if (splitPane.isCompareEval) {                splitPane.setDividerLocation(splitPane.getDividerLocation() - 1);              } else {                splitPane.ztbMainSplitPanel.setDividerLocation(splitPane.ztbMainSplitPanel.getDividerLocation() - 1);              }              wordPane.removePropertyChangeListener(WordPane.EVENT_NAME_OPEN_CALLBACK, this);            }          });        }        if (isleft) {          splitPane.setLeftComponent(wordPane);        } else {          splitPane.setRightComponent(wordPane);        }        if (splitPane.isCompareEval) {          splitPane.setDividerLocation(splitPane.getDividerLocation() + 1);        } else {          splitPane.ztbMainSplitPanel.setDividerLocation(splitPane.ztbMainSplitPanel.getDividerLocation() + 1);        }        progressDialog.setSize(new Dimension((int) (splitPane.getDividerLocation() * 0.8), 25));        if (isleft) {          progressDialog.setLocation(splitPane.ztbMainSplitPanel.getDividerLocation() + (int) (splitPane.getDividerLocation() * 0.1), 400);        } else {          progressDialog.setLocation(splitPane.ztbMainSplitPanel.getDividerLocation() + splitPane.getDividerLocation()          + (int) (splitPane.getDividerLocation() * 0.1), 400);        }        openWordMessage = GV.getFileOperatorCN(GV.PROGRESS_STATUS_READING_ONLY);        openWordProgressBar.setString(openWordMessage + file.getName() + " --约" + file.length() / 1024 + "KB");        progressDialog.setVisible(true);        wordPane.openAndProtect(filePath, UUID.randomUUID().toString());      } else if (GV.NODE_TYPE_TABLE.equals(nodeType) || GV.NODE_TYPE_TBYLB.equals(nodeType) || GV.NODE_TYPE_ECBJB.equals(nodeType)) {        String filePath = path;        tableBuilder = new TableBuilder();        String detailsName = currNode.getNodeName();        String partName = PubFunction.getNeedingNodeInParent(currNode, GV.NODE_TYPE_PACK).getNodeName();        String projName = PubFunction.getNeedingNodeInParent(currNode, GV.NODE_TYPE_PROJECT).getNodeName();        List<String> showInfList = new ArrayList<String>();        showInfList.add(projName);        showInfList.add(partName);        showInfList.add(detailsName);        showInfList.add(isShowRMB);        boolean tableIsReadOnly = true;        if (isleft) {          splitPane.setLeftComponent(tableBuilder.buildTBPanel(showInfList, filePath, tableIsReadOnly));          splitPane.firePropertyChange(splitPane.EVENT_LEFT_OPEN_SUCESS, false, true);        } else {          splitPane.setRightComponent(tableBuilder.buildTBPanel(showInfList, filePath, tableIsReadOnly));        }        splitPane.setDividerLocation(splitPane.getDividerLocation());      } else if (GV.NODE_TYPE_PROJECT.equals(nodeType) || GV.NODE_TYPE_PACK.equals(nodeType) || GV.NODE_TYPE_PACK_BUSINESS.equals(nodeType)      || GV.NODE_TYPE_PACK_TECH.equals(nodeType)) {      }      SmartTreeNode par1 = (SmartTreeNode) currNode.getParent();      if (par1 != null) {        openedPackNode = (SmartTreeNode) par1.getParent();      }      openedLeavesNode = currNode;      openedFilePath = path;    }  }}
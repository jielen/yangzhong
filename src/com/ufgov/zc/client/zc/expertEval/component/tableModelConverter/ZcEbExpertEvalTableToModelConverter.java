/**   * @(#) project: ZFCG* @(#) file: ZcEbExpertEvalTableToModelConverter.java* * Copyright 2011 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.expertEval.component.tableModelConverter;import java.awt.Color;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.zc.expertEval.Constants;import com.ufgov.zc.client.zc.expertEval.component.evalItemPanel.ZcEbExpertEvalPanel;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.EvalPackProvider;import com.ufgov.zc.common.zc.model.ZcEbEvalItemResult;/*** @ClassName: ZcEbExpertEvalTableToModelConverter* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2011-2-24 下午04:43:47* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbExpertEvalTableToModelConverter {  List<ZcEbEvalItemResult> itemList;  public ZcEbEvalItemResult selectedBean;  String itemType;  private ZcEbExpertEvalPanel evalPanel;  public ZcEbExpertEvalTableToModelConverter(List<ZcEbEvalItemResult> itemList, ZcEbExpertEvalPanel evalPanel) {    super();    this.itemList = itemList;    this.evalPanel = evalPanel;    itemType = itemList.get(0).getItemType();  }  public DefaultTableModel convertToTableModel(final List list, final boolean canEdit) {    MyTableModel tableModel = null;    tableModel = new MyTableModel(getValue(list), getColumnName()) {      @Override      public Class getColumnClass(int column) {        if (column >= 0 && column < getColumnCount() && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        //第一列显示的是供应商的名称，符合性评审最后两列 符合性评审结果、不通过的原因        if (itemType.equals(EvalItemType.SCORE)) {          if (colum == 0 || colum == this.getColumnCount() - 1) {            return false;          }        } else {          if (colum == 0 || colum == this.getColumnCount() - 2) {            return false;          }          if (colum == this.getColumnCount() - 1) {            if (canEdit) {              return true;            } else {              return false;            }          }        }        EvalPackProvider provider = (EvalPackProvider) list.get(row);        selectedBean = (ZcEbEvalItemResult) provider.getItemMap().get(itemList.get(colum - 1).getItemCode());        evalPanel.selectedBean = selectedBean;        evalPanel.currenColumn = colum;        evalPanel.currentRow = row;        StringBuffer itemDescStr = new StringBuffer();        itemDescStr.append("指标名称：" + selectedBean.getItemName() + "\t");        if (selectedBean.getItemType().equals(EvalItemType.SCORE)) {          if (selectedBean.getStandardScore() != null) {            itemDescStr.append("标准分值：" + selectedBean.getStandardScore() + "\t\n");          }          if (selectedBean.getFormula() != null) {            itemDescStr.append("计算公式" + ": " + selectedBean.getFormula().trim() + "\n");          }        }        if (selectedBean.getDescription() != null) {          itemDescStr.append("评审标准描述" + ": " + selectedBean.getDescription().trim() + "\n");        }        evalPanel.itemDescArea.setForeground(Color.BLUE);        evalPanel.itemDescArea.setText(itemDescStr.toString());        //        if (itemList.get(colum - 1).getFormula() != null) {          return false;        }        return canEdit;      }    };    tableModel.setList(list);    return tableModel;  }  @SuppressWarnings("unchecked")  protected Vector<Object> getValue(List list) {    Vector<Object> values = new Vector<Object>();    if (null != list) {      for (int i = 0; i < list.size(); i++) {        values.add(toRowData((EvalPackProvider) list.get(i)));      }    }    return values;  }  private Vector<Object> toRowData(EvalPackProvider provider) {    Vector<Object> rowData = new Vector<Object>();    rowData.add(provider.getProviderName());    if (itemType.equals(EvalItemType.SCORE)) {      for (int i = 0; i < itemList.size(); i++) {        ZcEbEvalItemResult item = (ZcEbEvalItemResult) provider.getItemMap().get(itemList.get(i).getItemCode());        rowData.add(item.getExpertEvalScore());      }      //总分列      rowData.add(((ZcEbEvalItemResult) provider.getItemMap().get("SC")).getExpertEvalScore());    } else {      for (int i = 0; i < itemList.size(); i++) {        ZcEbEvalItemResult item = (ZcEbEvalItemResult) provider.getItemMap().get(itemList.get(i).getItemCode());        rowData.add(item.getComplianceEvalValue());      }      //符合性评审结果列      rowData.add(((ZcEbEvalItemResult) provider.getItemMap().get("CP")).getComplianceEvalValue());      //不通过原因列      rowData.add(((ZcEbEvalItemResult) provider.getItemMap().get("CP")).getComplianceUnpassReason());    }    return rowData;  }  protected Vector<String> getColumnName() {    Vector<String> names = new Vector<String>();    names.add(Constants.PROVIDER_COLUMN_NAME);    for (int i = 0; i < itemList.size(); i++) {      if (itemType.equals(EvalItemType.SCORE) && itemList.get(i).getStandardScore() != null) {        names.add(itemList.get(i).getItemName() + "(" + itemList.get(i).getStandardScore() + ")");      } else {        names.add(itemList.get(i).getItemName().trim());      }    }    if (itemType.equals(EvalItemType.SCORE)) {      names.add(Constants.SCORE_COLUMN_NAME);    } else {      names.add(Constants.COMPL_COLUMN_NAME);      names.add(Constants.COMPL_NOPASS_REASON);    }    return names;  }  public ZcEbEvalItemResult getSelectedBean() {    return selectedBean;  }  public void setSelectedBean(ZcEbEvalItemResult selectedBean) {    this.selectedBean = selectedBean;  }}
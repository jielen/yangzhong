/**   * @(#) project: ZFCG* @(#) file: ZtbFileSplitPane.java* * Copyright 2011 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.expertEval.component.ztbPanel;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.io.File;import javax.swing.JLabel;import javax.swing.JPanel;import javax.swing.JSplitPane;import javax.swing.plaf.basic.BasicSplitPaneUI;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.zc.expertEval.Constants;import com.ufgov.zc.client.zc.expertEval.service.DownLoadZtbFileService;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;/*** @ClassName: ZtbFileSplitPane* @Description: 对比评标splitPane* @date: 2011-6-18 下午02:15:29* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZtbFileSplitPane extends JSplitPane {  private ZtbNodeAction rightZtbNodeAction = new ZtbNodeAction();  private ZtbNodeAction leftZtbNodeAction = new ZtbNodeAction();  private boolean isRightLastDoubleClickResponseSuccess = true;  private boolean isLeftLastDoubleClickResponseSuccess = true;  public static final String EVENT_LEFT_OPEN_SUCESS = "left_open_success";  private ZtbFileSplitPane self = this;  /**   * 是否对比评标   */  public boolean isCompareEval = false;  private DownLoadZtbFileService leftDownLoadZtbFileService = new DownLoadZtbFileService();  private DownLoadZtbFileService rightDownLoadZtbFileService = new DownLoadZtbFileService();  public String leftFilePath;  public String rightFilePath;  public SmartTreeNode currentNode;  private Thread leftdownLoadFileThread;  private Thread rightdownLoadFileThread;  public JSplitPane ztbMainSplitPanel;  private ZcEbEvalPack evalPack;  public JPanel leftNullPanel;  public JLabel leftLabel;  public JPanel rightNullPanel;  public JLabel rightLabel;  public static int defaultDividerSize = 3;  public ZtbFileSplitPane(ZcEbEvalPack evalPack, JSplitPane ztbMainSplitPanel, ZcEbTbFilePanel zcEbTbFilePanel) {    setUI(new BasicSplitPaneUI());    setMinimumSize(new Dimension(0, 0));    setDividerSize(defaultDividerSize);    setOneTouchExpandable(true);    this.evalPack = evalPack;    this.ztbMainSplitPanel = ztbMainSplitPanel;    leftDownLoadZtbFileService.setZcEbTbFilePanel(zcEbTbFilePanel);    rightDownLoadZtbFileService.setZcEbTbFilePanel(zcEbTbFilePanel);    addPropertyChangeListener();    initNullPanel();  }  private void initNullPanel() {    leftNullPanel = new JPanel();    leftLabel = new JLabel();    leftLabel.setText("投标文件阅读面板");    leftLabel.setFont(new Font("宋体", Font.BOLD, 18));    leftLabel.setForeground(Color.BLUE);    leftNullPanel.add(leftLabel, BorderLayout.CENTER);    rightNullPanel = new JPanel();    rightLabel = new JLabel();    rightLabel.setText("对比供应商投标文件阅读面板");    rightLabel.setFont(new Font("宋体", Font.BOLD, 18));    rightLabel.setForeground(Color.BLUE);    rightNullPanel.add(rightLabel, BorderLayout.CENTER);  }  public void downLoadRigthZtbFile(final String providerCode, final String fileId, final ZcEbEvalPack zcEbEvalPack) {    if (null == providerCode || "".equals(providerCode)) {      /**       * 开始下载招标文件       */      rightFilePath = Constants.ZB_FILE_PATH + zcEbEvalPack.getProjCode();      /**       * 判断本地是否存在招标文件，不存在从数据库中下载       */      File file1 = new File(rightFilePath + File.separator + evalPack.getProjCode());      if (file1.exists()) {        System.out.println("招标文件已经存在:" + rightFilePath);        return;      }      rightDownLoadZtbFileService.downLoadZbFile(zcEbEvalPack, fileId, rightFilePath);    } else {      rightFilePath = Constants.TB_FILE_PATH + zcEbEvalPack.getPackCode() + File.separator + providerCode;      //校验解压后的文件是否已经存在，不存在从数据库中下载投标文件      File file = new File(rightFilePath + File.separator + evalPack.getProjCode());      if (file.exists()) {        System.out.println("投标文件已经存在:不需要下载" + rightFilePath);        //供应商切换后，刷新标书阅读面板        if (currentNode != null) {          refreshRightComponent(currentNode);        }        return;      }      rightdownLoadFileThread = new Thread(new Runnable() {        public void run() {          /**           * 开始下载投标文件：           */          rightDownLoadZtbFileService.downLoadTbFile(fileId, zcEbEvalPack, providerCode, rightFilePath, false);        }      });      rightdownLoadFileThread.start();    }  }  public void downLoadLeftZtbFile(final String providerCode, final String fileId, final ZcEbEvalPack zcEbEvalPack) {    if (null == providerCode || "".equals(providerCode)) {      leftFilePath = Constants.ZB_FILE_PATH + zcEbEvalPack.getProjCode();      /**       * 判断本地是否存在招标文件，不存在从数据库中下载       */      File file1 = new File(leftFilePath + File.separator + evalPack.getProjCode());      if (file1.exists()) {        System.out.println("招标文件已经存在:" + leftFilePath);        return;      }      /**       * 开始下载招标文件       */      leftDownLoadZtbFileService.downLoadZbFile(zcEbEvalPack, fileId, leftFilePath);    } else {      leftFilePath = Constants.TB_FILE_PATH + zcEbEvalPack.getPackCode() + File.separator + providerCode;      //校验解压后的文件是否已经存在，不存在从数据库中下载投标文件      File file = new File(leftFilePath + File.separator + evalPack.getProjCode());      if (file.exists()) {        System.out.println("投标文件已经存在:不需要下载" + leftFilePath);        //供应商切换后，刷新标书阅读面板        if (currentNode != null) {          refreshLeftComponent(currentNode);        }        return;      }      leftdownLoadFileThread = new Thread(new Runnable() {        public void run() {          /**           * 开始下载投标文件：           */          leftDownLoadZtbFileService.downLoadTbFile(fileId, zcEbEvalPack, providerCode, leftFilePath, true);        }      });      leftdownLoadFileThread.start();    }  }  public void refresh(SmartTreeNode currentNode) {    if (!isCompareEval) {      if (leftFilePath == null || "".equals(leftFilePath)) {        leftLabel.setText("请选择评审供应商");        leftLabel.setForeground(Color.RED);        this.setLeftComponent(leftNullPanel);        setDividerLocation(UIConstants.DIALOG_0_LEVEL_WIDTH - ztbMainSplitPanel.getDividerLocation());        setDividerSize(0);        return;      }    } else {      if (leftFilePath == null || "".equals(leftFilePath)) {        leftLabel.setText("请选择评审供应商");        leftLabel.setForeground(Color.RED);        this.setLeftComponent(leftNullPanel);      }      if (rightFilePath == null || "".equals(rightFilePath)) {        rightLabel.setText("请选择对比供应商");        rightLabel.setForeground(Color.RED);        this.setRightComponent(rightNullPanel);      }      setDividerLocation((UIConstants.DIALOG_0_LEVEL_WIDTH - ztbMainSplitPanel.getDividerLocation()) / 2);    }    //先检查上次双击打开的word是否已经成功打开，否则的话就不允许继续这次打开    if (isLeftLastDoubleClickResponseSuccess && isRightLastDoubleClickResponseSuccess) {      this.currentNode = currentNode;      refreshLeftComponent(currentNode);    }  }  public void refreshRightComponent(SmartTreeNode currentNode) {    String filePath = rightFilePath + currentNode.getNodesFullPath() + currentNode.getFileExtension();    File file = new File(filePath);    if (!file.exists()) {      return;    }    if (!filePath.equals(rightZtbNodeAction.openedFilePath)) {      if (!isRightLastDoubleClickResponseSuccess && GV.NODE_TYPE_DOC.equals(currentNode.getNodeType()) && rightZtbNodeAction.getWordPane() != null) {        return;      }      if (filePath.toLowerCase().endsWith(GV.SUFFIX_DOC)) {        isRightLastDoubleClickResponseSuccess = false;      }      rightZtbNodeAction.showTreeNodeInfo(filePath, currentNode, this, false);    }  }  public void refreshLeftComponent(SmartTreeNode currentNode) {    String filePath;    if (GV.NODE_TYPE_RESPONSE_POINT.equals(currentNode.getNodeType())) {      filePath = leftFilePath + currentNode.getNodeDirPath();    } else {      filePath = leftFilePath + currentNode.getNodesFullPath() + currentNode.getFileExtension();    }    File file = new File(filePath);    if (!file.exists()) {      return;    }    if (!filePath.equals(leftZtbNodeAction.openedFilePath)) {      if (!isLeftLastDoubleClickResponseSuccess && GV.NODE_TYPE_DOC.equals(currentNode.getNodeType()) && leftZtbNodeAction.getWordPane() != null) {        return;      }      if (filePath.toLowerCase().endsWith(GV.SUFFIX_DOC)) {        isLeftLastDoubleClickResponseSuccess = false;      }      if (rightZtbNodeAction.getWordPane() != null) {        rightZtbNodeAction.getWordPane().closeNotSave();        rightZtbNodeAction.openedFilePath = "";      }      leftZtbNodeAction.showTreeNodeInfo(filePath, currentNode, this, true);    }  }  /**   * @return the isRightLastDoubleClickResponseSuccess   */  public boolean isRightLastDoubleClickResponseSuccess() {    return isRightLastDoubleClickResponseSuccess;  }  /**   * @param isRightLastDoubleClickResponseSuccess the isRightLastDoubleClickResponseSuccess to set   */  public void setRightLastDoubleClickResponseSuccess(boolean isRightLastDoubleClickResponseSuccess) {    this.isRightLastDoubleClickResponseSuccess = isRightLastDoubleClickResponseSuccess;  }  /**   * @return the isLeftLastDoubleClickResponseSuccess   */  public boolean isLeftLastDoubleClickResponseSuccess() {    return isLeftLastDoubleClickResponseSuccess;  }  /**   * @param isLeftLastDoubleClickResponseSuccess the isLeftLastDoubleClickResponseSuccess to set   */  public void setLeftLastDoubleClickResponseSuccess(boolean isLeftLastDoubleClickResponseSuccess) {    this.isLeftLastDoubleClickResponseSuccess = isLeftLastDoubleClickResponseSuccess;  }  public void addPropertyChangeListener() {    this.addPropertyChangeListener(this.EVENT_LEFT_OPEN_SUCESS, new PropertyChangeListener() {      public void propertyChange(PropertyChangeEvent evt) {        //打开文件完成之后的回调函数        boolean isSuccess = (Boolean) evt.getNewValue();        if (isSuccess) {          if (isCompareEval) {            refreshRightComponent(currentNode);          }        }      }    });  }}
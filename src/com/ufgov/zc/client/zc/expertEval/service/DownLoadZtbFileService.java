/**   * @(#) project: ZFCG* @(#) file: DownLoadZtbFileService.java* * Copyright 2011 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.expertEval.service;import java.awt.BorderLayout;import java.awt.Dialog;import java.awt.Dimension;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.util.Map;import javax.swing.JDialog;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JProgressBar;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.activeztb.TbDocService;import com.ufgov.zc.client.zc.expertEval.component.ztbPanel.ZcEbTbFilePanel;import com.ufgov.zc.client.zc.ztb.fileResumeBroken.download.ResumeBrokenDownloads;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;/*** @ClassName: DownLoadZtbFileService* @Description: 下载招投标文件的处理类* @date: 2011-6-3 下午04:36:59* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class DownLoadZtbFileService {  /**   * 招投标文件下载及解压处理类。   */  protected TbDocService tbDocService = new TbDocService();  private String filePath;  //下载后的文件路径  private String downLoadFilePath;  private Thread downLoaderFileThread;  public int serverFileLength;  private BarThread barThread;  public JProgressBar downLoadProgressBar = new JProgressBar(0, 100);  public JDialog leftMessageDialog = new JDialog(null, "正在下载投标文件,请稍等", Dialog.ModalityType.MODELESS);  private ZcEbTbFilePanel zcEbTbFilePanel;  public void setZcEbTbFilePanel(ZcEbTbFilePanel zcEbTbFilePanel) {    this.zcEbTbFilePanel = zcEbTbFilePanel;  }  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class,  "baseDataServiceDelegate");  public void downLoadZbFile(ZcEbEvalPack evalPack, String fileId, String filePath) {    //从数据库中取得asFile对象    AsFile asFile = baseDataServiceDelegate.getAsFileById(fileId, requestMeta);    if (asFile == null) {      throw new BusinessException("没有找到编号为【" + fileId + "】的招标文件！");    }    setFilePath(filePath + File.separator);    tbDocService.setFileDownloadPath(getFilePath());    File file = downloadFile(asFile, getFilePath());    //将asFile保存到本地    tbDocService.upZipFile(file);  }  public void downLoadTbFile(String fileId, ZcEbEvalPack evalPack, String providerCode, String filePath, boolean isLeft) {    setFilePath(filePath + File.separator);    //下载文件的根路径    resumeBrokendownloadFile(evalPack, providerCode, fileId, getFilePath(), isLeft);  }  private void resumeBrokendownloadFile(final ZcEbEvalPack evalPack, String providerCode, String fileId, final String fileDownloadPath,  final boolean isLeft) {    if (null != fileId && !"".equals(fileId.trim())) {      final String projCode = evalPack.getProjCode();      File downLoadFile = new File(fileDownloadPath + projCode + "_" + fileId + ".ztb");      setDownLoadFilePath(downLoadFile.toString());      final ResumeBrokenDownloads resumeBrokenDownloads = new ResumeBrokenDownloads(fileId, projCode, fileDownloadPath, WorkEnv.getInstance()      .getWebRoot());      serverFileLength = resumeBrokenDownloads.getServerFileLength();      int allReadyLength = 0;      FileInputStream in = null;      if (downLoadFile.exists()) {        try {          in = new FileInputStream(downLoadFile);          allReadyLength = in.available();        } catch (IOException e) {          e.printStackTrace();        } finally {          if (in != null) {            try {              in.close();            } catch (IOException e) {              //               e.printStackTrace();            }          }        }      }      if (!downLoadFile.exists() || (downLoadFile.exists() && allReadyLength < serverFileLength)) {        downLoaderFileThread = new Thread(new Runnable() {          @Override          public void run() {            barThread = new BarThread(downLoadProgressBar);            JPanel panel = new JPanel();            panel.setSize(300, 100);            panel.setMaximumSize(new Dimension(200, 100));            JLabel jLabel = new JLabel("正在下载投标文件,请稍等");            panel.add(jLabel, BorderLayout.NORTH);            panel.add(downLoadProgressBar, BorderLayout.CENTER);            leftMessageDialog.add(panel);            leftMessageDialog.setMaximumSize(new Dimension(300, 100));            leftMessageDialog.setSize(300, 100);            ZcUtil.moveComponentToScreenCenter(leftMessageDialog);            barThread.start();            leftMessageDialog.setVisible(true);            Map returnMap = resumeBrokenDownloads.downloadFile();            if (null != returnMap.get("ERRORMESSAGE") && !"".equals(returnMap.get("ERRORMESSAGE"))) {              leftMessageDialog.setVisible(false);              JOptionPane.showMessageDialog(null, returnMap.get("ERRORMESSAGE"));              return;            }            File tempFile = new File(getFilePath() + returnMap.get("fileName") + ".ztb");            //解压文件的路径            System.out.println("下载的投标文件的路径为：" + tempFile);            tbDocService.setFileDownloadPath(getFilePath());            tbDocService.upZipFile(new File(getDownLoadFilePath()));            leftMessageDialog.setVisible(false);            if (isLeft) {              //刷新响应点              String xmlPath = fileDownloadPath + projCode + File.separator + evalPack.getPackCode() + File.separator + GV.NODE_NAME_RP_TREE + ".xml";              File file = new File(xmlPath);              if (file.exists()) {                zcEbTbFilePanel.refreshResponseTree(xmlPath);              }              //供应商切换后，刷新标书阅读面板              if (zcEbTbFilePanel.ztbFileSplitPanel.currentNode != null) {                zcEbTbFilePanel.ztbFileSplitPanel.refreshLeftComponent(zcEbTbFilePanel.ztbFileSplitPanel.currentNode);              }            } else {              //供应商切换后，刷新标书阅读面板              if (zcEbTbFilePanel.ztbFileSplitPanel.currentNode != null) {                zcEbTbFilePanel.ztbFileSplitPanel.refreshRightComponent(zcEbTbFilePanel.ztbFileSplitPanel.currentNode);              }            }            return;          }        });        downLoaderFileThread.start();      }    }  }  private File downloadFile(AsFile asFile, String filePath) {    File path = new File(getFilePath());    if (!path.exists()) {      path.mkdirs();    }    File tempFile = new File(filePath + asFile.getFileName());    FileOutputStream os = null;    byte[] b = asFile.getFileContent();    try {      os = new FileOutputStream(tempFile);      os.write(b, 0, b.length);    } catch (Exception e) {      e.printStackTrace();      throw new BusinessException("保存下载文件时出错！", e);    } finally {      try {        os.close();      } catch (IOException e) {        e.printStackTrace();      }    }    return tempFile;  }  public String getFilePath() {    return filePath;  }  public void setFilePath(String filePath) {    this.filePath = filePath;  }  public String getDownLoadFilePath() {    return downLoadFilePath;  }  public void setDownLoadFilePath(String downLoadFilePath) {    this.downLoadFilePath = downLoadFilePath;  }  class BarThread extends Thread {    public BarThread(JProgressBar bar) {      downLoadProgressBar = bar;      downLoadProgressBar.setVisible(true);      downLoadProgressBar.setStringPainted(true);    }    @Override    public void run() {      FileInputStream in = null;      int localFileLen = 0;      try {        while (true) {          File file = new File(getDownLoadFilePath());          if (!file.exists()) {            localFileLen = 0;          } else {            in = new FileInputStream(file);            localFileLen = in.available();          }          int x = (int) (100 * (localFileLen / (double) serverFileLength));          downLoadProgressBar.setValue(x);          if (localFileLen == serverFileLength) {            if (in != null) {              in.close();            }            return;          }          Thread.sleep(100);        }      } catch (Exception e) {        e.printStackTrace();      }    }  }}
/**   * @(#) project: ZC* @(#) file: ZcEbEvalCalItemRes.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.expertEval.service;import java.math.BigDecimal;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import bsh.EvalError;import bsh.Interpreter;import com.ufgov.zc.common.system.util.RegExpUtil;import com.ufgov.zc.common.zc.model.EvalPackProvider;import com.ufgov.zc.common.zc.model.ZcEbEvalItemResult;import com.ufgov.zc.common.zc.model.ZcEbEvalParam;/*** @ClassName: ZcEbEvalCalItemRes* @Description: 评分性指标计算类* @date: 2010-11-13 下午01:06:29* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbEvalCalItemRes {  //专家对指标评标的结果。  private List<ZcEbEvalItemResult> zcEbEvalItemResultList;  //当前选中的供应商。  protected EvalPackProvider selectedProvider;  private List<ZcEbEvalParam> evalParamList;  public ZcEbEvalCalItemRes(List<ZcEbEvalItemResult> zcEbEvalItemResultList, List<ZcEbEvalParam> evalParamList, EvalPackProvider selectedProvider) {    this.zcEbEvalItemResultList = zcEbEvalItemResultList;    this.evalParamList = evalParamList;    this.selectedProvider = selectedProvider;  }  //计算指标分分值  public String calItemScore(ZcEbEvalItemResult itemResult) {    StringBuffer checkMsg = new StringBuffer();    //计算公式    String formula = itemResult.getFormula();    //解析计算公式中涉及到的参数或者指标项，并为指标项赋值。    List formulaItemList = RegExpUtil.parseRegExp(RegExpUtil.FORMULA_REGEX, formula);    Map formulaItemValueMap = new HashMap();    String targetItemName = "";    for (int i = 0; i < formulaItemList.size(); i++) {      //itemNameString是计算公式中用到的评审指标的名字      String itemNameString = (String) formulaItemList.get(i);      if (!formulaItemValueMap.containsKey(itemNameString)) {        //评分性的指标获取评标分值        if (itemNameString.startsWith(RegExpUtil.FORMULA_ITEM_PREX)) {          if (itemNameString.substring(1).equals(itemResult.getItemName())) {            //计算目标指标项            targetItemName = itemNameString;          } else {            //获取计算公式中用到的评审指标的分值。            BigDecimal value = getItemValue(zcEbEvalItemResultList, itemNameString);            if (null == value) {              checkMsg.append("指标项: ").append(itemNameString.substring(1)).append(" 尚未评审!\n");              return checkMsg.toString();            } else {              formulaItemValueMap.put(itemNameString, value);            }          }//获取通用参数分值        } else if (itemNameString.startsWith(RegExpUtil.FORMULA_PARAM_PREX)) {          //          BigDecimal paramValue = getParamValue(evalParamList, itemNameString, itemResult);          if (null == paramValue) {            checkMsg.append("相关参数: ").append(itemNameString.substring(1)).append(" 尚未设置参数值,请先设置该参数值在进行计算!\n");            return checkMsg.toString();          } else {            formulaItemValueMap.put(itemNameString, paramValue);          }        }      }    }    StringBuffer resMsg = new StringBuffer();    if (checkMsg.length() > 0) {      resMsg.append("计算指标项: ").append(itemResult.getItemName()).append("  计算公式:").append(formula).append(" 中:\n ");      resMsg.append(checkMsg.toString());    }    /**     * 对计算出特殊情况的分值，要进行处理。     * 1：供应商的报价、优惠率为零的情况，不通过计算公式进行计算，直接给出 0     * 2：计算的结果不允许出现负数的情况，如果计算公式的计算结果为负，直接给出0     * 3、计算的结果不允许出现大于标准分值的情况，如果计算公司计算出得分值大于标准分值，直接给出标准分值。     */    BigDecimal bidSum = selectedProvider.getBidSum() == null ? new BigDecimal("0") : selectedProvider.getBidSum();    //供应商的报价、优惠率为零的情况    if (bidSum.compareTo(BigDecimal.ZERO) == 0) {      itemResult.setExpertEvalScore(new BigDecimal(0));      itemResult.setAdjustScore(new BigDecimal(0));      return resMsg.toString();    }    BigDecimal res = calFormula(targetItemName, formula, formulaItemValueMap);    //计算的结果出现负数的情况    if (res.compareTo(new BigDecimal(0.00)) < 0) {      itemResult.setExpertEvalScore(new BigDecimal(0));      itemResult.setAdjustScore(new BigDecimal(0));      return resMsg.toString();    }    //计算的结果出现大于标准分值的情况    if (res.compareTo(itemResult.getStandardScore()) == 1) {      itemResult.setExpertEvalScore(itemResult.getStandardScore());      itemResult.setAdjustScore(itemResult.getStandardScore());      return resMsg.toString();    }    itemResult.setExpertEvalScore(res);    itemResult.setAdjustScore(res);    return resMsg.toString();  }  //获得评分性指标的分值  private BigDecimal getItemValue(List scoreItemResultList, String itemNameString) {    for (int i = 0; i < scoreItemResultList.size(); i++) {      //ZcEbEvalItemResult是评标结果对象      ZcEbEvalItemResult itemResult = (ZcEbEvalItemResult) scoreItemResultList.get(i);      if (itemNameString.substring(1).equals(itemResult.getItemName())) {        //评分指标的评标分值是调整后的分值不为空那么返回调整后的分值        if (!itemResult.isEval()) {          return null;        }        if (itemResult.getAdjustScore() != null) {          return itemResult.getAdjustScore();        } else          return itemResult.getExpertEvalScore();      }    }    return null;  }  // 获得通用参数的值,获取参数的值的方式，要进行修改，不光是投标报价作为计算参数。  private BigDecimal getParamValue(List packParamList, String itemNameString, ZcEbEvalItemResult itemResult) {    for (int i = 0; i < packParamList.size(); i++) {      ZcEbEvalParam param = (ZcEbEvalParam) packParamList.get(i);      if (itemNameString.substring(1).equals(param.getParamName())) {        //如果是投标报价参数，则需要取供应商的投标报价。这里的投标标价是0的怎么处理？        if (RegExpUtil.FORMULA_PARAM_PRICE.equals(param.getValue())) {          if (selectedProvider.getBidSum() == null) {            return new BigDecimal("0");          } else {            //这里的投标报价都是最终的报价            return selectedProvider.getBidSum();          }        }        return new BigDecimal(param.getValue());      }    }    return null;  }  //计算分值  private BigDecimal calFormula(String targetItemName, String formula, Map formulaItemValueMap) {    String fm = formula.replaceAll("\\[", "");    fm = fm.replaceAll("\\]", "");    Interpreter i = new Interpreter();    try {      Iterator iterator = formulaItemValueMap.entrySet().iterator();      while (iterator.hasNext()) {        Map.Entry entry = (Map.Entry) iterator.next();        BigDecimal value = new BigDecimal(String.valueOf(entry.getValue()));        value.setScale(2, 5);        i.set((String) entry.getKey(), value.doubleValue());      }      i.eval(fm);      System.out.println("公式:" + fm + " 计算结果: " + i.get(targetItemName));      return new BigDecimal(String.valueOf(i.get(targetItemName)));    } catch (EvalError e) {      e.printStackTrace();      throw new RuntimeException("计算指标项得分时发生异常，可能是公式设置错误，请检查！");    }  }}
/**   * @(#) project: GK* @(#) file: ZcEbEvalPackListPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.expertEval.evalPanel;import java.awt.Color;import java.awt.Container;import java.awt.Dialog;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JDialog;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.ComplianceEvalButton;import com.ufgov.zc.client.component.button.ExperMessageButton;import com.ufgov.zc.client.component.button.FinishComplianceEvalButton;import com.ufgov.zc.client.component.button.FinishScoreEvalButton;import com.ufgov.zc.client.component.button.ScoreEvalButton;import com.ufgov.zc.client.component.ui.AbstractDataDisplay;import com.ufgov.zc.client.component.ui.AbstractEditListBill;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SaveableSearchConditionArea;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.component.ui.conditionitem.SearchConditionUtil;import com.ufgov.zc.client.util.BalanceUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.eval.result.ZcEbEvalResultPortalPanel;import com.ufgov.zc.client.zc.expertEval.Constants;import com.ufgov.zc.client.zc.expertEval.component.ChengNuoPanel;import com.ufgov.zc.client.zc.expertEval.component.tableModelConverter.EvalPackToTableModelConverter;import com.ufgov.zc.client.zc.expertEval.expertMessage.ExpertMessageEditDialog;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.WFConstants;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.EvalExpert;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.EvalPackProvider;import com.ufgov.zc.common.zc.model.ZcEbEvalBidTeamMember;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.model.ZcEbExpertChengNuo;import com.ufgov.zc.common.zc.model.ZcEbExpertOpinion;import com.ufgov.zc.common.zc.publish.IZcEbEvalBidTeamServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;/*** @ClassName: ZcEbEvalPackListPanel* @Description: 评标标段列表面板。* @date: 2010-4-22 下午01:44:42* @version: V1.0  * @since: 1.0* @author: fanpl* @modify: */public class ZcEbEvalPackListPanel extends AbstractEditListBill implements ParentWindowAware {  private static final Logger logger = Logger.getLogger(ZcEbEvalPackListPanel.class);  private static final long serialVersionUID = 395291702646092160L;  private Window parentWindow;  private String compoId = "ZC_EB_EVAL_PACK";  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private ElementConditionDto elementConditionDto = new ElementConditionDto();  protected EvalPackToTableModelConverter modelConverter = new EvalPackToTableModelConverter();  public IZcEbEvalServiceDelegate zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory.create(IZcEbEvalServiceDelegate.class,  "zcEbEvalServiceDelegate");  private IZcEbEvalBidTeamServiceDelegate zcEbEvalBidTeamServiceDelegate = (IZcEbEvalBidTeamServiceDelegate) ServiceFactory.create(  IZcEbEvalBidTeamServiceDelegate.class, "zcEbEvalBidTeamServiceDelegate");  //符合性评审  protected ComplianceEvalButton complianceEvalButton = new ComplianceEvalButton();  //技术性打分  protected ScoreEvalButton scoreEvalButton = new ScoreEvalButton();  //完成评分性评标  protected FinishScoreEvalButton finishScoreButton = new FinishScoreEvalButton();  //完成符合性评标  protected FinishComplianceEvalButton finishComplianButton = new FinishComplianceEvalButton();  //填写专家意见按钮  private ExperMessageButton experMessageButton = new ExperMessageButton();  //当前登录系统的专家  protected EvalExpert evalExpert;  //当前评审标段  private ZcEbEvalPack evalPack = null;  private ChengNuoPanel chengNuoPanel;  public IZcEbEvalServiceDelegate getZcEbEvalServiceDelegate() {    return zcEbEvalServiceDelegate;  }  public void setZcEbEvalServiceDelegate(IZcEbEvalServiceDelegate zcEbEvalServiceDelegate) {    this.zcEbEvalServiceDelegate = zcEbEvalServiceDelegate;  }  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  private final class DataDisplay extends MultiDataDisplay {    private DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays, AbstractSearchConditionArea conditionArea,    boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, ZcSettingConstants.TAB_ID_ZC_EB_EVAL_PACK);      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("ZC_EB_EVAL_PACK_TITLE"),      TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 25), Color.BLUE));    }    @Override    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          @Override          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {              String tabStatus = d.getStatus();              JGroupableTable table = d.getTable();              MyTableModel model = (MyTableModel) table.getModel();              int row = table.getSelectedRow();              List dataList = model.getList();              int accordDataRow = table.convertRowIndexToModel(row);              ZcEbEvalPack evalPack = (ZcEbEvalPack) dataList.get(accordDataRow);              getEvalExpert(evalPack);              createDialog(evalPack, tabStatus);            }          }        });      }    }    @Override    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems, final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(compoId);      elementConditionDto.setExecutor(WorkEnv.getInstance().getCurrUserId());      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setStatus(tableDisplay.getStatus());      elementConditionDto.setCoCode(requestMeta.getSvCoCode());      elementConditionDto.setOrgCode(requestMeta.getSvOrgCode());      elementConditionDto.setMonth(BalanceUtil.getMonthIdBySysOption());      elementConditionDto.setUserId(requestMeta.getSvUserID());      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        @Override        public void before() {          assert c != null;          installLoadingComponent(c);        }        @Override        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        @Override        public TableModel execute() throws Exception {          return modelConverter.convertToTableModel(zcEbEvalServiceDelegate.getZcEbEvalPackList(elementConditionDto, requestMeta));        }        public void success(TableModel model) {          tableDisplay.setTableModel(model);          setButtonStatus();        }      });    }  }  static {    LangTransMeta.init("ZC%");  }  public ZcEbEvalPackListPanel() {    UIUtilities.asyncInvoke(new DefaultInvokeHandler<List<SearchCondition>>() {      @Override      public List<SearchCondition> execute() throws Exception {        List<SearchCondition> needDisplaySearchConditonList = SearchConditionUtil.getNeedDisplaySearchConditonList(WorkEnv.getInstance()        .getCurrUserId(), ZcSettingConstants.TAB_ID_ZC_EB_EVAL_PACK);        return needDisplaySearchConditonList;      }      @Override      public void success(List<SearchCondition> needDisplaySearchConditonList) {        List<TableDisplay> showingDisplays = SearchConditionUtil.getNeedDisplayTableDisplay(needDisplaySearchConditonList);        init(createDataDisplay(showingDisplays), null);//调用父类方法        revalidate();        repaint();      }    });    requestMeta.setCompoId(compoId);  }  private AbstractSearchConditionArea topSearchConditionArea;  private AbstractSearchConditionArea createTopConditionArea() {    Map defaultValueMap = new HashMap();    topSearchConditionArea = new SaveableSearchConditionArea(ZcSettingConstants.CONDITION_ID_ZC_EB_EVAL_PACK, null, true, defaultValueMap, null);    return topSearchConditionArea;  }  private AbstractDataDisplay createDataDisplay(List<TableDisplay> showingDisplays) {    return new DataDisplay(SearchConditionUtil.getAllTableDisplay(ZcSettingConstants.TAB_ID_ZC_EB_EVAL_PACK), showingDisplays,    createTopConditionArea(), true);//true:显示收索条件区 false：不显示收索条件区  }  @Override  protected void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(complianceEvalButton);    toolBar.add(finishComplianButton);    toolBar.add(scoreEvalButton);    toolBar.add(finishScoreButton);    toolBar.add(experMessageButton);    // 初始化按钮的action事件    scoreEvalButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doScoreEval();      }    });    complianceEvalButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doComplianceEval();      }    });    finishComplianButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doFinishComplianceEval(null);      }    });    finishScoreButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doFinishScoreEval(null);      }    });    experMessageButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doCreateExpertMessage(null);      }    });  }  private void getEvalExpert(ZcEbEvalPack evalPack) {    /**     * 专家以用户的方式登录:     */    evalExpert = new EvalExpert();    evalExpert.setExpertCode(requestMeta.getSvUserID());    evalExpert.setExpertName(requestMeta.getSvUserName());    logger.info("evalExpertCode:" + evalExpert.getExpertCode());    logger.info("evalExpertName:" + evalExpert.getExpertName());    evalPack.setEvalExpert(evalExpert);  }  private void doScoreEval() {    if (getCheckedList().size() > 1 || getCheckedList().size() == 0) {      JOptionPane.showMessageDialog(this, "请选择一个标段且只能选择一个标段然后进行操作", "提示", JOptionPane.YES_OPTION);      return;    }    evalPack = (ZcEbEvalPack) getCheckedList().get(0);    getEvalExpert(evalPack);    alertChengNuoPanel(evalPack);    ZcEbEvalBidTeamMember currExpert = zcEbEvalServiceDelegate.getZcEbCurrExpertEvalProgress(evalPack, requestMeta);    if (currExpert != null && Constants.EXPERT_EVAL_COMPL.equals(currExpert.getExpertEvalProgress())) {      int sel = JOptionPane.showConfirmDialog(null, "请先完成【符合性评标】，如果已经完成，\n请选择【确认】然后进行【评分性评标】，否则请选【取消】退出.", "温馨提示", JOptionPane.OK_CANCEL_OPTION);      if (sel == JOptionPane.YES_OPTION) {        currExpert.setExpertEvalProgress(Constants.EXPERT_EVAL_SCORE);        currExpert.setProjCode(evalPack.getProjCode());        currExpert.setPackCode(evalPack.getPackCode());        zcEbEvalBidTeamServiceDelegate.updateEvalBidTeamMemberEvalProgress(currExpert, requestMeta);      } else {        return;      }    } else if (currExpert != null && Constants.EXPERT_EVAL_COMPL_OK.equals(currExpert.getExpertEvalProgress())) {      currExpert.setExpertEvalProgress(Constants.EXPERT_EVAL_SCORE);      currExpert.setProjCode(evalPack.getProjCode());      currExpert.setPackCode(evalPack.getPackCode());      zcEbEvalBidTeamServiceDelegate.updateEvalBidTeamMemberEvalProgress(currExpert, requestMeta);    }    final GkBaseDialog dialog = new GkBaseDialog(this.parentWindow, LangTransMeta.translate("ZC_EB_EVAL_PACK_TITLE") + "  "    + LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_PROJ_NAME) + ":" + evalPack.getProjName() + "  "    + LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME) + ":" + evalPack.getPackName() + "  "    + LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_FIELD_EXPERT_NAME) + ":" + evalExpert.getExpertName(),    Dialog.ModalityType.DOCUMENT_MODAL);    final ZcEbEvalPortalPanel panel = new ZcEbEvalPortalPanel(evalPack, dialog, this, true);    dialog.addWindowListener(new WindowAdapter() {      @Override      public void windowClosed(WindowEvent e) {        //        panel.getExpertPanel().setStop(true);        //        panel.setStop(false);        super.windowClosed(e);      }      public void windowClosing(WindowEvent e) {        String info = evalIsComplement(EvalItemType.SCORE, evalPack);        if (!"".equals(info)) {          info += "请继续完成对以上供应商的评审.";          JOptionPane.showMessageDialog(null, "<html><b><font size='3' color='red'>" + info + "</font></b></html>\n");          return;        }        ZcEbEvalBidTeamMember currExpert = zcEbEvalServiceDelegate.getZcEbCurrExpertEvalProgress(evalPack, requestMeta);        if (currExpert != null && Constants.EXPERT_EVAL_SCORE.equals(currExpert.getExpertEvalProgress())) {          int sel = JOptionPane.showConfirmDialog(null, "如果您已经完成了【评分性评标】，请选择【是】，否则请选【否】退出.", "温馨提示", JOptionPane.YES_NO_OPTION);          if (sel == JOptionPane.YES_OPTION) {            currExpert.setExpertEvalProgress(Constants.EXPERT_EVAL_SCORE_OK);            currExpert.setProjCode(evalPack.getProjCode());            currExpert.setPackCode(evalPack.getPackCode());            zcEbEvalBidTeamServiceDelegate.updateEvalBidTeamMemberEvalProgress(currExpert, requestMeta);            JOptionPane.showMessageDialog(null, "您已经完成完成了【评分性评标】，请稍候，系统即将产生评标结果...");            finishScoreButton.setEnabled(false);          }        }      }      @Override      public void windowOpened(WindowEvent e) {        dialog.setSize(UIConstants.SCREEN_WIDTH, UIConstants.SCREEN_HEIGHT);        dialog.setLocation(0, 0);      }    });    dialog.add(panel);    dialog.setSize(UIConstants.DIALOG_0_LEVEL_WIDTH, UIConstants.DIALOG_0_LEVEL_WIDTH);    dialog.moveToScreenCenter();    dialog.setVisible(true);  }  /**   * 先检查是否已经完成了专家意见的填写   */  public void doFinishScoreEval(ZcEbEvalPack myEvalPack) {    if (myEvalPack == null) {      if (getCheckedList().size() > 1 || getCheckedList().size() == 0) {        JOptionPane.showMessageDialog(this, "请选择一个标段且只能选择一个标段然后进行操作", "提示", JOptionPane.YES_OPTION);        return;      }      evalPack = (ZcEbEvalPack) getCheckedList().get(0);    } else {      evalPack = myEvalPack;    }    getEvalExpert(evalPack);    String info = evalIsComplement(EvalItemType.SCORE, evalPack);    if (!"".equals(info)) {      info += "请先完成对以上供应商的评审.";      JOptionPane.showMessageDialog(null, "<html><b><font size='3' color='red'>" + info + "</font></b></html>\n");      return;    }    Map<String, String> map = new HashMap<String, String>();    map.put("projCode", evalPack.getProjCode());    map.put("packCode", evalPack.getPackCode());    map.put("expertCode", requestMeta.getSvUserID());    ZcEbExpertOpinion opinion = zcEbEvalServiceDelegate.getZcEbExpertOpinion(map, requestMeta);    if (null == opinion || null == opinion.getOpinion() || "".equals(opinion.getOpinion()) || opinion.getOpinion().length() < 10) {      int sel = JOptionPane.showConfirmDialog(null, "您还没有录入专家评标意见或意见不够详细，无法完成评标，是否现在录入？\n请选择【确认】进行录入，否则请选【取消】退出.", "温馨提示",      JOptionPane.OK_CANCEL_OPTION);      if (sel == JOptionPane.YES_OPTION) {        doCreateExpertMessage(evalPack);        return;      }    }    ZcEbEvalBidTeamMember currExpert = zcEbEvalServiceDelegate.getZcEbCurrExpertEvalProgress(evalPack, requestMeta);    if (currExpert != null && Constants.EXPERT_EVAL_SCORE.equals(currExpert.getExpertEvalProgress())) {      int sel = JOptionPane.showConfirmDialog(null, "确定完成【评分性评标】及【专家意见】的填写了吗？\n请选择【确认】，否则请选【取消】退出.", "温馨提示", JOptionPane.OK_CANCEL_OPTION);      if (sel == JOptionPane.YES_OPTION) {        currExpert.setExpertEvalProgress(Constants.EXPERT_EVAL_SCORE_OK);        currExpert.setProjCode(evalPack.getProjCode());        currExpert.setPackCode(evalPack.getPackCode());        zcEbEvalBidTeamServiceDelegate.updateEvalBidTeamMemberEvalProgress(currExpert, requestMeta);        JOptionPane.showMessageDialog(null, "您已经完成了【评分性评标】，系统即将产生评标结果，请稍候...");        finishScoreButton.setEnabled(false);      }    } else if (currExpert != null && "20_25".indexOf(currExpert.getExpertEvalProgress()) != -1) {      JOptionPane.showMessageDialog(null, "您所选标段已经处于完成【评分性评标】状态了...");    }  }  private void doComplianceEval() {    if (getCheckedList().size() > 1 || getCheckedList().size() == 0) {      JOptionPane.showMessageDialog(this, "请选择一个标段且只能选择一个标段然后进行操作", "提示", JOptionPane.YES_OPTION);      return;    }    evalPack = (ZcEbEvalPack) getCheckedList().get(0);    evalPack = checkEvalPack(evalPack);    getEvalExpert(evalPack);    alertChengNuoPanel(evalPack);    ZcEbEvalBidTeamMember currExpert = zcEbEvalServiceDelegate.getZcEbCurrExpertEvalProgress(evalPack, requestMeta);    if (currExpert != null && Constants.EXPERT_EVAL_READAY.equals(currExpert.getExpertEvalProgress())) {      currExpert.setExpertEvalProgress(Constants.EXPERT_EVAL_COMPL);      currExpert.setProjCode(evalPack.getProjCode());      currExpert.setPackCode(evalPack.getPackCode());      zcEbEvalBidTeamServiceDelegate.updateEvalBidTeamMemberEvalProgress(currExpert, requestMeta);    }    //当前标段的状态。    //String packStatus = evalPack.getPackStatus();    final GkBaseDialog dialog = new GkBaseDialog(this.parentWindow, LangTransMeta.translate("ZC_EB_EVAL_PACK_TITLE") + "  "    + LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_PROJ_NAME) + ":" + evalPack.getProjName() + "  "    + LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME) + ":" + evalPack.getPackName() + "  "    + LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_FIELD_EXPERT_NAME) + ":" + evalExpert.getExpertName(),    Dialog.ModalityType.DOCUMENT_MODAL);    final ZcEbEvalPortalPanel panel = new ZcEbEvalPortalPanel(evalPack, dialog, this, false);    dialog.addWindowListener(new WindowAdapter() {      @Override      public void windowClosed(WindowEvent e) {        //删除本地评标过程中下载的招投标文件        //        panel.getExpertPanel().setStop(true);        //        panel.setStop(true);        super.windowClosed(e);      }      public void windowClosing(WindowEvent e) {        String info = evalIsComplement(EvalItemType.COMPLIANICE, evalPack);        if (!"".equals(info)) {          info += "请继续完成对以上供应商的评审.";          JOptionPane.showMessageDialog(null, "<html><b><font size='3' color='red'>" + info + "</font></b></html>\n");          return;        }        ZcEbEvalBidTeamMember currExpert = zcEbEvalServiceDelegate.getZcEbCurrExpertEvalProgress(evalPack, requestMeta);        if (currExpert != null && Constants.EXPERT_EVAL_COMPL.equals(currExpert.getExpertEvalProgress())) {          int sel = JOptionPane.showConfirmDialog(null, "如果您已经完成了【符合性评标】，请选择【是】，否则请选【否】退出.", "温馨提示", JOptionPane.YES_NO_OPTION);          if (sel == JOptionPane.YES_OPTION) {            currExpert.setExpertEvalProgress(Constants.EXPERT_EVAL_COMPL_OK);            currExpert.setProjCode(evalPack.getProjCode());            currExpert.setPackCode(evalPack.getPackCode());            zcEbEvalBidTeamServiceDelegate.updateEvalBidTeamMemberEvalProgress(currExpert, requestMeta);            /**             * 根据是否需要打分，给出的提示不同。可以通过评标方法的类别进行判断，三种评标方法类别中，只有最低报价法，不需要打分。             * 若采购方式为“竞争性谈判”（工程装修类的除外）、“单一来源”、“协议供货二次谈判”则不需要进行评分。             */            if (Constants.FORMULA_FACTOR_LOWERPRICE_TYPE.equals(evalPack.getFactorType())) {              JOptionPane.showMessageDialog(null, "您已经完成了【符合性评标】，请在供应商多次报价完成之后，填写专家意见...");            } else {              JOptionPane.showMessageDialog(null, "您已经完成了【符合性评标】，稍后片刻将可以继续【评分性评标】...");            }            finishComplianButton.setEnabled(false);          }        }      }      @Override      public void windowOpened(WindowEvent e) {        dialog.setSize(UIConstants.SCREEN_WIDTH, UIConstants.SCREEN_HEIGHT);        dialog.setLocation(0, 0);      }    });    dialog.add(panel);    dialog.setSize(UIConstants.DIALOG_0_LEVEL_WIDTH, UIConstants.DIALOG_0_LEVEL_WIDTH);    dialog.moveToScreenCenter();    dialog.setVisible(true);  }  public void doFinishComplianceEval(ZcEbEvalPack myEvalPack) {    if (myEvalPack == null) {      if (getCheckedList().size() > 1 || getCheckedList().size() == 0) {        JOptionPane.showMessageDialog(this, "请选择一个标段且只能选择一个标段然后进行操作", "提示", JOptionPane.YES_OPTION);        return;      }      evalPack = (ZcEbEvalPack) getCheckedList().get(0);    } else {      evalPack = myEvalPack;    }    getEvalExpert(evalPack);    String info = evalIsComplement(EvalItemType.COMPLIANICE, evalPack);    if (!"".equals(info)) {      info += "请先完成对以上供应商的评审.";      JOptionPane.showMessageDialog(null, "<html><b><font size='3' color='red'>" + info + "</font></b></html>\n");      return;    }    ZcEbEvalBidTeamMember currExpert = zcEbEvalServiceDelegate.getZcEbCurrExpertEvalProgress(evalPack, requestMeta);    if (currExpert != null && Constants.EXPERT_EVAL_COMPL.equals(currExpert.getExpertEvalProgress())) {      int sel = JOptionPane.showConfirmDialog(null, "确定已经完成【符合性评标】了吗？\n完成请选择【确认】，否则请选【取消】退出.", "温馨提示", JOptionPane.OK_CANCEL_OPTION);      if (sel == JOptionPane.YES_OPTION) {        currExpert.setExpertEvalProgress(Constants.EXPERT_EVAL_COMPL_OK);        currExpert.setProjCode(evalPack.getProjCode());        currExpert.setPackCode(evalPack.getPackCode());        zcEbEvalBidTeamServiceDelegate.updateEvalBidTeamMemberEvalProgress(currExpert, requestMeta);        finishComplianButton.setEnabled(false);        /**         * 根据是否需要打分，给出的提示不同。可以通过评标方法的类别进行判断，三种评标方法类别中，只有最低报价法，不需要打分。         * 若采购方式为“竞争性谈判”（工程装修类的除外）、“单一来源”、“协议供货二次谈判”则不需要进行评分。         */        if (Constants.FORMULA_FACTOR_LOWERPRICE_TYPE.equals(evalPack.getFactorType())) {          JOptionPane.showMessageDialog(null, "您已经完成了【符合性评标】，请在供应商多次报价完成之后，填写专家意见...");        } else {          JOptionPane.showMessageDialog(null, "您已经完成了【符合性评标】，稍后片刻将可以继续【评分性评标】...");        }      }    } else if (currExpert != null && "10_15_20_25".indexOf(currExpert.getExpertEvalProgress()) != -1) {      JOptionPane.showMessageDialog(null, "您所选标段已经处于完成【符合性评标】状态了...");    }  }  /**   *   * @Description: 判断专家的评审情况,只有所有专家的评审结果都提交了，才可以进行汇总。  * @return boolean 返回类型  * @since 1.0   */  private String evalIsComplement(String itemType, ZcEbEvalPack evalPack) {    StringBuffer resultStr = new StringBuffer();    ElementConditionDto dto = new ElementConditionDto();    dto.setPackCode(evalPack.getPackCode());    dto.setProjCode(evalPack.getProjCode());    dto.setZcText1(itemType);    Map map = new HashMap();    map.put("PROJ_CODE", evalPack.getProjCode());    map.put("PACK_CODE", evalPack.getPackCode());    map.put("ITEM_TYPE", itemType);    map.put("FORMULA_CODE", evalPack.getFormulaCode());    if (itemType.equals(EvalItemType.SCORE)) {      map.put("FILTER_BY_COMPLIANCE_RES", "Y");    } else {      map.put("FILTER_BY_COMPLIANCE_RES", "N");    }    map.put("EVAL_EXPERT_CODE", evalPack.getEvalExpert().getExpertCode());    List<EvalPackProvider> pList = zcEbEvalServiceDelegate.getEvalPackProviderList(map, requestMeta);    for (int i = 0; i < pList.size(); i++) {      if (!pList.get(i).isEval()) {        resultStr.append((i + 1) + "、供应商【" + pList.get(i).getProviderName() + "】的评审未完成!<br>");      }    }    return resultStr.toString();  }  private void doCreateExpertMessage(ZcEbEvalPack myEvalPack) {    if (myEvalPack == null) {      if (getCheckedList().size() > 1 || getCheckedList().size() == 0) {        JOptionPane.showMessageDialog(this, "请选择一个标段且只能选择一个标段然后进行操作", "提示", JOptionPane.YES_OPTION);        return;      }      myEvalPack = (ZcEbEvalPack) getCheckedList().get(0);    }    getEvalExpert(myEvalPack);    boolean isScoreEval = false;    if (myEvalPack.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_TECH_EVAL)) {      isScoreEval = true;    }    ExpertMessageEditDialog editDialog = new ExpertMessageEditDialog(this.parentWindow, "专家评审意见", myEvalPack, evalExpert, zcEbEvalServiceDelegate,    isScoreEval);    editDialog.setLocationRelativeTo(null);    editDialog.setVisible(true);  }  private void createDialog(final ZcEbEvalPack evalPack, String tabStatus) {    alertChengNuoPanel(evalPack);    final GkBaseDialog dialog = new GkBaseDialog(this.parentWindow, LangTransMeta.translate("ZC_EB_EVAL_PACK_TITLE") + "  "    + LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_PROJ_NAME) + ":" + evalPack.getProjName() + "  "    + LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME) + ":" + evalPack.getPackName() + "  "    + LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_FIELD_EXPERT_NAME) + ":" + evalExpert.getExpertName(),    Dialog.ModalityType.DOCUMENT_MODAL);    if (tabStatus.equals(Constants.COMPL_CONDITION_FIELD_CODE)) {      final ZcEbEvalPortalPanel panel = new ZcEbEvalPortalPanel(evalPack, dialog, this, false);      dialog.addWindowListener(new WindowAdapter() {        @Override        public void windowClosed(WindowEvent e) {          //          panel.getExpertPanel().setStop(true);          //          panel.setStop(true);          super.windowClosed(e);        }        @Override        public void windowOpened(WindowEvent e) {          dialog.setSize(UIConstants.DIALOG_0_LEVEL_WIDTH, UIConstants.DIALOG_0_LEVEL_HEIGHT);          dialog.setLocation(0, 0);          ZcEbEvalBidTeamMember currExpert = zcEbEvalServiceDelegate.getZcEbCurrExpertEvalProgress(evalPack, requestMeta);          if (currExpert != null && Constants.EXPERT_EVAL_READAY.equals(currExpert.getExpertEvalProgress())) {            currExpert.setExpertEvalProgress(Constants.EXPERT_EVAL_COMPL);            currExpert.setProjCode(evalPack.getProjCode());            currExpert.setPackCode(evalPack.getPackCode());            zcEbEvalBidTeamServiceDelegate.updateEvalBidTeamMemberEvalProgress(currExpert, requestMeta);          }        }      });      dialog.add(panel);    } else if (tabStatus.equals(Constants.SCORE_CONDITION_FIELD_CODE)) {      final ZcEbEvalPortalPanel panel = new ZcEbEvalPortalPanel(evalPack, dialog, this, true);      dialog.addWindowListener(new WindowAdapter() {        @Override        public void windowClosed(WindowEvent e) {          //          panel.getExpertPanel().setStop(true);          //          panel.setStop(true);          super.windowClosed(e);        }        @Override        public void windowOpened(WindowEvent e) {          dialog.setSize(UIConstants.DIALOG_0_LEVEL_WIDTH, UIConstants.DIALOG_0_LEVEL_HEIGHT);          dialog.setLocation(0, 0);          ZcEbEvalBidTeamMember currExpert = zcEbEvalServiceDelegate.getZcEbCurrExpertEvalProgress(evalPack, requestMeta);          if (currExpert != null && Constants.EXPERT_EVAL_COMPL_OK.equals(currExpert.getExpertEvalProgress())) {            currExpert.setExpertEvalProgress(Constants.EXPERT_EVAL_SCORE);            currExpert.setProjCode(evalPack.getProjCode());            currExpert.setPackCode(evalPack.getPackCode());            zcEbEvalBidTeamServiceDelegate.updateEvalBidTeamMemberEvalProgress(currExpert, requestMeta);          }        }      });      dialog.add(panel);    } else if (tabStatus.equals(Constants.DONE_CONDITION_FIELD_CODE)) {      //根据评标方法的类型，显示不同的汇总界面：综合评分法 和性价比法 显示评分性汇总界面。最低报价价法 显示符合性汇总界面      boolean isScoreSum = true;      if (Constants.FORMULA_FACTOR_LOWERPRICE_TYPE.equals(evalPack.getFactorType())) {        isScoreSum = false;      }      ZcEbEvalResultPortalPanel panel = new ZcEbEvalResultPortalPanel(evalExpert, evalPack, isScoreSum);      dialog.add(panel);    }    dialog.setSize(UIConstants.DIALOG_0_LEVEL_WIDTH, UIConstants.DIALOG_0_LEVEL_WIDTH);    dialog.moveToScreenCenter();    dialog.setVisible(true);  }  private ZcEbEvalPack checkEvalPack(ZcEbEvalPack evalPack) {    ElementConditionDto dto = new ElementConditionDto();    dto.setPackCode(evalPack.getPackCode());    dto.setProjCode(evalPack.getProjCode());    return (ZcEbEvalPack) zcEbEvalServiceDelegate.getZcEbEvalPackList(dto, requestMeta).get(0);  }  public List getCheckedList() {    List<ZcEbEvalPack> beanList = new ArrayList<ZcEbEvalPack>();    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    MyTableModel model = (MyTableModel) table.getModel();    //Modal的数据    List list = model.getList();    Integer[] checkedRows = table.getCheckedRows();    for (Integer checkedRow : checkedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      ZcEbEvalPack bean = (ZcEbEvalPack) list.get(accordDataRow);      beanList.add(bean);    }    return beanList;  }  private void setButtonStatus() {    String panelId = WFConstants.AUDIT_TAB_STATUS_TODO;    if (topDataDisplay != null && topDataDisplay.getActiveTableDisplay() != null) {      panelId = topDataDisplay.getActiveTableDisplay().getStatus();    }    if (WFConstants.ZC_EB_EVAL_PACK_COMPLIANCE.equalsIgnoreCase(panelId)) {      scoreEvalButton.setEnabled(false);      complianceEvalButton.setEnabled(true);      finishComplianButton.setEnabled(true);      finishScoreButton.setEnabled(false);    } else if (WFConstants.ZC_EB_EVAL_PACK_SCORE.equalsIgnoreCase(panelId)) {      scoreEvalButton.setEnabled(true);      finishComplianButton.setEnabled(false);      finishScoreButton.setEnabled(true);      complianceEvalButton.setEnabled(false);    } else if (WFConstants.AUDIT_TAB_STATUS_DONE.equalsIgnoreCase(panelId)) {      scoreEvalButton.setEnabled(false);      complianceEvalButton.setEnabled(false);      finishComplianButton.setEnabled(false);      finishScoreButton.setEnabled(false);    }  }  public void refreshCurrentTabData() {    topSearchConditionArea.doSearch();  }  public void alertChengNuoPanel(ZcEbEvalPack evalPack) {    //校验是否承诺过。    Map map = new HashMap();    map.put("projCode", evalPack.getProjCode());    map.put("packCode", evalPack.getPackCode());    map.put("expertCode", evalPack.getEvalExpert().getExpertCode());    ZcEbExpertChengNuo expertChengNuo = zcEbEvalServiceDelegate.getZcExpertChengNuo(map, requestMeta);    if (expertChengNuo != null && "Y".equals(expertChengNuo.getChengNuo())) {      return;    } else {      if (expertChengNuo == null) {        expertChengNuo = new ZcEbExpertChengNuo();        expertChengNuo.setPackCode(evalPack.getPackCode());        expertChengNuo.setProjCode(evalPack.getProjCode());        expertChengNuo.setExpertCode(evalPack.getEvalExpert().getExpertCode());        expertChengNuo.setExpertName(evalPack.getEvalExpert().getExpertName());      }      JDialog chengNuoDialog = new JDialog(this.parentWindow, "专家承诺", Dialog.ModalityType.TOOLKIT_MODAL) {        protected void processWindowEvent(WindowEvent e) {          if (e.getID() == WindowEvent.WINDOW_CLOSING) {            if (chengNuoPanel.getExpertChengNuo() != null && "Y".equalsIgnoreCase(chengNuoPanel.getExpertChengNuo().getChengNuo())) {              super.processWindowEvent(e);            } else {              return;            }          }        }      };      chengNuoPanel = new ChengNuoPanel(expertChengNuo, this, chengNuoDialog);      chengNuoDialog.setSize((int) (UIConstants.SCREEN_WIDTH * 0.50), UIConstants.DIALOG_2_LEVEL_HEIGHT);      chengNuoDialog.add(chengNuoPanel);      ZcUtil.moveComponentToScreenCenter(chengNuoDialog);      chengNuoDialog.setVisible(true);    }  }  public static void main(String[] args) throws Exception {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        ZcEbEvalPackListPanel bill = new ZcEbEvalPackListPanel();        JFrame frame = new JFrame("陕西省政府采购中心电子评标系统");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(UIConstants.SCREEN_WIDTH - 200, UIConstants.SCREEN_HEIGHT - 100);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }}
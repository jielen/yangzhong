/**   * @(#) project: GK* @(#) file: EvalPortalPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.expertEval.evalPanel;import java.awt.Color;import java.awt.Dimension;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;import javax.swing.JComponent;import javax.swing.JSplitPane;import javax.swing.JTabbedPane;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.ExperMessageButton;import com.ufgov.zc.client.component.button.FinishComplianceEvalButton;import com.ufgov.zc.client.component.button.FinishScoreEvalButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.expertEval.component.evalItemPanel.ZcEbExpertEvalPanel;import com.ufgov.zc.client.zc.expertEval.component.ztbPanel.ZcEbEvalZBFilePanel;import com.ufgov.zc.client.zc.expertEval.component.ztbPanel.ZcEbTbFilePanel;import com.ufgov.zc.client.zc.expertEval.evalParam.ZcEbEvalParamListPanel;import com.ufgov.zc.client.zc.expertEval.expertMessage.ExpertMessageEditDialog;import com.ufgov.zc.client.zc.expertEval.providerBj.ProviderBajiaTable;import com.ufgov.zc.client.zc.expertEval.service.EvalDataService;import com.ufgov.zc.client.zc.expertqa.ExpertQuestionUIPanel;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.EvalPackProvider;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;/** * * @ClassName: ZcEbEvalPortalPanel* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2010-11-10 下午02:39:22* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbEvalPortalPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = 9032604833094589808L;  private GkBaseDialog parentDialog;  private static final String compoId = "ZC_EB_EVAL_PACK";  protected JTabbedPane mainPanel;  private JTabbedPane evalTabbedPane;  //评审参数  protected ZcEbEvalParamListPanel evalParamPanel;  //招标文件  protected ZcEbEvalZBFilePanel zbFilePanel;  //投标文件  private ZcEbTbFilePanel tbFilePanel;  private ZcEbEvalPackListPanel evalPackListPanel;  public boolean isStop = true;  //输入专家意见按钮  private ExperMessageButton experMessageButton = new ExperMessageButton();  //完成评分性评标  private FinishScoreEvalButton finishScoreButton = new FinishScoreEvalButton();  //完成符合性评标  private FinishComplianceEvalButton finishComplianButton = new FinishComplianceEvalButton();  //退出按钮  private FuncButton exitButton = new ExitButton();  //专家评标界面  private ZcEbExpertEvalPanel evalPanel;  private List<EvalPackProvider> providerDataList;  protected ZcEbEvalPack evalPack;  private EvalDataService evalDataService = new EvalDataService();  /**   * 评审类型   */  private String formulaType;  private ExpertQuestionUIPanel expertPanel;  public ExpertQuestionUIPanel getExpertPanel() {    return expertPanel;  }  public boolean isStop() {    return isStop;  }  public void setStop(boolean isStop) {    this.isStop = isStop;  }  private boolean isScoreEval = false;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  public IZcEbEvalServiceDelegate zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory.create(IZcEbEvalServiceDelegate.class,  "zcEbEvalServiceDelegate");  public GkBaseDialog getParentDialog() {    return parentDialog;  }  public void setParentDialog(GkBaseDialog parentDialog) {    this.parentDialog = parentDialog;  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    return editorList;  }  @Override  public JComponent createSubBillPanel() {    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);    splitPane.setOneTouchExpandable(true);    splitPane.setDividerLocation(400);    splitPane.setMinimumSize(new Dimension(0, 0));    splitPane.setDividerSize(5);    splitPane.putClientProperty("toExpand", true);    mainPanel = new JTabbedPane(JTabbedPane.TOP);    evalTabbedPane = new JTabbedPane();    splitPane.setTopComponent(mainPanel);    splitPane.setBottomComponent(evalTabbedPane);    return splitPane;  }  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(experMessageButton);    if (this.isScoreEval && evalPack.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_TECH_EVAL)) {      toolBar.add(finishScoreButton);    }    if (!this.isScoreEval && evalPack.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_FU_HE_EVAL)) {      toolBar.add(finishComplianButton);    }    toolBar.add(exitButton);    experMessageButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doCreateExpertMessage();      }    });    if (this.isScoreEval) {      finishScoreButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          evalPackListPanel.doFinishScoreEval(evalPack);        }      });    } else {      finishComplianButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          evalPackListPanel.doFinishComplianceEval(evalPack);        }      });    }    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退出        doExit();      }    });  }  private void doCreateExpertMessage() {    ZcEbEvalPack evalPack = this.evalPack;    ExpertMessageEditDialog editDialog = new ExpertMessageEditDialog(this.parentDialog, "专家评审意见", evalPack, evalPack.getEvalExpert(),    zcEbEvalServiceDelegate, isScoreEval);    ZcUtil.setMaxSizeWindow(editDialog);    ZcUtil.moveComponentToScreenCenter(editDialog);    editDialog.setVisible(true);  }  public ZcEbEvalPortalPanel(ZcEbEvalPack evalPack, GkBaseDialog parent, ZcEbEvalPackListPanel evalPackListPanel, boolean isScoreEval) {    this.evalPack = evalPack;    this.parentDialog = parent;    this.isScoreEval = isScoreEval;    if (isScoreEval) {      formulaType = EvalItemType.SCORE;    } else {      formulaType = EvalItemType.COMPLIANICE;    }    this.colCount = 3;    this.evalPackListPanel = evalPackListPanel;    requestMeta.setCompoId(compoId);    init();    //加载供应商的评审数据    initProviderDataList();    initMainPanel();    initEvalTabbedPane();  }  private void initProviderDataList() {    providerDataList = evalDataService.getProviderDataList(evalPack, formulaType);  }  protected void initMainPanel() {    evalParamPanel = new ZcEbEvalParamListPanel(evalPack);    if (evalPack.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_TECH_EVAL)) {      mainPanel.add(LangTransMeta.translate("ZC_EB_EVAL_PARAM_TITLE"), evalParamPanel);    }    zbFilePanel = new ZcEbEvalZBFilePanel(evalPack);    mainPanel.add("供应商报价信息", new ProviderBajiaTable(evalPack));    mainPanel.add("招标文件", zbFilePanel);    tbFilePanel = new ZcEbTbFilePanel(evalPack, formulaType, providerDataList);    mainPanel.add("投标文件", tbFilePanel);    //    JFrame xbFrame = new JFrame();    //TODO:暂时隐藏询标页签    //    refreshColor();    //    expertPanel = new ExpertQuestionUIPanel(xbFrame, "expert", requestMeta.getSvUserID(), evalPack    //      .getProjCode(), evalPack.getPackCode(), evalPack.getPackStatus());    //    //    //    expertPanel = new ExpertQuestionUIPanel(xbFrame, "expert", requestMeta.getSvUserName(), evalPack.getProjCode(), evalPack.getPackCode(), evalPack    //    //    //    //      .getPackStatus());    //    //询标    //    mainPanel.add("询标", expertPanel);    mainPanel.setSelectedComponent(tbFilePanel);  }  private void initEvalTabbedPane() {    if (providerDataList == null) {      return;    }    evalPanel = new ZcEbExpertEvalPanel(evalPack, formulaType, providerDataList);    evalTabbedPane.add("专家评标", evalPanel);  }  public void refreshColor() {    Runnable run = new Runnable() {      @Override      public void run() {        // TCJLODO Auto-generated method stub        while (isStop) {          if (ExpertQuestionUIPanel.isChangeColor && mainPanel.getSelectedIndex() != mainPanel.getComponentZOrder(expertPanel)) {            for (int i = 0; i < 2; i++) {              mainPanel.setBackgroundAt(mainPanel.getComponentZOrder(expertPanel), Color.red);              try {                Thread.sleep(500);              } catch (InterruptedException e) {                // TCJLODO Auto-generated catch block                e.printStackTrace();              }              mainPanel.setBackgroundAt(mainPanel.getComponentZOrder(expertPanel), new Color(243, 249, 255));              try {                Thread.sleep(500);              } catch (InterruptedException e) {                // TCJLODO Auto-generated catch block                e.printStackTrace();              }              mainPanel.setBackgroundAt(mainPanel.getComponentZOrder(expertPanel), Color.red);            }          } else if (mainPanel.getSelectedIndex() == mainPanel.getComponentZOrder(expertPanel)) {            mainPanel.setBackgroundAt(mainPanel.getComponentZOrder(expertPanel), new Color(243, 249, 255));            ExpertQuestionUIPanel.isChangeColor = false;          }        }        try {          Thread.sleep(500);        } catch (InterruptedException e) {          // TCJLODO Auto-generated catch block          e.printStackTrace();        }      }    };    Thread thread = new Thread(run);    thread.start();  }  public boolean doExit() {    setStop(false);    parentDialog.dispose();    return true;  }}
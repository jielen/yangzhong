/**   * @(#) project: ZFCG* @(#) file: ProviderBajiaTable.java* * Copyright 2011 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.expertEval.providerBj;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.io.File;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JPanel;import javax.swing.JSplitPane;import javax.swing.JTabbedPane;import javax.swing.SwingUtilities;import javax.swing.border.TitledBorder;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbEcbjToTableModelConverter;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.zc.activeztb.TbDocService;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcEbEcbj;import com.ufgov.zc.common.zc.model.ZcEbEcbjItem;import com.ufgov.zc.common.zc.model.ZcEbEvalPack;import com.ufgov.zc.common.zc.publish.IZcEbEcbjServiceDelegate;/*** @ClassName: ProviderBajiaTable* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2011-3-3 下午01:04:41* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ProviderBajiaTable extends JPanel {  protected JTablePanel baojiaTable = new JTablePanel();  private ZcEbEvalPack evalPack;  HashMap<String, JPanel> sumarryPanelCach = new HashMap<String, JPanel>();  private TbDocService tb = new TbDocService();  private String ecbjFileDownLoadPath;  private JTabbedPane tabTbPanel = new JTabbedPane();  protected RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private List<String> paramList = new ArrayList<String>();  public IZcEbEcbjServiceDelegate zcEbEcbjServiceDelegate = (IZcEbEcbjServiceDelegate) ServiceFactory.create(IZcEbEcbjServiceDelegate.class,  "zcEbEcbjServiceDelegate");  public ProviderBajiaTable(ZcEbEvalPack evalPack) {    this.evalPack = evalPack;    this.setLayout(new BorderLayout());    this.add(createBjTalbe(), BorderLayout.CENTER);  }  private JComponent createBjTalbe() {    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, true);    splitPane.setOneTouchExpandable(true);    // 只显示向下的箭头    splitPane.putClientProperty("toExpand", true);    splitPane.setDividerSize(10);    splitPane.setLocation(100, 200);    JTabbedPane tabPanel1 = new JTabbedPane();    //添加供应商的报价表格信息    baojiaTable.init();    baojiaTable.getSearchBar().setVisible(false);    ElementConditionDto dto = new ElementConditionDto();    dto.setProjCode(evalPack.getProjCode());    dto.setZcText0(evalPack.getPackCode());    List<ZcEbEcbj> ecbjList = zcEbEcbjServiceDelegate.getZcEbEcbjList(dto, requestMeta);    baojiaTable.setTableModel(ZcEbEcbjToTableModelConverter.convertToTableModel(ecbjList));    baojiaTable.getTable().addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (e.getClickCount() == 1 && SwingUtilities.isLeftMouseButton(e)) {          MyTableModel model = (MyTableModel) baojiaTable.getTable().getModel();          int selectRows = baojiaTable.getTable().getSelectedRow();          List dataList = ((MyTableModel) baojiaTable.getTable().getModel()).getList();          int accordDataRow = baojiaTable.getTable().convertRowIndexToModel(selectRows);          ZcEbEcbj ecbj = (ZcEbEcbj) dataList.get(accordDataRow);          tabTbPanel.removeAll();          createTbylbPanel(ecbj);        }      }    });    tabPanel1.add("供应商的报价信息", baojiaTable);    splitPane.setTopComponent(tabPanel1);    //供应商的报价一栏表    tabTbPanel = new JTabbedPane();    //    tabTbPanel.add("供应商的报价一览表", new JPanel());    splitPane.setBottomComponent(tabTbPanel);    return splitPane;  }  private void createTbylbPanel(ZcEbEcbj ecjb) {    paramList.add(ecjb.getProjName());    paramList.add(ecjb.getPackName());    paramList.add(GV.NODE_NAME_TBYLB);    paramList.add("Y");    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText0(ecjb.getSignupPackId());    List<ZcEbEcbjItem> list = zcEbEcbjServiceDelegate.getZcEbEcbjItemList(dto, requestMeta);    if (list.size() == 1) {      ZcEbEcbjItem ecbjItem = list.get(0);      if (ecbjItem.getStatus() != null && (ecbjItem.getStatus().equals(ZcSettingConstants.FIELD_TRANS_ZC_BJ_OPEN))) {        final String key = ecbjItem.getFileId() + "_" + ecbjItem.getPackCode();        if (this.sumarryPanelCach.containsKey(key)) {          tabTbPanel.add("投标一览表", this.sumarryPanelCach.get(key));        } else {          tabTbPanel.add("投标一览表", createSummaryPn(ecbjItem));        }      }    }    if (list.size() > 1) {      for (int i = 0; i < list.size(); i++) {        ZcEbEcbjItem ecbjItem = list.get(i);        if (ecbjItem.getStatus() != null && (ecbjItem.getStatus().equals(ZcSettingConstants.FIELD_TRANS_ZC_BJ_OPEN))) {          final String key = ecbjItem.getFileId() + "_" + ecbjItem.getPackCode();          if (this.sumarryPanelCach.containsKey(key)) {            tabTbPanel.add("第" + ecbjItem.getBjNo() + "报价", this.sumarryPanelCach.get(key));          } else {            tabTbPanel.add("第" + ecbjItem.getBjNo() + "报价", createSummaryPn(ecbjItem));          }        }      }    }  }  private JPanel createSummaryPn(ZcEbEcbjItem ecbjItem) {    JPanel panel;    ecbjFileDownLoadPath = ecbjItem.getProjCode() + File.separator + ecbjItem.getPackCode() + File.separator + tb.TB_DOC_TYPE_ECBJ + File.separator    + ecbjItem.getProviderName() + File.separator;    tb.setFileDownloadPath(tb.getDownloadFilePath() + File.separator + ecbjFileDownLoadPath);    File file = new File(tb.getFileDownloadPath() + File.separator + ecbjItem.getFileId());    if (!file.exists()) {      //获取报价金额            File tmpFile = tb.downLoadEcBjFile(ecbjItem.getFileId());      if (tmpFile == null) {        panel = new JPanel();        String info = "因为数据库中缺少对应的再次报价表文件数据，此次无法显示具体报价情况...";        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), info, TitledBorder.CENTER, TitledBorder.TOP, new Font(        "宋体", Font.BOLD, 15), Color.RED));        panel.setPreferredSize(new Dimension(600, 300));        return panel;      }      ecbjItem.setBjSum(tb.getEcbjSum(file));    }    panel = tb.getEcbjSummaryTable(file, paramList);    sumarryPanelCach.put(ecbjItem.getFileId() + "_" + ecbjItem.getPackCode(), panel);    return panel;  }}
package com.ufgov.zc.client.zc.completion;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.FocusEvent;import java.awt.event.FocusListener;import java.math.BigDecimal;import java.sql.SQLException;import java.util.ArrayList;import java.util.Date;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Set;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AgreeButton;import com.ufgov.zc.client.component.button.AuditFinalPassButton;import com.ufgov.zc.client.component.button.AuditPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.DisagreeButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.EnableButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FreezeButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.IsSendToNextButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SendToXieBanButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.event.EditSyncEvent;import com.ufgov.zc.client.component.event.EditSyncListener;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.ZcEbProCompletionHandler;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.EntrustFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityDialog;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextAreaFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.datacache.CompanyDataCache;import com.ufgov.zc.client.util.GridBagLayoutTools;import com.ufgov.zc.client.util.NumUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcBaseBill;import com.ufgov.zc.common.zc.model.ZcEbAuditSheet;import com.ufgov.zc.common.zc.model.ZcEbEvalReport;import com.ufgov.zc.common.zc.model.ZcEbProCompletion;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcXmcgHt;import com.ufgov.zc.common.zc.model.ZcXmcgHtExample;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbEvalServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbProCompletionDelegate;import com.ufgov.zc.common.zc.publish.IZcEbSignupServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcXmcgHtServiceDelegate;public class ZcEbProCompletionEditPanel extends AbstractMainSubEditPanel {  /**   *    */  private static final long serialVersionUID = 2586987679793430266L;  private static final Logger logger = Logger.getLogger(ZcEbProCompletionEditPanel.class);  private IZcEbEvalServiceDelegate zcEbEvalServiceDelegate = (IZcEbEvalServiceDelegate) ServiceFactory.create(IZcEbEvalServiceDelegate.class,  "zcEbEvalServiceDelegate");  private IZcEbProCompletionDelegate zcEbProCompletionDelegate = (IZcEbProCompletionDelegate) ServiceFactory.create(IZcEbProCompletionDelegate.class,  "zcEbProCompletionDelegate");  private IZcEbSignupServiceDelegate zcEbSignupServiceDelegate = (IZcEbSignupServiceDelegate) ServiceFactory.create(IZcEbSignupServiceDelegate.class,  "zcEbSignupServiceDelegate");  private IZcEbBaseServiceDelegate zcEbBaseServiceDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class,  "zcEbBaseServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_PRO_COMPLETION";  private FuncButton addButton = new AddButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private FuncButton enableButton = new EnableButton();  private FuncButton freezeButton = new FreezeButton();  public FuncButton printButton = new PrintButton();  //工作流送审  private FuncButton sendButton = new SendButton();  // 工作流收回  private FuncButton callbackButton = new CallbackButton();  //是否送主任审核  private FuncButton isSendToNextButton = new IsSendToNextButton();  // 工作流填写意见审核通过  private FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流审核通过  private FuncButton auditPassButton = new AuditPassButton();  // 工作流销审  private FuncButton unAuditButton = new UnauditButton();  // 工作流退回  private FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  private FuncButton traceButton = new TraceButton();  //工作流终审  private FuncButton auditFinalPassButton = new AuditFinalPassButton();  //同意  private FuncButton agreeButton = new AgreeButton();  //不同意  private FuncButton disagreeButton = new DisagreeButton();  //送协办人审核  private FuncButton sendToXieBanButton = new SendToXieBanButton();  private final ListCursor listCursor;  private ZcEbProCompletion oldSupplier;  private ZcEbProCompletionListPanel listPanel;  private JTablePanel tablePanel = new JTablePanel();  private ZcEbProCompletionEditPanel self = this;  private GkBaseDialog parent;  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId);  private ForeignEntityDialog forenEntityDialog;  private GridBagLayoutTools tool = null;  private JTabbedPane tabPane;  private JTablePanel tablePanelZyxm = new JTablePanel("tablePanelZyxm");  private JTablePanel tablePanelSpBsType = new JTablePanel("tablePanelSpBsType");  List<AbstractFieldEditor> moreFieldEditorList;  private EntrustFieldEditor entrustFieldEditor;  private MoneyFieldEditor actualSaveMoney;  private MoneyFieldEditor actualSaveRate;  private MoneyFieldEditor actualStockMoney;  public JComponent createSubBillPanel() {    tabPane = new JTabbedPane();    this.createSubTabPane(tablePanelZyxm, "项目竣工", true, "zyxm");    return tabPane;  }  public ZcEbProCompletionEditPanel(ZcEbProCompletionDialog dialog, ListCursor listCursor, String tabStatus, ZcEbProCompletionListPanel listPanel) {    super(ZcEbProCompletion.class, listPanel.getBillElementMeta());    this.listCursor = listCursor;    this.listPanel = listPanel;    this.parent = dialog;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("项目竣工"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();  }  protected void init() {    this.initToolBar(toolBar);    this.setLayout(new BorderLayout());    this.add(toolBar, BorderLayout.NORTH);    this.add(workPanel, BorderLayout.CENTER);    initFieldEditorPanel();    workPanel.setLayout(new BorderLayout());    workPanel.add(fieldEditorPanel, BorderLayout.NORTH);  }  private void refreshData() {    ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) listCursor.getCurrentObject();    if (zcEbProCompletion == null) {// 新增页面selectBrandSqlPart      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      zcEbProCompletion = new ZcEbProCompletion();      zcEbProCompletion.setCompletionCode("自动编号");      zcEbProCompletion.setChengbanStatus("0");      zcEbProCompletion.setChengbanMan(requestMeta.getSvUserName());      zcEbProCompletion.setChengbanDepart(CompanyDataCache.getName(requestMeta.getSvCoCode()));      setDefualtValue(zcEbProCompletion, ZcSettingConstants.PAGE_STATUS_NEW);      List lst = new ArrayList();      lst.add(zcEbProCompletion);      this.listCursor.setDataList(lst, -1);      listCursor.setCurrentObject(zcEbProCompletion);      zcEbProCompletion.setNewAdd(true);      this.setEditingObject(zcEbProCompletion);    } else {      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      zcEbProCompletion.setNewAdd(false);      listCursor.setCurrentObject(zcEbProCompletion);      this.setEditingObject(zcEbProCompletion);      updateFieldEditorsEditable();    }    setOldObject();    updateWFEditorEditable(zcEbProCompletion, requestMeta);    setButtonStatus(zcEbProCompletion, requestMeta, this.listCursor);    Long processInstId = zcEbProCompletion.getProcessInstId();    if (processInstId == null || processInstId.longValue() < 0) {      sendToXieBanButton.setVisible(false);    }    this.setButtonStatus();  }  private void refreshSubTableData(ZcEbProCompletion zcEbProCompletion) {    //tablePanelZyxm.setTableModel(ZcEbProArgueDetailToTableModelConverter.convertZcEbAuditSheetDetailToTableMode(zcEbProArgue.getDetail()));    setZyxmTableProperty(tablePanelZyxm.getTable());    // setMoreSupplierInfoTable();  }  private void setZyxmTableProperty(final JTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());  }  protected void initFieldEditorPanel() {    //BillElementMeta eleMeta = BillElementMeta.getBillElementMetaWithoutNd(compoId);    fieldEditors = createFieldEditors();    fieldEditorPanel.setLayout(new BorderLayout());    fieldEditorPanel.add(this.makeFieldEditorsPanel(), BorderLayout.NORTH);    this.fieldEditorPanel.repaint();  }  private Component makeFieldEditorsPanel() {    JPanel edPanel = new JPanel();    moreFieldEditorList = new ArrayList<AbstractFieldEditor>();    // createMoreFieldEditorList(fieldEditors);    tool = null;    tool = new GridBagLayoutTools();    tool.setColCount(3);    tool.setFieldEditorList(fieldEditors);    tool.layoutFieldEditorPanel(edPanel, ZcEbProCompletion.class, this.compoId);    tool.setCurrEditingObject(this.listCursor.getCurrentObject());    tool.setOldObject(this.listCursor.getCurrentObject());    edPanel.repaint();    return edPanel;  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    ZcEbProCompletionHandler handler = new ZcEbProCompletionHandler() {      public void excute(List selectedDatas) {        if (selectedDatas == null && selectedDatas.size() == 0) {          JOptionPane.showMessageDialog(self, "请选择一个项目进行竣工！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        if (selectedDatas.size() > 1) {          JOptionPane.showMessageDialog(self, "请只选择一个项目进行竣工！", "提示", JOptionPane.INFORMATION_MESSAGE);          return;        }        ZcEbProj zepa = (ZcEbProj) selectedDatas.get(0);        ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) listCursor.getCurrentObject();        zcEbProCompletion.setProCode(zepa.getProjCode());        zcEbProCompletion.setProName(zepa.getProjName());        zcEbProCompletion.setProContent(zepa.getProjName());        zcEbProCompletion.setPlanMoney(zepa.getProjSum());        zcEbProCompletion.setOrgCode(zepa.getOrg());        zcEbProCompletion.setAgency(zepa.getAgency());        ElementConditionDto wwdto = new ElementConditionDto();        wwdto.setProjCode(zepa.getProjCode());        List wwLis = zcEbBaseServiceDelegate.getForeignEntitySelectedData("ZcEbGuiDang.selectSheetList", wwdto, requestMeta);        if (wwLis != null && wwLis.size() > 0) {          ZcEbAuditSheet zeas = (ZcEbAuditSheet) wwLis.get(0);          zcEbProCompletion.setCoCode(zeas.getZcEbEntrust().getCoCode());          zcEbProCompletion.setCoName(CompanyDataCache.getName(zeas.getZcEbEntrust().getCoCode()));          zcEbProCompletion.setEntrustCode(zeas.getSn());        }        zcEbProCompletion.setCaiGouType(AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", zepa.getPurType()));        StringBuffer departsStr = new StringBuffer(100);        ElementConditionDto sdto = new ElementConditionDto();        sdto.setProjCode(zepa.getProjCode());        requestMeta.setCompoId("ZC_EB_SIGNUP");        List departs = zcEbSignupServiceDelegate.getZcEbSignupList(sdto, requestMeta);//zcEbProCompletionDelegate.getTenderDepartsByEntrustSn(zepa.getSn(), requestMeta);        requestMeta.setCompoId("ZC_PRO_COMPLETION");        Set deps = new HashSet();        for (Iterator iterator = departs.iterator(); iterator.hasNext();) {          com.ufgov.zc.common.zc.model.ZcEbSignup items = (com.ufgov.zc.common.zc.model.ZcEbSignup) iterator.next();          if (items.getProviderName() != null) {            deps.add(items.getProviderName());          }        }        for (Iterator iterator2 = deps.iterator(); iterator2.hasNext();) {          String providerName = (String) iterator2.next();          departsStr.append(providerName).append(";\t");        }        zcEbProCompletion.setTenderDepart(departsStr.toString());        ElementConditionDto dto = new ElementConditionDto();        dto.setStatus(ZcSettingConstants.PROJECT_STATUS_FINISH);        dto.setProjCode(zepa.getProjCode());        dto.setNd(zepa.getNd());        requestMeta.setCompoId("ZC_EB_EVAL");        List reportList = zcEbEvalServiceDelegate.getZcEbEvalReportList(dto, requestMeta);        requestMeta.setCompoId("ZC_PRO_COMPLETION");        StringBuffer reportDeps = new StringBuffer(100);        for (Iterator iterator2 = reportList.iterator(); iterator2.hasNext();) {          ZcEbEvalReport report = (ZcEbEvalReport) iterator2.next();          if (report.getPackName() != null) {            reportDeps.append(report.getPackName()).append("：").append(report.getProviderName() == null ? "" : report.getProviderName())            .append(";\n");          } else {            reportDeps.append(report.getProviderName() == null ? "" : report.getProviderName()).append(";\n");          }        }        zcEbProCompletion.setBidDepart(reportDeps.toString());        IZcXmcgHtServiceDelegate zcXmcgHtServiceDelegate = (IZcXmcgHtServiceDelegate) ServiceFactory.create(IZcXmcgHtServiceDelegate.class,        "zcXmcgHtServiceDelegate");        ZcXmcgHtExample exp = new ZcXmcgHtExample();        exp.createCriteria().andZcMakeCodeEqualTo(zepa.getProjCode());        exp.setOrderByClause("zc_sgn_date");        BigDecimal htMoneySum = new BigDecimal("0");        Date minHtSingDate = null;        try {          List list = zcXmcgHtServiceDelegate.getZcXmcgHt(exp, requestMeta);          for (Iterator iterator = list.iterator(); iterator.hasNext();) {            ZcXmcgHt ht = (ZcXmcgHt) iterator.next();            BigDecimal htMoney = ht.getZcHtNum();            if (htMoney == null) {              htMoney = BigDecimal.ZERO;            }            if (minHtSingDate == null) {              minHtSingDate = ht.getZcSgnDate();            }            htMoneySum = htMoneySum.add(htMoney);          }        } catch (SQLException e) {          // TODO Auto-generated catch block          e.printStackTrace();        }        zcEbProCompletion.setActualStockMoney(htMoneySum);        zcEbProCompletion.setCaiGouTime(minHtSingDate);        setEditingObject(zcEbProCompletion);        entrustFieldEditor.getField().setValue(zepa.getProjCode());        actualStockMoney.fireEditSynced();      }      public void afterClear() {        ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) listCursor.getCurrentObject();        zcEbProCompletion.setProCode(null);        zcEbProCompletion.setProName(null);        zcEbProCompletion.setActualSaveMoney(BigDecimal.ZERO);        zcEbProCompletion.setActualSaveRate(BigDecimal.ZERO);        zcEbProCompletion.setActualStockMoney(BigDecimal.ZERO);        zcEbProCompletion.setChengbanDepart(null);        zcEbProCompletion.setCaiGouTime(null);        zcEbProCompletion.setProContent(null);        zcEbProCompletion.setMoneySource(null);        zcEbProCompletion.setCaiGouType(null);        zcEbProCompletion.setMarketPrice(BigDecimal.ZERO);        zcEbProCompletion.setEntrustCode(null);        zcEbProCompletion.setBidDepart(null);        zcEbProCompletion.setBidDepartCode(null);        zcEbProCompletion.setTenderDepart(null);        zcEbProCompletion.setTenderCode(null);        setEditingObject(zcEbProCompletion);      }    };    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    ElementConditionDto entrustDto = new ElementConditionDto();    entrustDto.setCoCode("finish");    entrustFieldEditor = new EntrustFieldEditor(handler.getSqlId(), entrustDto, 20, handler, handler.getColumNames(), LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_EB_ZC_MAKE_CODE), "proCode");    //entrustFieldEditor.getField().setEnabled(false);    editorList.add(entrustFieldEditor);    TextFieldEditor proNameEditor = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJECT_NAME), "proName");    editorList.add(proNameEditor);    TextFieldEditor proOrg = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_NAME), "coName");    editorList.add(proOrg);    TextFieldEditor completionCode = new TextFieldEditor("竣工单编号", "completionCode");    editorList.add(completionCode);    DateFieldEditor caiGouTime = new DateFieldEditor("采购时间", "caiGouTime");    editorList.add(caiGouTime);    TextFieldEditor proContent = new TextFieldEditor("项目内容", "proContent");    editorList.add(proContent);    TextFieldEditor entrustCode = new TextFieldEditor("批办单编号", "entrustCode");    editorList.add(entrustCode);    TextFieldEditor caiGouType = new TextFieldEditor("采购方式", "caiGouType");    editorList.add(caiGouType);    TextFieldEditor moneySource = new TextFieldEditor("资金来源", "moneySource");    editorList.add(moneySource);    TextFieldEditor moneyCloseAccount = new TextFieldEditor("资金结算方式", "moneyCloseAccount");    editorList.add(moneyCloseAccount);    final MoneyFieldEditor marketPrice = new MoneyFieldEditor("市场价", "marketPrice");    marketPrice.getMoneyField().addFocusListener(new FocusListener() {      @Override      public void focusGained(FocusEvent e) {        // TODO Auto-generated method stub        marketPrice.getMoneyField().selectAll();      }      @Override      public void focusLost(FocusEvent e) {        // TODO Auto-generated method stub      }    });    editorList.add(marketPrice);    MoneyFieldEditor planMoney = new MoneyFieldEditor("计划金额", "planMoney");    planMoney.setEnabled(false);    editorList.add(planMoney);    actualStockMoney = new MoneyFieldEditor("实际采购额", "actualStockMoney");    actualStockMoney.getMoneyField().addFocusListener(new FocusListener() {      @Override      public void focusGained(FocusEvent e) {        // TODO Auto-generated method stub        actualStockMoney.getMoneyField().selectAll();      }      @Override      public void focusLost(FocusEvent e) {        // TODO Auto-generated method stub      }    });    actualStockMoney.addEditSyncListener(new EditSyncListener() {      @Override      public void sync(EditSyncEvent e) {        // TODO Auto-generated method stub        ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) self.listCursor.getCurrentObject();        if (zcEbProCompletion == null || zcEbProCompletion.getPlanMoney() == null || zcEbProCompletion.getPlanMoney().equals(BigDecimal.ZERO)) {          return;        }        if (zcEbProCompletion.getActualSaveMoney() == null) {          zcEbProCompletion.setActualSaveMoney(BigDecimal.ZERO);        }        BigDecimal currentVal = (BigDecimal) actualStockMoney.getValue();        currentVal = currentVal == null ? BigDecimal.ZERO : currentVal;        zcEbProCompletion.setActualSaveMoney(zcEbProCompletion.getPlanMoney().subtract(currentVal));        double rate = zcEbProCompletion.getActualSaveMoney().doubleValue() / zcEbProCompletion.getPlanMoney().doubleValue();        zcEbProCompletion.setActualSaveRate(new BigDecimal(rate).multiply(new BigDecimal("100")));        actualSaveMoney.setValue(zcEbProCompletion);        actualSaveRate.setValue(zcEbProCompletion);      }    });    editorList.add(actualStockMoney);    actualSaveMoney = new MoneyFieldEditor("实际节约额", "actualSaveMoney");    actualSaveMoney.setEnabled(false);    editorList.add(actualSaveMoney);    actualSaveRate = new MoneyFieldEditor("实际节约率(%)", "actualSaveRate");    actualSaveRate.setEnabled(false);    editorList.add(actualSaveRate);    TextFieldEditor supervisionDepart = new TextFieldEditor("监理单位", "supervisionDepart");    editorList.add(supervisionDepart);    //ZC_ZCGZ_STD    AsValFieldEditor chengbanStatus = new AsValFieldEditor("项目性质", "projectNature", "PROJECT_XING_ZHI");    editorList.add(chengbanStatus);    TextFieldEditor chengbanMan = new TextFieldEditor("承办人", "chengbanMan");    chengbanMan.setEnabled(false);    editorList.add(chengbanMan);    TextFieldEditor chengbanDepart = new TextFieldEditor("承办部门", "chengbanDepart");    chengbanDepart.setEnabled(false);    chengbanDepart.setVisible(false);    editorList.add(chengbanDepart);    DateFieldEditor chengbanDate = new DateFieldEditor("承办时间", "chengbanDate");    chengbanDate.setVisible(false);    editorList.add(chengbanDate);    TextAreaFieldEditor bidDepart = new TextAreaFieldEditor("中标单位", "bidDepart", 200, 2, 6);    editorList.add(bidDepart);    TextAreaFieldEditor tenderDepart = new TextAreaFieldEditor("投标单位", "tenderDepart", 400, 3, 6);    editorList.add(tenderDepart);    TextAreaFieldEditor chengbanMsg = new TextAreaFieldEditor("承办意见", "chengbanMsg", 400, 3, 6);    editorList.add(chengbanMsg);    return editorList;  }  private void createSubTabPane(final JTablePanel subPanel, String title, boolean needToolBar, final String which) {    subPanel.setVisible(false);  }  private void setDefualtValue(ZcEbProCompletion com, String pageStatus) {    if (pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {    }  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null        && (fd.getFieldName().equals("proName") || fd.getFieldName().equals("completionCode") || fd.getFieldName().equals("entrustCode")        || fd.getFieldName().equals("caiGouType") || fd.getFieldName().equals("zcCoName")) || fd.getFieldName().equals("chengbanDepart")        || fd.getFieldName().equals("chengbanStatus") || fd.getFieldName().equals("actualSaveMoney") || fd.getFieldName().equals("actualSaveRate")        || fd.getFieldName().equals("chengbanMan") || fd.getFieldName().equals("planMoney")) {          fd.setEnabled(false);        } else {          fd.setEnabled(true);        }      }      this.updateEditable(true);      //this.saveButton.setEnabled(true);      //this.editButton.setEnabled(false);      this.setButtonStatus();    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      // for (AbstractFieldEditor fd : this.tool.getFieldEditorList()) {      // fd.setEnabled(false);      // }      this.updateEditable(false);      //this.saveButton.setEnabled(false);      //this.editButton.setEnabled(true);      this.setButtonStatus();    }  }  private void updateEditable(boolean flag) {    this.tablePanel.getTable().setEnabled(flag);  }  private void setOldObject() {    this.oldSupplier = (ZcEbProCompletion) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    // toolBar.add(addButton);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    toolBar.add(enableButton);    toolBar.add(sendButton);    toolBar.add(callbackButton);    toolBar.add(suggestPassButton);    toolBar.add(auditPassButton);    toolBar.add(auditFinalPassButton);    toolBar.add(agreeButton);    toolBar.add(disagreeButton);    toolBar.add(sendToXieBanButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(traceButton);    toolBar.add(isSendToNextButton);    toolBar.add(printButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    deleteButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doSave();      }    });    enableButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doEnable();      }    });    freezeButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doFreeze();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });    traceButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doTrace();      }    });    callbackButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doCallback();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopTableEditing();        // 审核        doAudit();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核        doSuggestPass();      }    });    agreeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 同意        doAgree();      }    });    disagreeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 不同意        doDisagree();      }    });    sendToXieBanButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送协办人        doSendToXieBan();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 销审        doUnAudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退回        doUnTread();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSend();      }    });    isSendToNextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSendNext();      }    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrint();      }    });    auditFinalPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doFinalPass();      }    });  }  /**   * 送协办人   */  private void doSendToXieBan() {    ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.sendToXieBanButton.getFuncId());    executeAudit(zcEbProCompletion, ZcSettingConstants.IS_GOON_AUDIT_NO, null);  }  /**   * 同意   */  private void doAgree() {    ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.agreeButton.getFuncId());    Integer auditFlag = zcEbProCompletion.getIsGoonAudit();    auditFlag = ZcUtil.getAuditFlagValue(auditFlag, 0, requestMeta);    executeAudit(zcEbProCompletion, auditFlag, null);  }  /**   * 不同意   */  private void doDisagree() {    ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.disagreeButton.getFuncId());    Integer auditFlag = zcEbProCompletion.getIsGoonAudit();    auditFlag = ZcUtil.getAuditFlagValue(auditFlag, 1, requestMeta);    executeAudit(zcEbProCompletion, auditFlag, ZcSettingConstants.AUDIT_DISAGREE_DEFULT_MESSAGE);  }  private void doFinalPass() {    ZcEbProCompletion bill = (ZcEbProCompletion) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.auditFinalPassButton.getFuncId());    executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_YES, null);  }  private void doPrint() {    this.requestMeta.setFuncId(this.printButton.getFuncId());    this.requestMeta.setPageType(this.compoId + "_L");    try {      ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) this.listCursor.getCurrentObject();      System.out.println(zcEbProCompletion.getId());      String url = WorkEnv.getInstance().getWebRoot() + "app/page/xjprint/toCompletionPrint.do?code=" + zcEbProCompletion.getCompletionCode();      ZcUtil.anyBrowse(url);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印预览出错！\n" + e.getMessage(), "错误", 0);    }  }  private void doAdd() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;    ZcEbProCompletion zcEbProCompletion = new ZcEbProCompletion();    setDefualtValue(zcEbProCompletion, ZcSettingConstants.PAGE_STATUS_NEW);    listCursor.setCurrentObject(zcEbProCompletion);    // setEditingObject(zcEbProArgue);    refreshData();    updateFieldEditorsEditable();    setDefualtValue(zcEbProCompletion, this.pageStatus);    setButtonStatus();  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  private void doDelete() {    ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) this.listCursor.getCurrentObject();    int num = JOptionPane.showConfirmDialog(this, "确认删除当前数据？", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      String errorInfo = "";      try {        //this.zcEbProCompletionDelegate.deleteZcEbProCompletionById(zcEbProCompletion.getId(), this.requestMeta);        this.zcEbProCompletionDelegate.deleteZcEbProCompletionByCodeFN(zcEbProCompletion.getCompletionCode(), this.requestMeta);        JOptionPane.showMessageDialog(self, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;        this.listCursor.removeCurrentObject();        refreshData();        if (this.forenEntityDialog == null) {          this.listPanel.refreshCurrentTabData();        } else {          // refreshParentForeignDialog(null);        }        updateFieldEditorsEditable();        setButtonStatus();      } catch (Exception e) {        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doEnable() {    requestMeta.setFuncId(enableButton.getFuncId());    ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) this.listCursor.getCurrentObject();    // zcEbProArgue.setStatus(ZcSettingConstants.SUPPLIER_START_TO_USE_STATUS);    boolean success = true;    String errorInfo = "";    try {      this.zcEbProCompletionDelegate.updateZcEbProCompletionFN(zcEbProCompletion, this.requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(zcEbProCompletion);      if (this.forenEntityDialog == null) {        // this.listPanel.refreshCurrentTabData();      } else {        refreshParentForeignDialog(zcEbProCompletion);      }      this.oldSupplier = (ZcEbProCompletion) ObjectUtil.deepCopy(zcEbProCompletion);      JOptionPane.showMessageDialog(self, "启用成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      updateFieldEditorsEditable();      setButtonStatus();    } else {      JOptionPane.showMessageDialog(this, "启用失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doFreeze() {    this.requestMeta.setFuncId(freezeButton.getFuncId());    ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) this.listCursor.getCurrentObject();    // supplier.setStatus("3");    boolean success = true;    String errorInfo = "";    try {      this.zcEbProCompletionDelegate.updateZcEbProCompletionFN(zcEbProCompletion, this.requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(zcEbProCompletion);      if (this.forenEntityDialog == null) {        // this.listPanel.refreshCurrentTabData();      } else {        refreshParentForeignDialog(null);      }      this.oldSupplier = (ZcEbProCompletion) ObjectUtil.deepCopy(zcEbProCompletion);      JOptionPane.showMessageDialog(self, "冻结成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      updateFieldEditorsEditable();      setButtonStatus();    } else {      JOptionPane.showMessageDialog(this, "冻结失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrevious() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(this.oldSupplier);      }    }    listCursor.previous();    refreshData();    setButtonStatus();    this.updateFieldEditorsEditable();  }  private void doNext() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(this.oldSupplier);      }    }    listCursor.next();    refreshData();    setButtonStatus();    this.updateFieldEditorsEditable();  }  public void doExit() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    this.parent.dispose();  }  public String checkValue() {    ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) this.listCursor.getCurrentObject();    StringBuffer str = new StringBuffer();    if (zcEbProCompletion.getActualStockMoney() == null || BigDecimal.ZERO.compareTo(zcEbProCompletion.getActualStockMoney()) == 0) {      str.append("实际采购额不能为0；\n");    }    if (zcEbProCompletion.getChengbanMsg() == null || "".equals(zcEbProCompletion.getChengbanMsg())) {      str.append("承办意见不能为空；\n");    }    if (zcEbProCompletion.getMoneySource() == null || "".equals(zcEbProCompletion.getMoneySource())) {      str.append("资金来源不能为空；\n");    }    if (zcEbProCompletion.getProjectNature() == null || "".equals(zcEbProCompletion.getProjectNature())) {      str.append("项目性质不能为空；\n");    }    return str.toString();  }  public boolean doSave() {    stopTableEditing();    if (!isDataChanged()) {      this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    //    String erro = checkValue();    //    if (erro.length() > 0) {    //      JOptionPane.showMessageDialog(self, erro + "不允许保存！", "提示", JOptionPane.INFORMATION_MESSAGE);    //      return false;    //    }    ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) this.listCursor.getCurrentObject();    if (!checkBeforeSave())      return false;    boolean success = true;    String errorInfo = "";    try {      if (zcEbProCompletion.getCompletionId() == null || "".equals(zcEbProCompletion.getCompletionId())) {        String code = NumUtil.getNum(compoId, "COMPLETION_CODE", zcEbProCompletion, requestMeta);        zcEbProCompletion.setCompletionCode(code);        zcEbProCompletion.setEditUserId(WorkEnv.getInstance().getCurrUserId());        zcEbProCompletion.setEditUserName(WorkEnv.getInstance().getCurrUserName());        zcEbProCompletion = this.zcEbProCompletionDelegate.insertZcEbProCompletionFN(zcEbProCompletion, this.requestMeta);      } else {        this.zcEbProCompletionDelegate.updateZcEbProCompletionFN(zcEbProCompletion, this.requestMeta);      }    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(zcEbProCompletion);      this.oldSupplier = (ZcEbProCompletion) ObjectUtil.deepCopy(zcEbProCompletion);      if (this.forenEntityDialog == null) {        this.listPanel.refreshCurrentTabData();      } else {        refreshParentForeignDialog(zcEbProCompletion);      }      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;      this.sendButton.setEnabled(true);      refreshData();      updateFieldEditorsEditable();      setButtonStatus();      setOldObject();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  private boolean checkBeforeSave() {    List notNullBillElementList = this.billElementMeta.getNotNullBillElement();    ZcEbProCompletion zcEbProCompletion = (ZcEbProCompletion) this.listCursor.getCurrentObject();    StringBuilder errorInfo = new StringBuilder();    String validateInfo = ZcUtil.validateBillElementNull(zcEbProCompletion, notNullBillElementList);    if (validateInfo.length() != 0) {      errorInfo.append("").append(validateInfo.toString()).append("\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  public void doHelp() {    setButtonStatus();  }  private void stopTableEditing() {    JPageableFixedTable table = this.tablePanel.getTable();    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }    if (tablePanelSpBsType.getTable().isEditing()) {      tablePanelSpBsType.getTable().getCellEditor().stopCellEditing();    }  }  private void refreshAll(ZcEbProCompletion afterSaveBill, boolean isRefreshButton) {    this.listCursor.setCurrentObject(afterSaveBill);    refreshData();    //    if (isRefreshButton) {    //      setButtonStatus(afterSaveBill, requestMeta, this.listCursor);    //    }  }  private void doSend() {    boolean success = true;    ZcEbProCompletion afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.sendButton.getFuncId());      ZcEbProCompletion comp = (ZcEbProCompletion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      comp.setAuditorId(WorkEnv.getInstance().getCurrUserId());      this.listPanel.getZcEbProCompletionDelegate().newCommitFN(comp, true, requestMeta);      ElementConditionDto condition = new ElementConditionDto();      condition.setZcText1(comp.getCompletionCode());      List list = this.listPanel.getZcEbProCompletionDelegate().getZcEbProCompletionByCondition(condition, requestMeta);      if (list.size() > 0) {        afterSaveBill = (ZcEbProCompletion) list.get(0);      }    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      if (afterSaveBill != null) {        this.refreshAll(afterSaveBill, true);      }      this.listPanel.refreshCurrentTabData();    }  }  /*   * 填写意见审核   */  private void doSuggestPass() {    ZcEbProCompletion comp = (ZcEbProCompletion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());    requestMeta.setFuncId(this.suggestPassButton.getFuncId());    String jianShenRoleId = AsOptionMeta.getOptVal("OPT_ZC_CGZX_JSKY_ROLE");//监审组员角色    if (WorkEnv.getInstance().containRole(jianShenRoleId)) {//如果是监审员，则不修改审批状态      Integer auditFlag = comp.getIsGoonAudit();      executeAudit(comp, auditFlag, null);    } else {      executeAudit(comp, ZcSettingConstants.IS_GOON_AUDIT_NO, null);    }  }  /*   * 审核   */  private void doAudit() {    if (!checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    ZcEbProCompletion afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.auditPassButton.getFuncId());      ZcEbProCompletion comp = (ZcEbProCompletion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      comp.setAuditorId(WorkEnv.getInstance().getCurrUserId());      listPanel.getZcEbProCompletionDelegate().auditFN(comp, requestMeta);      ElementConditionDto condition = new ElementConditionDto();      condition.setZcText1(comp.getCompletionCode());      List list = this.listPanel.getZcEbProCompletionDelegate().getZcEbProCompletionByCondition(condition, requestMeta);      if (list.size() > 0) {        afterSaveBill = (ZcEbProCompletion) list.get(0);      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 销审   */  private void doUnAudit() {    boolean success = true;    ZcEbProCompletion afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unAuditButton.getFuncId());      ZcEbProCompletion comp = (ZcEbProCompletion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      comp.setAuditorId(WorkEnv.getInstance().getCurrUserId());      listPanel.getZcEbProCompletionDelegate().unAuditFN(comp, requestMeta);      ElementConditionDto condition = new ElementConditionDto();      condition.setZcText1(comp.getCompletionCode());      List list = this.listPanel.getZcEbProCompletionDelegate().getZcEbProCompletionByCondition(condition, requestMeta);      if (list.size() > 0) {        afterSaveBill = (ZcEbProCompletion) list.get(0);      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 退回   */  private void doUnTread() {    if (!checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcEbProCompletion afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unTreadButton.getFuncId());      ZcEbProCompletion comp = (ZcEbProCompletion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      comp.setAuditorId(WorkEnv.getInstance().getCurrUserId());      comp.setComment(commentDialog.getComment());      afterSaveBill = listPanel.getZcEbProCompletionDelegate().untreadFN(comp, requestMeta);      ElementConditionDto condition = new ElementConditionDto();      condition.setZcText1(comp.getCompletionCode());      List list = this.listPanel.getZcEbProCompletionDelegate().getZcEbProCompletionByCondition(condition, requestMeta);      if (list.size() > 0) {        afterSaveBill = (ZcEbProCompletion) list.get(0);      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 流程跟踪   */  private void doTrace() {    ZcBaseBill bean = (ZcBaseBill) this.listCursor.getCurrentObject();    if (bean == null) {      return;    }    ZcUtil.showTraceDialog(bean, compoId);  }  /*   * 收回   */  private void doCallback() {    boolean success = true;    ZcEbProCompletion afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.callbackButton.getFuncId());      ZcEbProCompletion comp = (ZcEbProCompletion) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      comp.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getZcEbProCompletionDelegate().callbackFN(comp, requestMeta);      ElementConditionDto condition = new ElementConditionDto();      condition.setZcText1(comp.getCompletionCode());      List list = this.listPanel.getZcEbProCompletionDelegate().getZcEbProCompletionByCondition(condition, requestMeta);      if (list.size() > 0) {        afterSaveBill = (ZcEbProCompletion) list.get(0);      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doSendNext() {    ZcEbProCompletion bill = (ZcEbProCompletion) this.listCursor.getCurrentObject();    //int sel = JOptionPane.showConfirmDialog(this, "是否送主任审核？");    requestMeta.setFuncId(this.isSendToNextButton.getFuncId());    //if (sel == JOptionPane.OK_OPTION) {    executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_YES, null);    //    } else {    //      executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_NO);    //    }  }  private void executeAudit(ZcEbProCompletion bill, Integer isGoonAudit, String defaultMsg) {    GkCommentDialog commentDialog = null;    if (defaultMsg == null) {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL);    } else {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL, defaultMsg);    }    if (commentDialog.cancel) {      return;    }    boolean success = true;    String errorInfo = "";    ZcEbProCompletion afterSaveBill = null;    try {      isGoonAudit = isGoonAudit == null ? 0 : isGoonAudit;      bill.setIsGoonAudit(isGoonAudit);      bill.setComment(commentDialog.getComment());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      this.listPanel.getZcEbProCompletionDelegate().updateZcEbProCompletionFN(bill, requestMeta);      listPanel.getZcEbProCompletionDelegate().auditFN(bill, requestMeta);      ElementConditionDto condition = new ElementConditionDto();      condition.setZcText1(bill.getCompletionCode());      List list = this.listPanel.getZcEbProCompletionDelegate().getZcEbProCompletionByCondition(condition, requestMeta);      if (list.size() > 0) {        afterSaveBill = (ZcEbProCompletion) list.get(0);      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doCalc() {    //    if (checkBeforeCalc()) {    //      return;    //    }    //    ZcXmcgHt zcXmcgHt = (ZcXmcgHt) this.listCursor.getCurrentObject();    //    String errorinfo = Calc(zcXmcgHt);    //    if (errorinfo != null && !"".equals(errorinfo)) {    //      errorinfo = "<html>" + errorinfo + "</html>";    //      JOptionPane.showMessageDialog(this, errorinfo, "提示", JOptionPane.ERROR_MESSAGE);    //      return;    //    } else {    //      JOptionPane.showMessageDialog(this, "计算完成", "提示", JOptionPane.INFORMATION_MESSAGE);    //    }  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldSupplier).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  /**   * 刷新对话框的数据   *    * @param supplier   *            Administrator 2010-5-18   */  void refreshParentForeignDialog(ZcEbProCompletion zcEbProCompletion) {    this.forenEntityDialog.refresh(zcEbProCompletion);  }  public String getPageStatus() {    return pageStatus;  }  public void setPageStatus(String pageStatus) {    this.pageStatus = pageStatus;  }  public ListCursor getListCursor() {    // TODO Auto-generated method stub    return this.listCursor;  }  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      //bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.sendButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.traceButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbProCompletion ht = (ZcEbProCompletion) this.listCursor.getCurrentObject();    String billStatus = ht.getChengbanStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, ht.getProcessInstId());  }}
package com.ufgov.zc.client.zc.zcebXunJiaBaoJia;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.component.zc.dataexchange.DataExchangeListPanel;import com.ufgov.zc.client.component.zc.dataexchange.model.ABaseData;import com.ufgov.zc.client.component.zc.dataexchange.model.AttachmentFile;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.DataExchangeLog;import com.ufgov.zc.common.zc.model.ZcEbXunJiaBaoJia;import com.ufgov.zc.common.zc.publish.IZcEbXjbjServiceDelegate;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;public class ZcEbRfqDataExchangeExecutor extends ABaseData {  private static final long serialVersionUID = -8347019953562405418L;  private transient IZcEbXjbjServiceDelegate zcebXjbjServiceDelegate = null;  /**   * 询价基本业务逻辑：   * 1、供应商在外网登录到【询价报价】进行报价单创建，保存后报价，对应着ZcEbXunJiaBaoJiaListPanel   *    这个部件，报价单创建和报价都针对ZC_EB_XUNJIA_BAOJIA表进行；   * 2、通过【询价报价】数据类型将供应商报价数据导入到内网，同样保存到ZC_EB_XUNJIA_BAOJIA表；   * 3、到了开标时间后，如果供应商数为3家以上，则可以进行开标，否则如果多于1家少于3家，则可以进行强   *    制开标。   * 4、  开标成功后，选择一家最好的供应商作为成交（中标）商家，随后进入成交审核流程，最终确定成交（   *    中标）商家，将成交信息写入到zc_data_exchange_redo表中，主要将项目编号和中标供应商拼接成id   *    写入到redo表中，约定格式为projCode@bidWinnerProviderCode，数据库表为ZC_EB_RFQ_PACK。   * 5、 将成交（中标）结果发布到外网，同样是将成交结果导入到ZC_EB_XUNJIA_BAOJIA表，具体如下：   *    a、先根据redo表中的id字段中的项目编号去ZC_EB_XUNJIA_BAOJIA表中获得对应项目的 所有报价商家；   *    b、将中标者状态修改为中标哦，将未中标者状态修改为未中标；   */  public int doExportData(ElementConditionDto dto, RequestMeta meta, String saveRootPath) {    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "正在查询需要导出的记录...");    if (this.getNeedExportDataRedoList() != null && this.getNeedExportDataRedoList().size() > 0) {      this.setDataList(new ArrayList());      //循环所有项目以获得所有项目的报价信息      for (int i = 0; i < this.getNeedExportDataIDList().size(); i++) {        DataExchangeListPanel.setProgressText(this.getDataTypeName() + "正在读取每个项目的报价信息...");        ElementConditionDto tDto = new ElementConditionDto();        String currID = this.getNeedExportDataIDList().get(i);        if (currID != null) {          String[] ids = currID.split("@");          String projCode = ids[0];          String bidWinnerProviderCode = ids[1];          tDto.setZcText0(projCode);          tDto.setNd(meta.getSvNd());          //获得当前项目的所有报价商家          List list = this.getZcEbXjbjServiceDelegate().getXunJiaBaoJia(tDto, meta);          for (int j = 0; j < list.size(); j++) {            DataExchangeListPanel.setProgressText(this.getDataTypeName() + "正在修改每个商家是否中标状态...");            ZcEbXunJiaBaoJia xjbj = (ZcEbXunJiaBaoJia) list.get(j);            if (bidWinnerProviderCode.equals(xjbj.getSupplierCode())) {              //设置该供应商为中标供应商              xjbj.setStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_ZHONGBIAO);            } else {              xjbj.setStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_WEIZHONGBIAO);            }          }          this.getDataList().addAll(list);        }      }    } else {      this.setDataList(new ArrayList<ZcEbXunJiaBaoJia>());    }    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "查询到" + this.getDataList().size() + "条记录，且已经修改数据相关的状态位...");    List<DataExchangeLog> exportDataList = new ArrayList<DataExchangeLog>();    DataExchangeLog log = null;    //修改所有成功导出记录的状态    for (int i = 0; i < this.getDataList().size(); i++) {      DataExchangeListPanel.setProgressText(this.getDataTypeName() + "正在修改项目导出成功临时状态...");      ZcEbXunJiaBaoJia xjbj = (ZcEbXunJiaBaoJia) this.getDataList().get(i);      if (ZcSettingConstants.XUNJIA_BAOJIA_STATUS_ZHONGBIAO.equals(xjbj.getStatus())) {        String mergeCode = xjbj.getProjCode() + "@" + xjbj.getSupplierCode();        this.successRecordMap.put(mergeCode, getDataExchangeRedo(mergeCode));        log = new DataExchangeLog();        this.makeDataExchangeLog(log, meta.getSvUserID(), "导出成功", "", "", "OUT", xjbj);        exportDataList.add(log);      }    }    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "主要的数据抓取和导出过程已经完成，可以开始文件合并...");    this.getExchangeDataLogModel().setExportDataList(exportDataList);    return this.getDataList().size();  }  /**   * 执行数据导入   */  public int doImportData(ElementConditionDto dto, RequestMeta meta, String readRootPath) {    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "准备进行数据导入...");    String info = null;    DataExchangeLog log = null;    List<DataExchangeLog> importLogList = new ArrayList<DataExchangeLog>();    int size = this.getDataList().size();    for (int i = 0; i < size; i++) {      DataExchangeListPanel.setProgressText(this.getDataTypeName() + "正在发送数据到服务器..." + (i + 1) + "/" + size);      ZcEbXunJiaBaoJia xjbj = (ZcEbXunJiaBaoJia) this.getDataList().get(i);      info = this.getZcEbXjbjServiceDelegate().updateXunJiaBaoJia(xjbj, meta);      DataExchangeListPanel.setProgressText(this.getDataTypeName() + info);      log = new DataExchangeLog();      this.makeDataExchangeLog(log, meta.getSvUserID(), "导入成功", "", info, "IN", xjbj);      importLogList.add(log);    }    this.getExchangeDataLogModel().setImportDataList(importLogList);    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "完成发送数据到服务器...");    return this.getDataList().size();  }  public Map<String, Map<String, AttachmentFile>> getAttachmentDataMap() {    return new HashMap<String, Map<String, AttachmentFile>>();  }  private void makeDataExchangeLog(DataExchangeLog log, String userID, String succFail, String exceptionMsg, String detail, String type,  ZcEbXunJiaBaoJia xjbj) {    log.setDataTypeID(this.getDataTypeID());    log.setDataTypeName(this.getDataTypeName());    log.setUserID(userID);    log.setRecStatus(succFail);    log.setDetailInfo(detail);    log.setExceptText(exceptionMsg);    log.setGentType(type);    log.setOptDateTime(new Date());    log.setRecSrcID(xjbj.getProjCode() + "@" + xjbj.getSupplierCode());    log.setRecSrcName(xjbj.getProjName());    log.setRecSrcTab("ZC_EB_XUNJIA_BAOJIA");  }  public IZcEbXjbjServiceDelegate getZcEbXjbjServiceDelegate() {    if (zcebXjbjServiceDelegate == null) {      zcebXjbjServiceDelegate = (IZcEbXjbjServiceDelegate) ServiceFactory.create(IZcEbXjbjServiceDelegate.class, "zcebXjbjServiceDelegate");    }    return zcebXjbjServiceDelegate;  }  public void setZcEbXjbjServiceDelegate(IZcEbXjbjServiceDelegate zcebXjbjServiceDelegate) {    this.zcebXjbjServiceDelegate = zcebXjbjServiceDelegate;  }}
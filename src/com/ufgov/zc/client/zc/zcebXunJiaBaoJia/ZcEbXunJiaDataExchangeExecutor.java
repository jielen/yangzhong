package com.ufgov.zc.client.zc.zcebXunJiaBaoJia;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.component.zc.dataexchange.DataExchangeListPanel;import com.ufgov.zc.client.component.zc.dataexchange.model.ABaseData;import com.ufgov.zc.client.component.zc.dataexchange.model.AttachmentFile;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.DataExchangeLog;import com.ufgov.zc.common.zc.model.DataExchangeRedo;import com.ufgov.zc.common.zc.model.ZcEbXunJiaBaoJia;import com.ufgov.zc.common.zc.publish.IZcEbXjbjServiceDelegate;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JOptionPane;public class ZcEbXunJiaDataExchangeExecutor extends ABaseData {  private static final long serialVersionUID = 1619825736456968019L;  public transient IZcEbXjbjServiceDelegate zcEbXjbjServiceDelegate = null;  @Override  public int doExportData(ElementConditionDto dto, RequestMeta meta, String saveRootPath) {    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "正在查询需要导出的记录...");    if (this.getNeedExportDataRedoList() != null && this.getNeedExportDataRedoList().size() > 0) {      dto.setPmAdjustCodeList(this.getNeedExportDataList());      this.setDataList(getZcEbXjbjServiceDelegate().findTransData(dto, meta));    } else {      this.setDataList(new ArrayList<ZcEbXunJiaBaoJia>());    }    DataExchangeListPanel.setProgressText(this.getDataTypeName() + "查询到【" + this.getDataList().size() + "】条有效记录...");    List<DataExchangeLog> exportDataList = new ArrayList<DataExchangeLog>();    DataExchangeLog log = null;    if (this.getDataList().size() == 0) {      String msg = this.getDataTypeName() + "没有报价数据，原因可能如下:\n1、没有商家对相关项目进行报价；\n2、相关询价项目尚未到达【询价截止时间】；";      DataExchangeListPanel.setProgressText(msg);      JOptionPane.showMessageDialog(null, msg);      if (this.getNeedExportDataRedoList().size() > 0) {        for (int i = 0; i < this.getNeedExportDataIDList().size(); i++) {          String reid = this.getNeedExportDataIDList().get(i);          DataExchangeRedo redo = getDataExchangeRedo(reid);          redo.setIsExported("2");          this.successRecordMap.put(reid, redo);        }      }      return 0;    }    for (int i = 0; i < this.getDataList().size(); i++) {      DataExchangeListPanel.setProgressText(this.getDataTypeName() + "正在查询并导出第【" + (i + 1) + "】条记录...");      ZcEbXunJiaBaoJia bj = (ZcEbXunJiaBaoJia) this.getDataList().get(i);      String id = bj.getProjCode() + "@" + bj.getSupplierCode();      this.successRecordMap.put(id, getDataExchangeRedo(id));      log = new DataExchangeLog();      this.makeDataExchangeLog(log, meta.getSvUserID(), "导出成功", "", "", "OUT", bj);      exportDataList.add(log);    }    this.getExchangeDataLogModel().setExportDataList(exportDataList);    return this.getDataList().size();  }  @Override  public int doImportData(ElementConditionDto dto, RequestMeta meta, String readRootPath) {    String info = null;    DataExchangeLog log = null;    List<DataExchangeLog> importDataList = new ArrayList<DataExchangeLog>();    int size = this.getDataList().size();    for (int i = 0; i < size; i++) {      DataExchangeListPanel.setProgressText(this.getDataTypeName() + "正在发送数据到服务器..." + (i + 1) + "/" + size);      ZcEbXunJiaBaoJia bj = (ZcEbXunJiaBaoJia) this.getDataList().get(i);      info = this.getZcEbXjbjServiceDelegate().importTransData(bj, meta);      DataExchangeListPanel.setProgressText(this.getDataTypeName() + info);      log = new DataExchangeLog();      this.makeDataExchangeLog(log, meta.getSvUserID(), "导入成功", "", info, "IN", bj);      importDataList.add(log);    }    this.getExchangeDataLogModel().setImportDataList(importDataList);    return this.getDataList().size();  }  private void makeDataExchangeLog(DataExchangeLog log, String userID, String succFail, String exceptionMsg, String detail, String type,  ZcEbXunJiaBaoJia bj) {    log.setDataTypeID(this.getDataTypeID());    log.setDataTypeName(this.getDataTypeName());    log.setUserID(userID);    log.setRecStatus(succFail);    log.setDetailInfo(detail);    log.setExceptText(exceptionMsg);    log.setGentType(type);    log.setOptDateTime(new Date());    log.setRecSrcID(bj.getProjCode() + "@" + bj.getSupplierCode());    log.setRecSrcName("询价信息：" + bj.getProjCode() + "@" + bj.getSupplierName());    log.setRecSrcTab(getMainTableName());  }  @Override  public Map<String, Map<String, AttachmentFile>> getAttachmentDataMap() {    return new HashMap<String, Map<String, AttachmentFile>>();  }  public IZcEbXjbjServiceDelegate getZcEbXjbjServiceDelegate() {    if (zcEbXjbjServiceDelegate == null) {      zcEbXjbjServiceDelegate = (IZcEbXjbjServiceDelegate) ServiceFactory.create(IZcEbXjbjServiceDelegate.class, "zcebXjbjServiceDelegate");    }    return zcEbXjbjServiceDelegate;  }  public void setZcEbXjbjServiceDelegate(IZcEbXjbjServiceDelegate zcEbXjbjServiceDelegate) {    this.zcEbXjbjServiceDelegate = zcEbXjbjServiceDelegate;  }}
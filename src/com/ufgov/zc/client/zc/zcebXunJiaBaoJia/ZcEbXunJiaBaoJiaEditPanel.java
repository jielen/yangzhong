/** * ZcEbSignupEditPanel.java * com.ufgov.gk.client.zc.zcebsignup * Administrator * 2010-4-29 */package com.ufgov.zc.client.zc.zcebXunJiaBaoJia;import java.awt.Color;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.FocusEvent;import java.awt.event.FocusListener;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JSplitPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import javax.swing.event.ListSelectionEvent;import javax.swing.event.ListSelectionListener;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.ZcEbXunJiaBaoJiaToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JSaveableSplitPane;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.BaoJiaButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.UnBaoJiaButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.celleditor.DateCellEditor;import com.ufgov.zc.client.component.table.celleditor.IntCellEditor;import com.ufgov.zc.client.component.table.celleditor.MoneyCellEditor;import com.ufgov.zc.client.component.table.cellrenderer.DateCellRenderer;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecelleditor.FileCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.commonbiz.model.WfAware;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcEbPlan;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbSignupPackDetail;import com.ufgov.zc.common.zc.model.ZcEbXunJia;import com.ufgov.zc.common.zc.model.ZcEbXunJiaBaoJia;import com.ufgov.zc.common.zc.model.ZcEbXunJiaBaoJiaDetail;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbPlanServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbXjbjServiceDelegate;/** * @author Administrator * */public class ZcEbXunJiaBaoJiaEditPanel extends AbstractMainSubEditPanel {  private static final Logger logger = Logger.getLogger(ZcEbXunJiaBaoJiaEditPanel.class);  private IZcEbXjbjServiceDelegate zcebXjbjServiceDelegate = (IZcEbXjbjServiceDelegate) ServiceFactory.create(IZcEbXjbjServiceDelegate.class,  "zcebXjbjServiceDelegate");  private IZcEbBaseServiceDelegate zcEbBaseServiceDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class,    "zcEbBaseServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_XUNJIA_BAOJIA";  private FuncButton addButton = new AddButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private FuncButton baojiaButton = new BaoJiaButton();  private FuncButton unBaojiaButton = new UnBaoJiaButton();  private final ListCursor listCursor;  private ZcEbXunJiaBaoJia oldXunJiaBaoJia;  private String tabStatus;  private ZcEbXunJiaBaoJiaListPanel listPanel;  private JTablePanel tablePanelPack = new JTablePanel("xunjiapack", AsOptionMeta.getOptVal(ZcSettingConstants.ZC_OPTON_XUNJIA_BAOJIA_HELP_MSG));;  private JTablePanel tablePanelBaoJia = new JTablePanel();  private JSaveableSplitPane splitPane;  private ZcEbXunJiaBaoJiaEditPanel self = this;  private GkBaseDialog parent;  private String projSqlMapSelectedId = "ZcEbProj.getProjXunJia";  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  TextFieldEditor projNameEditor = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJ_NAME), "projName");  private ElementConditionDto projDto = new ElementConditionDto();  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId);  private DateFieldEditor xunJiaEndDateField;  private Map<String, Date> dateList = new HashMap<String, Date>();  Date now = (Date) zcEbBaseServiceDelegate.queryObject("ZcEbPlan.getSysdate", null, requestMeta);  private JTabbedPane tabPaneBaoJia = null;  public ZcEbXunJiaBaoJiaEditPanel(ZcEbXunJiaBaoJiaDialog parent, ListCursor listCursor, String tabStatus, ZcEbXunJiaBaoJiaListPanel listPanel) {    super(ZcEbXunJiaBaoJia.class, BillElementMeta.getBillElementMetaWithoutNd("ZC_EB_XUNJIA_BAOJIA"));    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("询价报价"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();    setButtonStatus();    updateFieldEditorsEditable();    this.projDto.setZcText0(this.requestMeta.getSvUserID());  }  /**   * 设置工具条上按钮的可用性   *    * Administrator   * 2010-5-15   */  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs.setButton(this.addButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_DRAFT);      bs.addBillStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_YI_BAOJIA);      bs.addBillStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_DELAY);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_DRAFT);      bs.addBillStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_DELAY);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.baojiaButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_DRAFT);      bs.addBillStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_YI_BAOJIA);      bs.addBillStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_DELAY);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.unBaojiaButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_YI_BAOJIA);      bs.addBillStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_DELAY);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.exitButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.helpButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbXunJiaBaoJia obj = (ZcEbXunJiaBaoJia) (this.listCursor.getCurrentObject());    String billStatus = obj.getStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, obj.getProcessInstId());    setSubTableButton();    if (this.listCursor.getDataList().size() < 2) {      this.previousButton.setVisible(false);      this.nextButton.setVisible(false);    }  }  /**   * 设置字表下面的按钮状态   *    * Administrator   * 2010-5-15   */  private void setSubTableButton() {  }  private void refreshData() {    ZcEbXunJiaBaoJia xunJiaBaoJia = (ZcEbXunJiaBaoJia) listCursor.getCurrentObject();    if (xunJiaBaoJia == null || xunJiaBaoJia.getBjCode()==null) {//新增页面      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;    }    this.setEditingObject(xunJiaBaoJia);    List signupPacksList = new ArrayList();    if (xunJiaBaoJia != null && (xunJiaBaoJia.getSignupPackList() == null || xunJiaBaoJia.getSignupPackList().size() == 0)) {      signupPacksList = zcebXjbjServiceDelegate.getSignupPack(xunJiaBaoJia, requestMeta);      xunJiaBaoJia.setSignupPackList(signupPacksList);    }    refreshSubTableData(xunJiaBaoJia.getSignupPackList());    setOldObject();  }  private void refreshSubTableData(List deList) {    ZcEbXunJiaBaoJiaToTableModelConverter mc = new ZcEbXunJiaBaoJiaToTableModelConverter();    tablePanelPack.setTableModel(mc.convertSignupPackDeToTableModel(deList));    setTablePropertyPack(tablePanelPack.getTable());    if (deList != null && deList.size() > 0) {      ZcEbSignupPackDetail pack = (ZcEbSignupPackDetail) deList.get(0);      refreshBaoJiaTable(pack);    } else {      refreshBaoJiaTable(new ZcEbSignupPackDetail());    }    addPackTableLisenter(tablePanelPack.getTable());    // 设置默认选中的【项目分包】记录    if (deList != null && deList.size() > 0) {      this.tablePanelPack.getTable().setRowSelectionInterval(0, 0);    }    updateFieldEditors();  }  private void refreshBaoJiaTable(ZcEbSignupPackDetail pack) {    ZcEbXunJiaBaoJiaToTableModelConverter mc = new ZcEbXunJiaBaoJiaToTableModelConverter();    tablePanelBaoJia.setTableModel(mc.convertXunJiaBaoJiaToTableModel(pack.getXunJiaBaoJiaList()));    setTablePropertyBaoJia(this.tablePanelBaoJia.getTable());    addTableListener(tablePanelBaoJia.getTable());    //setXunJiaTableProperty(tablePanelBaoJia.getTable());    //    updateFieldEditors();    updateFieldEditorsEditable();    //根据分包的状态决定报价表能否编辑    setBaojiaTableEdit(pack.getOpenBidStatus());    StringBuffer title = new StringBuffer("询价单: ");    title.append(pack.getPackName() == null ? "" : pack.getPackName());    title.append("  ");    title.append(pack.getPackDesc() == null ? "" : pack.getPackDesc());    tabPaneBaoJia.setTitleAt(0, title.toString());  }  /*   * 根据分包的状态决定报价表能否编辑   * 等待开标和延期的可以编辑   */  private void setBaojiaTableEdit(String packStatus) {    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      if (!ZcSettingConstants.PACK_STATUS_DRAFT.equals(packStatus)) {        setWFSubTableEditable(this.tablePanelBaoJia, false);      } else {        setWFSubTableEditable(this.tablePanelBaoJia, true);      }    }    SwingUtil.setTableCellEditor(tablePanelBaoJia.getTable(), ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH, new FileCellEditor("spTechFileName",    (BeanTableModel) tablePanelBaoJia.getTable().getModel()));  }  /*   * 设置监听，通过选择的【项目分包】自动更新【报价明细】   */  private void addPackTableLisenter(final JPageableFixedTable table) {    table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {      public void valueChanged(ListSelectionEvent e) {        if (!e.getValueIsAdjusting()) {          BeanTableModel tableModel = ((BeanTableModel) table.getModel());          ZcEbSignupPackDetail pack;          if (table.getSelectedRows() != null && table.getSelectedRows().length > 0) {            pack = (ZcEbSignupPackDetail) tableModel.getBean(table.convertRowIndexToModel(table.getSelectedRows()[0]));            refreshBaoJiaTable(pack);          }        }      }    });  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null        && (fd.getFieldName().equals("inputor") || fd.getFieldName().equals("inputDate") || fd.getFieldName().equals("status")        || fd.getFieldName().equals("projName") || fd.getFieldName().equals("purType") || fd.getFieldName().equals("stopDate")        || fd.getFieldName().equals("projCode") || fd.getFieldName().equals("bjDate") || fd.getFieldName().equals("supplierName")        ||fd.getFieldName().equals("projCode"))) {          fd.setEnabled(false);         /* //新增状态下可以编辑选择项目，编辑状态下不可以编辑选择项目          if (fd.getFieldName().equals("projCode") && this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {            fd.setEnabled(true);          }*/        } else {          fd.setEnabled(true);        }      }      setWFSubTableEditable(this.tablePanelPack, true);      setWFSubTableEditable(this.tablePanelBaoJia, true);    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      setWFSubTableEditable(this.tablePanelPack, false);      setWFSubTableEditable(this.tablePanelBaoJia, false);    }  }  private void setTablePropertyPack(JTable table) {    ZcUtil.translateColName(table, "ZC_EB_XJ_");    SwingUtil.setTableCellRenderer(table, "SP_DATE", new DateCellRenderer(DateCellRenderer.SS));    SwingUtil.setTableCellRenderer(table, "END_DATE", new DateCellRenderer(DateCellRenderer.SS));    SwingUtil.setTableCellRenderer(table, "SP_STATUS", new AsValCellRenderer("VS_ZC_SP_STATUS"));    SwingUtil.setTableCellEditor(table, "SP_STATUS", new AsValComboBoxCellEditor("VS_ZC_SP_STATUS"));    SwingUtil.setTableCellRenderer(table, "OPEN_BID_STATUS", new AsValCellRenderer("ZC_VS_XUNJIA_BAOJIA_STATUS"));  }  private void setTablePropertyBaoJia(JTable table) {    ZcUtil.translateColName(table, "ZC_EB_");    //    SwingUtil.setTableCellEditor(table, "HAVE_XIAN_HUO", new AsValComboBoxCellEditor("VS_Y/N"));    //    //    SwingUtil.setTableCellRenderer(table, "HAVE_XIAN_HUO", new AsValCellRenderer("VS_Y/N"));    FileCellEditor fc = new FileCellEditor("spTechFileName", "spTechFileId");    fc.setUploadFileEnable(false);    fc.setDeleteFileEnable(false);    SwingUtil.setTableCellEditor(table, "SP_TECH_FILE_NAME", fc);    SwingUtil.setTableCellEditor(table, "SP_NUM", new IntCellEditor(false));    SwingUtil.setTableCellEditor(table, "GONG_HUO_DATE", new DateCellEditor());    SwingUtil.setTableCellEditor(table, "SP_NUM", new IntCellEditor());    SwingUtil.setTableCellEditor(table, "SP_TOTAL_SUM", new MoneyCellEditor());    SwingUtil.setTableCellEditor(table, "SP_PRICE", new MoneyCellEditor());    AsValComboBoxCellEditor acbc = new AsValComboBoxCellEditor("V_SP_UNIT");    SwingUtil.setTableCellEditor(table, "SP_UNIT", acbc);    SwingUtil.setTableCellRenderer(table, "SP_UNIT", new AsValCellRenderer("V_SP_UNIT"));        FileCellEditor baojiaUploadFileEditor = new FileCellEditor("baojiaFileName", "baojiaFileId");        SwingUtil.setTableCellEditor(table, "BAOJIA_FILE_NAME", baojiaUploadFileEditor);    if (isLate()) {      baojiaUploadFileEditor.setUploadFileEnable(false);      baojiaUploadFileEditor.setDeleteFileEnable(false);      baojiaUploadFileEditor.setDownloadFileEnable(true);    }else{      if(!ZcUtil.isGys()){        baojiaUploadFileEditor.setUploadFileEnable(false);        baojiaUploadFileEditor.setDeleteFileEnable(false);          baojiaUploadFileEditor.setDownloadFileEnable(true);            }else{        baojiaUploadFileEditor.setUploadFileEnable(true);        baojiaUploadFileEditor.setDeleteFileEnable(true);          baojiaUploadFileEditor.setDownloadFileEnable(true);        }    }  }  private void setOldObject() {    oldXunJiaBaoJia = (ZcEbXunJiaBaoJia) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    // TCJLODO Auto-generated method stub    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    String columNames[] = { "项目编号", "项目名称", "采购类型", "负责人", "电话", "邮件", "传真" };    ZcEbProjFnHandler projHandler = new ZcEbProjFnHandler(columNames);    projDto.setExecutor(requestMeta.getSvUserID());    projDto.setIsNeedSqlFilterData("Y");    ForeignEntityFieldEditor editor0 = new ForeignEntityFieldEditor(this.projSqlMapSelectedId, this.projDto, 20, projHandler, columNames, "询价项目",    "projCode");    editorList.add(editor0);    editor0.addValueChangeListener(new ValueChangeListener() {      @Override      public void valueChanged(ValueChangeEvent e) {        projCodeChange();      }    });    editorList.add(projNameEditor);    //    AsValFieldEditor editor8 = new AsValFieldEditor("状态", "status", "ZC_VS_XUNJIA_BAOJIA_STATUS");    //    //    editorList.add(editor8);    AsValFieldEditor editor8 = new AsValFieldEditor("采购方式", "purType", "ZC_VS_PITEM_OPIWAY");    editorList.add(editor8);    //    DateFieldEditor df = new DateFieldEditor("报价截止时间", "stopDate", DateFieldEditor.TimeTypeH24);    //    //    editorList.add(df);    //    //    df = new DateFieldEditor("提交时间", "bjDate", DateFieldEditor.TimeTypeH24);    //    //    editorList.add(df);    TextFieldEditor editor3 = new TextFieldEditor("报价供应商", "supplierName");    editorList.add(editor3);    editor3 = new TextFieldEditor("联系人", "manager");    editorList.add(editor3);    TextFieldEditor editor4 = new TextFieldEditor("联系电话", "phone");    editorList.add(editor4);    TextFieldEditor editor5 = new TextFieldEditor("备注", "remark");    editorList.add(editor5);    //    editor5 = new TextFieldEditor("年度", "nd");    TextFieldEditor editor10 = new TextFieldEditor("录入人", "inputor");    editorList.add(editor10);    DateFieldEditor zcWeitoDate = new DateFieldEditor("录入时间", "inputDate");    editorList.add(zcWeitoDate);    return editorList;  }  private void projCodeChange() {    ZcEbXunJiaBaoJia xunJiaBaoJia = (ZcEbXunJiaBaoJia) this.listCursor.getCurrentObject();    //获取最新的项目信息    //    refreshProjInfo(xunJiaBaoJia);    //更新报名分包表    xunJiaBaoJia.setSignupPackList(new ArrayList());    List packs = this.zcebXjbjServiceDelegate.getSignupPack(xunJiaBaoJia, requestMeta);    if (packs != null && packs.size() > 0) {      xunJiaBaoJia.setSignupPackList(packs);    }    refreshSubTableData(xunJiaBaoJia.getSignupPackList());  }  private void updateDateList(String projCode) {    dateList.clear();    List<ZcEbXunJia> list = zcEbBaseServiceDelegate.queryDataForList("ZcEbXunJia.getGongHuoDateForCheck", projCode, requestMeta);    if (list == null || list.size() == 0) {      return;    }    for (int i = 0; i < list.size(); i++) {      if (list.get(i).getGongHuoDate() != null)        dateList.put(list.get(i).getXjCode(), list.get(i).getGongHuoDate());    }  }  public void setEditingObject(WfAware editingObject) {    super.setEditingObject(editingObject);  }  /**   * 项目选择部件   * @author Administrator   *   */  private class ZcEbProjFnHandler implements IForeignEntityHandler {    private String columNames[];    private IZcEbPlanServiceDelegate zcEbPlanServiceDelegate = (IZcEbPlanServiceDelegate) ServiceFactory.create(IZcEbPlanServiceDelegate.class,    "zcEbPlanServiceDelegate");    public ZcEbProjFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      // TCJLODO Auto-generated method stub      for (Object object : selectedDatas) {        ZcEbProj proj = (ZcEbProj) object;        //        System.out.println(supplier.getName());        ZcEbXunJiaBaoJia xunJiaBaoJia = (ZcEbXunJiaBaoJia) listCursor.getCurrentObject();        xunJiaBaoJia.setProjCode(proj.getProjCode());        xunJiaBaoJia.setProjName(proj.getProjName());        xunJiaBaoJia.setPurType(proj.getPurType());        xunJiaBaoJia.setAgency(proj.getAgency());        updateDateList(proj.getProjCode());        ElementConditionDto dto = new ElementConditionDto();        dto.setProjCode(proj.getProjCode());        List<ZcEbPlan> planLst = zcEbPlanServiceDelegate.getZcEbPlan(dto, requestMeta);        if (planLst != null && planLst.size() > 0) {          ZcEbPlan p = planLst.get(0);          xunJiaBaoJia.setStopDate(p.getBidEndTime());        }        setEditingObject(xunJiaBaoJia);        projCodeChange();      }    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE", rowData.getPurType());        data[i][col++] = rowData.getManager();        data[i][col++] = rowData.getPhone();        data[i][col++] = rowData.getEmail();        data[i][col++] = rowData.getFax();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  public JComponent createSubBillPanel() {    JTabbedPane tabPanePack = new JTabbedPane();    tabPaneBaoJia = new JTabbedPane();    tablePanelPack.init();    tablePanelPack.getSearchBar().setVisible(false);    tablePanelPack.setTablePreferencesKey(this.getClass().getName() + "_pack_table");    tablePanelPack.getTable().setShowCheckedColumn(false);    tablePanelPack.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 0));    tabPanePack.addTab(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PAKE_NAME), tablePanelPack);    JPanel xunJiaPlanPanel = new JPanel();    xunJiaPlanPanel.setLayout(new FlowLayout());    JLabel xunJiaEndDateLabel = new JLabel("询价结束时间");    xunJiaEndDateField = new DateFieldEditor("询价结束时间", "plan.bidEndTime", DateFieldEditor.TimeTypeH24);    xunJiaPlanPanel.add(xunJiaEndDateLabel);    xunJiaPlanPanel.add(xunJiaEndDateField);    tablePanelBaoJia.init();    tablePanelBaoJia.getSearchBar().setVisible(false);    tablePanelBaoJia.setTablePreferencesKey(this.getClass().getName() + "_bj_table");    tablePanelBaoJia.getTable().setShowCheckedColumn(false);    tablePanelBaoJia.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 0));    setTableCellBaojia(tablePanelBaoJia.getTable());    tabPaneBaoJia.addTab("询价单", tablePanelBaoJia);    tablePanelPack.setMinimumSize(new Dimension(240, 150));    tablePanelBaoJia.setMinimumSize(new Dimension(240, 200));    splitPane = new JSaveableSplitPane(JSplitPane.VERTICAL_SPLIT, tabPanePack, tabPaneBaoJia);    splitPane.setDividerDefaultLocation(this.getClass().getName() + "_splitPane_dividerLocation", 200);    splitPane.setContinuousLayout(true);    splitPane.setOneTouchExpandable(true);    // 只显示向下的箭头    //    splitPane.putClientProperty("toExpand", true);    splitPane.setDividerSize(10);    splitPane.setDividerLocation(260);    splitPane.setBackground(self.getBackground());    return splitPane;  }  private void setTableCellBaojia(JPageableFixedTable table) {    SwingUtil.setTableCellEditor(table, "SP_TECH_FILE_NAME", new FileCellEditor("spTechFileName"));    SwingUtil.setTableCellEditor(table, "SP_NUM", new IntCellEditor(false));    SwingUtil.setTableCellEditor(table, "GONG_HUO_DATE", new DateCellEditor());    SwingUtil.setTableCellEditor(table, "SP_NUM", new IntCellEditor());    SwingUtil.setTableCellEditor(table, "SP_TOTAL_SUM", new MoneyCellEditor());    final MoneyCellEditor spPriceEditor = new MoneyCellEditor(false);    SwingUtil.setTableCellEditor(table, "SP_PRICE", spPriceEditor);    spPriceEditor.getField().addFocusListener(new FocusListener() {      private String lastValue;      @Override      public void focusGained(FocusEvent event) {        if (!event.isTemporary()) {          lastValue = spPriceEditor.getField().getText();        }      }      @Override      public void focusLost(FocusEvent event) {        // TCJLODO Auto-generated method stub        if (!event.isTemporary()) {          final BeanTableModel model = (BeanTableModel) tablePanelBaoJia.getTable().getModel();          ZcEbXunJiaBaoJiaDetail detail = (ZcEbXunJiaBaoJiaDetail) model.getBean(tablePanelBaoJia.getTable().getSelectedRow());          BigDecimal spTotalSum = new BigDecimal(0);          spTotalSum = detail.getSpPrice().multiply(new BigDecimal(lastValue));          detail.setSpTotalSum(spTotalSum);        }      }    });    AsValComboBoxCellEditor acbc = new AsValComboBoxCellEditor("V_SP_UNIT");    SwingUtil.setTableCellEditor(table, "SP_UNIT", acbc);    SwingUtil.setTableCellRenderer(table, "SP_UNIT", new AsValCellRenderer("V_SP_UNIT"));  }  /**   * 添加填写单价后，自动计算总价监听   * @param table   */  private void addTableListener(final JPageableFixedTable table) {    final BeanTableModel model = (BeanTableModel) table.getModel();    model.addTableModelListener(new TableModelListener() {      public void tableChanged(TableModelEvent e) {        if ("SP_PRICE".equals(model.getColumnName(e.getColumn()))) {          ZcEbXunJiaBaoJiaDetail detail = (ZcEbXunJiaBaoJiaDetail) model.getBean(table.getSelectedRow());          BigDecimal spTotalSum = new BigDecimal(0);          spTotalSum = detail.getSpPrice().multiply(new BigDecimal(detail.getSpNum()));          detail.setSpTotalSum(spTotalSum);        } else if ("GONG_HUO_DATE".equals(model.getColumnName(e.getColumn()))) {          ZcEbXunJiaBaoJiaDetail detail = (ZcEbXunJiaBaoJiaDetail) model.getBean(table.getSelectedRow());          if (!checkGHDate(detail)) {            detail.setGongHuoDate(dateList.get(detail.getXjCode()));          }          //          BigDecimal spTotalSum = new BigDecimal(0);          //          //          spTotalSum = detail.getSpPrice().multiply(new BigDecimal(detail.getSpNum()));          //          //          detail.setSpTotalSum(spTotalSum);        }      }    });  }  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);     toolBar.add(editButton);    //    toolBar.add(saveButton);    //    toolBar.add(deleteButton);    toolBar.add(baojiaButton);    //    toolBar.add(unBaojiaButton);     toolBar.add(exitButton);    toolBar.add(helpButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {       }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    baojiaButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doBaoJia();      }    });    unBaojiaButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doUnBaoJia();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });  }   private void doEdit() {    setOldObject();    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  private void doDelete() {    requestMeta.setFuncId(deleteButton.getFuncId());    ZcEbXunJiaBaoJia xunJiaBaoJia = (ZcEbXunJiaBaoJia) this.listCursor.getCurrentObject();    int num = JOptionPane.showConfirmDialog(this, "确认删除当前数据？", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      String errorInfo = "";      try {        success = this.zcebXjbjServiceDelegate.deleteXunJiaBaoJia(xunJiaBaoJia, this.requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(self, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;        //          this.doNext();        listCursor.removeCurrentObject();        //          listCursor.next();        refreshData();        //          setButtonStatus();        this.listPanel.refreshCurrentTabData();        updateFieldEditorsEditable();        setButtonStatus();      } else {        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doBaoJia() {    requestMeta.setFuncId(baojiaButton.getFuncId());    stopTableEditing();    if (!checkBeforBid()) {      return;    }        String confirmMsg=getConfirmMsg();        int num = JOptionPane.showConfirmDialog(this, confirmMsg, "提交确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      String errorInfo = "";      ZcEbXunJiaBaoJia xunJiaBaoJia = (ZcEbXunJiaBaoJia) this.listCursor.getCurrentObject();      xunJiaBaoJia.setBjDate(requestMeta.getSysDate());      for (int j = 0; j < xunJiaBaoJia.getSignupPackList().size(); j++) {        ZcEbSignupPackDetail pack = (ZcEbSignupPackDetail) xunJiaBaoJia.getSignupPackList().get(j);        for (int i = 0; i < pack.getXunJiaBaoJiaList().size(); i++) {          ZcEbXunJiaBaoJiaDetail bjd = (ZcEbXunJiaBaoJiaDetail) pack.getXunJiaBaoJiaList().get(i);          if (bjd.getBjDetailCode() == null || bjd.getBjDetailCode().trim().length() == 0) {            bjd.setBjDetailCode(ZcUtil.getSequenceNextVal(ZcSettingConstants.SEQUENCE_XUNJIA_BAOJIA_DETAIL));          }        }      }      try {        xunJiaBaoJia = this.zcebXjbjServiceDelegate.saveXunJiaBaoJia(xunJiaBaoJia, this.requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;        this.listPanel.refreshCurrentTabData();        this.listCursor.setCurrentObject(xunJiaBaoJia);        this.setEditingObject((ZcEbXunJiaBaoJia) this.listCursor.getCurrentObject());        JOptionPane.showMessageDialog(self, "确认信息成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        updateFieldEditorsEditable();        setButtonStatus();        refreshData();      } else {        JOptionPane.showMessageDialog(this, "确认信息失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private String getConfirmMsg() {    // TCJLODO Auto-generated method stub    StringBuffer sb=new StringBuffer();    boolean baojiaFlag=false;    ZcEbXunJiaBaoJia xunJiaBaoJia = (ZcEbXunJiaBaoJia) this.listCursor.getCurrentObject();    for (int j = 0; j < xunJiaBaoJia.getSignupPackList().size(); j++) {      ZcEbSignupPackDetail pack = (ZcEbSignupPackDetail) xunJiaBaoJia.getSignupPackList().get(j);     /*       VS_ZC_SP_STATUS 1 未报价      VS_ZC_SP_STATUS 2 报价      VS_ZC_SP_STATUS 3 撤回报价      */      if("2".equals(pack.getSpStatus())){        BigDecimal sum=new BigDecimal(0);        for (int i = 0; i < pack.getXunJiaBaoJiaList().size(); i++) {            ZcEbXunJiaBaoJiaDetail bjd = (ZcEbXunJiaBaoJiaDetail) pack.getXunJiaBaoJiaList().get(i);            sum=sum.add(bjd.getSpTotalSum());        }        baojiaFlag=true;        sb.append("分包:").append(pack.getPackName()).append(" 报价:").append(sum.doubleValue()).append("\n");      }    }    if(baojiaFlag){      StringBuffer t=new StringBuffer();      t.append("您的报价信息如下：请予确认：\n").append(sb);      return t.toString();    }else{    return "您没有选择分包进行报价，如果需要报价，填报价格同时，需要将分包表格中【是否报价】选择为【报价】";    }  }  private boolean checkBeforBid() {    ZcEbXunJiaBaoJia xunJiaBaoJia = (ZcEbXunJiaBaoJia) this.listCursor.getCurrentObject();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {      ZcEbXunJiaBaoJia oldObj = this.zcebXjbjServiceDelegate.getXunJiaBaoJiaBySupplier(xunJiaBaoJia, this.requestMeta);      if (oldObj != null) {        JOptionPane.showMessageDialog(this.parent, "该项目贵公司已经报价数据，请在其基础上修改！", "提示", JOptionPane.WARNING_MESSAGE);        return false;      }    }    List notNullBillElementList = this.billElementMeta.getNotNullBillElement();    StringBuilder errorInfo = new StringBuilder();    String validateInfo = ZcUtil.validateBillElementNull(xunJiaBaoJia, notNullBillElementList);    if (validateInfo.length() != 0) {      JOptionPane.showMessageDialog(this, validateInfo, "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    Date now = (Date) zcEbBaseServiceDelegate.queryObject("ZcEbPlan.getSysdate", null, requestMeta);    List<String> packs = new ArrayList<String>();    List<ZcEbSignupPackDetail> pack = xunJiaBaoJia.getSignupPackList();    StringBuffer info = new StringBuffer();    StringBuffer error = new StringBuffer();    StringBuffer error2 = new StringBuffer();    if (dateList == null || dateList.isEmpty()) {      updateDateList(xunJiaBaoJia.getProjCode());    }    StringBuffer packCodes = new StringBuffer();    for (int i = 0; i < pack.size(); i++) {      if (now.after(pack.get(i).getSubmitBidDocDate())) {        info.append(pack.get(i).getPackName()).append("\n");      } else if ("2".equals(pack.get(i).getSpStatus())) {        List<ZcEbXunJiaBaoJiaDetail> bjList = pack.get(i).getXunJiaBaoJiaList();        Date gh = null;        packCodes.append(",'").append(pack.get(i).getPackCode()).append("'");        for (int j = 0; j < bjList.size(); j++) {          if (bjList.get(j).getSpPrice() == null || bjList.get(j).getSpPrice().compareTo(new BigDecimal(0.00)) <= 0            || bjList.get(j).getSpTotalSum() == null || bjList.get(j).getSpTotalSum().compareTo(new BigDecimal(0.00)) <= 0) {            error.append(pack.get(i).getPackName()).append("\n");            break;          }          if (bjList.get(j).getGongHuoDate() == null) {            error2.append(pack.get(i).getPackName()).append("\n");            break;          } else {            if (gh == null) {              gh = bjList.get(j).getGongHuoDate();            } else if (!gh.equals(bjList.get(j).getGongHuoDate())) {              error2.append(pack.get(i).getPackName()).append("\n");              break;            }          }        }        pack.get(i).setSpDate(now);        pack.get(i).setSubmitBidDocType("Y");      } else {        pack.get(i).setSpDate(null);        pack.get(i).setSubmitBidDocType("N");      }    }    if (error.length() > 0) {      JOptionPane.showMessageDialog(this, error.toString() + "填写要报价商品的单价和总价", "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    if (error2.length() > 0) {      JOptionPane.showMessageDialog(this, error2.toString() + "供货时间不能为空且同一包货物的供货时间必须相同", "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    if (packCodes.length() > 0) {      Map<String, String> map = new HashMap<String, String>();      map.put("packCode", packCodes.substring(1));      map.put("zcSuCode", requestMeta.getEmpCode());      map.put("projCode", xunJiaBaoJia.getProjCode());      List<String> quas = zcEbBaseServiceDelegate.queryDataForList("ZC_EB_XUNJIA_BAOJIA.selectNeedQuas", map, requestMeta);      if (quas != null && quas.size() > 0) {        StringBuffer sb = new StringBuffer();        for (String nm : quas) {          sb.append(nm).append("\n");        }        JOptionPane.showMessageDialog(this, "要投标需要取得以下资质：" + sb.toString() + "您可以先选择不投标进行保存，点击投标截止时间前取得必须的资质后再及时修改投标状态", "提示",          JOptionPane.WARNING_MESSAGE);        return false;      }    }    if (info.length() > 0) {      JOptionPane.showMessageDialog(this, info.toString() + "投标时间已过，将不保存对以上分包报价的修改", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    xunJiaBaoJia.setStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_YI_BAOJIA);    return true;  }  private boolean checkGHDate(ZcEbXunJiaBaoJiaDetail dt) {    ZcEbXunJiaBaoJia xunJiaBaoJia = (ZcEbXunJiaBaoJia) this.listCursor.getCurrentObject();    if (dt.getGongHuoDate() == null) {      return false;    }    /*    Date d = dateList.get(dt.getXjCode());    if (d != null && dt.getGongHuoDate().after(d)) {      JOptionPane.showMessageDialog(self, "填报的供货时间不能超过要求供货日期！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    if (d != null && dt.getGongHuoDate().before(xunJiaBaoJia.getStopDate())) {      JOptionPane.showMessageDialog(self, "填报的供货时间不能早于开标日期！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    */    return true;  }  //检查报价是否截止  private boolean isLate() {    ZcEbXunJiaBaoJia xunJiaBaoJia = (ZcEbXunJiaBaoJia) this.listCursor.getCurrentObject();    if(xunJiaBaoJia==null ||xunJiaBaoJia.getStopDate()==null)return false;    Date now = (Date) zcEbBaseServiceDelegate.queryObject("ZcEbPlan.getSysdate", null, requestMeta);    if (now.after(xunJiaBaoJia.getStopDate())) {      return true;    }    return false;  }  private void doUnBaoJia() {    requestMeta.setFuncId(unBaojiaButton.getFuncId());    //判断是否过期了    if (isLate()) {      JOptionPane.showMessageDialog(this, "不能收回报价，报价已经截止 ！\n", "错误", JOptionPane.ERROR_MESSAGE);      return;    }    ZcEbXunJiaBaoJia xunJiaBaoJia = (ZcEbXunJiaBaoJia) this.listCursor.getCurrentObject();    xunJiaBaoJia.setStatus(ZcSettingConstants.XUNJIA_BAOJIA_STATUS_DRAFT);    for (int i = 0; i < xunJiaBaoJia.getSignupPackList().size(); i++) {      ZcEbSignupPackDetail sk = (ZcEbSignupPackDetail) xunJiaBaoJia.getSignupPackList().get(i);      if (sk.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_DRAFT) || sk.getPackStatus().equals(ZcSettingConstants.PACK_STATUS_DELAY)) {        sk.setIsSubmitBidDoc("N");      }    }    boolean success = true;    String errorInfo = "";    try {      this.zcebXjbjServiceDelegate.saveXunJiaBaoJia(xunJiaBaoJia, this.requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listPanel.refreshCurrentTabData();      this.oldXunJiaBaoJia = (ZcEbXunJiaBaoJia) ObjectUtil.deepCopy(xunJiaBaoJia);      JOptionPane.showMessageDialog(self, "取消报价成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      updateFieldEditorsEditable();      setButtonStatus();    } else {      JOptionPane.showMessageDialog(this, "取消报价失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrevious() {    stopTableEditing();    listCursor.previous();    refreshData();    setButtonStatus();  }  private void doNext() {    stopTableEditing();    listCursor.next();    refreshData();    setButtonStatus();  }  public void doExit() {    stopTableEditing();    //    if (isDataChanged()) {    //      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);    //      if (num == JOptionPane.YES_OPTION) {    //        if (!doSave()) {    //          return;    //        }    //      }    //    }    this.parent.dispose();  }  public void doHelp() {    setButtonStatus();  }  private void stopTableEditing() {    JPageableFixedTable table = this.tablePanelPack.getTable();    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldXunJiaBaoJia).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }}
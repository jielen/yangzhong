/** *  */package com.ufgov.zc.client.zc.providerPreAudit;import java.awt.BorderLayout;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Dimension;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.UUID;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import javax.swing.event.ChangeEvent;import javax.swing.event.ChangeListener;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbProPreAuditItemTableModelConverter;import com.ufgov.zc.client.component.DateField;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.WorkflowTrace;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AuditPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.IsSendToNextButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PassButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.PrintPreviewButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SubaddButton;import com.ufgov.zc.client.component.button.SubdelButton;import com.ufgov.zc.client.component.button.SubinsertButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.button.zc.CommonButton;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.OrgFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.emfundpay.EmFundReportEditPanel;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.constants.ZcValSetConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.ZcBaseBill;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbFormulaItem;import com.ufgov.zc.common.zc.model.ZcEbPackPreAudit;import com.ufgov.zc.common.zc.model.ZcEbProviderPreAudiItemtResult;import com.ufgov.zc.common.zc.model.ZcEbProviderPreAudit;import com.ufgov.zc.common.zc.model.ZcEbProviderPreAuditItem;/** * @author fanpl * */public class ZcEbProviderPreAuditEditPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = -2779110682087878491L;  private static final Logger logger = Logger.getLogger(EmFundReportEditPanel.class);  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_PROVIDER_PRE_AUDIT";  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private FuncButton previousButton = new PreviousButton();  private FuncButton addButton = new AddButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton nextButton = new NextButton();  private FuncButton editButton = new EditButton();  private FuncButton exitButton = new ExitButton();  // 工作流送审  private FuncButton sendButton = new SendButton();  // 工作流收回  private FuncButton callbackButton = new CallbackButton();  //是否送主任审核  private FuncButton isSendToNextButton = new IsSendToNextButton();  // 工作流填写意见审核通过  private FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流审核通过  private FuncButton auditPassButton = new AuditPassButton();  // 工作流销审  private FuncButton unAuditButton = new UnauditButton();  // 工作流退回  private FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  private FuncButton traceButton = new TraceButton();  private PrintPreviewButton printPreviewButton = new PrintPreviewButton();  protected ListCursor listCursor;  private ZcEbPackPreAudit oldZcEbPackPreAudit;  private ZcEbProviderPreAuditListPanel listPanel;  private ZcEbProPreAuditItemTableModelConverter modelConverter;  private ZcEbProviderPreAuditEditPanel self = this;  private GkBaseDialog parent;  private JTabbedPane jTabbedPane = null;  private JTablePanel detailTablePanel = new JTablePanel();  private JTablePanel itemTablePanel = new JTablePanel();  private JFuncToolBar itemBottomToolBar = null;  private JFuncToolBar detailBottomToolBar = null;  private List oldItemList;  public ZcEbProviderPreAuditEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus, ZcEbProviderPreAuditListPanel listPanel) {    super(ZcEbPackPreAudit.class, listPanel.getBillElementMeta());    this.listCursor = listCursor;    this.listPanel = listPanel;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "供应商初审", TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.parent = parent;    modelConverter = new ZcEbProPreAuditItemTableModelConverter();    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    //    AutoNumFieldEditor resultCode = new AutoNumFieldEditor("审批单编号", "resultCode");    //    editorList.add(resultCode);    TextFieldEditor projCode = new TextFieldEditor("项目编号", "projCode");    editorList.add(projCode);    TextFieldEditor projName = new TextFieldEditor("项目名称", "projName");    editorList.add(projName);    TextFieldEditor packCode = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE), "packCode");    editorList.add(packCode);    TextFieldEditor packName = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME), "packName");    editorList.add(packName);    OrgFieldEditor auditOrg = new OrgFieldEditor("审核组", "orgCode", false);    editorList.add(auditOrg);    TextFieldEditor auditor = new TextFieldEditor("初审人", "auditor");    editorList.add(auditor);    DateFieldEditor aduitDate = new DateFieldEditor("初审时间", "auditDate", DateField.TimeTypeH24);    editorList.add(aduitDate);    TextFieldEditor remark = new TextFieldEditor("备注", "remark");    editorList.add(remark);    return editorList;  }  @Override  public JComponent createSubBillPanel() {    jTabbedPane = new JTabbedPane();    itemTablePanel.init();    itemTablePanel.getSearchBar().setVisible(false);    detailTablePanel.setPanelId(this.getClass().getName() + "_itemTable");    itemTablePanel.getTable().setShowCheckedColumn(true);    itemTablePanel.getTable().getTableHeader().setReorderingAllowed(false);    itemTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    detailTablePanel.init();    detailTablePanel.getSearchBar().setVisible(false);    detailTablePanel.setPanelId(this.getClass().getName() + "_detailTablePanel");    detailTablePanel.getTable().setShowCheckedColumn(true);    detailTablePanel.getTable().getTableHeader().setReorderingAllowed(false);    detailTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    itemBottomToolBar = new JFuncToolBar();    FuncButton addBtn = new SubaddButton(false);    JButton insertBtn = new SubinsertButton(false);    JButton delBtn = new SubdelButton(false);    FuncButton addItemBtn = new CommonButton("fsubadd", "引用符合性指标", "subadd.png");    FuncButton deleAllItemBtn = new CommonButton("fsubdel", "删除全部", "subdel.png");    itemBottomToolBar.add(addBtn);    itemBottomToolBar.add(addItemBtn);    itemBottomToolBar.add(insertBtn);    itemBottomToolBar.add(delBtn);    itemBottomToolBar.add(deleAllItemBtn);    itemTablePanel.add(itemBottomToolBar, BorderLayout.SOUTH);    addItemBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZcEbPackPreAudit obj = (ZcEbPackPreAudit) (listCursor.getCurrentObject());        obj.setItemList(getItemListByFormula(obj));        refreshItemTablePanel();      }    });    addBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZcEbProviderPreAuditItem item = new ZcEbProviderPreAuditItem();        ZcEbPackPreAudit bean = (ZcEbPackPreAudit) listCursor.getCurrentObject();        item.setPackCode(bean.getPackCode());        item.setProjCode(bean.getProjCode());        item.setItemCode(UUID.randomUUID().toString());        int rowNum = addSub(itemTablePanel, item);        itemTablePanel.getTable().setRowSelectionInterval(rowNum, rowNum);      }    });    insertBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZcEbProviderPreAuditItem item = new ZcEbProviderPreAuditItem();        ZcEbPackPreAudit bean = (ZcEbPackPreAudit) listCursor.getCurrentObject();        item.setPackCode(bean.getPackCode());        item.setProjCode(bean.getProjCode());        item.setItemCode(UUID.randomUUID().toString());        int rowNum = addSub(itemTablePanel, item);        itemTablePanel.getTable().setRowSelectionInterval(rowNum, rowNum);      }    });    deleAllItemBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZcEbPackPreAudit obj = (ZcEbPackPreAudit) (listCursor.getCurrentObject());        obj.getItemList().clear();        refreshItemTablePanel();      }    });    delBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        deleteSub(itemTablePanel);      }    });    detailBottomToolBar = new JFuncToolBar();    PassButton passButton = new PassButton();    detailBottomToolBar.add(passButton);    detailTablePanel.add(detailBottomToolBar, BorderLayout.SOUTH);    passButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        setItemAllPass();      }    });    jTabbedPane.addTab("供应商初审指标表", itemTablePanel);    jTabbedPane.addTab("供应商初审明细", detailTablePanel);    jTabbedPane.addChangeListener(new ChangeListener() {      public void stateChanged(ChangeEvent e) {        int index = ((JTabbedPane) e.getSource()).getSelectedIndex();        if (index == 1) {          //校验如果评审指标发生变化了，就要重新绘制二维表格          if (isItemDataChanged()) {            refreshDetailTablePanel();          }        }      }    });    return jTabbedPane;  }  private void refreshData() {    ZcEbPackPreAudit bill = (ZcEbPackPreAudit) listCursor.getCurrentObject();    if (bill.getStatus() == null || bill.getStatus().equals("0") || bill.getStatus().equals("noAudit")) {      //      pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      bill.setAuditor(requestMeta.getSvUserName());      bill.setNd(requestMeta.getSvNd());      bill.setStatus("0");    } else {      pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    }    setProviderList(bill);    bill.setItemList(getItemlist(bill));    refreshItemTablePanel();    setOldItemList();    refreshDetailTablePanel();    this.setEditingObject(bill);    setOldObject();    updateFieldEditorsEditable();    setSubTableEditable(detailTablePanel, detailBottomToolBar);    setSubTableEditable(itemTablePanel, itemBottomToolBar);    setButtonStatus(bill, requestMeta, listCursor);    //显示审核通过    if (!"exec".equalsIgnoreCase(bill.getStatus())) {      this.auditPassButton.setVisible(true);      this.editButton.setVisible(true);      this.saveButton.setVisible(true);      this.deleteButton.setVisible(true);      this.auditPassButton.setEnabled(true);      this.editButton.setEnabled(true);      this.saveButton.setEnabled(true);      this.deleteButton.setEnabled(true);    }  }  private void refreshItemTablePanel() {    ZcEbPackPreAudit bill = (ZcEbPackPreAudit) listCursor.getCurrentObject();    modelConverter.setItemList(bill.getItemList());    itemTablePanel.setTableModel(modelConverter.convertSubBiTableData(bill.getItemList()));    ZcUtil.translateColName(itemTablePanel.getTable(), modelConverter.getItemInfo());  }  private void refreshDetailTablePanel() {    ZcEbPackPreAudit bill = (ZcEbPackPreAudit) listCursor.getCurrentObject();    for (int i = 0; i < bill.getProviderList().size(); i++) {      ZcEbProviderPreAudit bean = (ZcEbProviderPreAudit) bill.getProviderList().get(i);      //校验数据库中存在，取数据库中的，如果数据库中不存在，评审结果为null。      List list = new ArrayList();      if (!isItemDataChanged()) {        list = getProviderAuditItemResult(bean);      }      if (list == null || list.size() == 0) {        List noAuditItemlist = new ArrayList();        for (int j = 0; j < bill.getItemList().size(); j++) {          ZcEbProviderPreAuditItem item = (ZcEbProviderPreAuditItem) bill.getItemList().get(j);          ZcEbProviderPreAudiItemtResult resultItem = new ZcEbProviderPreAudiItemtResult();          resultItem.setItemCode(item.getItemCode());          resultItem.setItemName(item.getItemName());          resultItem.setPackCode(bean.getPackCode());          resultItem.setProjCode(bean.getProjCode());          resultItem.setProviderCode(bean.getProviderCode());          resultItem.setProviderName(bean.getProviderName());          noAuditItemlist.add(resultItem);        }        bean.setItemList(noAuditItemlist);      } else {        bean.setItemList(list);      }    }    detailTablePanel.setTableModel(modelConverter.convertToTableModel(bill.getProviderList()));    addDetaiTableListener(detailTablePanel.getTable());    setTabledetailEditor(detailTablePanel.getTable());    setOldItemList();    setSubTableEditable(detailTablePanel, detailBottomToolBar);    setSubTableEditable(itemTablePanel, itemBottomToolBar);  }  private void setTabledetailEditor(JTable table) {    AsValComboBoxCellEditor asValComboBoxCellEditor = new AsValComboBoxCellEditor(ZcValSetConstants.complianceValue_valSetId);    ZcEbPackPreAudit bill = (ZcEbPackPreAudit) listCursor.getCurrentObject();    //设置编辑类型    for (int i = 0; i < bill.getItemList().size(); i++) {      SwingUtil.setTableCellEditor(table, ((ZcEbProviderPreAuditItem) bill.getItemList().get(i)).getItemName(), asValComboBoxCellEditor);      SwingUtil.setTableCellRenderer(table, ((ZcEbProviderPreAuditItem) bill.getItemList().get(i)).getItemName(), new AsValCellRenderer(      ZcValSetConstants.complianceValue_valSetId));    }    SwingUtil.setTableCellEditor(table, "评审结果", asValComboBoxCellEditor);    SwingUtil.setTableCellRenderer(table, "评审结果", new AsValCellRenderer(ZcValSetConstants.complianceValue_valSetId));  }  private void addDetaiTableListener(final JPageableFixedTable table) {    final MyTableModel model = (MyTableModel) (table.getModel());    model.addTableModelListener(new TableModelListener() {      public void tableChanged(TableModelEvent e) {        int n = e.getColumn();        if (e.getColumn() > 0 && e.getColumn() < table.getColumnCount() - 1) {          if (e.getType() == TableModelEvent.UPDATE) {            int k = table.getSelectedRow();            if (k < 0)              return;            String obj = (String) model.getValueAt(k, n);            if (obj != null) {              /**               * 同步表格里的数据               */              ZcEbPackPreAudit bill = (ZcEbPackPreAudit) listCursor.getCurrentObject();              ZcEbProviderPreAudit provider = (ZcEbProviderPreAudit) bill.getProviderList().get(table.convertRowIndexToView(k));              ZcEbProviderPreAudiItemtResult result = (ZcEbProviderPreAudiItemtResult) provider.getItemList().get(n - 1);              result.setAuditValue(obj);              table.setValueAt(updateProviderAuditValue(k, model), k, table.getColumnCount() - 1);            } else {              return;            }          }        }      }    });  }  private String updateProviderAuditValue(int rowIndex, MyTableModel model) {    ZcEbPackPreAudit bill = (ZcEbPackPreAudit) listCursor.getCurrentObject();    ZcEbProviderPreAudit providerPreAudit = (ZcEbProviderPreAudit) bill.getProviderList().get(rowIndex);    return providerPreAudit.updateIsPass();  }  private void setOldObject() {    oldZcEbPackPreAudit = (ZcEbPackPreAudit) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  private void setOldItemList() {    ZcEbPackPreAudit bill = (ZcEbPackPreAudit) listCursor.getCurrentObject();    oldItemList = (List) ObjectUtil.deepCopy(bill.getItemList());  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(saveButton);    toolBar.add(editButton);//    toolBar.add(sendButton);//    toolBar.add(suggestPassButton);    toolBar.add(auditPassButton);    //显示控制    auditPassButton.setCompoId(null);//    toolBar.add(callbackButton);//    toolBar.add(unAuditButton);//    toolBar.add(unTreadButton);//    toolBar.add(traceButton);    toolBar.add(isSendToNextButton);    toolBar.add(deleteButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(printPreviewButton);    toolBar.add(exitButton);    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 删除        doRemove();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 保存        doSave();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 修改        doEdit();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 上一页        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 下一页        doNext();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送审        doSend();      }    });    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 收回        doCallback();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核        doSuggestPass();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 审核        doAuditPass();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 销审        doUnaudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退回        doUntread();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 流程跟踪        doTrace();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退出        doExit();      }    });    isSendToNextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送审        doSendNext();      }    });  }  private void refreshAll(ZcEbPackPreAudit afterSaveBill, boolean isRefreshButton) {    this.listCursor.setCurrentObject(afterSaveBill);    refreshData();    if (isRefreshButton) {      setButtonStatus(afterSaveBill, requestMeta, this.listCursor);      //显示审核通过      if (ZcSettingConstants.PAGE_STATUS_NEW.equals(pageStatus)) {        this.auditPassButton.setVisible(true);      }    }  }  private void setItemAllPass() {    ZcEbPackPreAudit bill = (ZcEbPackPreAudit) listCursor.getCurrentObject();    for (int i = 0; i < bill.getProviderList().size(); i++) {      ZcEbProviderPreAudit provider = (ZcEbProviderPreAudit) bill.getProviderList().get(i);      for (int j = 0; j < provider.getItemList().size(); j++) {        ZcEbProviderPreAudiItemtResult itemResult = (ZcEbProviderPreAudiItemtResult) provider.getItemList().get(j);        itemResult.setAuditValue("1");      }      //设置通过      provider.setIsPass("1");    }    detailTablePanel.setTableModel(modelConverter.convertToTableModel(bill.getProviderList()));    addDetaiTableListener(detailTablePanel.getTable());    setTabledetailEditor(detailTablePanel.getTable());  }  public void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setSubTableEditable(detailTablePanel, detailBottomToolBar);    setSubTableEditable(itemTablePanel, itemBottomToolBar);    setButtonStatus();  }  @Override  public void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if ("auditDate".equals(fd.getFieldName()) || "remark".equals(fd.getFieldName())) {          fd.setEnabled(true);        } else {          fd.setEnabled(false);        }      }    } else {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }    }  }  protected void setSubTableEditable(JTablePanel tablePanel, JFuncToolBar bottomToolBar) {    TableModel tablemodel = (TableModel) tablePanel.getTable().getModel();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      tablePanel.getTable().setEnabled(true);      bottomToolBar.setEnabled(true);    } else {      tablePanel.getTable().setEnabled(false);      bottomToolBar.setEnabled(false);    }  }  private void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldZcEbPackPreAudit);      }    }    listCursor.previous();    refreshData();  }  private void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldZcEbPackPreAudit);      }    }    listCursor.next();    refreshData();  }  public boolean doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return false;        }      }    }    this.parent.dispose();    return true;  }  /**   * 保存前校验   * @param cpApply   * @return   */  private boolean checkBeforeSave() {    stopTableEditing();    StringBuffer errStr = new StringBuffer();    ZcEbPackPreAudit bill = (ZcEbPackPreAudit) listCursor.getCurrentObject();    //校验初审指标    if (bill.getItemList() != null && bill.getItemList().size() > 0) {      for (int i = 0; i < bill.getItemList().size(); i++) {        ZcEbProviderPreAuditItem item = (ZcEbProviderPreAuditItem) bill.getItemList().get(i);        if (item.getItemName() == null || "".equals(item.getItemName())) {          errStr.append("<html><b><font size='3' color='red'>指标名称没有填写</font></b></html>\n");          break;        }      }    } else {      errStr.append("<html><b><font size='3' color='red'>初审指标没有填写</font></b></html>\n");    }    //校验初审时间    if (bill.getAuditDate() == null) {      errStr.append("<html><b><font size='3' color='red'>初审时间没有填写</font></b></html>\n");    } else if (bill.getAuditDate().after(new Date())) {      errStr.append("<html><b><font size='3' color='red'>初审时间不能晚于当前时间</font></b></html>\n");    }    loop: for (int i = 0; i < bill.getProviderList().size(); i++) {      ZcEbProviderPreAudit provider = (ZcEbProviderPreAudit) bill.getProviderList().get(i);      List auditList = provider.getItemList();      for (int j = 0; j < provider.getItemList().size(); j++) {        ZcEbProviderPreAudiItemtResult itemResult = (ZcEbProviderPreAudiItemtResult) provider.getItemList().get(j);        if (itemResult.getAuditValue() == null) {          errStr.append("<html><b><font size='3' color='red'>指标没有评审</font></b></html>\n");          break loop;        }      }    }    if (errStr.toString().length() > 0) {      JOptionPane.showMessageDialog(this, errStr.toString(), "提示", JOptionPane.ERROR_MESSAGE);      return false;    }    return true;  }  public void stopTableEditing() {    JPageableFixedTable biTable = this.detailTablePanel.getTable();    JPageableFixedTable itemTable = this.itemTablePanel.getTable();    if (biTable.isEditing()) {      biTable.getCellEditor().stopCellEditing();    }    if (itemTable.isEditing()) {      biTable.getCellEditor().stopCellEditing();    }  }  public void doRemove() {    int num = JOptionPane.showConfirmDialog(this, "确定删除吗", "删除确认", 0);    if (num != 0) {      return;    }    boolean success = true;    String errorInfo = "";    try {      requestMeta.setFuncId(deleteButton.getFuncId());      ZcEbPackPreAudit bill = this.listPanel.zcEbProviderPreAuditServiceDelegate.getZcEbPackPreAudit(        ((ZcEbPackPreAudit) listCursor.getCurrentObject()).getAuditCode(), requestMeta);      if (bill == null) {        success = true;//        errorInfo += "该数据已经被删除";      } else if ("exec".equals(bill.getStatus())) {        success = false;        errorInfo += "该数据已经通过审核，不能删除";      } else {        listPanel.zcEbProviderPreAuditServiceDelegate.deleteZcEbPackPreAudit(bill, requestMeta);      }    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      //点击保存后更改界面状态      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      refreshData();      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  public boolean doSave() {    if (!checkBeforeSave()) {      return false;    }    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      //点击保存后更改界面状态      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      this.auditPassButton.setEnabled(true);      this.editButton.setEnabled(true);      this.deleteButton.setEnabled(true);      this.saveButton.setEnabled(false);      refreshData();      return true;    }    boolean success = true;    String errorInfo = "";    try {      requestMeta.setFuncId(saveButton.getFuncId());      ZcEbPackPreAudit bill = (ZcEbPackPreAudit) listCursor.getCurrentObject();      //审核通过时更新状态      bill.setStatus("1");      listPanel.zcEbProviderPreAuditServiceDelegate.saveZcEbPackPreAudit(bill, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      //点击保存后更改界面状态      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      refreshData();      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }    return true;  }  /*   * 流程跟踪   */  private void doTrace() {    ZcBaseBill bean = (ZcBaseBill) this.listCursor.getCurrentObject();    if (bean == null) {      return;    }    ZcUtil.showTraceDialog(bean, compoId);  }  /*   * 送审   */  private void doSend() {    boolean success = true;    ZcEbPackPreAudit afterSaveBill = null;    String errorInfo = "";    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据已经发生改变，先保存数据再送审.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    if (!checkBeforeSave()) {      return;    }    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    try {      requestMeta.setFuncId(this.sendButton.getFuncId());      ZcEbPackPreAudit bill = (ZcEbPackPreAudit) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      bill.setComment(commentDialog.getComment());      this.listPanel.zcEbProviderPreAuditServiceDelegate.newCommitFN(bill, requestMeta);      afterSaveBill = this.listPanel.zcEbProviderPreAuditServiceDelegate.getZcEbPackPreAudit(bill.getAuditCode(), requestMeta);    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshAll(afterSaveBill, true);      this.listPanel.refreshCurrentTabData();    }  }  /*   * 收回   */  private void doCallback() {    boolean success = true;    ZcEbPackPreAudit afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.callbackButton.getFuncId());      ZcEbPackPreAudit bill = (ZcEbPackPreAudit) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      listPanel.zcEbProviderPreAuditServiceDelegate.callbackFN(bill, requestMeta);      afterSaveBill = this.listPanel.zcEbProviderPreAuditServiceDelegate.getZcEbPackPreAudit(bill.getAuditCode(), requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshAll(afterSaveBill, true);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 填写意见审核   */  private void doSuggestPass() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    if (!checkBeforeSave()) {      return;    }    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcEbPackPreAudit afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.suggestPassButton.getFuncId());      ZcEbPackPreAudit bill = (ZcEbPackPreAudit) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setComment(commentDialog.getComment());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      listPanel.zcEbProviderPreAuditServiceDelegate.auditFN(bill, requestMeta, false);      afterSaveBill = this.listPanel.zcEbProviderPreAuditServiceDelegate.getZcEbPackPreAudit(bill.getAuditCode(), requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshAll(afterSaveBill, true);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 审核通过   */  private void doAuditPass() {    if (!checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    try {      ZcEbPackPreAudit bill = (ZcEbPackPreAudit) this.listCursor.getCurrentObject();      bill.setAuditDate(requestMeta.getSysDate());      //审核通过修改状态      requestMeta.setFuncId(auditPassButton.getFuncId());      //审核通过时更新状态      bill.setStatus("exec");      ZcEbPackPreAudit afterSaveBill = listPanel.zcEbProviderPreAuditServiceDelegate.updateZcEbPackPreAuditStatus(bill, requestMeta);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshAll(afterSaveBill, true);    } catch (Exception e) {      JOptionPane.showMessageDialog(this, "审核失败 ！" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    }    //    executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_NO);  }  /*   * 销审   */  private void doUnaudit() {    boolean success = true;    ZcEbPackPreAudit afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unAuditButton.getFuncId());      ZcEbPackPreAudit bill = (ZcEbPackPreAudit) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      listPanel.zcEbProviderPreAuditServiceDelegate.unAuditFN(bill, requestMeta);      afterSaveBill = this.listPanel.zcEbProviderPreAuditServiceDelegate.getZcEbPackPreAudit(bill.getAuditCode(), requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshAll(afterSaveBill, true);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doSendNext() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    ZcEbPackPreAudit bill = (ZcEbPackPreAudit) this.listCursor.getCurrentObject();    //    int sel = JOptionPane.showConfirmDialog(this, "是否送主任审核？");    //    if (sel == JOptionPane.OK_OPTION) {    //      executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_YES);    //    } else {    //      executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_NO);    //    }    executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_YES);  }  private void executeAudit(ZcEbPackPreAudit bill, int isGoonAudit) {    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    String errorInfo = "";    try {      bill.setIsGoonAudit(isGoonAudit);      bill.setComment(commentDialog.getComment());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      requestMeta.setFuncId(this.isSendToNextButton.getFuncId());      listPanel.zcEbProviderPreAuditServiceDelegate.auditFN(bill, requestMeta, true);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshAll(bill, true);    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 退回   */  private void doUntread() {    if (!checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcEbPackPreAudit afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unTreadButton.getFuncId());      ZcEbPackPreAudit bill = (ZcEbPackPreAudit) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      bill.setComment(commentDialog.getComment());      listPanel.zcEbProviderPreAuditServiceDelegate.untreadFN(bill, requestMeta);      afterSaveBill = this.listPanel.zcEbProviderPreAuditServiceDelegate.getZcEbPackPreAudit(bill.getAuditCode(), requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshAll(afterSaveBill, true);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.BILL_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      //添加审核通过按钮显示      bs = new ButtonStatus();      bs.setButton(this.auditPassButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      //添加删除按钮显示      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbPackPreAudit obj = (ZcEbPackPreAudit) (this.listCursor.getCurrentObject());    String billStatus = obj.getStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, obj.getProcessInstId());  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldZcEbPackPreAudit).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  public boolean isItemDataChanged() {    ZcEbPackPreAudit obj = (ZcEbPackPreAudit) (this.listCursor.getCurrentObject());    return !DigestUtil.digest(oldItemList).equals(DigestUtil.digest(obj.getItemList()));  }  private List getItemlist(ZcEbPackPreAudit zcEbPackPreAudit) {    List exitsList = getPreAuditItemList(zcEbPackPreAudit);    if (exitsList != null && exitsList.size() > 0) {      return exitsList;    }    return getItemListByFormula(zcEbPackPreAudit);  }  //通过符合性指标填充预审指标集合  private List getItemListByFormula(ZcEbPackPreAudit zcEbPackPreAudit) {    List itemList = new ArrayList();    ElementConditionDto dto = new ElementConditionDto();    dto.setProjCode(zcEbPackPreAudit.getProjCode());    dto.setPackCode(zcEbPackPreAudit.getPackCode());    List list = listPanel.zcEbBaseServiceDelegate.getForeignEntitySelectedData("ZcEbFormula.getZcEbFormulaByPackCode", dto, requestMeta);    if (list == null || list.size() <= 0) {      return itemList;    }    ZcEbFormula formula = (ZcEbFormula) list.get(0);    Map map = new HashMap();    map.put("formulaCode", formula.getFormulaCode());    map.put("itemType", EvalItemType.COMPLIANICE);    List formulaItemList = listPanel.zcEbBaseServiceDelegate.queryDataForList("ZcEbFormula.getZcEbFormulaItemList", map, requestMeta);    if (formulaItemList == null || formulaItemList.size() <= 0) {      return itemList;    }    List noParentItemList = new ArrayList();    for (int i = 0; i < formulaItemList.size(); i++) {      ZcEbFormulaItem item = (ZcEbFormulaItem) formulaItemList.get(i);      if (!existChild(formulaItemList, item)) {        noParentItemList.add(item);      }    }    for (int i = 0; i < noParentItemList.size(); i++) {      ZcEbFormulaItem formulaItem = (ZcEbFormulaItem) noParentItemList.get(i);      ZcEbProviderPreAuditItem auditItem = new ZcEbProviderPreAuditItem();      auditItem.setItemName(formulaItem.getName());      auditItem.setItemCode(formulaItem.getItemCode());      auditItem.setItemDesc(formulaItem.getDescription());      auditItem.setPackCode(zcEbPackPreAudit.getPackCode());      auditItem.setProjCode(zcEbPackPreAudit.getProjCode());      itemList.add(auditItem);    }    return itemList;  }  private boolean existChild(List formulaItemList, ZcEbFormulaItem item) {    for (int i = 0; i < formulaItemList.size(); i++) {      ZcEbFormulaItem item1 = (ZcEbFormulaItem) formulaItemList.get(i);      if (item1.getParentItemCode().equals(item.getItemCode())) {        return true;      }    }    return false;  }  /**   * 取评审供应商列表   */  private void setProviderList(ZcEbPackPreAudit zcEbPackPreAudit) {    Map map = new HashMap();    map.put("packCode", zcEbPackPreAudit.getPackCode());    map.put("projCode", zcEbPackPreAudit.getProjCode());    zcEbPackPreAudit.setProviderList(listPanel.zcEbProviderPreAuditServiceDelegate.getZcEbProviderPreAuditList(map, requestMeta));  }  /**   * 取初审指标集合   */  private List getPreAuditItemList(ZcEbPackPreAudit zcEbPackPreAudit) {    Map map = new HashMap();    map.put("packCode", zcEbPackPreAudit.getPackCode());    map.put("projCode", zcEbPackPreAudit.getProjCode());    return listPanel.zcEbProviderPreAuditServiceDelegate.getPackPreAuditItemList(map, requestMeta);  }  /**   * 取供应商评审明细结果   */  private List getProviderAuditItemResult(ZcEbProviderPreAudit bean) {    Map map = new HashMap();    map.put("projCode", bean.getProjCode());    map.put("packCode", bean.getPackCode());    map.put("providerCode", bean.getProviderCode());    return listPanel.zcEbProviderPreAuditServiceDelegate.getProviderAuditResultItemList(map, requestMeta);  }}
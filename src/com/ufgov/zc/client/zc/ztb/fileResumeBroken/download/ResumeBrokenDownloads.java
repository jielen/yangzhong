package com.ufgov.zc.client.zc.ztb.fileResumeBroken.download;import com.ufgov.zc.client.zc.ztb.fileResumeBroken.authentication.Transfer;import java.io.*;import java.util.HashMap;import java.util.Map;import java.util.Properties;public class ResumeBrokenDownloads {  private String fileId;  private Map parameterMap = new HashMap();  private String projectId;  private String filePath;  public String getFilePath() {    return filePath;  }  public void setFilePath(String filePath) {    this.filePath = filePath;  }  public String getProjectId() {    return projectId;  }  public void setProjectId(String projectId) {    this.projectId = projectId;  }  public String getFileId() {    return fileId;  }  public void setFileId(String fileId) {    this.fileId = fileId;  }  public Map getParameterMap() {    return parameterMap;  }  public void setParameterMap(Map parameterMap) {    this.parameterMap = parameterMap;  }  public ResumeBrokenDownloads(String fileId, String projectId, String filePath, String webIp) {    setFileId(fileId);    setProjectId(projectId);    setFilePath(filePath);    parameterMap.put("FILEID", fileId);    if (webIp == null || "".equals(webIp)) {      parameterMap.put("URL", getUrl());    } else {      parameterMap.put("URL", webIp );    }    parameterMap.put("PROJECTID", projectId);  }  public String getUrl() {    String url = "";    Properties properties = new Properties();    String propertiesPath = "../../url.properties";    InputStream in = getClass().getResourceAsStream(propertiesPath);    try {      properties.load(in);      url = properties.getProperty("url").toString();      System.out.println(url);      in.close();    } catch (FileNotFoundException e3) {      e3.printStackTrace();    } catch (IOException e3) {      e3.printStackTrace();    }    return url;  }  public void mkDirs(String filePath) {    File file = new File(filePath);    if (!file.exists()) {      file.mkdirs();    }  }  public Map fetchFile() {    Map returnMap = new HashMap();    Transfer transfer = new Transfer(parameterMap, "fetchFile");    transfer.startTransfer();    returnMap = transfer.getReturnMap();    return returnMap;  }  public Map downloadFile() {    Map returnMap = new HashMap();    returnMap = fetchFile();    if (returnMap.get("ERRORMESSAGE") != null && !"".equals(returnMap.get("ERRORMESSAGE"))) {      System.out.println(returnMap.get("ERRORMESSAGE"));      return returnMap;    } else {      //todo      System.out.println(returnMap.get("FILENAME"));      System.out.println(returnMap.get("SERVERFILELEN"));      String fileName = (String) returnMap.get("FILENAME");      int serverFileLen = Integer.parseInt((String) returnMap.get("SERVERFILELEN"));      String localParentFilePath = getFilePath();      mkDirs(localParentFilePath);      String localFilePath = localParentFilePath + fileName + ".ztb";      File file = new File(localFilePath);      int localFileLen = 0;      if (file.exists()) {        FileInputStream in;        try {          in = new FileInputStream(file);          localFileLen = in.available();          in.close();        } catch (FileNotFoundException e) {          e.printStackTrace();        } catch (IOException e) {          e.printStackTrace();        }      }      int buffLen = 1024 * 1024 * 5;      int len = -1;      byte[] buff = new byte[buffLen];      FileOutputStream out = null;      try {        out = new FileOutputStream(localFilePath, true);      } catch (FileNotFoundException e) {        e.printStackTrace();        returnMap.put("ERRORMESSAGE", "建立文件失败");      }      while (localFileLen < serverFileLen) {        parameterMap.put("FILENAME", fileName);        parameterMap.put("LOCALFILELEN", String.valueOf(localFileLen));        parameterMap.put("BUFFLEN", String.valueOf(buffLen));        Transfer transfer = new Transfer(parameterMap, "downloadFile");        transfer.startTransfer();        returnMap = transfer.getReturnMap();        buff = (byte[]) returnMap.get("BUFFCONTENT");        try {          out.write(buff);        } catch (IOException e) {          e.printStackTrace();          returnMap.put("ERRORMESSAGE", "写文件失败,详情：" + e.getMessage());        }        localFileLen = localFileLen + buffLen;      }      try {        out.close();      } catch (IOException e) {        e.printStackTrace();      }      returnMap.put("FILENAME", fileName);      returnMap.put("SUCCESS", "文件下载成功！");      return returnMap;    }  }  public static void main(String[] args) {    ResumeBrokenDownloads resumeBrokenDownloads = new ResumeBrokenDownloads("AC10054CFFFFFFFF8D27D2C700000002", "XCZX2011-111", "c://temp//", "");    Map returnMap = resumeBrokenDownloads.downloadFile();  }  public int getServerFileLength() {    Map returnMap = new HashMap();    returnMap = fetchFile();    if (returnMap.get("ERRORMESSAGE") != null && !"".equals(returnMap.get("ERRORMESSAGE"))) {      System.out.println(returnMap.get("ERRORMESSAGE"));      return 0;    } else {      //todo      System.out.println(returnMap.get("FILENAME"));      System.out.println(returnMap.get("SERVERFILELEN"));      return Integer.parseInt((String) returnMap.get("SERVERFILELEN"));    }  }}
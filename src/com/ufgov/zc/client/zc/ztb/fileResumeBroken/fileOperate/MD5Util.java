package com.ufgov.zc.client.zc.ztb.fileResumeBroken.fileOperate;import com.ufgov.zc.client.zc.ztb.JobThreads;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import org.apache.commons.codec.binary.Hex;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.security.MessageDigest;import java.security.NoSuchAlgorithmException;public class MD5Util {  /**   * 默认的密码字符串组合，apache校验下载的文件的正确性用的就是默认的这个组合   */  protected static char hexDigits[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };  protected MessageDigest messagedigest = null;  public MD5Util() {    try {      messagedigest = MessageDigest.getInstance("MD5");    } catch (NoSuchAlgorithmException nsaex) {      System.err.println(MD5Util.class.getName() + "初始化失败，MessageDigest不支持MD5Util。");      nsaex.printStackTrace();    }  }  public static void main(String[] args) throws IOException {    long begin = System.currentTimeMillis();    File big = new File("I:\\pwh\\出差常用软件\\eclipse3.rar");    MD5Util md5Util = new MD5Util();    String md5 = md5Util.getFileMD5String(big);    long end = System.currentTimeMillis();    System.out.println("md5:" + md5 + " time:" + ((end - begin) / 1000) + "s");  }  /**   * 适用于上G大的文件   *   * @param file   * @return   * @throws IOException   */  public String getFileMD5String(File file) throws IOException {    return getBigFileMD5(file);  }  /**   * 计算一个大文件的md5值   *   * @param f 要求md5值的文件   * @return md5串   */  public String getBigFileMD5(File f) {    FileInputStream fis = null;    try {      fis = new FileInputStream(f);      byte[] buffer = new byte[GV.BUFFER_SIZE * 1024];      int length = -1;      double finishLen = 0;      while ((length = fis.read(buffer)) != -1) {        messagedigest.update(buffer, 0, length);        finishLen += length;        String fileLen = PubFunction.getFileLength(f.length());        double percent = PubFunction.getPercent(finishLen, f.length());        JobThreads.publishProgressMsg("正在生成MD5码--【" + fileLen + "】已完成【" + percent + "%】");      }      fis.close();      return new String(Hex.encodeHex(messagedigest.digest()));    } catch (FileNotFoundException e) {      return "";    } catch (IOException e) {      return "";    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (IOException e) {        e.printStackTrace();      }    }  }  /**   * 计算一个大文件的md5值 ，过程中不转发进度信息   *   * @param f 要求md5值的文件   * @return md5串   */  public String getBigFileMD5NotDispatchProgressMsg(File f) {    FileInputStream fis = null;    try {      fis = new FileInputStream(f);      byte[] buffer = new byte[GV.BUFFER_SIZE * 1024];      int length = -1;      while ((length = fis.read(buffer)) != -1) {        messagedigest.update(buffer, 0, length);      }      fis.close();      return new String(Hex.encodeHex(messagedigest.digest()));    } catch (FileNotFoundException e) {      return "";    } catch (IOException e) {      return "";    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (IOException e) {        e.printStackTrace();      }    }  }  public String getMD5String(String s) {    return getMD5String(s.getBytes());  }  public String getMD5String(byte[] bytes) {    messagedigest.update(bytes);    return bufferToHex(messagedigest.digest());  }  private static String bufferToHex(byte bytes[]) {    return bufferToHex(bytes, 0, bytes.length);  }  private static String bufferToHex(byte bytes[], int m, int n) {    StringBuffer stringbuffer = new StringBuffer(2 * n);    int k = m + n;    for (int l = m; l < k; l++) {      appendHexPair(bytes[l], stringbuffer);    }    return stringbuffer.toString();  }  private static void appendHexPair(byte bt, StringBuffer stringbuffer) {    char c0 = hexDigits[(bt & 0xf0) >> 4];    char c1 = hexDigits[bt & 0xf];    stringbuffer.append(c0);    stringbuffer.append(c1);  }  public static boolean checkPassword(String password, String md5PwdStr) {    String s = (new MD5Util()).getMD5String(password);    return s.equals(md5PwdStr);  }}
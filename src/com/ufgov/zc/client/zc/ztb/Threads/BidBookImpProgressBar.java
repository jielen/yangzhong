package com.ufgov.zc.client.zc.ztb.Threads;import com.ufgov.zc.client.zc.ztb.component.TBPanel;import com.ufgov.zc.client.zc.ztb.model.BusinessProject;import com.ufgov.zc.client.zc.ztb.service.ImportTbFileService;import com.ufgov.zc.client.zc.ztb.util.GV;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ComponentAdapter;import java.awt.event.ComponentEvent;public class BidBookImpProgressBar implements ActionListener {  private BidBookImpProgressBar self = this;  private JDialog dialog;  private JProgressBar progressBar;  private Window parent;  private Thread thread; //处理业务的线程  private String statusInfo;  private String resultInfo;  private String cancelInfo;  private String filePath;  private TBPanel parentPanel;  public BidBookImpProgressBar() {  }  public void toStartWorker() {    Thread thread = new Thread() {      public void run() {        int index = 0;        while (index < 5) {          try {            sleep(1000);            ++index;          } catch (InterruptedException e) {            e.printStackTrace();          }        }      }    };    String loading = GV.getSimpleMsg("bidLoading");    String loadSucc = GV.getSimpleMsg("loadSucc");    String loadFail = GV.getSimpleMsg("loadFail");    BidBookImpProgressBar.show((Frame) null, thread, loading, loadSucc, loadFail, self);  }  public static void show(Window parent, Thread thread, String statusInfo, String resultInfo, String cancelInfo, BidBookImpProgressBar tmpSelf) {    new BidBookImpProgressBar(parent, thread, statusInfo, resultInfo, cancelInfo, tmpSelf);  }  private BidBookImpProgressBar(Window parent, Thread thread, String statusInfo, String resultInfo, String cancelInfo, BidBookImpProgressBar tmpSelf) {    this.parent = parent;    this.thread = thread;    this.statusInfo = statusInfo;    this.resultInfo = resultInfo;    this.cancelInfo = cancelInfo;    this.parentPanel = tmpSelf.parentPanel;    this.filePath = tmpSelf.filePath;    initUI();    startThread();    dialog.setVisible(true);  }  private void initUI() {    if (parent instanceof Dialog) {      dialog = new JDialog((Dialog) parent, true);    } else if (parent instanceof Frame) {      dialog = new JDialog((Frame) parent, true);    } else {      dialog = new JDialog((Frame) null, true);    }    final JPanel mainPane = new JPanel(null);    progressBar = new JProgressBar();    progressBar.setStringPainted(true);    progressBar.setIndeterminate(true);    progressBar.setString(statusInfo);    mainPane.add(progressBar);    dialog.getContentPane().add(mainPane);    dialog.setBackground(Color.blue);    dialog.setUndecorated(true);//除去title    dialog.setResizable(true);    dialog.setSize(390, 80);    dialog.setLocationRelativeTo(parent); //设置此窗口相对于指定组件的位置    dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE); // 不允许关闭    mainPane.addComponentListener(new ComponentAdapter() {      public void componentResized(ComponentEvent e) {        layout(mainPane.getWidth(), mainPane.getHeight());      }    });  }  private void startThread() {    new Thread() {      public void run() {        try {          thread.start(); // 处理耗时任务          doTheJobs();          thread.join();// 等待事务处理线程结束        } catch (InterruptedException e) {          e.printStackTrace();        } finally {          dialog.dispose();// 关闭进度提示框          if (resultInfo != null && !resultInfo.trim().equals("")) {            JOptionPane.showMessageDialog(parent, resultInfo, GV.getSimpleMsg("commonMessage"), JOptionPane.INFORMATION_MESSAGE);          }        }      }    }.start();  }  protected void doTheJobs() {    if (this.parentPanel == null) {      return;    }    try {      BusinessProject rlt;      ImportTbFileService service = parentPanel.getImportTbFileService();      if (service.checkProject(filePath)) {        String content = service.getProject().getName() + "(" + service.getProject().getNo() + ")";        String meg = GV.getOperateMsg("importProject.confirm", content);        if (GV.showConfirmDialog(parentPanel.getRootPane(), meg, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {          rlt = service.importProject(filePath, GV.getImportFileDir_FromRoot().toString(), true);        } else {          dialog.dispose();          resultInfo = GV.getSimpleMsg("cancelImport");          return;        }      } else {        rlt = service.importProject(filePath, GV.getImportFileDir_FromRoot().toString(), false);      }      if (rlt == null) {        resultInfo = GV.getOperateMsg("importProject.fail", "");        dialog.dispose();        return;      }      parentPanel.getSplitPane().setDividerLocation(198);      parentPanel.loadRightInitInfoPanel(rlt.getNo());      parentPanel.getSplitPane().setDividerLocation(200);      resultInfo = GV.getOperateMsg("importProject.success", rlt.getName());      parentPanel.refreshLeftFilesTreePanel();      parentPanel.refreshLeftResponsePointsTreePanel();    } catch (Exception e1) {      e1.printStackTrace();    }  }  private void layout(int width, int height) {    progressBar.setBounds(20, 20, 350, 20);  }  @SuppressWarnings("deprecation")  public void actionPerformed(ActionEvent e) {    resultInfo = cancelInfo;    thread.stop();  }  public String getFilePath() {    return filePath;  }  public void setFilePath(String filePath) {    this.filePath = filePath;  }  public TBPanel getParentPanel() {    return parentPanel;  }  public void setParentPanel(TBPanel parentPanel) {    this.parentPanel = parentPanel;  }  public static void main(String[] args) throws Exception {    new BidBookImpProgressBar();  }}
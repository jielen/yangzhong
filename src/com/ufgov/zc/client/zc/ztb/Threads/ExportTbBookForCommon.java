package com.ufgov.zc.client.zc.ztb.Threads;import com.ufgov.zc.client.zc.ztb.DataChecker;import com.ufgov.zc.client.zc.ztb.JobThreads;import com.ufgov.zc.client.zc.ztb.model.LevelOneItem;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.service.FileExportService;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import javax.swing.*;import java.awt.*;import java.io.File;import java.util.List;import java.util.Map;public class ExportTbBookForCommon extends BaseProgressThread implements Runnable {  private ExportTbBookForCommon parentObject;  private ExportTbBookForCommon self = this;  private List<SmartTreeNode> list;  private boolean isCompress = false;  private boolean isWorkerRunning = true;  public ExportTbBookForCommon() {    if (progressBar == null) {      progressBar = new JProgressBar();    }  }  public void run() {  }  public void toStartWorker() {    if (thread == null) {      thread = new Thread() {        public void run() {          while (isWorkerRunning) {            statusInfo = JobThreads.getProgressMsg();            if (statusInfo.startsWith("正在进行文件加密")) {              File srcFile = new File(filePath);              File enFile = new File(filePath + ".en");              statusInfo = statusInfo + "已完成【" + PubFunction.getPercent(enFile.length(), srcFile.length()) + "%】";            }            progressBar.setString(statusInfo);          }        }      };    }    ExportTbBookForCommon.show((Frame) null, thread, self);  }  public static void show(Window parent, Thread thread, ExportTbBookForCommon tmpSelf) {    new ExportTbBookForCommon(parent, thread, tmpSelf);  }  private ExportTbBookForCommon(Window parent, Thread thread, ExportTbBookForCommon tmpSelf) {    this.parent = parent;    this.thread = thread;    this.parentObject = tmpSelf;    this.filePath = tmpSelf.filePath;    this.progressBar = tmpSelf.progressBar;    this.list = tmpSelf.list;    initUI();    startThread();    dialog.setVisible(true);  }  private void startThread() {    new Thread() {      public void run() {        try {          thread.start(); // 处理耗时任务          doTheJobs();          thread.join();// 等待事务处理线程结束        } catch (InterruptedException e) {          e.printStackTrace();        } finally {          dialog.dispose();// 关闭进度提示框        }      }    }.start();  }  public void doTheJobs() {    boolean rlt = false;    String expInfo = "";    String ztbPath = null;    String isEncodedTip = "";    for (int i = 0; i < list.size(); i++) {      SmartTreeNode currNode = list.get(i);      try {        if (!DataChecker.toCheckTBFileValuePointWhileExp(currNode)) {          parentObject.isWorkerRunning = false;          dialog.dispose();          return;        }        JobThreads.publishProgressMsg(GV.getFileOperatorCN(GV.PROGRESS_STATUS_EXPORT_READY));        ztbPath = (new FileExportService()).exportPack(currNode, filePath, true, LevelOneItem.UPLOAD_MOLD_COMMON);        if (!JobThreads.doZipFileCheck(ztbPath).isCheckPass()) {          GV.showMessageDialog(null, GV.getSimpleMsg("foundErrFiles"));          parentObject.isWorkerRunning = false;          dialog.dispose();          return;        }        JobThreads.publishProgressMsg(GV.getFileOperatorCN(GV.PROGRESS_STATUS_EXPORT_OK));        JobThreads.publishProgressMsg(GV.getFileOperatorCN(GV.PROGRESS_STATUS_ENCODE_READY));        String projCode = PubFunction.getNeedingNodeInParent(currNode, GV.NODE_TYPE_PROJECT).getNodeCode();        String packCode = currNode.getNodeCode();        Map paras = new JobThreads().doPrepareToUploadFiles(ztbPath, projCode, packCode, true);        if ("fail".equalsIgnoreCase((String) paras.get("ENCODEDSTATUS"))) {          isEncodedTip = GV.getSimpleMsg("notEncodedAndPath") + filePath;        } else {          isEncodedTip = GV.getSimpleMsg("andPathAs") + filePath;        }        rlt = true;        JobThreads.publishProgressMsg(GV.getFileOperatorCN(GV.PROGRESS_STATUS_ENCODE_OK));      } catch (Exception e) {        rlt = false;        expInfo = e.getMessage();        e.printStackTrace();      }    }    if (rlt) {      GV.showMessageDialog(null, GV.getSimpleMsg("bidExportFinish") + isEncodedTip);    } else {      GV.showMessageDialog(null, GV.getSimpleMsg("bidExportFail") + expInfo);    }    parentObject.isWorkerRunning = false;    dialog.dispose();  }  public List<SmartTreeNode> getList() {    return list;  }  public void setList(List<SmartTreeNode> list) {    this.list = list;  }  public boolean isCompress() {    return isCompress;  }  public void setCompress(boolean isCompress) {    this.isCompress = isCompress;  }  public boolean isWorkerRunning() {    return isWorkerRunning;  }  public void setWorkerRunning(boolean isWorkerRunning) {    this.isWorkerRunning = isWorkerRunning;  }}
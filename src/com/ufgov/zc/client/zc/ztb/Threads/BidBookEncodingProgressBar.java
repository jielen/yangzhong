package com.ufgov.zc.client.zc.ztb.Threads;import com.ufgov.zc.client.zc.ztb.JobThreads;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import javax.swing.*;import java.awt.*;import java.awt.event.ComponentAdapter;import java.awt.event.ComponentEvent;import java.io.File;import java.util.Map;public class BidBookEncodingProgressBar {  private BidBookEncodingProgressBar parentObject;  private BidBookEncodingProgressBar self = this;  private JDialog dialog;  private JProgressBar progressBar;  private Window parent;  private Thread thread; //处理业务的线程  private String statusInfo;  private String resultInfo;  private String cancelInfo;  private String filePath;  private String projCode;  private String packCode;  private boolean isWorkerRunning = true;  public BidBookEncodingProgressBar() {    if (progressBar == null) {      progressBar = new JProgressBar();    }    this.statusInfo = GV.getFileOperatorCN(GV.PROGRESS_STATUS_ENCODING);    this.resultInfo = GV.getOperateMsg("encodedFinishAndSummit", GV.getTranslate("executeBid"));    this.cancelInfo = GV.getSimpleMsg("encodedFailAndRetry");  }  public void toStartWorker() {    JobThreads.publishProgressMsg(this.statusInfo);    Thread thread = new Thread() {      public void run() {        while (isWorkerRunning) {          statusInfo = JobThreads.getProgressMsg();          if (statusInfo.startsWith("正在进行文件加密")) {            File srcFile = new File(filePath);            File enFile = new File(filePath + ".en");            statusInfo = statusInfo + "已完成【" + PubFunction.getPercent(enFile.length(), srcFile.length()) + "%】";          }          progressBar.setString(statusInfo);        }      }    };    BidBookEncodingProgressBar.show((Frame) null, thread, self);  }  public static void show(Window parent, Thread thread, BidBookEncodingProgressBar tmpSelf) {    new BidBookEncodingProgressBar(parent, thread, tmpSelf);  }  private BidBookEncodingProgressBar(Window parent, Thread thread, BidBookEncodingProgressBar tmpSelf) {    this.parent = parent;    this.thread = thread;    this.statusInfo = tmpSelf.statusInfo;    this.resultInfo = tmpSelf.resultInfo;    this.cancelInfo = tmpSelf.cancelInfo;    this.filePath = tmpSelf.filePath;    this.projCode = tmpSelf.projCode;    this.packCode = tmpSelf.packCode;    this.parentObject = tmpSelf;    this.progressBar = tmpSelf.progressBar;    initUI();    startThread();    dialog.setVisible(true);  }  private void initUI() {    if (parent instanceof Dialog) {      dialog = new JDialog((Dialog) parent, true);    } else if (parent instanceof Frame) {      dialog = new JDialog((Frame) parent, true);    } else {      dialog = new JDialog((Frame) null, true);    }    final JPanel mainPane = new JPanel(null);    if (progressBar == null) {      progressBar = new JProgressBar();    }    progressBar.setStringPainted(true);    progressBar.setIndeterminate(true);    progressBar.setString(statusInfo);    mainPane.add(progressBar);    dialog.getContentPane().add(mainPane);    dialog.setBackground(Color.blue);    dialog.setUndecorated(true);//除去title    dialog.setResizable(true);    dialog.setSize(390, 60);    dialog.setLocation(PubFunction.getPosition(400));    dialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE); // 不允许关闭    mainPane.addComponentListener(new ComponentAdapter() {      public void componentResized(ComponentEvent e) {        layout(mainPane.getWidth(), mainPane.getHeight());      }    });  }  private void startThread() {    new Thread() {      public void run() {        try {          thread.start(); // 处理耗时任务          doTheJobs();          // 等待事务处理线程结束          thread.join();        } catch (InterruptedException e) {          e.printStackTrace();        } finally {          // 关闭进度提示框          dialog.dispose();          if (resultInfo != null && !resultInfo.trim().equals("")) {            JOptionPane.showMessageDialog(parent, resultInfo, GV.getSimpleMsg("commonMessage"), 1);          }        }      }    }.start();  }  protected void doTheJobs() {    try {      JobThreads.toGetCodedDemand();      parentObject.isWorkerRunning = true;      JobThreads.publishProgressMsg(GV.getFileOperatorCN(GV.PROGRESS_STATUS_ENCODE_READY));      Map paras = new JobThreads().doPrepareToUploadFiles(filePath, projCode, packCode, false);      String encodeStatus = (String) paras.get("ENCODEDSTATUS");      if ("fail".equalsIgnoreCase(encodeStatus) || "ignore".equalsIgnoreCase(encodeStatus)) {        this.resultInfo = (String) paras.get("FAILREASON");        JobThreads.publishProgressMsg(this.resultInfo);      } else {        JobThreads.publishProgressMsg(GV.getFileOperatorCN(GV.PROGRESS_STATUS_ENCODE_OK));      }      parentObject.isWorkerRunning = false;    } catch (Exception e) {      e.printStackTrace();      resultInfo = e.getMessage();      parentObject.isWorkerRunning = false;      dialog.dispose();    }  }  private void layout(int width, int height) {    progressBar.setBounds(20, 20, 350, 20);  }  public String getFilePath() {    return filePath;  }  public void setFilePath(String filePath) {    this.filePath = filePath;  }  public String getProjCode() {    return projCode;  }  public void setProjCode(String projCode) {    this.projCode = projCode;  }  public String getPackCode() {    return packCode;  }  public void setPackCode(String packCode) {    this.packCode = packCode;  }  public Window getParent() {    return parent;  }  public void setParent(Window parent) {    this.parent = parent;  }  public static void main(String[] args) throws Exception {    new BidBookEncodingProgressBar();  }}
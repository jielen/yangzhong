package com.ufgov.zc.client.zc.ztb.Threads;import com.ufgov.zc.client.zc.ztb.DataChecker;import com.ufgov.zc.client.zc.ztb.JobThreads;import com.ufgov.zc.client.zc.ztb.component.ProjectInfoPanel;import com.ufgov.zc.client.zc.ztb.component.ZipTestProgressPanel;import com.ufgov.zc.client.zc.ztb.fileResumeBroken.authentication.UserVerify;import com.ufgov.zc.client.zc.ztb.model.LevelOneItem;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.service.FileExportService;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import javax.swing.*;import java.awt.*;import java.io.File;import java.util.HashMap;import java.util.Map;public class ExportAndUploadTbBook extends BaseProgressThread implements Runnable {  private ExportAndUploadTbBook parentObject;  private ExportAndUploadTbBook self = this;  private SmartTreeNode packNode;  private boolean isWorkerRunning = true;  public ExportAndUploadTbBook() {    if (progressBar == null) {      progressBar = new JProgressBar();    }  }  public void toStartWorker() {    thread = new Thread() {      public void run() {        while (isWorkerRunning) {          statusInfo = JobThreads.getProgressMsg();          if (statusInfo.startsWith("正在进行文件加密")) {            File srcFile = new File(filePath);            File enFile = new File(filePath + ".en");            statusInfo = statusInfo + "已完成【" + PubFunction.getPercent(enFile.length(), srcFile.length()) + "%】";          }          progressBar.setString(statusInfo);        }      }    };    ExportAndUploadTbBook.show((Frame) null, self);  }  public static void show(Window parent, ExportAndUploadTbBook tmpSelf) {    new ExportAndUploadTbBook(parent, tmpSelf);  }  private ExportAndUploadTbBook(Window parent, ExportAndUploadTbBook tmpSelf) {    this.parent = parent;    this.parentObject = tmpSelf;    this.thread = tmpSelf.thread;    this.packNode = tmpSelf.packNode;    this.progressBar = tmpSelf.progressBar;    this.initUI();    this.startNewJobThread();    this.dialog.setVisible(true);  }  private void startNewJobThread() {    new Thread() {      public void run() {        try {          thread.start();          doTheJobs();          thread.join();// 等待事务处理线程结束        } catch (InterruptedException e) {          e.printStackTrace();        } finally {          dialog.dispose();        }      }    }.start();  }  public void doTheJobs() {    String packCode = null;    String projCode = null;    Map paraMap = new HashMap();    packCode = packNode.getNodeCode();    projCode = ((SmartTreeNode) packNode.getParent()).getNodeCode();    try {      if (!DataChecker.toCheckTBFileValuePointWhileExp(packNode)) {        parentObject.isWorkerRunning = false;        dialog.dispose();        return;      }      JobThreads.publishProgressMsg(GV.getFileOperatorCN(GV.PROGRESS_STATUS_ZIP_READY));      String exportPath = GV.getUpload_tmpPath().toString();      this.filePath = (new FileExportService()).exportPack(packNode, exportPath, true, LevelOneItem.UPLOAD_MOLD_COMMON);      parentObject.filePath = this.filePath;      ZipTestProgressPanel zipTestPanel = JobThreads.doZipFileCheck(this.filePath);      if (!zipTestPanel.isCheckPass()) {        GV.showMessageDialog(null, GV.getSimpleMsg("fileCheckErr"));        parentObject.isWorkerRunning = false;        dialog.dispose();        return;      }      zipTestPanel.getWindow().dispose();      JobThreads.publishProgressMsg(GV.getFileOperatorCN(GV.PROGRESS_STATUS_ENCODE_READY));      progressBar.setIndeterminate(true);      progressBar.setString("");      Map paras = new JobThreads().doPrepareToUploadFiles(this.filePath, projCode, packCode, true);      progressBar.setIndeterminate(false);      paraMap.putAll(paras);      JobThreads.publishProgressMsg(GV.getFileOperatorCN(GV.PROGRESS_STATUS_ZIP_OK));    } catch (Exception e) {      JOptionPane.showMessageDialog(null, e.getMessage());      e.printStackTrace();      parentObject.isWorkerRunning = false;      dialog.dispose();      return;    }    String tmp_isMasterMustCoded = JobThreads.getIsMasterMustCoded();    String tmp_isProviderMustCoded = JobThreads.getIsProviderMustCoded();    String localTbFilePath = (String) paraMap.get("LOCALFILEFULLPATH");    if (!localTbFilePath.endsWith(GV.SUFFIX_ZTB_EN_MEG) && JobThreads.getIsMustEncode()      && !"ignore".equalsIgnoreCase((String) paraMap.get("ENCODEDSTATUS"))) {      String title = GV.getTranslate("messageDialogTitle");      int sel = JOptionPane.showConfirmDialog(null, GV.getSimpleMsg("askIsEncode"), title, JOptionPane.YES_NO_OPTION);      if (sel == JOptionPane.OK_OPTION) {        try {          progressBar.setIndeterminate(true);          Map paras = new JobThreads().doPrepareToUploadFiles(this.filePath, projCode, packCode, false);          paraMap.putAll(paras);          JobThreads.publishProgressMsg(GV.getFileOperatorCN(GV.PROGRESS_STATUS_ZIP_OK));        } catch (Exception e) {          JOptionPane.showMessageDialog(null, e.getMessage());          e.printStackTrace();          parentObject.isWorkerRunning = false;          dialog.dispose();          return;        }      } else {        tmp_isMasterMustCoded = "N";        tmp_isProviderMustCoded = "N";      }    }    parentObject.isWorkerRunning = false;    dialog.dispose();    String ztbName = (new File(localTbFilePath)).getName();    String url = ProjectInfoPanel.getWebServerIPAddr();    paraMap.put("PROJCODE", projCode.trim());    paraMap.put("URL", url);    paraMap.put("FILENAME", ztbName);    paraMap.put("FILEPATH", localTbFilePath);    paraMap.put("PACKCODE", packCode.trim());    paraMap.put("MINIMUMFILESIZE", GV.MINIMUM_FILE_SIZE_ALERT + "");    paraMap.put("ZCISMASTERCODED", tmp_isMasterMustCoded);    paraMap.put("ZCISPROVIDERCODED", tmp_isProviderMustCoded);    paraMap.put("UPLOADMOLD", LevelOneItem.UPLOAD_MOLD_COMMON);    UserVerify userVerify = new UserVerify(paraMap);    userVerify.getStart();    Map<String, String> map = userVerify.getReturnValue();  }  public SmartTreeNode getPackNode() {    return packNode;  }  public void setPackNode(SmartTreeNode packNode) {    this.packNode = packNode;  }  public void run() {  }}
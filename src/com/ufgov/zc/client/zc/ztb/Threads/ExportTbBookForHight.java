package com.ufgov.zc.client.zc.ztb.Threads;import com.ufgov.zc.client.zc.ztb.DataChecker;import com.ufgov.zc.client.zc.ztb.JobThreads;import com.ufgov.zc.client.zc.ztb.component.ZipTestProgressPanel;import com.ufgov.zc.client.zc.ztb.model.LevelOneItem;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.service.FileExportService;import com.ufgov.zc.client.zc.ztb.service.LevelOneTwoBuilder;import com.ufgov.zc.client.zc.ztb.util.GV;import javax.swing.*;import java.awt.*;import java.util.HashMap;import java.util.List;import java.util.Map;public class ExportTbBookForHight extends BaseProgressThread implements Runnable {  private ExportTbBookForHight parentObject;  private ExportTbBookForHight self = this;  private List<SmartTreeNode> list;  private boolean isWorkerRunning = true;  private String uploadType;  public ExportTbBookForHight() {    if (progressBar == null) {      progressBar = new JProgressBar();    }  }  public void run() {  }  public void toStartWorker() {    if (thread == null) {      thread = new Thread() {        public void run() {          while (isWorkerRunning) {            statusInfo = JobThreads.getProgressMsg();            progressBar.setString(statusInfo);          }        }      };    }    ExportTbBookForHight.show((Frame) null, thread, self);  }  public static void show(Window parent, Thread thread, ExportTbBookForHight tmpSelf) {    new ExportTbBookForHight(parent, thread, tmpSelf);  }  private ExportTbBookForHight(Window parent, Thread thread, ExportTbBookForHight tmpSelf) {    this.parent = parent;    this.thread = thread;    this.parentObject = tmpSelf;    this.filePath = tmpSelf.filePath;    this.progressBar = tmpSelf.progressBar;    this.uploadType = tmpSelf.uploadType;    this.list = tmpSelf.list;    initUI();    startThread();    dialog.setVisible(true);  }  private void startThread() {    Thread jobThread = new Thread() {      public void run() {        try {          thread.start(); // 处理耗时任务          doTheJobs();          thread.join();// 等待事务处理线程结束        } catch (InterruptedException e) {          e.printStackTrace();        } finally {          dialog.dispose();// 关闭进度提示框        }      }    };    jobThread.start();  }  public void doTheJobs() {    String exportPath = GV.getUpload_tmpPath().toString();    boolean rlt = false;    String expInfo = "";    String ztbPath = null;    for (int i = 0; i < list.size(); i++) {      SmartTreeNode currNode = list.get(i);      try {        if (!DataChecker.toCheckTBFileValuePointWhileExp(currNode)) {          parentObject.isWorkerRunning = false;          dialog.dispose();          return;        }        JobThreads.publishProgressMsg(GV.getFileOperatorCN(GV.PROGRESS_STATUS_EXPORT_READY));        ztbPath = (new FileExportService()).exportPack(currNode, exportPath, true, uploadType);        projCode = ((SmartTreeNode) currNode.getParent()).getNodeCode();        packCode = currNode.getNodeCode();        ZipTestProgressPanel zipPanel = JobThreads.doZipFileCheck(ztbPath);        if (!zipPanel.isCheckPass()) {          GV.showMessageDialog(null, GV.getSimpleMsg("fileCheckErr"));          parentObject.isWorkerRunning = false;          dialog.dispose();          return;        } else {          zipPanel.getWindow().dispose();        }        JobThreads.publishProgressMsg(GV.getFileOperatorCN(GV.PROGRESS_STATUS_EXPORT_OK));        rlt = true;      } catch (Exception e) {        rlt = false;        expInfo = e.getMessage();        e.printStackTrace();      }    }    if (rlt) {      JobThreads.publishProgressMsg(GV.getFileOperatorCN(GV.PROGRESS_STATUS_START_CLIENT));      Map<String, String> paras = new HashMap<String, String>();      paras.put("UPLOADSTATUS", LevelOneItem.UPLOAD_STATUS_BIDDING);      paras.put("SUMMITSTATUS", LevelOneItem.SUMMIT_STATUS_NOW);      LevelOneTwoBuilder.toUpdateLevelOneXmlFile(projCode, packCode, paras);      JobThreads.doStartHightUploadClient();    } else {      GV.showMessageDialog(null, GV.getSimpleMsg("bidExportFail") + expInfo);    }    parentObject.isWorkerRunning = false;    dialog.dispose();  }  public List<SmartTreeNode> getList() {    return list;  }  public void setList(List<SmartTreeNode> list) {    this.list = list;  }  public String getUploadType() {    return uploadType;  }  public void setUploadType(String uploadType) {    this.uploadType = uploadType;  }  public boolean isWorkerRunning() {    return isWorkerRunning;  }  public void setWorkerRunning(boolean isWorkerRunning) {    this.isWorkerRunning = isWorkerRunning;  }}
package com.ufgov.zc.client.zc.ztb.component;import com.ufgov.zc.client.zc.ztb.JobThreads;import com.ufgov.zc.client.zc.ztb.Threads.BidBookEncodingProgressBar;import com.ufgov.zc.client.zc.ztb.component.service.TBRecordsTableService;import com.ufgov.zc.client.zc.ztb.fileResumeBroken.authentication.UserVerify;import com.ufgov.zc.client.zc.ztb.model.LevelOneItem;import com.ufgov.zc.client.zc.ztb.model.LevelTwoModel;import com.ufgov.zc.client.zc.ztb.service.ServerProjectService;import com.ufgov.zc.client.zc.ztb.util.GV;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.File;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class TBRecordsTablePanel extends BaseSelectionPanel {  private static final long serialVersionUID = -7267204107723386392L;  private List<LevelOneItem> tbFilesList = new ArrayList<LevelOneItem>();  private TBRecordsTableService dataTableService = null;  private JFrame parentEntity = null;  private JFrame currFrame = null;  public TBRecordsTablePanel(JFrame pEntity, JFrame cFrame) {    parentEntity = pEntity;    currFrame = cFrame;    dataTableService = new TBRecordsTableService();    init();    buildContents();  }  private void init() {    tbFilesList.clear();    try {      tbFilesList.addAll(dataTableService.getTBRecordsFromLevelOneXml());    } catch (Exception e) {      errorTip(GV.getSimpleMsg("nobiddata"));      e.printStackTrace();      return;    }    if (this.tbFilesList.size() <= 0) {      errorTip(GV.getSimpleMsg("nobiddata"));    } else {      errorTip(GV.getSimpleMsg("selectAndNext"));    }  }  private void buildContents() {    this.setLayout(new BorderLayout());    JPanel panel = new JPanel();    panel.setLayout(new GridBagLayout());    GridBagConstraints c = new GridBagConstraints();    c.fill = GridBagConstraints.HORIZONTAL;    c.insets = new Insets(5, 5, 0, 5);    int gridy = 0;    c.gridx = 0;    c.gridy = gridy;    c.gridwidth = 1;    JLabel l21 = new JLabel(GV.getSimpleMsg("detailList"));    panel.add(l21, c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 1;    JPanel p22 = new JPanel(new BorderLayout());    p22.setPreferredSize(new Dimension(1000, 380));    packsScrollPane.setPreferredSize(new Dimension(980, 380));    packsScrollPane.getViewport().add(getJTableScrollPane());    p22.add(packsScrollPane, BorderLayout.CENTER);    panel.add(p22, c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 5;    JPanel p1 = new JPanel(new FlowLayout(FlowLayout.LEFT));    if (alertInfoLabel == null) {      alertInfoLabel = new JLabel(" ");      alertInfoLabel.setVisible(false);    }    alertInfoLabel.setPreferredSize(new Dimension(980, 60));    alertInfoLabel.setHorizontalAlignment(SwingUtilities.LEFT);    p1.add(alertInfoLabel);    panel.add(p1, c);    JButton execEncoding = new JButton(GV.getTranslate("encode"));    execEncoding.setPreferredSize(new Dimension(100, 22));    addEncodingButtonActions(execEncoding);    JButton execBidding = new JButton(GV.getTranslate("executeBid"));    execBidding.setPreferredSize(new Dimension(100, 22));    addStartBiddingButtonActions(execBidding);    JButton exit = new JButton(GV.getTranslate("exit"));    exit.setPreferredSize(new Dimension(80, 22));    exit.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        currFrame.setVisible(false);      }    });    JButton refresh = new JButton(GV.getTranslate("refresh"));    refresh.setPreferredSize(new Dimension(80, 22));    refresh.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        refreshTable();      }    });    JPanel btPanel = new JPanel();    btPanel.setLayout(new FlowLayout());    btPanel.add(exit);    btPanel.add(execEncoding);    btPanel.add(execBidding);    btPanel.add(refresh);    this.add(btPanel, BorderLayout.SOUTH);    this.add(panel, BorderLayout.CENTER);  }  /**   * 添加加密按钮的事件响应   *   * @param execEncoding   */  private void addEncodingButtonActions(JButton execEncoding) {    execEncoding.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        List<String> toBidIndexList = dataTableService.getSelectedRows();        if (toBidIndexList.size() != 1) {          JOptionPane.showMessageDialog(null, GV.getSimpleMsg("selectOneOnly"));          return;        }        doExecuteEncoding(toBidIndexList);      }    });  }  /**   * 对选择的对应记录进行加密   *   * @param toEncodeIndexList   */  protected void doExecuteEncoding(List<String> toEncodeIndexList) {    Map<String, String> demand = JobThreads.toGetCodedDemand();    if ("N".equalsIgnoreCase(demand.get("ISMUSTCODED"))) {      JOptionPane.showMessageDialog(null, GV.getSimpleMsg("noNeedToEncode"));    }    for (int i = 0; i < tbFilesList.size(); i++) {      LevelOneItem item = tbFilesList.get(i);      if (item.getXmlFileName().equalsIgnoreCase(toEncodeIndexList.get(0))) {        if (LevelOneItem.UPLOAD_MOLD_HIGHT.equals(item.getUploadMold())) {          JOptionPane.showMessageDialog(null, GV.getSimpleMsg("noNeedToEncodeForHight"));          return;        }        String tbBookPath = item.getLevelTwoModel().getLocalFileFullPath();        if (tbBookPath.endsWith(GV.SUFFIX_MERGER_FILE)) {          String title = GV.getTranslate("messageDialogTitle");          int sel = JOptionPane.showConfirmDialog(null, GV.getSimpleMsg("reEncode"), title, JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);          if (sel == JOptionPane.NO_OPTION) {            return;          } else {            toEncodeCurrTbBook(item.getLevelTwoModel());          }        } else {          toEncodeCurrTbBook(item.getLevelTwoModel());        }      }    }  }  /**   * 对指定标书进行加密   *   * @param tbBookPath   */  private void toEncodeCurrTbBook(LevelTwoModel level2Model) {    String tbBookPath = level2Model.getLocalFileFullPath();    String projCode = level2Model.getProjCode();    String packCode = level2Model.getPackCode();    if (tbBookPath.endsWith(GV.SUFFIX_MERGER_FILE)) {      tbBookPath = tbBookPath.substring(0, tbBookPath.indexOf(".ztb") + 3);    }    BidBookEncodingProgressBar encodingPb = new BidBookEncodingProgressBar();    encodingPb.setPackCode(packCode);    encodingPb.setProjCode(projCode);    encodingPb.setFilePath(tbBookPath);    encodingPb.setParent(currFrame);    encodingPb.toStartWorker();  }  /**   * 刷新表格   *   * @throws Exception   */  public void refreshTable() {    if (tbFilesList == null || packsScrollPane == null || dataTableService == null) {      return;    }    tbFilesList.clear();    packsScrollPane.getViewport().removeAll();    try {      tbFilesList.addAll(dataTableService.getTBRecordsFromLevelOneXml());    } catch (Exception e) {      e.printStackTrace();    }    packsScrollPane.getViewport().add(getJTableScrollPane());  }  private JScrollPane getJTableScrollPane() {    JScrollPane tablePane = null;    try {      dataTableService.setTbFilesList(tbFilesList);      tablePane = new JScrollPane(dataTableService.createTable());    } catch (Exception e) {      e.printStackTrace();      tablePane = new JScrollPane();    }    return tablePane;  }  /**   * 开始投标   *   * @param button   */  private void addStartBiddingButtonActions(JButton button) {    button.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        List<String> toBidIndexList = dataTableService.getSelectedRows();        if (toBidIndexList.size() != 1) {          JOptionPane.showMessageDialog(null, GV.getSimpleMsg("selectOneOnly"));          return;        }        doExecuteBidding(toBidIndexList);      }    });  }  /**   * 执行投标   *   * @param toBiddingList   */  private void doExecuteBidding(List<String> toBiddingList) {    JobThreads.toGetCodedDemand();    for (int i = 0; i < tbFilesList.size(); i++) {      LevelOneItem item = tbFilesList.get(i);      if (item.getXmlFileName().equalsIgnoreCase(toBiddingList.get(0))) {        if (LevelOneItem.UPLOAD_STATUS_ALL_FINISH.equals(item.getTbfileUploadStatus())) {          GV.showMessageDialog(null, GV.getSimpleMsg("bidFinishYet"));          return;        }        if (LevelOneItem.UPLOAD_MOLD_HIGHT.equals(item.getUploadMold())) {          if (!LevelOneItem.UPLOAD_STATUS_UPLOAD_FINISH.equals(item.getTbfileUploadStatus())) {            Map<String, String> paras = new HashMap<String, String>();            paras.put("SUMMITSTATUS", LevelOneItem.SUMMIT_STATUS_NOW);            JobThreads.toUpdateLevelOnexmlFile(toBiddingList.get(0), paras);            JobThreads.doStartHightUploadClient();            return;          } else if (LevelOneItem.UPLOAD_STATUS_UPLOAD_FINISH.equals(item.getTbfileUploadStatus())) {            String tipInfo = GV.getSimpleMsg("uploadFinishAndWaitToBid");            int chance = JOptionPane.showConfirmDialog(null, tipInfo, "确认", JOptionPane.OK_CANCEL_OPTION);            if (chance == JOptionPane.OK_OPTION) {              toUpdateDBDataForHightWay(item);            }            return;          }        } else {          String tmp_isMasterMustCoded = JobThreads.getIsMasterMustCoded();          String tmp_isProviderMustCoded = JobThreads.getIsProviderMustCoded();          String ztbPath = item.getLevelTwoModel().getLocalFileFullPath();          String ztbName = (new File(ztbPath)).getName();          if (!ztbPath.toLowerCase().endsWith(GV.SUFFIX_ZTB_EN_MEG) && JobThreads.getIsMustEncode()) {            String tip = GV.getSimpleMsg("askForEncodeBeforeNext");            String title = GV.getTranslate("messageDialogTitle");            int sel = JOptionPane.showConfirmDialog(null, tip, title, JOptionPane.YES_NO_OPTION);            if (sel == JOptionPane.YES_OPTION) {              toEncodeCurrTbBook(item.getLevelTwoModel());              return;            } else {              tmp_isMasterMustCoded = "N";              tmp_isProviderMustCoded = "N";            }          }          String url = ProjectInfoPanel.getWebServerIPAddr();          Map<String, String> parameterMap = new HashMap<String, String>();          parameterMap.put("PROJCODE", item.getLevelTwoModel().getProjCode());          parameterMap.put("URL", url);          parameterMap.put("FILENAME", ztbName);          parameterMap.put("FILEPATH", item.getLevelTwoModel().getLocalFileFullPath());          parameterMap.put("PACKCODE", item.getLevelTwoModel().getPackCode());          parameterMap.put("MINIMUMFILESIZE", GV.MINIMUM_FILE_SIZE_ALERT + "");          parameterMap.put("ZCISMASTERCODED", tmp_isMasterMustCoded);          parameterMap.put("ZCISPROVIDERCODED", tmp_isProviderMustCoded);          parameterMap.put("UPLOADMOLD", LevelOneItem.UPLOAD_MOLD_COMMON);          Map<String, String> paras = new HashMap<String, String>();          paras.put("SUMMITSTATUS", LevelOneItem.SUMMIT_STATUS_NOW);          JobThreads.toUpdateLevelOnexmlFile(toBiddingList.get(0), paras);          UserVerify userVerify = new UserVerify(parameterMap);          userVerify.getStart();          Map<String, String> map = userVerify.getReturnValue();        }        return;      }    }  }  /**   * 高速上传标书时，用于直接更新业务数据   *   * @param item   */  private void toUpdateDBDataForHightWay(LevelOneItem item) {    String url = ProjectInfoPanel.getWebServerIPAddr();    Map<String, String> parameterMap = new HashMap<String, String>();    String projCode = item.getLevelTwoModel().getProjCode();    parameterMap.put("PROJCODE", projCode);    parameterMap.put("URL", url);    String packCode = item.getLevelTwoModel().getPackCode();    parameterMap.put("PACKCODE", packCode);    String userID = item.getLevelTwoModel().getSupplierCode();    parameterMap.put("USERID", userID);    parameterMap.put("ZCISMASTERCODED", isMasterEncoded(item.getLevelTwoModel()));    parameterMap.put("ZCISPROVIDERCODED", isProviderEncoded(item.getLevelTwoModel()));    parameterMap.put("FILEID", projCode + "@" + packCode + "@" + userID);    parameterMap.put("UPLOADMOLD", LevelOneItem.UPLOAD_MOLD_HIGHT);    String tipInfo = GV.getSimpleMsg("askSureToSummit");    int chance = JOptionPane.showConfirmDialog(null, tipInfo, "确认", JOptionPane.OK_CANCEL_OPTION);    if (chance == JOptionPane.OK_OPTION) {      try {        Map res = (new ServerProjectService()).finishOtherBusiness(parameterMap);        JobThreads.createTouBiaoFeedBack(res);      } catch (Exception e) {        e.printStackTrace();      }    }  }  /**   * 如果主辅key公钥存在的话，说明需要加密   *   * @param levelTwoModel   * @return   */  private String isMasterEncoded(LevelTwoModel levelTwoModel) {    String keyA = levelTwoModel.getMasterPublicKeyA();    String keyB = levelTwoModel.getMasterPublicKeyB();    if (keyA != null && !"".equals(keyA) && keyB != null && !"".equals(keyB)) {      return "Y";    } else {      return "N";    }  }  /**   * 一般来说供应商的公钥肯定得存在   *   * @param levelTwoModel   * @return   */  private String isProviderEncoded(LevelTwoModel levelTwoModel) {    String keyP = levelTwoModel.getSupplierPublicKey();    if (keyP != null && !"".equals(keyP)) {      return "Y";    } else {      return "N";    }  }  protected void errorTip(String msg) {    if (alertInfoLabel == null) {      alertInfoLabel = new JLabel();    }    StringBuffer alertInfo = new StringBuffer("<html><a><b><font size='3' color='red'>提示：<br>&nbsp;&nbsp;");    alertInfo.append(msg);    alertInfo.append("</font><b><a></html>");    alertInfoLabel.setText(alertInfo.toString());    alertInfoLabel.setPreferredSize(new Dimension(820, 60));    alertInfoLabel.setVisible(true);    alertInfoLabel.updateUI();  }  /**   * @param args   */  public static void main(String[] args) {    JFrame nextFrame = new JFrame();    JFrame currFrame = new JFrame();    nextFrame.setIconImage(nextFrame.getToolkit().getImage(GV.getImageUrl("windowicon.jpg")));    currFrame.setIconImage(currFrame.getToolkit().getImage(GV.getImageUrl("windowicon.jpg")));    nextFrame.add(new TBRecordsTablePanel(currFrame, nextFrame));    nextFrame.setSize(new Dimension(1024, 620));    nextFrame.setTitle("项目投标列表");    nextFrame.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);    nextFrame.setLocationRelativeTo(null);    nextFrame.toFront();    nextFrame.setMinimumSize(new Dimension(1024, 620));    nextFrame.setVisible(true);  }}
package com.ufgov.zc.client.zc.ztb.component.service;import com.ufgov.zc.client.zc.ztb.component.AddResponsePointPanel;import com.ufgov.zc.client.zc.ztb.component.MainPanel;import com.ufgov.zc.client.zc.ztb.component.SingleSeletionTree;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.service.MoveNodeServiceRP;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import javax.swing.*;import java.awt.*;public class CommonActionServiceRP {  private MainPanel mainPanel;  private JFrame rootContainer;  public CommonActionServiceRP(JFrame rootContainer) {    this.rootContainer = rootContainer;  }  public CommonActionServiceRP(MainPanel mainPanel) {    this.mainPanel = mainPanel;  }  /**   * 将当前节点移至第一个   *   * @param ssTree   * @throws Exception   */  public void doExecuteMoveToFirstRP(SingleSeletionTree ssTree) throws Exception {    SmartTreeNode currentNode = ssTree.getCurrentNode();    if (currentNode == null) {      return;    }    MoveNodeServiceRP moveNodeService = new MoveNodeServiceRP();    if (moveNodeService.moveuptofirst(currentNode)) {      this.mainPanel.refreshLeftResponsePointsTreePanel();    }  }  /**   * 将当前节点往上移动   *   * @param ssTree   * @throws Exception   */  public void doExecuteMoveUpRP(SingleSeletionTree ssTree) throws Exception {    SmartTreeNode currentNode = ssTree.getCurrentNode();    if (currentNode == null) {      return;    }    MoveNodeServiceRP moveNodeService = new MoveNodeServiceRP();    if (moveNodeService.moveup(currentNode)) {      this.mainPanel.refreshLeftResponsePointsTreePanel();    }  }  /**   * 将当前节点往下移动   *   * @param ssTree   * @throws Exception   */  public void doExecuteMoveDownRP(SingleSeletionTree ssTree) throws Exception {    SmartTreeNode currentNode = ssTree.getCurrentNode();    MoveNodeServiceRP moveNodeService = new MoveNodeServiceRP();    if (moveNodeService.movedown(currentNode)) {      this.mainPanel.refreshLeftResponsePointsTreePanel();    }  }  /**   * 将当前节点移至最后一行   *   * @param ssTree   * @throws Exception   */  public void doExecuteMoveToLastRP(SingleSeletionTree ssTree) throws Exception {    SmartTreeNode currentNode = ssTree.getCurrentNode();    MoveNodeServiceRP moveNodeService = new MoveNodeServiceRP();    if (moveNodeService.movedowntolast(currentNode)) {      this.mainPanel.refreshLeftResponsePointsTreePanel();    }  }  /**   * 添加一个新节点   *   * @param ssTree   * @throws Exception   */  public void doExecuteNodeAddingRP(SingleSeletionTree ssTree) throws Exception {    JFrame frame = new JFrame();    frame.setLayout(new BorderLayout());    frame.setIconImage(frame.getToolkit().getImage(GV.getImageUrl("windowicon.jpg")));    frame.add(new AddResponsePointPanel(frame, mainPanel), BorderLayout.NORTH);  }  /**   * 删除一个节点   *   * @param ssTree   * @throws Exception   */  public void doExecuteNodeDeletingRP(SingleSeletionTree ssTree) throws Exception {    SmartTreeNode currNode = mainPanel.getResponsePointsTree().getCurrentNode();    String content = currNode.getNodeDisplayName();    String meg = GV.getSpecialMsg("deleteNode.confirm", currNode);    if (GV.showConfirmDialog(ssTree.getRootPane(), meg, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {      String tigMeg = GV.getOperateMsg("deleteNode.success", content);      SmartTreeNode packRPNode = PubFunction.getNeedingNodeInParent(currNode, GV.NODE_TYPE_PACK_RP);      String fullPath = GV.getImportFileDir_FromRoot().append(packRPNode.getForExtention3()).toString();      SmartTreeNode parentNode = removeCurrNodeFromParent(currNode);      if (parentNode != null) {        parentNode = PubFunction.getNeedingNodeInParent(parentNode, GV.NODE_TYPE_PACK_RP);      } else {        parentNode = new SmartTreeNode();      }      boolean isSuccess = PubFunction.checkAndCreateDirOrFile(fullPath, "F", true, true, parentNode);      if (isSuccess) {        mainPanel.refreshLeftResponsePointsTreePanel();      } else {        tigMeg = GV.getOperateMsg("deleteNode.fail", content);      }      GV.showMessageDialog(ssTree.getRootPane(), tigMeg);    }  }  /**   * 将当前节点从父节点中移除   *   * @param currNode   * @return   */  private SmartTreeNode removeCurrNodeFromParent(SmartTreeNode currNode) {    SmartTreeNode parentNode = (SmartTreeNode) currNode.getParent();    if (parentNode == null) {      return null;    }    for (int i = 0; i < parentNode.getChildCount(); i++) {      if (parentNode.getChildAt(i).equals(currNode)) {        parentNode.remove(i);        return parentNode;      }    }    return parentNode;  }  public MainPanel getMainPanel() {    return mainPanel;  }  public void setMainPanel(MainPanel mainPanel) {    this.mainPanel = mainPanel;  }  public JFrame getRootContainer() {    return rootContainer;  }  public void setRootContainer(JFrame rootContainer) {    this.rootContainer = rootContainer;  }}
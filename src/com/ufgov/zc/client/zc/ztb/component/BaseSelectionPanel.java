package com.ufgov.zc.client.zc.ztb.component;import com.ufgov.zc.client.zc.ztb.model.BusinessProject;import com.ufgov.zc.client.zc.ztb.model.DetailsType;import com.ufgov.zc.client.zc.ztb.model.ProjectBag;import com.ufgov.zc.client.zc.ztb.service.ServerProjectService;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.TimeOutCounter;import javax.swing.*;import java.awt.*;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Vector;public class BaseSelectionPanel extends JPanel {  private static final long serialVersionUID = -7267204107723386392L;  protected static String webServiceIP = null;  protected List<BusinessProject> projList = new ArrayList<BusinessProject>();  protected ServerProjectService dbImportProjectService = new ServerProjectService();  protected JComboBox projectsCB = null;  protected JTextField ztbPathField = null;  protected JTextField urlPathField = null;  protected JLabel alertInfoLabel = null;  protected JDialog prevDialog = null;  protected JDialog currDialog = null;  protected JDialog nextDialog = null;  protected JComboBox userTypeComboBox = null;  protected MainPanel mainPanel = null;  protected JScrollPane packsScrollPane = new JScrollPane();  /**   * 获得项目下的所有标段   *   * @param projCode   * @return   */  protected ProjectBag getPackCodeByProjCode(String projCode) {    List<BusinessProject> list = this.projList;    for (int i = 0; i < list.size(); i++) {      if (projCode.equals(list.get(i).getNo())) {        List<ProjectBag> packs = list.get(i).getPackList();        if (packs != null && packs.size() > 0) {          return packs.get(0);        }      }    }    return null;  }  protected Vector<DetailsType> getOptions() {    Vector<DetailsType> v = new Vector<DetailsType>();    for (int i = 0; i < projList.size(); i++) {      String name = projList.get(i).getName();      String code = projList.get(i).getNo();      if (name.indexOf(code) == -1) {        name = name + "[" + code + "]";      }      v.add(new DetailsType(name, code));    }    return v;  }  protected void errorTip(String msg) {    if (projList == null || projList.size() == 0) {      if (alertInfoLabel == null) {        alertInfoLabel = new JLabel();      }      StringBuffer alertInfo = new StringBuffer("<html><a><b><font size='3' color='red'>提示：<br>&nbsp;&nbsp;");      alertInfo.append(msg);      alertInfo.append("</font><b><a></html>");      alertInfoLabel.setText(alertInfo.toString());      alertInfoLabel.setPreferredSize(new Dimension(420, 50));      alertInfoLabel.setVisible(true);      alertInfoLabel.updateUI();    } else {      if (alertInfoLabel != null) {        alertInfoLabel.setVisible(false);      }    }  }  protected void setComboBoxDefaultValue(String userType) {    if (this.userTypeComboBox == null) {      this.userTypeComboBox = new JComboBox();    }    DetailsType dt = null;    int num = userTypeComboBox.getItemCount();    for (int i = 0; i < num; i++) {      dt = (DetailsType) this.userTypeComboBox.getItemAt(i);      if (userType.equals(dt.getValue())) {        this.userTypeComboBox.setSelectedIndex(i);        this.userTypeComboBox.setEnabled(false);      }    }  }  protected Vector<DetailsType> getUserTypesVector() {    Vector<DetailsType> utVector = new Vector<DetailsType>();    DetailsType dt = null;    dt = new DetailsType(GV.getSimpleMsg("supplierUser"), "supplier");    utVector.add(dt);    dt = new DetailsType(GV.getSimpleMsg("masterUser"), "master");    utVector.add(dt);    return utVector;  }  protected void doNextUpload(Map<String, String> paras) {    alertInfoLabel.setVisible(false);    prevDialog.dispose();    currDialog.dispose();    if (GV.AUTHEN_TYPE_LOGIN_ONLY.equalsIgnoreCase(paras.get(GV.AUTHEN_TYPE))) {      if ("true".equalsIgnoreCase(paras.get("USERPASS"))) {        String userName = paras.get("USERNAME");        String userID = paras.get("USERID");        String caNO = paras.get("CASERIALCODE");        String typeSupplier = GV.getSimpleMsg("userTypeSupplier");        String typeMaster = GV.getSimpleMsg("userTypeMaster");        String userType = (paras.get("USERTYPE").equalsIgnoreCase("supplier") ? typeSupplier : typeMaster);        String loginSucc = GV.getSimpleMsg("loginSucc");        String uNameLabel = GV.getSimpleMsg("userNameLabel");        String userIDLabel = GV.getSimpleMsg("userIDLabel");        String caNOLabel = GV.getSimpleMsg("caNOLabel");        String userTypeLabel = GV.getSimpleMsg("userTypeLabel");        Object[] results = { loginSucc, uNameLabel + userName + "；", userIDLabel + userID + "；", caNOLabel + caNO + "；", userTypeLabel + userType };        GV.SESSION_MAP.put(GV.USER_ID, userID);        GV.SESSION_MAP.put(GV.USER_NAME, userName);        GV.SESSION_MAP.put(GV.CASERIAL_CODE, caNO);        GV.SESSION_MAP.put(GV.USER_TYPE, paras.get("USERTYPE"));        JOptionPane.showMessageDialog(null, results);        if (TBPanel.getLoginBtn() != null) {          TBPanel.getLoginBtn().setText(GV.getTranslate().get("logoutbtn"));        }        TimeOutCounter.toStartTimeOutCounter();      } else {        Object[] results = { GV.getSimpleMsg("loginFail"), GV.getSimpleMsg("failReasonLabel") + paras.get("FAILREASON") };        JOptionPane.showMessageDialog(null, results);        if (TBPanel.getLoginBtn() != null) {          TBPanel.getLoginBtn().setText(GV.getTranslate().get("loginbtn"));        }      }    } else {      try {        if ("true".equalsIgnoreCase(paras.get("USERPASS"))) {          if (TBPanel.getLoginBtn() != null) {            TBPanel.getLoginBtn().setText(GV.getTranslate().get("logoutbtn"));          }          if (GV.SESSION_MAP.isEmpty()) {            String userName = paras.get("USERNAME");            String userID = paras.get("USERID");            String caNO = paras.get("CASERIALCODE");            GV.SESSION_MAP.put(GV.USER_ID, userID);            GV.SESSION_MAP.put(GV.USER_NAME, userName);            GV.SESSION_MAP.put(GV.CASERIAL_CODE, caNO);            GV.SESSION_MAP.put(GV.USER_TYPE, paras.get("USERTYPE"));          }          makeWaitingDecodingListDialog(paras);        }        JOptionPane.showMessageDialog(null, "操作成功");      } catch (Exception e) {        e.printStackTrace();        JOptionPane.showMessageDialog(null, GV.getSimpleMsg("failToCreateDecodedList") + e.getMessage());      }    }  }  public void makeWaitingDecodingListDialog(Map<String, String> paras) {    if (nextDialog == null) {      nextDialog = new JDialog();    }    nextDialog.setSize(new Dimension(1024, 560));    nextDialog.add(new TBFileDecodePanel(currDialog, nextDialog, paras));    nextDialog.setTitle(GV.getOperateMsg("waitForDecode", paras.get("USERNAME")));    nextDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);    nextDialog.setLocationRelativeTo(null);    nextDialog.toFront();    nextDialog.setModal(true);    nextDialog.setMinimumSize(new Dimension(1024, 560));    nextDialog.setVisible(true);  }}
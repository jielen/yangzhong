package com.ufgov.zc.client.zc.ztb.component;import com.snca.financebidding.FinanceBiddingCall;import com.ufgov.zc.client.zc.ztb.component.service.TBFileToDecodeItemsTableService;import com.ufgov.zc.client.zc.ztb.service.XmlOperateService;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.zc.model.ZcEbSecurityRecord;import com.ufgov.zc.common.zc.model.ZcEbWaitingDecodeItem;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.File;import java.util.*;import java.util.List;public class TBFileDecodePanel extends BaseSelectionPanel {  private static final long serialVersionUID = -7267204107723386392L;  public static final String partitionLeft = "┐";  public static final String partitionRight = "@";  private Map<String, String> paras = null;  private List<ZcEbWaitingDecodeItem> tbFilesList = new ArrayList<ZcEbWaitingDecodeItem>();  private static boolean isUseSamePwd = false;  private TBFileToDecodeItemsTableService dataTableService = null;  /**   * 第一次解密失败的项目，现缓存下来，第一次解密完后，再提示是否使用口令进行解密   */  private Map<String, ZcEbWaitingDecodeItem> failDecodedItems = new HashMap<String, ZcEbWaitingDecodeItem>();  private FinanceBiddingCall decodeder;  public TBFileDecodePanel(JDialog pDialog, JDialog cDialog, Map<String, String> paras) {    prevDialog = pDialog;    currDialog = cDialog;    this.paras = paras;    init();    buildContents();  }  private void init() {    this.prevDialog.dispose();    tbFilesList.clear();    try {      this.paras.put("PROJTYPE", "1,3,4,7");      tbFilesList.addAll(dbImportProjectService.getWaitingForDecodeProjects(this.paras));    } catch (Exception e) {      errorTip(GV.getSimpleMsg("noRecordNeedToDecode") + e.getMessage());      e.printStackTrace();      return;    }    if (this.tbFilesList.size() <= 0) {      if ("supplier".equals(this.paras.get("USERTYPE"))) {        errorTip(GV.getSimpleMsg("noRecordForSupToDecode"));      } else if ("master".equals(this.paras.get("USERTYPE"))) {        errorTip(GV.getSimpleMsg("noRecordForMasterToDecode"));      }    } else {      decodeder = new FinanceBiddingCall();      errorTip(GV.getSimpleMsg("pleaseSelectToDecode"));    }  }  private void buildContents() {    this.setLayout(new BorderLayout());    JPanel panel = new JPanel();    panel.setLayout(new GridBagLayout());    GridBagConstraints c = new GridBagConstraints();    c.fill = GridBagConstraints.HORIZONTAL;    c.insets = new Insets(5, 5, 0, 5);    int gridy = 0;    c.gridx = 0;    c.gridy = gridy;    c.gridwidth = 1;    JLabel l21 = new JLabel(GV.getSimpleMsg("detailList"));    panel.add(l21, c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 1;    JPanel p22 = new JPanel(new BorderLayout());    p22.setPreferredSize(new Dimension(1000, 360));    packsScrollPane.setPreferredSize(new Dimension(980, 360));    packsScrollPane.getViewport().add(getJTableScrollPane());    p22.add(packsScrollPane, BorderLayout.CENTER);    panel.add(p22, c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 5;    JPanel p1 = new JPanel(new FlowLayout(FlowLayout.LEFT));    if (alertInfoLabel == null) {      alertInfoLabel = new JLabel(" ");      alertInfoLabel.setVisible(false);    }    alertInfoLabel.setPreferredSize(new Dimension(980, 60));    alertInfoLabel.setHorizontalAlignment(SwingUtilities.LEFT);    p1.add(alertInfoLabel);    panel.add(p1, c);    JButton button = new JButton(GV.getTranslate("startDecode"));    button.setPreferredSize(new Dimension(80, 22));    addStartDecodingButtonActions(button);    JButton cancel = new JButton(GV.getTranslate("exit"));    cancel.setPreferredSize(new Dimension(80, 22));    cancel.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        currDialog.setVisible(false);      }    });    JButton refresh = new JButton(GV.getTranslate("refresh"));    refresh.setPreferredSize(new Dimension(80, 22));    refresh.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        refreshTable();      }    });    JPanel btPanel = new JPanel();    btPanel.setLayout(new FlowLayout());    btPanel.add(cancel);    btPanel.add(button);    btPanel.add(refresh);    this.add(btPanel, BorderLayout.SOUTH);    this.add(panel, BorderLayout.CENTER);  }  /**   * 刷新表格   *   * @throws Exception   */  private void refreshTable() {    tbFilesList.clear();    packsScrollPane.getViewport().removeAll();    try {      tbFilesList.addAll(dbImportProjectService.getWaitingForDecodeProjects(this.paras));    } catch (Exception e) {      e.printStackTrace();    }    packsScrollPane.getViewport().add(getJTableScrollPane());    if (decodeder == null) {      decodeder = new FinanceBiddingCall();    }  }  private JScrollPane getJTableScrollPane() {    dataTableService = new TBFileToDecodeItemsTableService();    dataTableService.setTbFilesList(tbFilesList);    JScrollPane tablePane = null;    try {      tablePane = new JScrollPane(dataTableService.createTable());    } catch (Exception e) {      e.printStackTrace();      tablePane = new JScrollPane();    }    return tablePane;  }  /**   * 开始解密   *   * @param button   */  private void addStartDecodingButtonActions(JButton button) {    button.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        int selCount = 0;        List<String> toDecodedBusinessIndexList = dataTableService.getSelectedRows();        selCount = toDecodedBusinessIndexList.size();        if (selCount == 0) {          JOptionPane.showMessageDialog(null, GV.getSimpleMsg("selectOneAtLeast"));          return;        }        String tipInfo = GV.getOperateMsg("sureToDecode", selCount + "");        int chance = JOptionPane.showConfirmDialog(null, tipInfo, GV.getSimpleMsg("pleaseConfirm"), JOptionPane.OK_CANCEL_OPTION);        if (chance == JOptionPane.OK_OPTION) {          doExecuteDecoding(toDecodedBusinessIndexList);        }      }    });  }  /**   * 执行解密   *   * @param toDecodedList   */  private void doExecuteDecoding(List<String> toDecodedList) {    String userType = this.paras.get("USERTYPE");    Map<String, ZcEbWaitingDecodeItem> waitingDecodedItems = new HashMap<String, ZcEbWaitingDecodeItem>();    Map<String, ZcEbWaitingDecodeItem> finishedDecodedItems = new HashMap<String, ZcEbWaitingDecodeItem>();    //先创建密钥文件    for (int i = 0; i < toDecodedList.size(); i++) {      for (int j = 0; j < this.tbFilesList.size(); j++) {        ZcEbWaitingDecodeItem item = this.tbFilesList.get(j);        ZcEbSecurityRecord record = item.getZcEbSecurityRecord();        String selBusiIndex = toDecodedList.get(i);        String havingBusiIndex = record.getZcBusinessIndex();        if (selBusiIndex.equals(havingBusiIndex)) {          if ("supplier".equals(userType)) {            if ("Y".equals(record.getZcIsProviderCoded()) && !ZcSettingConstants.FILE_DECODED_SUCCESS.equals(record.getZcProviderDecodedStatus())) {              waitingDecodedItems.put(toCreateDigitalEnvelopFile(item, userType), item);            } else {              finishedDecodedItems.put(havingBusiIndex, item);            }          } else {            if ("N".equals(record.getZcIsDecodedFinish())) {              waitingDecodedItems.put(toCreateDigitalEnvelopFile(item, userType), item);            } else {              finishedDecodedItems.put(havingBusiIndex, item);            }          }        }      }    }    toShowFinishedDecodesItems(finishedDecodedItems);    if (finishedDecodedItems.size() == this.tbFilesList.size()) {      JOptionPane.showMessageDialog(null, GV.getSimpleMsg("decodeFinish"));      return;    }    failDecodedItems.clear();    isUseSamePwd = false;    //开始进行真正的解密    if ("supplier".equals(userType)) {//如果是供应商解密      doExecuteDecodeForSupplier(waitingDecodedItems);      doRetryDecodeForSupplier();    } else {      doExecuteDecodeForMaster(waitingDecodedItems);    }  }  /**   * 将已经完成解密的项列举出来   *   * @param finishedDecodedItems   */  private void toShowFinishedDecodesItems(Map<String, ZcEbWaitingDecodeItem> finishedDecodedItems) {    if (finishedDecodedItems.size() == 0) {      return;    }    StringBuffer buff = new StringBuffer(GV.getSimpleMsg("partDecodeFinish"));    Iterator<String> it = finishedDecodedItems.keySet().iterator();    int count = 0;    while (it.hasNext()) {      String key = it.next();      ++count;      ZcEbWaitingDecodeItem itm = finishedDecodedItems.get(key);      buff.append("\t");      buff.append(count);      buff.append("、");      buff.append(itm.getProjName());      buff.append("[");      buff.append(itm.getProjCode());      buff.append("][");      buff.append(itm.getPackName());      buff.append("[");      buff.append(itm.getPackCode());      buff.append("]];\n");    }    JOptionPane.showMessageDialog(null, buff.toString());  }  /**   * 供应商进行第一层解密：   * <p/>   * 基本思路：   * <p/>   * 1、弹出一个对话框，供应商可以选择采用口令进行解密或者采用CA解密；   * <p/>   * 2、解密完成后，如果解密失败，那么设置供应商解密状态为失败，同时更新次数；   * <p/>   * 如果解密成功，设置供应商解密状态为成功，同样更新次数，同时将解密后的数字信封数据直接存储到数据库中；   *   * @param envelopes   */  private void doExecuteDecodeForSupplier(Map<String, ZcEbWaitingDecodeItem> waitingItems) {    StringBuffer succBuff = new StringBuffer();    StringBuffer failBuff = new StringBuffer();    StringBuffer tmp = new StringBuffer();    int succCount = 0;    int failCount = 0;    Iterator<String> it = waitingItems.keySet().iterator();    while (it.hasNext()) {      String key = it.next();      ZcEbWaitingDecodeItem item = waitingItems.get(key);      try {        byte[] codedRandomString = null;        Map<String, String> result = new HashMap<String, String>();        Map paras = doExplainXmlFile(item, "supplier");        if ("Y".equals(item.getZcEbSecurityRecord().getZcIsMasterCoded())) {          result = decodeder.bidOpeningForProvider(paras, null);          codedRandomString = toFormatDecodedResult(result);        } else {          result = decodeder.bidOpeningForProviderOnlyProviderEncoded(paras, null);          codedRandomString = toExtractRandomString(result);        }        Map<String, String> result2 = doUpdateProviderDecodedRecord(item, codedRandomString);        tmp.append(item.getProjName());        if (item.getPackName() == null && !"".equals(item.getPackName())) {          tmp.append("[");          tmp.append(item.getPackName());          tmp.append("]");        }        tmp.append("解密");        if ("success".equals(result2.get("UPDATESTATUS"))) {          succCount++;          succBuff.append(succCount);          succBuff.append("、");          succBuff.append(tmp);          succBuff.append("成功！\n");        } else {          failCount++;          failBuff.append(failCount);          failBuff.append("、");          failBuff.append(tmp);          failBuff.append("失败，原因：");          failBuff.append(result2.get("FAILREASON"));          failBuff.append("\n");        }        tmp.setLength(0);      } catch (Exception e) {        e.printStackTrace();        failDecodedItems.put(key, item);        failCount++;        failBuff.append(failCount);        failBuff.append("、");        failBuff.append(tmp);        failBuff.append("失败，原因：");        failBuff.append(e.getMessage());        failBuff.append("\n");      }      refreshTable();    }    tmp.setLength(0);    tmp.append(GV.getSimpleMsg("decodedFinishAndResult"));    tmp.append(succBuff);    if (failBuff.length() > 5) {      tmp.append(failBuff);      tmp.append(++failCount);      tmp.append(GV.getSimpleMsg("decodeFailAndNeedPwd"));    }    JOptionPane.showMessageDialog(null, tmp.toString());  }  private Map doExplainXmlFile(ZcEbWaitingDecodeItem item, String userType) throws Exception {    String levelTwoXml = getEnvelopesFilePath(item, userType);    XmlOperateService xmlOS = new XmlOperateService();    xmlOS.xmlReader(levelTwoXml, "two");    return xmlOS.getLevel2Data();  }  /**   * 通过口令来解密u-key解密失败的部分   */  private void doRetryDecodeForSupplier() {    if (failDecodedItems.size() > 0) {      String info = GV.getOperateMsg("partNeedPwdToDecode", failDecodedItems.size() + "");      if (failDecodedItems.size() > 1) {        final JCheckBox cb = new JCheckBox(GV.getSimpleMsg("useSamePwdToDecode"));        cb.addActionListener(new ActionListener() {          public void actionPerformed(ActionEvent e) {            isUseSamePwd = cb.isSelected();          }        });        Object[] messages = { info, cb };        JOptionPane.showMessageDialog(null, messages);      } else {        JOptionPane.showMessageDialog(null, info);      }    } else {      return;    }    String lastPwd = "";    Iterator<String> it = failDecodedItems.keySet().iterator();    while (it.hasNext()) {      String password = null;      String key = it.next();      ZcEbWaitingDecodeItem item = failDecodedItems.get(key);      try {        byte[] codedRandomString = null;        if (!isUseSamePwd || "".equals(lastPwd)) {          JPasswordField pwdField = new JPasswordField();          Object[] paraObjs = { GV.getSimpleMsg("askForPwd"), pwdField, GV.getSimpleMsg("ifUsingPwdToDecode") };          JOptionPane.showMessageDialog(null, paraObjs);          lastPwd = new String(pwdField.getPassword());          password = lastPwd;        }        Map<String, String> result = null;        Map paras = doExplainXmlFile(item, "supplier");        if ("Y".equals(item.getZcEbSecurityRecord().getZcIsMasterCoded())) {          result = decodeder.bidOpeningForProvider(paras, password);          codedRandomString = toFormatDecodedResult(result);        } else {          result = decodeder.bidOpeningForProviderOnlyProviderEncoded(paras, password);          codedRandomString = toExtractRandomString(result);        }        doUpdateProviderDecodedRecord(item, codedRandomString);        if (codedRandomString.length >= 128) {          JOptionPane.showMessageDialog(null, GV.getSimpleMsg("decodeSuccess"));        } else {          JOptionPane.showMessageDialog(null, GV.getSimpleMsg("decodeFailure"));        }      } catch (Exception e) {        e.printStackTrace();        failDecodedItems.put(key, item);        JOptionPane.showMessageDialog(null, e.getMessage());      }      refreshTable();    }  }  private byte[] toExtractRandomString(Map<String, String> result) {    StringBuffer buff = new StringBuffer();    buff.append(result.get("RANDOMSTRING"));    return buff.toString().getBytes();  }  /**   * 将供应商解密出来的内容进行格式化存储到文件中,这个方法和   * <p/>   * getMainAndMintorInfo()方法是对应的   *   * @param result   * @return   */  private byte[] toFormatDecodedResult(Map<String, String> result) {    Iterator<String> it = result.keySet().iterator();    StringBuffer buff = new StringBuffer();    while (it.hasNext()) {      String key = it.next();      String value = result.get(key);      buff.append(key);      buff.append(partitionRight);      buff.append(value);      buff.append(partitionLeft);    }    if (buff.length() > 1) {      buff.delete(buff.length() - 1, buff.length());    }    return buff.toString().getBytes();  }  /**   * 更新供应商解密记录   *   * @param codedRandomString   */  private Map<String, String> doUpdateProviderDecodedRecord(ZcEbWaitingDecodeItem item, byte[] codedRandomString) throws Exception {    ZcEbSecurityRecord record = item.getZcEbSecurityRecord();    record.setZcIsDecodedFinish("N");    record.setZcProviderDecodedStatus(ZcSettingConstants.FILE_DECODED_SUCCESS);    record.setZcProgressContent(codedRandomString);    record.setZcProviderDecodedCount(record.getZcProviderDecodedCount() + 1);    if ("N".equals(record.getZcIsMasterCoded())) {      record.setZcPwdOrigContent(codedRandomString);    }    Map map = new HashMap();    map.put("ZCEBSECURITYRECORD", record);    map.put("USERTYPE", "supplier");    map.putAll(this.paras);    return this.dbImportProjectService.doUpdateDecodedRecord(map);  }  /**   * 主办方进行第二层解密   *   * @param envelopes   */  private void doExecuteDecodeForMaster(Map<String, ZcEbWaitingDecodeItem> waitingItems) {    Map<String, String> failItemsMap = new HashMap<String, String>();    Iterator<String> it = waitingItems.keySet().iterator();    while (it.hasNext()) {      String key = it.next();      try {        byte[] codedRandomString = null;        Map codeParas = new HashMap();        ZcEbWaitingDecodeItem currItem = waitingItems.get(key);        ZcEbSecurityRecord currRecord = currItem.getZcEbSecurityRecord();        if (toJudgeProviderAndMasterDecodedFinished(currRecord)) {          errorTip(GV.getSimpleMsg("successAndExecuteServerDecode"));          Map<String, String> currMap = doExecuteServerDecoded(currItem);          boolean isSuccess = "true".equals((String) currMap.get("UPDATESTATUS"));          if (isSuccess) {            return;          } else {            String bIndex = currItem.getZcEbSecurityRecord().getZcBusinessIndex();            failItemsMap.put(bIndex, GV.getOperateMsg("foundDecodeFailureItems", bIndex) + currMap.get("FAILREASON"));          }        }        getMainAndMintorInfo(currItem, codeParas);        if (codeParas.size() == 0) {          JOptionPane.showMessageDialog(null, GV.getSimpleMsg("missingMastMinorPubKey"));          return;        }        Map result = new HashMap();        result = decodeder.bidOpeningForMaster(codeParas);        String tmp = (String) result.get("RANDOMSTRING");        if (tmp != null && !"".equals(tmp)) {          codedRandomString = tmp.getBytes();          Map<String, String> res = doUpdateMasterDecodedRecord(waitingItems.get(key), codedRandomString);          if ("success".equalsIgnoreCase(res.get("UPDATESTATUS"))) {            JOptionPane.showMessageDialog(null, GV.getSimpleMsg("masterDecodeSuccess"));          } else {            JOptionPane.showMessageDialog(null, GV.getSimpleMsg("masterDecodeFailureAndReason") + res.get("FAILREASON"));          }        } else {          JOptionPane.showMessageDialog(null, GV.getSimpleMsg("masterDecodeFailure"));        }      } catch (Exception e) {        e.printStackTrace();        JOptionPane.showMessageDialog(null, e.getMessage());      }      refreshTable();    }    this.showFailItems(failItemsMap);  }  /**   * 显示解密失败的项   *   * @param failItemsMap   */  private void showFailItems(Map<String, String> failItemsMap) {    if (failItemsMap.size() > 0) {      StringBuffer buff = new StringBuffer(GV.getSimpleMsg("decodeFailTotal"));      Iterator<String> itm = failItemsMap.keySet().iterator();      int i = 0;      while (itm.hasNext()) {        String key = itm.next();        i++;        buff.append(i);        buff.append("、");        buff.append(failItemsMap.get(key));        buff.append("\n");      }      JOptionPane.showMessageDialog(null, buff.toString());    }  }  /**   * 判断当前标书是否已经完成了供应商和主办方的解密   *   * @param record   * @return   */  private boolean toJudgeProviderAndMasterDecodedFinished(ZcEbSecurityRecord record) {    if (record == null) {      return false;    }    String isMasterCoded = record.getZcIsMasterCoded();    String isProviderCoded = record.getZcIsProviderCoded();    String masterDecodedStatus = record.getZcMasterDecodedStatus();    String providerDecodesStatus = record.getZcProviderDecodedStatus();    if ("Y".equals(isProviderCoded) && !ZcSettingConstants.FILE_DECODED_SUCCESS.equals(providerDecodesStatus)) {      return false;    }    if ("Y".equals(isMasterCoded) && !ZcSettingConstants.FILE_DECODED_SUCCESS.equals(masterDecodedStatus)) {      return false;    }    if (record.getZcPwdOrigContent() != null) {      String origRandomString = new String(record.getZcPwdOrigContent());      if (origRandomString == null || "".equals(origRandomString)) {        return false;      }    }    return true;  }  /**   * 获取主辅key的相关信息，这个信息是由供应商解密后格式化的信息   *   * @param item   * @param codeParas   */  private void getMainAndMintorInfo(ZcEbWaitingDecodeItem item, Map codeParas) {    String codedRandomString = new String(item.getZcEbSecurityRecord().getZcProgressContent());    String[] str = codedRandomString.split(partitionLeft);    for (int i = 0; i < str.length; i++) {      String[] subStr = str[i].split(partitionRight);      if (subStr.length >= 2) {        codeParas.put(subStr[0], subStr[1]);      }    }  }  /**   * 主办方解密完成后，更相关记录   *   * @param item   * @param decodedRandomString   */  private Map<String, String> doUpdateMasterDecodedRecord(ZcEbWaitingDecodeItem item, byte[] decodedRandomString) throws Exception {    ZcEbSecurityRecord record = item.getZcEbSecurityRecord();    record.setZcIsDecodedFinish("N");    record.setZcMasterDecodedStatus(ZcSettingConstants.FILE_DECODED_SUCCESS);    record.setZcPwdOrigContent(decodedRandomString);    record.setZcMasterDecodedCount(record.getZcMasterDecodedCount() + 1);    Map map = new HashMap();    map.put("ZCEBSECURITYRECORD", record);    map.put("USERTYPE", "master");    map.putAll(this.paras);    return this.dbImportProjectService.doUpdateDecodedRecord(map);  }  /**   * 主办方解密完成后，更相关记录   *   * @param item   */  public Map<String, String> doExecuteServerDecoded(ZcEbWaitingDecodeItem item) throws Exception {    ZcEbSecurityRecord record = item.getZcEbSecurityRecord();    Map map = new HashMap();    map.put("ZCEBSECURITYRECORD", record);    map.put("USERTYPE", "master");    map.putAll(this.paras);    return this.dbImportProjectService.doExecuteServerDecoded(map);  }  /**   * 创建数字信封文件   *   * @param item   */  private String toCreateDigitalEnvelopFile(ZcEbWaitingDecodeItem item, String userType) {    String filePath = this.getEnvelopesFilePath(item, userType);    String content = null;    if ("supplier".equals(userType)) {      content = new String(item.getZcEbSecurityRecord().getZcDigitalEnvlope());    } else {      content = new String(item.getZcEbSecurityRecord().getZcProgressContent());    }    try {      PubFunction.doWriteFile(filePath, content, false);    } catch (Exception e) {    }    return filePath;  }  /**   * 获取数字信封在本地的存放路径   *   * @param item   * @param userType   * @return   */  private String getEnvelopesFilePath(ZcEbWaitingDecodeItem item, String userType) {    StringBuffer buff = new StringBuffer(GV.USER_DIR);    buff.append(File.separator);    buff.append(userType).append("_env");    buff.append(File.separator);    buff.append(item.getProjCode());    buff.append(File.separator);    buff.append(item.getPackCode());    buff.append(File.separator);    buff.append(item.getZcEbSecurityRecord().getZcBusinessIndex());    buff.append("LEVEL2.xml");    return buff.toString();  }  protected void errorTip(String msg) {    if (alertInfoLabel == null) {      alertInfoLabel = new JLabel();    }    StringBuffer alertInfo = new StringBuffer("<html><a><b><font size='3' color='red'>提示：<br>&nbsp;&nbsp;");    alertInfo.append(msg);    alertInfo.append("</font><b><a></html>");    alertInfoLabel.setText(alertInfo.toString());    alertInfoLabel.setPreferredSize(new Dimension(780, 60));    alertInfoLabel.setVisible(true);    alertInfoLabel.updateUI();  }  /**   * @param args   */  public static void main(String[] args) {    Map<String, String> paras = new HashMap<String, String>();    JDialog nextDialog = new JDialog();    JDialog currDialog = new JDialog();    nextDialog.add(new TBFileDecodePanel(currDialog, nextDialog, paras));    nextDialog.setSize(new Dimension(840, 560));    nextDialog.setTitle(GV.getOperateMsg("waitForDecode", paras.get("USERNAME")));    nextDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);    nextDialog.setLocationRelativeTo(null);    nextDialog.toFront();    nextDialog.setModal(true);    nextDialog.setMinimumSize(new Dimension(600, 540));    nextDialog.setVisible(true);  }}
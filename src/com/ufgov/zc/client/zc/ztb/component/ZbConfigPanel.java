package com.ufgov.zc.client.zc.ztb.component;import com.ufgov.zc.client.zc.ztb.model.DBProperty;import com.ufgov.zc.client.zc.ztb.service.SystemConfigService;import com.ufgov.zc.client.zc.ztb.util.GV;import javax.swing.*;import javax.swing.border.TitledBorder;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.File;import java.io.IOException;/** * 该模块待改进，但是对于在线版，该功能模块不需要，因为配置都直接可以从数据库中读取： * <p/> * 1、往后该模块将不需要数据库的链接配置； * <p/> * 2、这里往后主要应用于如下配置： * <p/> * a、主持人是否加密； * <p/> * b、供应商是否要求加密（供应商也可以根据自己的需要来加密或者不加密）； * <p/> * c、如果往后需要支持离线的方式，那么这里的用户名和密码将表示招标书制作经办人； * <p/> * d、其它相关的配置； * <p/> * 3、这里还需要处理2中提到的所有信息在数据库中和本地配置文件信息的同步问题， * * @author LEO */public class ZbConfigPanel extends JPanel {  private static final long serialVersionUID = -4900262345863174787L;  private static String historyDirectory = GV.DEFAULT_CONFIG_DIR;  private static DBProperty dbProperty;  private JTextField workspacePathField;  private JCheckBox checkbox;  private static SystemConfigService systemConfigService = new SystemConfigService();  private JDialog dialog = null;  public ZbConfigPanel(JDialog dialog) throws Exception {    this.dialog = dialog;    initDBProperty();    initPanel();  }  private static void initDBProperty() throws Exception {    dbProperty = systemConfigService.readDBProperty();    if (dbProperty == null) {      dbProperty = new DBProperty();    }  }  private void initPanel() {    this.setLayout(new BorderLayout());    JPanel panel = new JPanel();    String title = GV.getSimpleMsg("configInfoTitle");    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), title, TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体",      Font.BOLD, 13), Color.BLUE));    panel.setLayout(new GridBagLayout());    GridBagConstraints c = new GridBagConstraints();    c.fill = GridBagConstraints.HORIZONTAL;    c.insets = new Insets(5, 5, 0, 5);    int gridy = 0;    c.gridx = 0;    c.gridy = gridy;    c.gridwidth = 1;    JLabel l6 = new JLabel(GV.getSimpleMsg("bidBookLocation"));    l6.setPreferredSize(new Dimension(100, 30));    l6.setHorizontalAlignment(SwingUtilities.RIGHT);    panel.add(l6, c);    c.gridx = 1;    c.gridy = gridy;    c.gridwidth = 4;    workspacePathField = new JTextField();    workspacePathField.setPreferredSize(new Dimension(240, 24));    String customerPath = dbProperty.getCustomerLocalWorkspacePath();    String initPath = (null == customerPath || "".equals(customerPath)) ? historyDirectory : customerPath;    workspacePathField.setText(initPath);    panel.add(workspacePathField, c);    c.gridx = 5;    c.gridy = gridy;    c.gridwidth = 1;    JButton brower = new JButton(GV.getTranslate("brower"));    brower.setPreferredSize(new Dimension(60, 22));    this.addBrowerActions(brower);    panel.add(brower, c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 6;    checkbox = new JCheckBox(GV.getTranslate("notDisplayNextTime"));    checkbox.setSelected(dbProperty.isShowNextTime());    panel.add(checkbox, c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 6;    JLabel tipLabel = new JLabel(" ");    tipLabel.setPreferredSize(new Dimension(200, 20));    panel.add(tipLabel, c);    ZTBButton save = new ZTBButton("save");    save.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        dbProperty.setCustomerLocalWorkspacePath(workspacePathField.getText().trim());        dbProperty.setWebServiceHostPort(dbProperty.getHost() + ":" + dbProperty.getPort());        dbProperty.setShowNextTime(checkbox.isSelected());        if (!doCheckData()) {          return;        }        try {          systemConfigService.saveOrUpdateDBProperty(dbProperty);        } catch (IOException e1) {          GV.showMessageDialog(null, e1.getMessage());          e1.printStackTrace();          dialog.dispose();          return;        }        GV.showMessageDialog(null, GV.getSimpleMsg("saveSucc"));        dialog.dispose();      }    });    ZTBButton cancel = new ZTBButton("cancel");    cancel.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        dialog.dispose();      }    });    this.add(panel, BorderLayout.CENTER);    JPanel btPanel = new JPanel();    btPanel.setLayout(new FlowLayout());    btPanel.add(save);    btPanel.add(cancel);    this.add(btPanel, BorderLayout.SOUTH);  }  private boolean doCheckData() {    String wsPath = workspacePathField.getText().trim();    if ("".equals(wsPath)) {      JOptionPane.showMessageDialog(null, GV.getSimpleMsg("bidSaveLocationNotNull"));      return false;    }    File tmp = new File(wsPath);    if (!tmp.exists()) {      if (!tmp.mkdirs()) {        JOptionPane.showMessageDialog(null, GV.getSimpleMsg("bidSaveLocationErr"));        return false;      }    }    return true;  }  private void addBrowerActions(JButton brower) {    brower.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        JFileChooser fileChooser = new JFileChooser();        fileChooser.setAcceptAllFileFilterUsed(false);        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);        fileChooser.setCurrentDirectory(new File(historyDirectory));        int result = fileChooser.showOpenDialog(null);        if (result == JFileChooser.APPROVE_OPTION) {          workspacePathField.setText(fileChooser.getSelectedFile().getAbsolutePath());          historyDirectory = fileChooser.getSelectedFile().getAbsolutePath();        }      }    });  }  public static SystemConfigService getSystemConfigService() {    return systemConfigService;  }}
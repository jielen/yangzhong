package com.ufgov.zc.client.zc.ztb.component.service;import com.ufgov.zc.client.zc.ztb.model.LevelOneItem;import com.ufgov.zc.client.zc.ztb.service.XmlOperateService;import com.ufgov.zc.client.zc.ztb.table.builder.GridColumnBuilder;import com.ufgov.zc.client.zc.ztb.table.entity.GridColumn;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.*;import com.ufgov.zc.client.zc.ztb.util.GV;import java.io.File;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class TBRecordsTableService {  private List<LevelOneItem> tbFilesList = new ArrayList<LevelOneItem>();  private JTable dataTable = new JTable();  private JTableModel dataTableModel = null;  private XmlOperateService xos = new XmlOperateService();  public JTable createTable() throws Exception {    dataTable = null;    dataTable = new JTable();    List<Map<String, String>> columnDataList = buildData();    List<GridColumn> gridColumns = GridColumnBuilder.buildGridColumn(columnDataList);    JTableColumnModel tableColumnModel = new JTableColumnModel(dataTable, gridColumns);    dataTableModel = new JTableModel(tableColumnModel, dataTable);    dataTable.setModel(dataTableModel);    dataTable.setColumnModel(tableColumnModel);    //设置数据源    JTableRowSorter<JTableModel> sorter = new JTableRowSorter<JTableModel>(dataTableModel);    sorter.setComparators(tableColumnModel);    dataTable.setRowSorter(sorter);    changeDefaultCellRenderer();    dataTableModel.add(toConverRecordItems());    return dataTable;  }  private void changeDefaultCellRenderer() {    for (int i = 0; i < dataTable.getColumnModel().getColumnCount(); i++) {      dataTable.setDefaultRenderer(dataTable.getColumnClass(i), new JTableCellRenderers.RowRenderer());    }  }  public List<Map<String, String>> toConverRecordItems() {    List<Map<String, String>> result = new ArrayList<Map<String, String>>();    for (int i = 0; i < this.tbFilesList.size(); i++) {      Map<String, String> item = new HashMap<String, String>();      LevelOneItem curr = this.tbFilesList.get(i);      String level2xmlPath = curr.getXmlFileFullPath();      try {        xos.xmlReader(level2xmlPath, "two");      } catch (Exception e) {        e.printStackTrace();        return result;      }      Map<String, String> data = xos.getLevel2Data();      item.put("PROJ_NAME", data.get("PROJNAME"));      item.put("PROJ_CODE", data.get("PROJCODE"));      item.put("PACK_NAME", data.get("PACKNAME"));      item.put("PACK_CODE", data.get("PACKCODE"));      item.put("BID_END_TIME", curr.getBidEndTime());      item.put("UPLOAD_MOLD", getMatchMold(curr.getUploadMold()));      item.put("UPLOAD_STATUS", getMatchStatus(curr.getTbfileUploadStatus()));      item.put("UPLOAD_STIME", curr.getTbfileUploadSTime());      item.put("UPLOAD_ETIME", curr.getTbfileUploadETime());      item.put("FILE_NAME", curr.getXmlFileName());      item.put("IS_ENCODED", getMatchYesNo(data.get("LOCALFILEFULLPATH").endsWith(GV.SUFFIX_MERGER_FILE) ? "Y" : "N"));      curr.getLevelTwoModel().setProjCode(data.get("PROJCODE"));      curr.getLevelTwoModel().setProjName(data.get("PROJNAME"));      curr.getLevelTwoModel().setPackCode(data.get("PACKCODE"));      curr.getLevelTwoModel().setPackName(data.get("PACKNAME"));      curr.getLevelTwoModel().setLocalFileFullPath(data.get("LOCALFILEFULLPATH"));      result.add(item);    }    return result;  }  private String getMatchMold(String mold) {    if (LevelOneItem.UPLOAD_MOLD_COMMON.equals(mold)) {      return GV.getSimpleMsg("commonUploadMoldCN");    } else if (LevelOneItem.UPLOAD_MOLD_HIGHT.equals(mold)) {      return GV.getSimpleMsg("hightUploadMoldCN");    } else {      return GV.getSimpleMsg("unknowable");    }  }  private String getMatchYesNo(String status) {    if ("Y".equalsIgnoreCase(status)) {      return GV.getSimpleMsg("encoded");    } else if ("N".equalsIgnoreCase(status)) {      return GV.getSimpleMsg("notEncoded");    } else {      return GV.getSimpleMsg("unknowableStatus");    }  }  private String getMatchStatus(String status) {    if (LevelOneItem.UPLOAD_STATUS_WAITING.equals(status)) {      return GV.getSimpleMsg("waitToUpload");    } else if (LevelOneItem.UPLOAD_STATUS_BIDDING.equals(status)) {      return GV.getSimpleMsg("uploading");    } else if (LevelOneItem.UPLOAD_STATUS_UPLOAD_FINISH.equals(status)) {      return GV.getSimpleMsg("uploadFinish");    } else if (LevelOneItem.UPLOAD_STATUS_ALL_FINISH.equals(status)) {      return GV.getSimpleMsg("uploadAndBidFinish");    } else if (LevelOneItem.UPLOAD_STATUS_FAIL.equals(status)) {      return GV.getSimpleMsg("uploadFailToRetry");    } else {      return GV.getSimpleMsg("unknowableStatus");    }  }  public List<String> getSelectedRows() {    List<String> selectedItems = new ArrayList<String>();    int[] selectRows = this.dataTable.getCheckSelectRows();    if (selectRows.length == 0 || dataTableModel == null) {      return selectedItems;    }    for (int i = 0; i < selectRows.length; i++) {      String curr = dataTableModel.get(selectRows[i]).get("FILE_NAME");      selectedItems.add(curr);    }    return selectedItems;  }  public List<Map<String, String>> buildData() {    List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();    dataList.add(buildRow("TABLE.CHECKBOX", "", "CHECKBOX", "30", "C", "", "CHECKBOX", "", "", "N"));    dataList.add(buildRow("PROJ_NAME", "", GV.getSimpleMsg("projectName"), "240", "L", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("PACK_NAME", "", GV.getSimpleMsg("packName"), "120", "L", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("BID_END_TIME", "", GV.getSimpleMsg("bidEndTime"), "126", "C", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("IS_ENCODED", "", GV.getSimpleMsg("wasEncoded"), "80", "C", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("UPLOAD_MOLD", "", GV.getSimpleMsg("uploadMold"), "80", "C", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("UPLOAD_STATUS", "", GV.getSimpleMsg("uploadStatus"), "60", "C", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("UPLOAD_STIME", "", GV.getSimpleMsg("startUploadTime"), "126", "L", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("UPLOAD_ETIME", "", GV.getSimpleMsg("endUploadTime"), "126", "L", "TEXT", "TEXT", "", "", "Y"));    return dataList;  }  private Map<String, String> buildRow(String columnId, String groupId, String caption, String width, String align, String dataType,    String editorType, String decLen, String isThousandsSeparator, String isForceReadonly) {    Map<String, String> row = new HashMap<String, String>();    row.put("COLUMN_ID", columnId);//字段名    row.put("GROUP_ID", groupId);    row.put("CAPTION", caption);//列名（字段名的翻译）    row.put("WIDTH", width);//列宽    row.put("ALIGN", align);//水平对齐/L/C/R    row.put("DATA_TYPE", dataType);//数据类型/NUM/TEXT/DATE    row.put("EDITOR_TYPE", editorType);//编辑框类型    row.put("DEC_LEN", decLen);//小数位    row.put("IS_THOUSANDS_SEPARATOR", isThousandsSeparator);    row.put("IS_FORCE_READONLY", isForceReadonly);    return row;  }  public List<LevelOneItem> getTbFilesList() {    return tbFilesList;  }  public void setTbFilesList(List<LevelOneItem> tbFilesList) {    this.tbFilesList = tbFilesList;  }  public List<LevelOneItem> getTBRecordsFromLevelOneXml() {    String levelOneXml = GV.getLevelOneXmlFullPath();    if (!(new File(levelOneXml)).exists()) {      return new ArrayList<LevelOneItem>();    }    try {      xos.xmlReader(levelOneXml, "one");    } catch (Exception e) {      e.printStackTrace();      return new ArrayList<LevelOneItem>();    }    return xos.getLevelOne().getLevelOneItems();  }}
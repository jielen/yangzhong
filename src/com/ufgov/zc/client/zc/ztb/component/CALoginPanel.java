package com.ufgov.zc.client.zc.ztb.component;import com.ufgov.zc.client.zc.ztb.model.DetailsType;import com.ufgov.zc.client.zc.ztb.util.CALogin;import com.ufgov.zc.client.zc.ztb.util.GV;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.HashMap;import java.util.Map;public class CALoginPanel extends BaseSelectionPanel {  private static final long serialVersionUID = -7267204107723386392L;  private Map paras = new HashMap();  private JComboBox ukeyComboBox = new JComboBox();  private CALogin caLogin = new CALogin();  public CALoginPanel(Map map) {    this.prevDialog = new JDialog();    this.currDialog = new JDialog();    this.paras.putAll(map);  }  public CALoginPanel(JDialog pDialog, JDialog cDialog, Map map) {    this.prevDialog = pDialog;    this.currDialog = cDialog;    this.paras.putAll(map);    init();    buildContents();  }  private void init() {    if (prevDialog != null) {      prevDialog.dispose();    }    if (nextDialog != null) {      nextDialog.dispose();    }    this.alertInfoLabel = new JLabel(" ");    alertInfoLabel.setPreferredSize(new Dimension(360, 50));    alertInfoLabel.setVisible(false);    alertInfoLabel.setHorizontalAlignment(SwingUtilities.LEFT);  }  private void buildContents() {    this.setLayout(new BorderLayout());    JPanel panel = new JPanel();    panel.setLayout(new GridBagLayout());    GridBagConstraints c = new GridBagConstraints();    c.fill = GridBagConstraints.HORIZONTAL;    c.insets = new Insets(5, 5, 0, 5);    int gridy = 0;    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 1;    JLabel l1 = new JLabel(GV.getSimpleMsg("userTypeLabel"));    panel.add(l1, c);    c.gridx = 1;    c.gridy = gridy;    c.gridwidth = 2;    userTypeComboBox = new JComboBox(this.getUserTypesVector());    userTypeComboBox.setPreferredSize(new Dimension(280, 22));    Object selItem1 = userTypeComboBox.getSelectedItem();    if (selItem1 != null) {      userTypeComboBox.setToolTipText(selItem1.toString());    }    String userType = (String) this.paras.get("USERTYPE");    if (userType != null && !"".equals(userType)) {      setComboBoxDefaultValue(userType);    }    panel.add(userTypeComboBox, c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 1;    JLabel l2 = new JLabel(GV.getSimpleMsg("digitalCertificateLabel"));    panel.add(l2, c);    c.gridx = 1;    c.gridy = gridy;    c.gridwidth = 2;    ukeyComboBox.setPreferredSize(new Dimension(280, 22));    Object selItem = ukeyComboBox.getSelectedItem();    if (selItem != null) {      ukeyComboBox.setToolTipText(selItem.toString());    }    DefaultComboBoxModel defModel = caLogin.getCAItemsComboBoxModel();    if (defModel != null) {      ukeyComboBox.setModel(defModel);      this.alertInfoLabel.setText(this.getAlertInfo(GV.getSimpleMsg("careCAPwdDialog")));      this.alertInfoLabel.setVisible(true);    } else {      this.alertInfoLabel.setText(this.getAlertInfo(GV.getSimpleMsg("askCAAndRefresh")));      this.alertInfoLabel.setVisible(true);    }    panel.add(ukeyComboBox, c);    c.gridx = 3;    c.gridy = gridy;    c.gridwidth = 1;    c.fill = GridBagConstraints.NONE;    c.anchor = GridBagConstraints.WEST;    JButton refresh = new JButton(GV.getTranslate("refresh"));    refresh.setPreferredSize(new Dimension(70, 22));    this.addRefreshActions(refresh);    panel.add(refresh, c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 4;    JPanel p1 = new JPanel(new FlowLayout(FlowLayout.LEFT));    p1.add(alertInfoLabel);    panel.add(p1, c);    JButton button = new JButton(GV.getTranslate("login"));    button.setPreferredSize(new Dimension(80, 22));    addLoginButtonActions(button);    JButton cancel = new JButton(GV.getTranslate("cancel"));    cancel.setPreferredSize(new Dimension(80, 22));    cancel.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        currDialog.setVisible(false);      }    });    JPanel btPanel = new JPanel();    btPanel.setLayout(new FlowLayout());    btPanel.add(cancel);    btPanel.add(button);    this.add(btPanel, BorderLayout.SOUTH);    this.add(panel, BorderLayout.CENTER);  }  private void addRefreshActions(JButton refresh) {    refresh.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        DefaultComboBoxModel defModel = caLogin.getCAItemsComboBoxModel();        if (defModel != null) {          ukeyComboBox.setModel(defModel);          alertInfoLabel.setText(getAlertInfo(GV.getSimpleMsg("careCAPwdDialog")));        } else {          alertInfoLabel.setText(getAlertInfo(GV.getSimpleMsg("askCAAndRefresh")));        }        alertInfoLabel.setVisible(true);      }    });  }  private String getAlertInfo(String msg) {    StringBuffer alertInfo = new StringBuffer("<html><a><font size='3' color='red'>提示：");    alertInfo.append(msg);    alertInfo.append("</font><a></html>");    return alertInfo.toString();  }  private void addLoginButtonActions(JButton button) {    button.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        String userType = "";        if (userTypeComboBox != null) {          userType = ((DetailsType) userTypeComboBox.getSelectedItem()).getValue();        }        paras.put("USERTYPE", "supplier");        if ("".equals(userType) || "supplier".equals(userType)) {          int sel = ukeyComboBox.getSelectedIndex() + 1;          String caSerialCode = null;          try {            caSerialCode = caLogin.getCaSerialCode(sel);          } catch (Exception e) {            e.printStackTrace();            JOptionPane.showMessageDialog(null, GV.getSimpleMsg("CAReadErr") + e.getMessage());            return;          }          paras.put("CASERIALCODE", caSerialCode);          if (paras.get("URL") == null) {            paras.put("URL", ProjectInfoPanel.getWebServerIPAddr());          }          doCheckUser();          if ("true".equals(paras.get("USERPASS"))) {            alertInfoLabel.setText(getAlertInfo(GV.getSimpleMsg("passAndWaitNext")));            alertInfoLabel.setVisible(true);            doNextUpload(paras);          } else {            if (paras.get("ERRORMESSAGE") != null) {              alertInfoLabel.setText(getAlertInfo((String) paras.get("ERRORMESSAGE")));              alertInfoLabel.setVisible(true);              return;            }            alertInfoLabel.setText(getAlertInfo(GV.getOperateMsg("userNotPass", (String) paras.get("FAILREASON"))));            alertInfoLabel.setVisible(true);            return;          }        } else {          alertInfoLabel.setText(getAlertInfo(GV.getSimpleMsg("onlyPwdLogin")));          alertInfoLabel.setVisible(true);          // 暂时不实现该功能        }      }    });  }  private void doCheckUser() {    this.caLogin.setParameterMap(this.paras);    this.paras.putAll(this.caLogin.doCheckIn());  }  /**   * @param args   */  public static void main(String[] args) {    JDialog dialog = new JDialog();    Map map = new HashMap();    map.put("PROJECTCODE", "XCZX2011-110");    map.put("PROJECTNAME", "测试项目");    map.put("PACKCODE", "1921");    map.put("PACKNAME", "标段一");    dialog.add(new CALoginPanel(null, dialog, map));    dialog.setSize(new Dimension(400, 200));    dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);    dialog.setLocationRelativeTo(null);    dialog.setVisible(true);  }}
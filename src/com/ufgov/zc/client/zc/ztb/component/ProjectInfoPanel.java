package com.ufgov.zc.client.zc.ztb.component;import com.snca.financebidding.FinanceBiddingCall;import com.ufgov.zc.client.zc.ztb.model.BusinessProject;import com.ufgov.zc.client.zc.ztb.service.ServerProjectService;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import javax.swing.*;import java.awt.*;import java.io.File;import java.util.regex.Matcher;import java.util.regex.Pattern;public class ProjectInfoPanel extends JPanel {    private static final long serialVersionUID = 7224923554717552155L;    private ServerProjectService importProjectService = new ServerProjectService();    private static BusinessProject businessProject = null;    private static String projCode = null;    private static MainPanel mainPanel;    public static final String MAIN_PUB_KEY = "MAIN_PUB_KEY";    public static final String MAIN_PUB_KEY_MD5 = "MAIN_PUB_KEY_MD5";    public static final String MINOR_PUB_KEY = "MINOR_PUB_KEY";    public static final String MINOR_PUB_KEY_MD5 = "MINOR_PUB_KEY_MD5";    public ProjectInfoPanel(String projectCode) {        if (projCode == null || !projCode.equals(projectCode)) {            projCode = projectCode;            businessProject = null;        }        init();    }    private void init() {        if (businessProject == null) {            try {                businessProject = importProjectService.getBusinessProject(projCode, getProjConfigFilePath());            } catch (Exception e) {                e.printStackTrace();                return;            }        }        this.removeAll();        this.createPanel();    }    private static String getProjConfigFilePath() {        StringBuffer fullPath = GV.getImportFileDir_FromRoot();        fullPath.append(projCode);        fullPath.append(File.separator);        fullPath.append(projCode);        fullPath.append(GV.PROJECT_INFO_XML_SUFFIX);        return fullPath.toString();    }    private void createPanel() {        if (businessProject == null) {            return;        }        int lineNo = 0;        setLayout(new GridBagLayout());        GridBagConstraints gBC = new GridBagConstraints();        gBC.fill = GridBagConstraints.HORIZONTAL;        gBC.insets = new Insets(5, 5, 0, 5);        String text = "<html><b><font size='8' color='red' face='隶书'>--" + GV.getSimpleMsg("projSummaryInfo") + "--</font><b></html>";        JLabel title = new JLabel(text);        // title.setMinimumSize(new Dimension(400,0));        gBC.gridx = 0;        gBC.gridy = lineNo++;        gBC.gridwidth = 1;        add(title, gBC);        // 空行        text = "<html></br></html>";        JLabel space = new JLabel(text);        gBC.gridx = 0;        gBC.gridy = lineNo++;        gBC.gridwidth = 1;        add(space, gBC);        // 项目名称        text = GV.getSimpleMsg("projNameLabel");        String text2 = businessProject.getName();        JLabel projName = new JLabel(preProcessText(text, text2));        gBC.gridx = 0;        gBC.gridy = lineNo++;        gBC.gridwidth = 1;        add(projName, gBC);        // 项目编号        text = GV.getSimpleMsg("projCodeLabel");        text2 = businessProject.getNo();        JLabel projCode = new JLabel(preProcessText(text, text2));        gBC.gridx = 0;        gBC.gridy = lineNo++;        gBC.gridwidth = 1;        add(projCode, gBC);        // 招标方式        text = GV.getSimpleMsg("purTypeLabel");        text2 = businessProject.getPurType();        JLabel bidWay = new JLabel(preProcessText(text, text2));        gBC.gridx = 0;        gBC.gridy = lineNo++;        gBC.gridwidth = 1;        add(bidWay, gBC);        // 投标截止时间        text = GV.getSimpleMsg("bidEndTimeLabel");        text2 = businessProject.getTbEndTime();        JLabel submitBidEndTime = new JLabel(preProcessText(text, text2));        gBC.gridx = 0;        gBC.gridy = lineNo++;        gBC.gridwidth = 1;        add(submitBidEndTime, gBC);        // 开标时间        text = GV.getSimpleMsg("bidOpenTimeLabel");        text2 = businessProject.getKbTime();        JLabel openBidTime = new JLabel(preProcessText(text, text2));        gBC.gridx = 0;        gBC.gridy = lineNo++;        gBC.gridwidth = 1;        add(openBidTime, gBC);        // 开标地点        text = GV.getSimpleMsg("bidOpenAddressLabel");        text2 = businessProject.getkBidAddr();        JLabel openBidAddr = new JLabel(preProcessText(text, text2));        gBC.gridx = 0;        gBC.gridy = lineNo++;        gBC.gridwidth = 1;        add(openBidAddr, gBC);        // 招标机构        text = GV.getSimpleMsg("bidOrg");        text2 = businessProject.getPurCenter();        JLabel purCenter = new JLabel(preProcessText(text, text2));        gBC.gridx = 0;        gBC.gridy = lineNo++;        gBC.gridwidth = 1;        add(purCenter, gBC);        text = GV.getSimpleMsg("bidOrgManager");        text2 = businessProject.getManager();        JLabel manager = new JLabel(preProcessText(text, text2));        gBC.gridx = 0;        gBC.gridy = lineNo++;        gBC.gridwidth = 1;        add(manager, gBC);        text = GV.getSimpleMsg("contactPhoneLabel");        text2 = businessProject.getPhone();        JLabel phone = new JLabel(preProcessText(text, text2));        gBC.gridx = 0;        gBC.gridy = lineNo++;        gBC.gridwidth = 1;        add(phone, gBC);        text = GV.getSimpleMsg("emailLabel");        text2 = businessProject.getEmail();        if (text2 != null && !"".equals(text2)) {            JLabel email = new JLabel(preProcessText(text, text2));            gBC.gridx = 0;            gBC.gridy = lineNo++;            gBC.gridwidth = 1;            add(email, gBC);        }        /**         * 加此段代码是为了让面板拖动变小 再变大 label还可以还原         */        JLabel tempJLabel = new JLabel("<html>&nbsp;</html>");        tempJLabel.setMinimumSize(new Dimension(600, 0));        add(tempJLabel, gBC);    }    private String preProcessText(String text, String text2) {        String html = "<html><font size='5' face='隶书'>&nbsp;&nbsp;&nbsp;&nbsp;${content}${content2}.</font></html>";        if (text2 == null || "".equals(text2)) {            text2 = "[不详]";        }        html = html.replace("${content2}", text2);        html = html.replace("${content}", text);        return html;    }    public static BusinessProject getBusinessProject() {        if (businessProject == null) {            businessProject = new BusinessProject();            businessProject.setNo(null);            businessProject.setName(null);        }        return businessProject;    }    public static String readCA_PUB_KEY(String key) {        String pubKey = null;        if (businessProject == null) {            pubKey = "";        } else {            pubKey = businessProject.getCA_PUB_KEY(key);        }        return pubKey;    }    /**     * 根据代理机构的code作为key来获得CA公钥     *     * @param key     * @return     */    public static String getCA_PUB_KEY(String key) {        String pubKey = null;        if (businessProject == null) {            pubKey = "";        } else {            pubKey = businessProject.getCA_PUB_KEY(key);        }        if (pubKey == null || "".equals(pubKey)) {            try {                pubKey = FinanceBiddingCall.getHostPublicKey();                pubKey = pubKey.replaceAll("\r\n", "").replaceAll("\n", "");            } catch (Exception e) {                JOptionPane.showMessageDialog(null, GV.getSimpleMsg("pleaseInsertMasterAndMinorKey"));                e.printStackTrace();            }            if (pubKey == null || "".equals(pubKey)) {                pubKey = getCA_PUB_KEY(key);            }            updatePubKeyStringToFile(key, pubKey);            return pubKey;        } else {            return pubKey;        }    }    public static void clearCA_PUB_KEY(String key) {        if (businessProject != null) {            businessProject.putCA_PUB_KEY_MAP(key, "");            businessProject.putCA_PUB_KEY_MAP(key + "_MD5", "");        }    }    private static void updatePubKeyStringToFile(String pubKey, String pubKeyValue) {        if (businessProject == null) {            businessProject = new BusinessProject();        }        businessProject.putCA_PUB_KEY_MAP(pubKey, pubKeyValue);        String md5Code = null;        try {            md5Code = PubFunction.getMD5DigestHexStr(pubKeyValue.getBytes());        } catch (Exception e) {            e.printStackTrace();        }        businessProject.putCA_PUB_KEY_MAP(pubKey + "_MD5", md5Code);        PubFunction.checkAndCreateDirOrFile(getProjConfigFilePath(), "F", true, true, businessProject);    }    /**     * 保存流水号     *     * @param flowingNO     */    public static void updateFlowingNOToFile() {        if (businessProject == null) {            businessProject = new BusinessProject();        }        businessProject.setFlowingNO(businessProject.getFlowingNO() + 1);        PubFunction.checkAndCreateDirOrFile(getProjConfigFilePath(), "F", true, true, businessProject);    }    /**     * @param bp     */    public static void updateObjectToFile(BusinessProject bp) {        if (bp == null) {            return;        }        bp.setFlowingNO(bp.getFlowingNO() + 1);        PubFunction.checkAndCreateDirOrFile(getProjConfigFilePath(), "F", true, true, bp);        mainPanel.loadRightInitInfoPanel(bp.getNo());    }    public static String readWebServerIPAddr() {        String serverURL = null;        if (businessProject == null) {            serverURL = "";        } else {            serverURL = businessProject.getWebServerIPAddr();        }        return serverURL;    }    public static String getWebServerIPAddr() {        String serverURL = null;        if (businessProject == null) {            serverURL = "";        } else {            serverURL = businessProject.getWebServerIPAddr();        }        Pattern pattern = Pattern.compile(GV.REG_URL);        Matcher matcher = pattern.matcher(serverURL);        if (serverURL == null || "".equals(serverURL.trim()) || !matcher.matches()) {            String url = getURL(serverURL);            updateURLToFile(url);            return url;        } else {            return serverURL;        }    }    public static String getURL(String oldURL) {        JTextField urlField = new JTextField();        urlField.setText("http://");        Object[] objs = new Object[6];        if (oldURL == null || "".equals(oldURL)) {            objs[0] = GV.getSimpleMsg("needingIPAddress");        } else {            objs[0] = GV.getSimpleMsg("notCorrectIPAddress") + oldURL;        }        objs[1] = GV.getSimpleMsg("suggestToCallForIPAddress");        objs[2] = GV.getSimpleMsg("suggestToSetIPAddress");        objs[3] = GV.getSimpleMsg("inputIPLikeThis");        objs[4] = GV.getSimpleMsg("pleaseInput");        objs[5] = urlField;        int sel = JOptionPane.showConfirmDialog(null, objs, GV.getSimpleMsg("attentionPlease"), 2, 3);        String url = urlField.getText();        if (sel == JOptionPane.CANCEL_OPTION || url == null || "".equals(url)) {            JOptionPane.showMessageDialog(null, GV.getSimpleMsg("noConnectWithoutIPAddress"));            return "";        }        url = url.trim().toLowerCase();        url = url + "/GB/";        Pattern pattern = Pattern.compile(GV.REG_URL);        Matcher matcher = pattern.matcher(url);        if (!matcher.matches()) {            return toGetURL(pattern);        }        return url;    }    public static String toGetURL(Pattern pattern) {        JTextField urlField = new JTextField();        urlField.setText("http://");        Object[] objs = new Object[2];        objs[0] = GV.getSimpleMsg("notCorrectIPAndRetry");        objs[1] = urlField;        int sel = JOptionPane.showConfirmDialog(null, objs, GV.getSimpleMsg("pleaseRetryInput"), 2, 3);        String url = urlField.getText();        if (sel == JOptionPane.CANCEL_OPTION || url == null || "".equals(url)) {            JOptionPane.showMessageDialog(null, GV.getSimpleMsg("noConnectWithoutIPAddress"));            return "";        }        url = url.trim().toLowerCase();        url = url + "/ZC/";        Matcher matcher = pattern.matcher(url);        if (!matcher.matches()) {            return toGetURL(pattern);        }        return url;    }    public static MainPanel getMainPanel() {        return mainPanel;    }    public static void setMainPanel(MainPanel mp) {        mainPanel = mp;    }    private static void updateURLToFile(String url) {        if (businessProject == null) {            businessProject = new BusinessProject();        }        businessProject.setWebServerIPAddr(url);        PubFunction.checkAndCreateDirOrFile(getProjConfigFilePath(), "F", true, true, businessProject);    }}
package com.ufgov.zc.client.zc.ztb.component;import com.ufgov.zc.client.zc.ztb.model.DBProperty;import com.ufgov.zc.client.zc.ztb.service.SystemConfigService;import com.ufgov.zc.client.zc.ztb.util.GV;import javax.swing.*;import javax.swing.border.TitledBorder;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.IOException;import java.util.HashMap;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * 该模块待改进，但是对于在线版，该功能模块不需要，因为配置都直接可以从数据库中读取： * <p/> * 1、往后该模块将不需要数据库的链接配置； * <p/> * 2、这里往后主要应用于如下配置： * <p/> * a、主持人是否加密； * <p/> * b、供应商是否要求加密（供应商也可以根据自己的需要来加密或者不加密）； * <p/> * c、如果往后需要支持离线的方式，那么这里的用户名和密码将表示招标书制作经办人； * <p/> * d、其它相关的配置； * <p/> * 3、这里还需要处理2中提到的所有信息在数据库中和本地配置文件信息的同步问题， * * @author LEO */public class SystemConfigPanel extends JPanel {  private static final long serialVersionUID = -4900262345863174787L;  private static DBProperty dbProperty;  private JTextField hostField, portField;  private static SystemConfigService systemConfigService = new SystemConfigService();  private JDialog dialog = null;  public SystemConfigPanel(JDialog dialog) throws Exception {    this.dialog = dialog;    initDBProperty();    initPanel();  }  private static void initDBProperty() throws Exception {    dbProperty = systemConfigService.readDBProperty();    if (dbProperty == null) {      dbProperty = new DBProperty();    }  }  private void initPanel() {    this.setLayout(new BorderLayout());    JPanel panel = new JPanel();    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), GV.getSimpleMsg("configInfoTitle"), TitledBorder.CENTER,      TitledBorder.TOP, new Font("宋体", Font.BOLD, 13), Color.BLUE));    panel.setLayout(new GridBagLayout());    GridBagConstraints c = new GridBagConstraints();    c.fill = GridBagConstraints.HORIZONTAL;    c.insets = new Insets(5, 5, 0, 5);    int gridy = 0;    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 1;    JLabel l1 = new JLabel(GV.getSimpleMsg("serverIPLabel"));    l1.setPreferredSize(new Dimension(70, 30));    l1.setHorizontalAlignment(SwingUtilities.RIGHT);    panel.add(l1, c);    c.gridx = 1;    c.gridy = gridy;    c.gridwidth = 3;    hostField = new JTextField();    hostField.setPreferredSize(new Dimension(150, 24));    hostField.setText(dbProperty.getHost());    panel.add(hostField, c);    c.gridx = 4;    c.gridy = gridy;    c.gridwidth = 1;    JLabel l2 = new JLabel(GV.getSimpleMsg("serverPortLabel"));    l2.setPreferredSize(new Dimension(50, 30));    l2.setHorizontalAlignment(SwingUtilities.RIGHT);    panel.add(l2, c);    c.gridx = 5;    c.gridy = gridy;    c.gridwidth = 2;    portField = new JTextField();    portField.setPreferredSize(new Dimension(50, 24));    portField.setText(dbProperty.getPort());    panel.add(portField, c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 6;    JLabel tipLabel = new JLabel(" ");    tipLabel.setPreferredSize(new Dimension(200, 20));    panel.add(tipLabel, c);    ZTBButton testLink = new ZTBButton("testLink");    testLink.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        String hostIP = hostField.getText().trim().toLowerCase();        if (!hostIP.startsWith("http://")) {          hostIP = "http://" + hostIP;          hostField.setText(hostIP);        }        if (!toCheckData()) {          return;        }        Map<String, String> paras = new HashMap<String, String>();        paras.put("URL", hostField.getText().trim() + ":" + portField.getText().trim() + "/GB/");        Map<String, String> ret = systemConfigService.toTestLink(paras);        if ("OK".equalsIgnoreCase(ret.get("RESULT"))) {          GV.showMessageDialog(null, GV.getSimpleMsg("connectOK"));        } else {          GV.showMessageDialog(null, GV.getSimpleMsg("connectErrAndReason") + ret.get("FAILREASON"));        }      }    });    ZTBButton save = new ZTBButton("save");    save.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        String hostIP = hostField.getText().trim().toLowerCase();        if (!hostIP.startsWith("http://")) {          hostIP = "http://" + hostIP;          hostField.setText(hostIP);        }        if (!toCheckData()) {          return;        }        dbProperty.setHost(hostIP);        dbProperty.setPort(portField.getText().trim());        dbProperty.setWebServiceHostPort(dbProperty.getHost() + ":" + dbProperty.getPort());        try {          systemConfigService.saveOrUpdateDBProperty(dbProperty);        } catch (IOException e1) {          GV.showMessageDialog(null, e1.getMessage());          e1.printStackTrace();          dialog.dispose();          return;        }        GV.showMessageDialog(null, GV.getSimpleMsg("saveSucc"));        dialog.dispose();      }    });    ZTBButton cancel = new ZTBButton("cancel");    cancel.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        dialog.dispose();      }    });    this.add(panel, BorderLayout.CENTER);    JPanel btPanel = new JPanel();    btPanel.setLayout(new FlowLayout());    btPanel.add(testLink);    btPanel.add(save);    btPanel.add(cancel);    this.add(btPanel, BorderLayout.SOUTH);  }  protected boolean toCheckData() {    String host = hostField.getText();    if (host == null || "".equals(host.trim())) {      JOptionPane.showMessageDialog(null, GV.getSimpleMsg("pleaseInputIPAddress"));      return false;    } else {      Pattern pattern = Pattern.compile("\\b((?!\\d\\d\\d)\\d+|1\\d\\d|2[0-4]\\d|25[0-5])(\\.((?!\\d\\d\\d)\\d+|1\\d\\d|2[0-4]\\d|25[0-5])){3}\\b");      Matcher matcher = pattern.matcher(host.substring("http://".length(), host.length()));      if (!matcher.matches()) {        JOptionPane.showMessageDialog(null, GV.getSimpleMsg("serverIPErr"));        return false;      }    }    String port = portField.getText();    if (port == null || "".equals(port.trim())) {      JOptionPane.showMessageDialog(null, GV.getSimpleMsg("pleaseInputPort"));      return false;    } else {      if (!port.matches("^[0-9]*$")) {        JOptionPane.showMessageDialog(null, GV.getSimpleMsg("serverPortErr"));        return false;      }    }    return true;  }  public static SystemConfigService getSystemConfigService() {    return systemConfigService;  }}
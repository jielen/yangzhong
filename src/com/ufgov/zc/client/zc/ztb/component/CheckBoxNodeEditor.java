package com.ufgov.zc.client.zc.ztb.component;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import javax.swing.*;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.TreeCellEditor;import javax.swing.tree.TreePath;import java.awt.*;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.MouseEvent;import java.util.EventObject;public class CheckBoxNodeEditor extends AbstractCellEditor implements TreeCellEditor {  private static final long serialVersionUID = -3054580392262496618L;  CheckBoxNodeRenderer renderer = null;  JTree tree;  public CheckBoxNodeEditor(JTree tree) {    this.tree = tree;    this.renderer = (CheckBoxNodeRenderer) tree.getCellRenderer();  }  public Object getCellEditorValue() {    JCheckBox checkbox = renderer.getLeafRenderer();    SmartTreeNode checkBoxNode = new SmartTreeNode();    checkBoxNode.setNodeDisplayName(checkbox.getText());    checkBoxNode.setSelected(checkbox.isSelected());    System.out.println("1111=" + checkbox.isSelected());    return checkBoxNode;  }  public boolean isCellEditable(EventObject event) {    boolean returnValue = false;    if (event instanceof MouseEvent) {      MouseEvent mouseEvent = (MouseEvent) event;      TreePath path = tree.getPathForLocation(mouseEvent.getX(), mouseEvent.getY());      if (path != null) {        Object node = path.getLastPathComponent();        if ((node != null) && (node instanceof DefaultMutableTreeNode)) {          DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode) node;          returnValue = ((treeNode.isLeaf()) && (treeNode instanceof SmartTreeNode));        }      }    }    return returnValue;  }  public Component getTreeCellEditorComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row) {    Component editor = renderer.getTreeCellRendererComponent(tree, value, true, expanded, leaf, row, true);    // editor always selected / focused    ItemListener itemListener = new ItemListener() {      public void itemStateChanged(ItemEvent itemEvent) {        if (stopCellEditing()) {          fireEditingStopped();        }      }    };    if (editor instanceof JCheckBox) {      ((JCheckBox) editor).addItemListener(itemListener);      ((JCheckBox) editor).setSelected(selected);      System.out.println("22222=" + selected);    }    return editor;  }}
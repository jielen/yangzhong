package com.ufgov.zc.client.zc.ztb.component;import com.ufgov.zc.client.zc.ztb.util.GV;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;public class ProgressBarPanel extends JPanel {  private static final long serialVersionUID = -7267204107723386392L;  private JDialog parentDialog;  private JLabel alertInfoLabel = new JLabel();  private JProgressBar progressBar = null;  private JProgressBar getProgressBar(int len) {    if (len == 0) {      len = 100;    }    if (progressBar == null) {      progressBar = new JProgressBar(0, len);      progressBar.setStringPainted(true);      progressBar.setBounds(new Rectangle(101, 305, 320, 30));    }    return progressBar;  }  public ProgressBarPanel(JDialog dialog, int len) {    parentDialog = dialog;    buildProgressBar(len);    doWork();  }  public ProgressBarPanel() {    doWork();  }  public void doWork() {    Thread worker = new Thread(new Runnable() {      public void run() {        getProgressBar(100).setString("准备...");      }    });    worker.start();  }  public void buildProgressBar(int len) {    this.setLayout(new BorderLayout());    JPanel panel = new JPanel();    panel.setLayout(new GridBagLayout());    GridBagConstraints c = new GridBagConstraints();    c.fill = GridBagConstraints.HORIZONTAL;    c.insets = new Insets(5, 5, 0, 5);    int gridy = 0;    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 5;    JLabel l1 = new JLabel("");    l1.setPreferredSize(new Dimension(300, 4));    panel.add(l1, c);    c.gridx = 5;    c.gridy = gridy;    c.gridwidth = 2;    l1 = new JLabel("");    panel.add(l1, c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 8;    panel.add(this.getProgressBar(len), c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 4;    JPanel p1 = new JPanel(new FlowLayout(FlowLayout.LEFT));    p1.add(alertInfoLabel);    panel.add(p1, c);    c.gridx = 3;    c.gridy = ++gridy;    c.gridwidth = 2;    JButton cancel = new JButton(GV.getTranslate("cancel"));    cancel.setPreferredSize(new Dimension(80, 22));    cancel.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        parentDialog.dispose();      }    });    JPanel btPanel = new JPanel();    btPanel.setLayout(new FlowLayout());    btPanel.add(cancel);    panel.add(btPanel, c);    this.add(panel, BorderLayout.CENTER);  }  public JPanel buildProgressBarPanel(final JDialog parentDialog, int len) {    JPanel rootPanel = new JPanel();    rootPanel.setLayout(new BorderLayout());    JPanel panel = new JPanel();    panel.setLayout(new GridBagLayout());    GridBagConstraints c = new GridBagConstraints();    c.fill = GridBagConstraints.HORIZONTAL;    c.insets = new Insets(5, 5, 0, 5);    int gridy = 0;    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 5;    JLabel l1 = new JLabel("");    l1.setPreferredSize(new Dimension(300, 4));    panel.add(l1, c);    c.gridx = 5;    c.gridy = gridy;    c.gridwidth = 2;    l1 = new JLabel("");    panel.add(l1, c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 8;    panel.add(this.getProgressBar(len), c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 4;    JPanel p1 = new JPanel(new FlowLayout(FlowLayout.LEFT));    p1.add(alertInfoLabel);    panel.add(p1, c);    c.gridx = 3;    c.gridy = ++gridy;    c.gridwidth = 2;    JButton cancel = new JButton(GV.getTranslate("cancel"));    cancel.setPreferredSize(new Dimension(80, 22));    cancel.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        parentDialog.dispose();      }    });    JPanel btPanel = new JPanel();    btPanel.setLayout(new FlowLayout());    btPanel.add(cancel);    panel.add(btPanel, c);    rootPanel.add(panel, BorderLayout.CENTER);    return rootPanel;  }  /**   * @param args   */  public static void main(String[] args) {    final JDialog dialog = new JDialog();    final ProgressBarPanel pb = new ProgressBarPanel();    dialog.add(pb.buildProgressBarPanel(dialog, 1000));    dialog.setSize(new Dimension(400, 100));    dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);    dialog.setLocationRelativeTo(null);    dialog.setUndecorated(true);    dialog.setAlwaysOnTop(true);    dialog.setVisible(true);    Thread worker = new Thread(new Runnable() {      public void run() {        int i = 0;        while (i < 10000000 && dialog != null && dialog.isShowing()) {          i++;          if (i % 10000 == 0) {            pb.getProgressBar(1000).setString(i / 10000 + "");            pb.getProgressBar(1000).setValue(i / 10000);          }        }      }    });    worker.start();  }}
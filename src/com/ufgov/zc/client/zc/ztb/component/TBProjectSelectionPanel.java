package com.ufgov.zc.client.zc.ztb.component;import com.ufgov.zc.client.zc.ztb.JobThreads;import com.ufgov.zc.client.zc.ztb.model.DetailsType;import com.ufgov.zc.client.zc.ztb.model.ProjectBag;import com.ufgov.zc.client.zc.ztb.util.GV;import javax.swing.*;import javax.swing.filechooser.FileFilter;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.io.File;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Vector;public class TBProjectSelectionPanel extends BaseSelectionPanel {  private static final long serialVersionUID = -7267204107723386392L;  //private JCheckBox[] packsCB = null;  private JRadioButton[] packsRB = null;  public TBProjectSelectionPanel(JDialog dialog, MainPanel mp) {    prevDialog = dialog;    mainPanel = mp;    init();    buildContents();  }  private void init() {    projList.clear();    try {      Map<String, String> map = new HashMap<String, String>();      projList.addAll(dbImportProjectService.getSignupBusinessProjectForTB(map));    } catch (Exception e) {      e.printStackTrace();      errorTip(GV.getSimpleMsg("checkServerLinkConfig"));      return;    }    errorTip(GV.getSimpleMsg("checkBidEndtime"));  }  private void buildContents() {    this.setLayout(new BorderLayout());    JPanel panel = new JPanel();    panel.setLayout(new GridBagLayout());    GridBagConstraints c = new GridBagConstraints();    c.fill = GridBagConstraints.HORIZONTAL;    c.insets = new Insets(5, 5, 0, 5);    int gridy = 0;    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 1;    JLabel l1 = new JLabel(GV.getTranslate("bidFiles"));    panel.add(l1, c);    c.gridx = 1;    c.gridy = gridy;    c.gridwidth = 2;    ztbPathField = new JTextField();    ztbPathField.setPreferredSize(new Dimension(280, 22));    panel.add(ztbPathField, c);    c.gridx = 3;    c.gridy = gridy;    c.gridwidth = 1;    c.fill = GridBagConstraints.NONE;    c.anchor = GridBagConstraints.WEST;    JButton brower = new JButton(GV.getTranslate("brower"));    brower.setPreferredSize(new Dimension(70, 22));    this.addBrowerActions(brower);    panel.add(brower, c);    c.fill = GridBagConstraints.HORIZONTAL;    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 1;    JLabel l2 = new JLabel(GV.getSimpleMsg("projList"));    panel.add(l2, c);    c.gridx = 1;    c.gridy = gridy;    c.gridwidth = 3;    Vector<DetailsType> dtVector = getOptions();    projectsCB = new JComboBox(dtVector);    projectsCB.setPreferredSize(new Dimension(280, 22));    projectsCB.setSelectedItem(0);    this.addComboBoxSelectChangeActions();    panel.add(projectsCB, c);    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 1;    JLabel l21 = new JLabel(GV.getSimpleMsg("signupPacks"));    panel.add(l21, c);    c.gridx = 1;    c.gridy = gridy;    c.gridwidth = 3;    JPanel p22 = new JPanel(new BorderLayout());    p22.setPreferredSize(new Dimension(280, 100));    packsScrollPane.setPreferredSize(new Dimension(140, 100));    //packsScrollPane.getViewport().add(getCBPanel(0));    packsScrollPane.getViewport().add(getRBPanel(0));    p22.add(packsScrollPane, BorderLayout.CENTER);    panel.add(p22, c);    c.fill = GridBagConstraints.HORIZONTAL;    c.gridx = 0;    c.gridy = ++gridy;    c.gridwidth = 4;    JPanel p1 = new JPanel(new FlowLayout(FlowLayout.LEFT));    if (alertInfoLabel == null) {      alertInfoLabel = new JLabel(" ");      alertInfoLabel.setPreferredSize(new Dimension(420, 30));      alertInfoLabel.setVisible(false);    }    alertInfoLabel.setHorizontalAlignment(SwingUtilities.LEFT);    p1.add(alertInfoLabel);    panel.add(p1, c);    JButton nextButton = new JButton(GV.getTranslate("next"));    nextButton.setPreferredSize(new Dimension(80, 22));    addNextButtonActions(nextButton);    JButton cancelButton = new JButton(GV.getTranslate("exit"));    cancelButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        prevDialog.setVisible(false);      }    });    JPanel btPanel = new JPanel();    btPanel.setLayout(new FlowLayout());    btPanel.add(cancelButton);    btPanel.add(nextButton);    this.add(btPanel, BorderLayout.SOUTH);    this.add(panel, BorderLayout.CENTER);  }  private JPanel getRBPanel(int index) {    if (this.projList == null || this.projList.size() < 1) {      return new JPanel();    }    ButtonGroup radioGroup = new ButtonGroup();    packsRB = new JRadioButton[this.projList.get(index).getPackList().size()];    JPanel cbPanel = new JPanel(new GridLayout(5, 2));    cbPanel.setPreferredSize(new Dimension(140, 100));    if (this.projList.size() > 0) {      List<ProjectBag> pklist = projList.get(index).getPackList();      if (pklist != null) {        for (int i = 0; i < pklist.size(); i++) {          ProjectBag pb = pklist.get(i);          packsRB[i] = new JRadioButton(pb.getPackDesc() + "[" + pb.getName() + "]");          packsRB[i].setName(pb.getNo());          packsRB[i].setToolTipText(pb.getPackDesc() + "[" + pb.getName() + "]");          radioGroup.add(packsRB[i]);          cbPanel.add(packsRB[i]);        }      }      if (pklist.size() == 1) {        packsRB[0].setSelected(true);      }    }    return cbPanel;  }  /*这部分代码暂留，考虑到以后需要支持  private JPanel getCBPanel(int index) {    if (this.projList == null || this.projList.size() < 1) {      return new JPanel();    }    packsCB = new JCheckBox[this.projList.get(index).getPackList().size()];    JPanel cbPanel = new JPanel(new GridLayout(5, 2));    cbPanel.setPreferredSize(new Dimension(340, 100));    final JCheckBox fsCB = new JCheckBox("全选");    actionFullSelect(fsCB, packsCB);    fsCB.setBackground(Color.PINK);    cbPanel.add(fsCB);    if (this.projList.size() > 0) {      List<ProjectBag> pklist = projList.get(index).getPackList();      if (pklist != null) {        for (int i = 0; i < pklist.size(); i++) {          ProjectBag pb = pklist.get(i);          packsCB[i] = new JCheckBox(pb.getPackDesc() + "[" + pb.getName() + "]");          packsCB[i].setName(pb.getNo());          packsCB[i].setToolTipText(pb.getPackDesc() + "[" + pb.getName() + "]");          cbPanel.add(packsCB[i]);        }        //如果只有一项的话，就自动给选上        if (pklist.size() == 1) {          fsCB.setSelected(true);          packsCB[0].setSelected(true);        }      }    }    return cbPanel;  }*/  /**   * 添加全选事件响应   *   * @param fsCB   * @param packsCB   */  /*  private void actionFullSelect(final JCheckBox fsCB, final JCheckBox[] packsCB) {    fsCB.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        for (int i = 0; i < packsCB.length; i++) {          if (packsCB[i] == null) {            continue;          } else {            packsCB[i].setSelected(fsCB.isSelected());          }        }      }    });  }*/  private void addBrowerActions(JButton brower) {    brower.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        JFileChooser fileChooser = new JFileChooser();        fileChooser.setAcceptAllFileFilterUsed(false);        fileChooser.setFileFilter(new ExtensionFileFilter("ztb/meg", new String[] { "ztb", "meg" }));        fileChooser.setCurrentDirectory(new File(GV.getHistoryDirectory()));        int result = fileChooser.showOpenDialog(null);        if (result == JFileChooser.APPROVE_OPTION) {          ztbPathField.setText(fileChooser.getSelectedFile().getAbsolutePath());          GV.setHistoryDirectory(fileChooser.getSelectedFile().getParent());          alertInfoLabel.setVisible(false);        }      }    });  }  private void addComboBoxSelectChangeActions() {    projectsCB.addItemListener(new ItemListener() {      public void itemStateChanged(ItemEvent arg0) {        int index = projectsCB.getSelectedIndex();        if (index > projList.size()) {          return;        }        packsScrollPane.getViewport().add(getRBPanel(index));        packsScrollPane.updateUI();      }    });  }  /*  private void addComboBoxSelectChangeActions() {    projectsCB.addItemListener(new ItemListener() {      public void itemStateChanged(ItemEvent arg0) {        int index = projectsCB.getSelectedIndex();        if (index > projList.size()) {          return;        }        packsScrollPane.getViewport().add(getCBPanel(index));        packsScrollPane.updateUI();      }    });  }*/  private String getSelectedPacks() {    if (packsRB == null) {      return "";    }    StringBuffer buff = new StringBuffer(" ");    for (int i = 0; i < packsRB.length; i++) {      if (packsRB[i].isSelected()) {        buff.append(packsRB[i].getName());        buff.append(",");      }    }    buff.deleteCharAt(buff.length() - 1);    return buff.toString();  }  /*  private String getSelectedPacks() {    if (packsCB == null) {      return "";    }    StringBuffer buff = new StringBuffer(" ");    for (int i = 0; i < packsCB.length; i++) {      if (packsCB[i].isSelected()) {        buff.append(packsCB[i].getName());        buff.append(",");      }    }    buff.deleteCharAt(buff.length() - 1);    return buff.toString().trim();  }*/  private void addNextButtonActions(JButton button) {    button.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        String projcode = ((DetailsType) projectsCB.getSelectedItem()).getValue();        Map<String, String> paras = new HashMap<String, String>();        paras.put("PROJECTCODE", projcode);        paras.put("PROJECTNAME", ((DetailsType) projectsCB.getSelectedItem()).getName());        ProjectBag pack = getPackCodeByProjCode(projcode);        if (pack != null) {          paras.put("PACKCODE", pack.getNo());          paras.put("PACKNAME", pack.getName());        } else {          paras.put("PACKCODE", "2011");          paras.put("PACKNAME", "标段一");        }        paras.put("PACKCODES", getSelectedPacks());        StringBuffer alertInfo = new StringBuffer("<html><a><b><font size='3' color='red'>提示：<br>");        String ztbPath = ztbPathField.getText().trim();        int seq = 1;        if ("".equals(ztbPath)) {          alertInfo.append("&nbsp;&nbsp;&nbsp;&nbsp;" + (seq++) + "、" + GV.getSimpleMsg("pleaseSelectTbFile"));          alertInfo.append("<br>");        }        if ("".equals(paras.get("PACKCODES"))) {          alertInfo.append("&nbsp;&nbsp;&nbsp;&nbsp;" + (seq++) + "、" + GV.getSimpleMsg("mustSelectOnePack"));        }        alertInfo.append("</font><b><a></html>");        if (seq > 1) {          if (seq > 2) {            alertInfoLabel.setPreferredSize(new Dimension(420, 50));          } else {            alertInfoLabel.setPreferredSize(new Dimension(420, 25));          }          alertInfoLabel.setText(alertInfo.toString());          alertInfoLabel.setVisible(true);          alertInfoLabel.updateUI();          return;        } else {          alertInfoLabel.setVisible(false);        }        webServiceIP = ((TTBPanel) mainPanel).getDbProperty().getWebServiceHostPort();        paras.put("ZTBFULLPATH", ztbPath);        String url = webServiceIP + "/GB/";        url = url.replaceAll("http://http://", "http://");        paras.put("URL", url);        mainPanel.loadRightInitInfoPanel(projcode);        doNextStep(paras);        prevDialog.setVisible(false);      }    });  }  private void doNextStep(Map<String, String> paras) {    mainPanel.singleSeletionTree.setCurrentNode(null);    new JobThreads().startUploadPackThreadInnerWeb(mainPanel.singleSeletionTree, paras);  }  class ExtensionFileFilter extends FileFilter {    String description;    String extensions[];    public ExtensionFileFilter(String description, String extension) {      this(description, new String[] { extension });    }    public ExtensionFileFilter(String description, String extensions[]) {      if (description == null) {        this.description = extensions[0];      } else {        this.description = description;      }      this.extensions = (String[]) extensions.clone();      toLower(this.extensions);    }    private void toLower(String array[]) {      for (int i = 0, n = array.length; i < n; i++) {        array[i] = array[i].toLowerCase();      }    }    public String getDescription() {      return description;    }    public boolean accept(File file) {      if (file.isDirectory()) {        return true;      } else {        String path = file.getAbsolutePath().toLowerCase();        for (int i = 0, n = extensions.length; i < n; i++) {          String extension = extensions[i];          if ((path.endsWith(extension) && (path.charAt(path.length() - extension.length() - 1)) == '.')) {            return true;          }        }      }      return false;    }  }}
package com.ufgov.zc.client.zc.ztb.component.service;import com.ufgov.zc.client.zc.ztb.model.LevelOneItem;import com.ufgov.zc.client.zc.ztb.table.builder.GridColumnBuilder;import com.ufgov.zc.client.zc.ztb.table.entity.GridColumn;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.*;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.zc.model.ZcEbSecurityRecord;import com.ufgov.zc.common.zc.model.ZcEbWaitingDecodeItem;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class TBFileToDecodeItemsTableService {  private List<ZcEbWaitingDecodeItem> tbFilesList = new ArrayList<ZcEbWaitingDecodeItem>();  private JTable dataTable = new JTable();  private JTableModel dataTableModel = null;  public JTable createTable() throws Exception {    dataTable = null;    dataTable = new JTable();    //数据每一列的表示的含义。列说明。    List<Map<String, String>> columnDataList = buildData();    //设置列属性，通过列说明生成Grid，每一个grid的属性。    List<GridColumn> gridColumns = GridColumnBuilder.buildGridColumn(columnDataList);    //组织好JTable的模型列属性    JTableColumnModel tableColumnModel = new JTableColumnModel(dataTable, gridColumns);    dataTableModel = new JTableModel(tableColumnModel, dataTable);    //组织好JTable将模型设置值    dataTable.setModel(dataTableModel);    dataTable.setColumnModel(tableColumnModel);    //设置数据源    JTableRowSorter<JTableModel> sorter = new JTableRowSorter<JTableModel>(dataTableModel);    sorter.setComparators(tableColumnModel);    dataTable.setRowSorter(sorter);    changeDefaultCellRenderer();    dataTableModel.add(toConverDecodedItems());    return dataTable;  }  private void changeDefaultCellRenderer() {    for (int i = 0; i < dataTable.getColumnModel().getColumnCount(); i++) {      dataTable.setDefaultRenderer(dataTable.getColumnClass(i), new JTableCellRenderers.RowRenderer());    }  }  public List<Map<String, String>> toConverDecodedItems() {    List<Map<String, String>> result = new ArrayList<Map<String, String>>();    for (int i = 0; i < this.tbFilesList.size(); i++) {      Map<String, String> item = new HashMap<String, String>();      ZcEbWaitingDecodeItem curr = this.tbFilesList.get(i);      ZcEbSecurityRecord record = curr.getZcEbSecurityRecord();      item.put("PROJ_NAME", curr.getProjName() + "[" + curr.getProjCode() + "]");      item.put("PACK_NAME", curr.getPackName());      item.put("IS_MASTER_CODED", getMatchChinese(record.getZcIsMasterCoded()));      item.put("IS_PROVIDER_CODED", getMatchChinese(record.getZcIsProviderCoded()));      item.put("MASTER_DECODED", getMatchStatus(record.getZcMasterDecodedStatus(), record.getZcIsMasterCoded()));      item.put("PROVIDER_DECODED", getMatchStatus(record.getZcProviderDecodedStatus(), record.getZcIsProviderCoded()));      item.put("IS_DECODED_FINISHED", getMatchChinese(record.getZcIsDecodedFinish()));      item.put("ZC_BUSINESS_INDEX", record.getZcBusinessIndex());      item.put("PROJ_CODE", curr.getProjCode());      item.put("PACK_CODE", curr.getPackCode());      item.put("PROVIDER_CODE", curr.getProviderCode());      item.put("PROVIDER_NAME", curr.getProviderName());      item.put("PACK_STATUS", curr.getPackStatus());      item.put("PROJ_STATUS", curr.getProjStatus());      item.put("ZC_CODED_FILE_ID", record.getZcCodedFileID());      item.put("ZC_CODED_FILE_MD5", record.getZcCodedFileMD5());      item.put("ZC_MEMO", record.getZcMemo());      item.put("ZC_OTHER_EXT_CONTENT", record.getZcOtherExtContent());      item.put("ZC_ZTB_FILE_MD5", record.getZcZtbFileMD5());      item.put("UPLOAD_MOLD", getMatchMold(record.getUploadMold()));      item.put("ZC_MASTER_DECODED_COUNT", record.getZcMasterDecodedCount() == null ? "0" : record.getZcMasterDecodedCount() + "");      item.put("ZC_PROVIDER_DECODED_COUNT", record.getZcProviderDecodedCount() == null ? "0" : record.getZcProviderDecodedCount() + "");      SimpleDateFormat sdf = new SimpleDateFormat(ZcSettingConstants.SIMPLE_DATE_FORMAT_FULL);      if (record.getZcMasterDecodedTime() != null) {        item.put("ZC_MASTER_DECODED_TIME", sdf.format(record.getZcMasterDecodedTime()));      }      if (record.getZcProviderDecodedTime() != null) {        item.put("ZC_PROVIDER_DECODED_TIME", sdf.format(record.getZcProviderDecodedTime()));      }      result.add(item);    }    return result;  }  private String getMatchMold(String mold) {    if (LevelOneItem.UPLOAD_MOLD_COMMON.equals(mold)) {      return GV.getSimpleMsg("commonUploadMoldCN");    } else if (LevelOneItem.UPLOAD_MOLD_HIGHT.equals(mold)) {      return GV.getSimpleMsg("hightUploadMoldCN");    } else {      return GV.getSimpleMsg("unknowable");    }  }  private String getMatchChinese(String value) {    if ("Y".equalsIgnoreCase(value)) {      return GV.getSimpleMsg("yes");    } else {      return GV.getSimpleMsg("no");    }  }  private String getMatchStatus(String status, String value) {    if ("N".equalsIgnoreCase(value)) {      return GV.getSimpleMsg("notNeedDecode");    }    if ("-1".equals(status)) {      return GV.getSimpleMsg("decodeFail");    } else if ("1".equals(status)) {      return GV.getSimpleMsg("decodeSucc");    } else if ("0".equals(status)) {      return GV.getSimpleMsg("notEncodedYet");    } else {      return GV.getSimpleMsg("unknowable");    }  }  public List<String> getSelectedRows() {    List<String> selectedItems = new ArrayList<String>();    int[] selectRows = this.dataTable.getCheckSelectRows();    if (selectRows.length == 0 || dataTableModel == null) {      return selectedItems;    }    for (int i = 0; i < selectRows.length; i++) {      String curr = dataTableModel.get(selectRows[i]).get("ZC_BUSINESS_INDEX");      selectedItems.add(curr);    }    return selectedItems;  }  public List<Map<String, String>> buildData() {    List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();    dataList.add(buildRow("TABLE.CHECKBOX", "", "CHECKBOX", "30", "C", "", "CHECKBOX", "", "", "N"));    dataList.add(buildRow("PROJ_NAME", "", GV.getSimpleMsg("projectName"), "220", "L", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("PACK_NAME", "", GV.getSimpleMsg("packName"), "60", "L", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("PROVIDER_NAME", "", GV.getSimpleMsg("supplierName"), "140", "C", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("IS_MASTER_CODED", "", GV.getSimpleMsg("isMasterEncoded"), "70", "C", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("IS_PROVIDER_CODED", "", GV.getSimpleMsg("isProviderEncoded"), "60", "C", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("MASTER_DECODED", "", GV.getSimpleMsg("masterDecoded"), "70", "C", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("PROVIDER_DECODED", "", GV.getSimpleMsg("providerDecoded"), "60", "C", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("IS_DECODED_FINISHED", "", GV.getSimpleMsg("isFullDecoded"), "70", "C", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("ZC_MASTER_DECODED_TIME", "", GV.getSimpleMsg("masterDecodedTime"), "120", "L", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("ZC_PROVIDER_DECODED_TIME", "", GV.getSimpleMsg("providerDecodedTime"), "120", "L", "TEXT", "TEXT", "", "", "Y"));    dataList.add(buildRow("UPLOAD_MOLD", "", GV.getSimpleMsg("uploadMold"), "80", "C", "TEXT", "TEXT", "", "", "Y"));    //dataList.add(buildRow("ZC_MASTER_DECODED_COUNT", "", "主持人解密次数", "80", "L", "TEXT", "TEXT", "", "", "Y"));    //dataList.add(buildRow("ZC_PROVIDER_DECODED_COUNT", "", "商家解密次数", "80", "L", "TEXT", "TEXT", "", "", "Y"));    return dataList;  }  private Map<String, String> buildRow(String columnId, String groupId, String caption, String width, String align, String dataType,    String editorType, String decLen, String isThousandsSeparator, String isForceReadonly) {    Map<String, String> row = new HashMap<String, String>();    row.put("COLUMN_ID", columnId);//字段名    row.put("GROUP_ID", groupId);    row.put("CAPTION", caption);//列名（字段名的翻译）    row.put("WIDTH", width);//列宽    row.put("ALIGN", align);//水平对齐/L/C/R    row.put("DATA_TYPE", dataType);//数据类型/NUM/TEXT/DATE    row.put("EDITOR_TYPE", editorType);//编辑框类型    row.put("DEC_LEN", decLen);//小数位    row.put("IS_THOUSANDS_SEPARATOR", isThousandsSeparator);    row.put("IS_FORCE_READONLY", isForceReadonly);    return row;  }  public List<ZcEbWaitingDecodeItem> getTbFilesList() {    return tbFilesList;  }  public void setTbFilesList(List<ZcEbWaitingDecodeItem> tbFilesList) {    this.tbFilesList = tbFilesList;  }}
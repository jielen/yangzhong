package com.ufgov.zc.client.zc.ztb.component;import java.awt.BorderLayout;import java.awt.Dimension;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.List;import javax.swing.Action;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JPopupMenu;import javax.swing.JScrollPane;import javax.swing.JTree;import javax.swing.SwingUtilities;import javax.swing.event.TreeExpansionEvent;import javax.swing.event.TreeExpansionListener;import javax.swing.tree.DefaultTreeSelectionModel;import javax.swing.tree.TreePath;import com.ufgov.zc.client.zc.eval.ZcEbEvalTBFilePanel;import com.ufgov.zc.client.zc.eval.ZcEbEvalZBFilePanel;import com.ufgov.zc.client.zc.zbfile.ZcEbZbFilePanel;import com.ufgov.zc.client.zc.ztb.TBFrame;import com.ufgov.zc.client.zc.ztb.model.InvisibleTreeModel;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.util.ActionMaps;import com.ufgov.zc.client.zc.ztb.util.EventPropertyName;import com.ufgov.zc.client.zc.ztb.util.GV;public class SingleSeletionTree extends JPanel {  private static final long serialVersionUID = 2116938467826570576L;  private JTree tree;  private TreePath currentPath;  private TreePath lastPath;  private SmartTreeNode currentNode;  private SmartTreeNode treeNode;  private InvisibleTreeModel defaultTreeModel;  private MainPanel mainPanel;  private String lastProviderCode;  private boolean rightMouseEnable=true;//鼠标右键是否可用  public InvisibleTreeModel getDefaultTreeModel() {    return defaultTreeModel;  }  public SingleSeletionTree(SmartTreeNode treeNode) {    this.treeNode = treeNode;    initComponents();    paintScreen();  }  public SingleSeletionTree(SmartTreeNode treeNode, MainPanel parentPanel) {    this.treeNode = treeNode;       // 分包按顺序排列    try{      for(int i = 0; i < treeNode.getChildCount(); i++){        SmartTreeNode projs = (SmartTreeNode)treeNode.getChildAt(i);        if(projs != null || projs.getChildCount() > 1){          List<SmartTreeNode> nodes = new ArrayList<SmartTreeNode>();          for(int j = 0; j < projs.getChildCount(); j++){            SmartTreeNode packs = (SmartTreeNode) projs.getChildAt(j);            int k = 0;            for(; k < nodes.size(); k++){              if(Integer.parseInt(nodes.get(k).getNodeCode()) > Integer.parseInt(packs.getNodeCode())){                break;              }            }            nodes.add(k, packs);          }          projs.removeAllChildren();          for(int j = 0; j < nodes.size(); j++){            projs.add(nodes.get(j));          }                  }      }    }catch(Exception e){    }    this.mainPanel = parentPanel;    initComponents();    paintScreen();  }  public void paintScreen() {    setLayout(new BorderLayout());    add(new JScrollPane(tree), BorderLayout.CENTER);  }  public void initComponents() {    InvisibleTreeModel ml = new InvisibleTreeModel(treeNode);    ml.activateFilter(false);    this.tree = new JTree(ml);    this.defaultTreeModel = (InvisibleTreeModel) this.tree.getModel();    this.tree.expandRow(1);    this.tree.setRootVisible(true);    this.tree.setCellRenderer(new JTreeCellRenderer());    this.tree.setEditable(treeNode.isRenameable());    DefaultTreeSelectionModel defaultTreeSelectionModel = new DefaultTreeSelectionModel();    defaultTreeSelectionModel.setSelectionMode(DefaultTreeSelectionModel.SINGLE_TREE_SELECTION);    this.tree.setSelectionModel(defaultTreeSelectionModel);    //给左侧的节点树添加，相应时间    this.tree.addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        getCurrentNode(e);        if (currentNode == null) {          return;        }        tree.setToolTipText(currentNode.getNodeMemo());        if (GV.NODE_TYPE_RP_ROOT.equals(((SmartTreeNode) currentNode.getRoot()).getNodeType())) {          if (SwingUtilities.isRightMouseButton(e)) {            doRightMouseClickRP(e);          } else {            if (e.getClickCount() == 1) {              doLeftMouseClick(e);            } else {              doLeftMouseDbClickRP(e);            }          }        } else {          if (SwingUtilities.isRightMouseButton(e)) {            doRightMouseClick(e);          } else {            if (e.getClickCount() == 1) {              doLeftMouseClick(e);            } else {              doLeftMouseDbClick(e);              if (currentNode == null) {                return;              }              if (mainPanel instanceof TBPanel) {                TBFrame.setDynamicTitle(currentNode.getNodePositionByDisplayName());              }            }          }        }      }    });    this.tree.addTreeExpansionListener(new TreeExpansionListener() {      public void treeCollapsed(TreeExpansionEvent e) {        changeNodeUnfoldStatus(e, false);      }      public void treeExpanded(TreeExpansionEvent e) {        changeNodeUnfoldStatus(e, true);      }    });    this.defaultTreeModel.addTreeModelListener(new SingleSeletionTreeModelListener(this));  }  /**   * 响应点树节点双击，先找到点对应的文件并打开，然后再在文件中定位   *   * @param e   */  protected void doLeftMouseDbClickRP(MouseEvent e) {    //先检查上次双击打开的word是否已经成功打开，否则的话就不允许继续这次打开    if (!MainPanel.isLastDoubleClickResponseSuccess() && GV.NODE_TYPE_DOC.equals(currentNode.getNodeType()) && mainPanel.getWordPane() != null) {      return;    }    String nodePath = currentNode.getNodeDirPath();    if (nodePath == null || "".equals(nodePath)) {      JOptionPane.showMessageDialog(null, GV.getSimpleMsg("notSettedResponsePoint"));      return;    }    if (nodePath.toLowerCase().endsWith(GV.SUFFIX_DOC)) {      MainPanel.setLastDoubleClickResponseSuccess(false);    }    //该事件触发后将在mainpanel中进行事件监听和响应    firePropertyChange(EventPropertyName.MOUSE_DBCLICK_PROPERTY_NAME, false, true);  }  /**   * 响应点树节点右键单击   *   * @param e   */  protected void doRightMouseClickRP(MouseEvent e) {    JPopupMenu popupMenu = new JPopupMenu();    popupMenu.setMinimumSize(new Dimension(180, 80));    List<Action> list = ActionMaps.getRClickActionsForRPTreeNode(currentNode);    if (list == null || list.size() == 0) {      return;    }    CommonAction action = null;    for (int i = 0; list != null && i < list.size(); i++) {      action = (CommonAction) list.get(i);      if (action != null) {        CommonAction commonAction = (CommonAction) action;        commonAction.setComponent(this);        popupMenu.add(commonAction);      } else {        popupMenu.addSeparator();      }    }    popupMenu.show(e.getComponent(), e.getX(), e.getY());  }  /**   * 记录一下当前节点是否展开或者收起   *   * @param e   * @param flag   */  private void changeNodeUnfoldStatus(TreeExpansionEvent e, boolean flag) {    SmartTreeNode node = null;    TreePath path = e.getPath();    if (path != null) {      node = (SmartTreeNode) path.getLastPathComponent();      node.setUnfold(flag);    }  }  public void doLeftMouseDbClick(MouseEvent e) {    //先检查上次双击打开的word是否已经成功打开，否则的话就不允许继续这次打开    if (!MainPanel.isLastDoubleClickResponseSuccess() && GV.NODE_TYPE_DOC.equals(currentNode.getNodeType()) && mainPanel.getWordPane() != null) {      return;    }    if (mainPanel.getOpenedLeavesNode() != null) {      if (GV.DIS_ZHAOBIAO_ONLY.equals(MainPanel.getWHO_I_AM())) {        if (currentNode.getNodeGUID().equals(mainPanel.getOpenedLeavesNode().getNodeGUID())) {          return;        }      } else if (GV.DIS_TOUBIAO_ONLY.equals(MainPanel.getWHO_I_AM())) {        if (currentNode.getNodeGUID().equals(mainPanel.getOpenedLeavesNode().getNodeGUID())) {          return;        }      } else if (mainPanel instanceof ZcEbEvalTBFilePanel) {        ZcEbEvalTBFilePanel panle = (ZcEbEvalTBFilePanel) mainPanel;        if (lastProviderCode == null) {          lastProviderCode = panle.portalPanel.getSelectedProvider().getProviderCode();        } else {          if (lastProviderCode.equals(panle.portalPanel.getSelectedProvider().getProviderCode())) {            if (currentNode.getNodeGUID().equals(mainPanel.getOpenedLeavesNode().getNodeGUID())) {              return;            }          } else {            if (currentNode.getNodeGUID().equals(mainPanel.getOpenedLeavesNode().getNodeGUID())) {              firePropertyChange(EventPropertyName.MOUSE_DBCLICK_PROPERTY_NAME, false, true);              return;            }            lastProviderCode = panle.portalPanel.getSelectedProvider().getProviderCode();          }        }      } else if (mainPanel instanceof ZcEbEvalZBFilePanel) {        if (currentNode.getNodeGUID().equals(mainPanel.getOpenedLeavesNode().getNodeGUID())) {          return;        }      }    }    if (GV.NODE_TYPE_DOC.equals(currentNode.getNodeType())) {      MainPanel.setLastDoubleClickResponseSuccess(false);    }    //该事件触发后将在mainpanel中进行事件监听和响应    firePropertyChange(EventPropertyName.MOUSE_DBCLICK_PROPERTY_NAME, false, true);  }    /**     * 右键鼠标单击     * @param e     */  @SuppressWarnings("unchecked")  public void doRightMouseClick(MouseEvent e) {    if (!GV.DIS_ZHAOBIAO_ONLY.equals(MainPanel.getWHO_I_AM()) && !GV.DIS_TOUBIAO_ONLY.equals(MainPanel.getWHO_I_AM())      && (this.mainPanel instanceof ZcEbZbFilePanel)) {      return;    }    if(!rightMouseEnable){        JPopupMenu popupMenu = new JPopupMenu();        popupMenu.setMinimumSize(new Dimension(180, 80));        CommonAction action = null;        List<Action> list = ActionMaps.getRightMouseClickActionsForExportZBBook(GV.NODE_TYPE_PROJECT_LIST, currentNode, this.mainPanel);        if (list == null || list.size() == 0) {            return;        }        for (int i = 0; list != null && i < list.size(); i++) {            action = (CommonAction) list.get(i);            if (action != null) {                CommonAction commonAction = (CommonAction) action;                commonAction.setComponent(this);                popupMenu.add(commonAction);            } else {                popupMenu.addSeparator();            }        }        popupMenu.show(e.getComponent(), e.getX(), e.getY());        return;    }    JPopupMenu popupMenu = new JPopupMenu();    popupMenu.setMinimumSize(new Dimension(180, 80));    CommonAction action = null;    List<Action> list = ActionMaps.getRightMouseClickActionsForTreeNode(GV.NODE_TYPE_PROJECT_LIST, currentNode, this.mainPanel);    if (list == null || list.size() == 0) {      return;    }    for (int i = 0; list != null && i < list.size(); i++) {      action = (CommonAction) list.get(i);      if (action != null) {        CommonAction commonAction = (CommonAction) action;        commonAction.setComponent(this);        popupMenu.add(commonAction);      } else {        popupMenu.addSeparator();      }    }    popupMenu.show(e.getComponent(), e.getX(), e.getY());  }  public void getCurrentNode(MouseEvent e) {    this.lastPath = currentPath;    int x = e.getX();    int y = e.getY();    int row = tree.getRowForLocation(x, y);    currentPath = tree.getPathForRow(row);    if (currentPath != null) {      currentNode = (SmartTreeNode) currentPath.getLastPathComponent();      tree.setSelectionPath(currentPath);      tree.setEditable(false);    } else {      currentNode = null;    }  }  public void doLeftMouseClick(MouseEvent e) {    tree.revalidate();    tree.repaint();    //该事件触发后将在mainpanel中进行事件响应    firePropertyChange(EventPropertyName.MOUSE_CLICK_PROPERTY_NAME, false, true);  }  public int getCurrentRow() {    return tree.getRowForPath(currentPath);  }  public JTree getTree() {    return tree;  }  public void setTree(JTree tree) {    this.tree = tree;  }  public SmartTreeNode getCurrentNode() {    return currentNode;  }  public void setCurrentNode(SmartTreeNode currentNode) {    this.currentNode = currentNode;  }  public SmartTreeNode getTreeNode() {    return treeNode;  }  public void setTreeNode(SmartTreeNode treeNode) {    this.treeNode = treeNode;  }  public TreePath getCurrentPath() {    return currentPath;  }  public TreePath getLastPath() {    return lastPath;  }  public MainPanel getMainPanel() {    return mainPanel;  }  public void setMainPanel(MainPanel mainPanel) {    this.mainPanel = mainPanel;  }    public void setRightMouseEnable(boolean rightMouseEnable) {        this.rightMouseEnable = rightMouseEnable;    }}
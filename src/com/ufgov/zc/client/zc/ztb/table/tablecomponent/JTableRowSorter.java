package com.ufgov.zc.client.zc.ztb.table.tablecomponent;import com.ufgov.zc.client.zc.ztb.table.entity.GridColumn;import javax.swing.table.TableColumn;import javax.swing.table.TableModel;import javax.swing.table.TableRowSorter;import java.util.Comparator;import java.util.Enumeration;public class JTableRowSorter<M extends TableModel> extends TableRowSorter<TableModel> {  public JTableRowSorter() {    super(null);  }  public JTableRowSorter(M model) {    super(model);  }  public void setComparators(JTableColumnModel tableColumnModel) {    Enumeration<TableColumn> columns = tableColumnModel.getColumns();    TableColumn tableColumn;    for (; columns.hasMoreElements();) {      tableColumn = columns.nextElement();      GridColumn gridColumn = ((JTableColumn) tableColumn).getGridColumn();      if (JTableModel.TABLE_ROWNUM.equals(tableColumn.getIdentifier()) || gridColumn.isTableHeaderCheckBox()) {        setSortable(tableColumn.getModelIndex(), false);        continue;      } else if (((JTableColumn) tableColumn).getGridColumn().isNumber()) {        setComparator(tableColumn.getModelIndex(), new Comparator<Object>() {          public int compare(Object arg0, Object arg1) {            try {              double a = Double.parseDouble(convertString(arg0));              double b = Double.parseDouble(convertString(arg1));              if (a < b) {                return -1;              } else if (a == b) {                return 0;              } else {                return 1;              }            } catch (NumberFormatException e) {              e.printStackTrace();              return 0;            }          }        });      }      setSortable(tableColumn.getModelIndex(), true);    }  }  private String convertString(Object value) {    if (value == null) {      return "0";    }    String s = value.toString();    if (s.trim().length() == 0) {      return "0";    } else {      return s.replaceAll(",", "");    }  }}
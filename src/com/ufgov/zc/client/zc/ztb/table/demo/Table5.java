/** * @(#) project: TableProject * @(#) file: Table4.java * * Copyright 2010 UFGOV, Inc. All rights reserved. * UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. * */package com.ufgov.zc.client.zc.ztb.table.demo;import com.thoughtworks.xstream.XStream;import com.thoughtworks.xstream.io.xml.DomDriver;import com.ufgov.zc.client.zc.ztb.table.entity.GridColumn;import com.ufgov.zc.client.zc.ztb.table.entity.table.XmlTable;import com.ufgov.zc.client.zc.ztb.table.entity.table.XmlTableCell;import com.ufgov.zc.client.zc.ztb.table.entity.table.XmlTableColumn;import com.ufgov.zc.client.zc.ztb.table.entity.table.XmlTableRow;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableColumnModel;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableModel;import com.ufgov.zc.client.zc.ztb.util.GV;import javax.swing.*;import java.awt.*;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.io.ByteArrayInputStream;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * 读取xml格式文件生成表格 * * @date: 2010-4-27 下午01:55:40 * @version: V1.0 * @since: 1.0 * @author: Administrator * @modify: */public class Table5 extends Demo {  public static void main(String s[]) {    setLookAndFeel();    JFrame frame = new JFrame();    frame.setIconImage(frame.getToolkit().getImage(GV.getImageUrl("windowicon.jpg")));    JPanel panel = new Table5().createPanel();    frame.getContentPane().setLayout(new BorderLayout());    frame.getContentPane().add(panel, BorderLayout.CENTER);    frame.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });    frame.pack();    frame.setSize(900, 600);    frame.setVisible(true);  }  public XmlTable readXmlTable() {    StringBuffer sb = new StringBuffer();    //sb.append("<?xml version=\"1.0\" encoding=\"GBK\"?>");    sb.append("<XmlTable>                                ");    sb.append("  <columns>                               ");    sb.append("    <XmlTableColumn>                      ");    sb.append("     <columnId>A_000001</columnId>        ");    sb.append("     <caption>列1</caption>               ");    sb.append("      <width>100</width>                  ");    sb.append("      <isVisible>true</isVisible>         ");    sb.append("     <isInTable>true</isInTable>          ");    sb.append("    </XmlTableColumn>                     ");    sb.append("   <XmlTableColumn>                       ");    sb.append("     <columnId>A_000002</columnId>        ");    sb.append("     <caption>列2</caption>               ");    sb.append("      <width>200</width>                  ");    sb.append("      <isVisible>true</isVisible>         ");    sb.append("     <isInTable>true</isInTable>          ");    sb.append("    </XmlTableColumn>                     ");    sb.append("   </columns>                             ");    sb.append("   <rows>                                 ");    sb.append("    <XmlTableRow>                         ");    sb.append("     <cells>                              ");    sb.append("       <XmlTableCell>                     ");    sb.append("         <value>行1列1</value>            ");    sb.append("       </XmlTableCell>                    ");    sb.append("       <XmlTableCell>                     ");    sb.append("         <value>行1列2</value>            ");    sb.append("       </XmlTableCell>                    ");    sb.append("     </cells>                             ");    sb.append("     </XmlTableRow>                       ");    sb.append("    <XmlTableRow>                         ");    sb.append("     <cells>                              ");    sb.append("       <XmlTableCell>                     ");    sb.append("         <value>行2列1</value>            ");    sb.append("       </XmlTableCell>                    ");    sb.append("       <XmlTableCell>                     ");    sb.append("         <value>行2列2</value>            ");    sb.append("       </XmlTableCell>                    ");    sb.append("     </cells>                             ");    sb.append("     </XmlTableRow>                       ");    sb.append("    </rows>                               ");    sb.append("</XmlTable>                               ");    XStream xstream = new XStream(new DomDriver());    xstream.alias("XmlTable", XmlTable.class);    xstream.alias("XmlTableColumn", XmlTableColumn.class);    xstream.alias("XmlTableRow", XmlTableRow.class);    xstream.alias("XmlTableCell", XmlTableCell.class);    XmlTable table = null;    //FileInputStream fis = new FileInputStream("c:/A_000001.xml");    ByteArrayInputStream tInputStringStream = new ByteArrayInputStream(sb.toString().getBytes());    try {      table = (XmlTable) xstream.fromXML(new InputStreamReader(tInputStringStream, "GBK"), new XmlTable());    } catch (UnsupportedEncodingException e) {      // TCJLODO Auto-generated catch block      e.printStackTrace();    }    System.out.println(table.getColumns().size());    return table;  }  public JPanel createPanel() {    XmlTable xmlTable = readXmlTable();    JPanel panel = new JPanel();    panel.setLayout(new BorderLayout());    com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable table = new com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable();    List<GridColumn> gridColumns = createGridColumns(xmlTable);    JTableColumnModel tableColumnModel = new JTableColumnModel(table, gridColumns);    JTableModel tableModel = new JTableModel(tableColumnModel, table);    table.setModel(tableModel);    table.setColumnModel(tableColumnModel);    table.setAutoCreateRowSorter(false);    List<Map<String, String>> rowset = buildTableRowData(xmlTable);    tableModel.add(rowset);    panel.add(new JScrollPane(table), BorderLayout.NORTH);    return panel;  }  /**   * @param xmlTable   * @return List<Map<String,String>>   * @throws   * @Description: TODO   */  private List<Map<String, String>> buildTableRowData(XmlTable xmlTable) {    List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();    List<XmlTableColumn> columns = xmlTable.getColumns();    List<XmlTableRow> rows = xmlTable.getRows();    for (XmlTableRow row : rows) {      Map<String, String> rowMap = new HashMap<String, String>();      for (int i = 0, j = columns.size(); i < j; i++) {        rowMap.put(columns.get(i).getColumnId(), row.getCells().get(i).getValue());      }      dataList.add(rowMap);    }    return dataList;  }  private List<GridColumn> createGridColumns(XmlTable xmlTable) {    List<XmlTableColumn> columns = xmlTable.getColumns();    List<GridColumn> gridColumns = new ArrayList<GridColumn>();    for (XmlTableColumn column : columns) {      gridColumns.add((GridColumn) column);    }    return gridColumns;  }}
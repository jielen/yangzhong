package com.ufgov.zc.client.zc.ztb.table.tablecomponent;import com.ufgov.zc.client.zc.ztb.table.entity.GridColumn;import com.ufgov.zc.client.zc.ztb.table.entity.Valset;import javax.swing.JTable;import javax.swing.table.AbstractTableModel;import javax.swing.table.DefaultTableColumnModel;import javax.swing.table.TableColumn;import java.awt.*;import java.text.DecimalFormat;import java.util.*;import java.util.List;import java.util.Map.Entry;public class JTableModel extends AbstractTableModel {  private static final long serialVersionUID = -724570287790921705L;  public static final String SERVICE_NAME = "SaveAction";  public static final String TABLE_ROWNUM = "TABLE.ROWNUM";  public static final String TABLE_CHECKBOX = "TABLE.CHECKBOX";  public static final String TABLE_RADIOBUTTON = "TABLE.RADIOBUTTON";  public static final String RECORD_IS_NEW = "TABLE.RECORD_IS_NEW";  public static final String SEARCH_FILTER_STRING = "TABLE.SEARCH_FILTER_STRING";  public static final String TABLE_TIMESTAMP = "TABLE.TIMESTAMP";  private final List<Map<String, String>> dataset = new ArrayList<Map<String, String>>();  private Map<Integer, Map<String, String>> deleteTableSetMap = new HashMap<Integer, Map<String, String>>();  private Map<Integer, Map<String, String>> updateTableSetMap = new HashMap<Integer, Map<String, String>>();  private Map<Integer, Map<String, String>> insertTableSetMap = new HashMap<Integer, Map<String, String>>();  private final static DecimalFormat numberFormat = new DecimalFormat("#,##0.00");  private final static Map<String, DecimalFormat> numberFormatMap = new HashMap<String, DecimalFormat>();  private JTableColumnModel tableColumnModel;  private JTable table;  public static final String SEARCHING_STRING = "TABLE.SEARCHING_STRING";  private static final String ORA_00001 = "ORA-00001";  private String DO_BUSINESS_ON_SAVE_BEAN;  public JTableModel() {  }  public <T extends DefaultTableColumnModel, K extends javax.swing.JTable> JTableModel(T tableColumnModel, K table) {    if (tableColumnModel instanceof JTableColumnModel) {      this.setTableColumnModel((JTableColumnModel) tableColumnModel);    }    this.setTable(table);  }  public void add(List<Map<String, String>> rowset) {    if (rowset == null || rowset.size() == 0) {      return;    }    int first = getDataset().size();    int last = first + rowset.size() - 1;    getDataset().addAll(rowset);    fireTableRowsInserted(first, last);  }  public void add(Map<String, String> row) {    int index = getDataset().size();    getDataset().add(row);    setSearchingString(index, index);    fireTableRowsInserted(index, index);  }  public void setSearchingString(int firstRowIndex, int lastRowIndex) {    Map<String, String> row;    StringBuilder stringBuilder;    String value;    String pinyin;    for (; firstRowIndex <= lastRowIndex; firstRowIndex++) {      if (firstRowIndex < 0) {        continue;      }      if (firstRowIndex > getDataset().size() - 1) {        break;      }      row = getDataset().get(firstRowIndex);      stringBuilder = new StringBuilder();      for (int i = 0, j = tableColumnModel.getColumnCount(); i < j; i++) {        JTableColumn tableColumn = (JTableColumn) tableColumnModel.getColumn(i);        if (tableColumn.getMinWidth() == 0 && tableColumn.getMaxWidth() == 0) {          continue;        }        value = getValue(tableColumn, firstRowIndex, false);        if (value == null || value.trim().length() == 0) {          continue;        }        stringBuilder.append(value);        stringBuilder.append(",");        //        pinyin = CnToSpell.getPinyin(value);        //        if (!value.equals(pinyin)) {        //          stringBuilder.append(pinyin);        //          stringBuilder.append(",");        //        }      }      row.put(SEARCHING_STRING, stringBuilder.toString());    }  }  public void add(int index, Map<String, String> row) {    row.put(TABLE_TIMESTAMP, String.valueOf(System.currentTimeMillis()));    getDataset().add(row);    getInsertTableSetMap().put(getInsertTableSetMap().size(), row);    fireTableRowsInserted(index, index);  }  public void removeRow(int rowIndex) {    Map<String, String> row = getDataset().get(rowIndex);    if (!checkIsAddWhenDelete(row)) {      getDeleteTableSetMap().put(getDeleteTableSetMap().size(), row);    }    getDataset().remove(rowIndex);    fireTableRowsDeleted(rowIndex, rowIndex);    fireTableDataChanged();  }  public void removeViewRow(int viewRowIndex) {    int rowIndex = table.convertRowIndexToModel(viewRowIndex);    removeRow(rowIndex);  }  public void removeViewRows(int[] selectRows) {    for (int i = selectRows.length - 1, j = 0; i >= j; i--) {      removeViewRow(selectRows[i]);    }  }  public void removeAll() {    int index = getDataset().size();    if (index <= 0)      return;    getDataset().clear();    fireTableRowsDeleted(0, index - 1);  }  public void insertRow(int rowIndex, Map<String, String> row) {    if (rowIndex > getDataset().size()) {      return;    }    getDataset().add(rowIndex, row);    fireTableDataChanged();  }  public void append(Map<String, String> row) {    if (getTable().getCellEditor() != null) {      getTable().getCellEditor().stopCellEditing();    }    row.put(TABLE_TIMESTAMP, String.valueOf(System.currentTimeMillis()));    setDefaultValue(row);    int index = getDataset().size();    getDataset().add(row);    getInsertTableSetMap().put(getInsertTableSetMap().size(), row);    fireTableRowsInserted(index, index);    fireTableDataChanged();  }  private void setDefaultValue(Map<String, String> row) {    List<GridColumn> gridColumns = getTableColumnModel().getGridColumns();    String fieldName;    String value;    String defaultValue;    for (GridColumn gridColumn : gridColumns) {      defaultValue = gridColumn.getDefaultValue();      if (defaultValue == null || defaultValue.trim().length() == 0) {        continue;      }      fieldName = gridColumn.getColumnId();      value = row.get(fieldName);      if (value != null) {        continue;      }      value = defaultValue;      row.put(fieldName, value);    }    row.put(TABLE_TIMESTAMP, String.valueOf(System.currentTimeMillis()));  }  public void focusTableRow(int rowIndex, int columnIndex) {    if (rowIndex < 0) {      return;    }    Rectangle rect = table.getCellRect(rowIndex, 0, true);    table.scrollRectToVisible(rect);    table.setRowSelectionInterval(rowIndex, rowIndex);    table.grabFocus();    table.changeSelection(rowIndex, columnIndex, false, true);    table.editCellAt(rowIndex, columnIndex);  }  public void focusTableRow(int rowIndex, String columnId) {    if (rowIndex < 0) {      return;    }    Enumeration<TableColumn> tableColumns = table.getColumnModel().getColumns();    while (tableColumns.hasMoreElements()) {      JTableColumn tableColumn = (JTableColumn) tableColumns.nextElement();      if (tableColumn.getIdentifier().toString().equalsIgnoreCase(columnId)) {        focusTableRow(rowIndex, table.convertColumnIndexToView(tableColumn.getModelIndex()));        break;      }    }  }  public void updateRow(Integer rowIndex, String key, String value) {    Map<String, String> row = getDataset().get(rowIndex);    row.put(key, value);    if (!checkIsAddWhenUpdate(row)) {      getUpdateTableSetMap().put(rowIndex, row);    }    fireTableRowsUpdated(rowIndex, rowIndex);  }  public void updateNewRow(Integer rowIndex, String key, String value) {    Map<String, String> row = getDataset().get(rowIndex);    setDefaultValue(row);    updateRow(rowIndex, key, value);  }  public void updateRow(Integer rowIndex, Integer columnIndex, String value) {    String columnId = getTableColumnModel().getColumnByModelIndex(columnIndex).getIdentifier().toString();    updateRow(rowIndex, columnId, value);  }  protected void checkDelete() {    Map<Integer, Map<String, String>> map = getDeleteTableSetMap();    Set<Entry<Integer, Map<String, String>>> set = map.entrySet();    Iterator<Entry<Integer, Map<String, String>>> iterator = set.iterator();    while (iterator.hasNext()) {      Entry<Integer, Map<String, String>> entry = iterator.next();      if ("Y".equalsIgnoreCase(entry.getValue().get(RECORD_IS_NEW))) {        map.remove(entry.getKey());      }    }  }  protected boolean checkIsAddWhenDelete(Map<String, String> row) {    Map<Integer, Map<String, String>> map = getInsertTableSetMap();    Set<Entry<Integer, Map<String, String>>> set = map.entrySet();    Iterator<Entry<Integer, Map<String, String>>> iterator = set.iterator();    String timestamp = row.get(TABLE_TIMESTAMP);    if (timestamp == null)      return false;    while (iterator.hasNext()) {      Entry<Integer, Map<String, String>> entry = iterator.next();      if (timestamp.equalsIgnoreCase(entry.getValue().get(TABLE_TIMESTAMP))) {        map.remove(entry.getKey());        return true;      }    }    return false;  }  protected boolean checkIsAddWhenUpdate(Map<String, String> row) {    Map<Integer, Map<String, String>> map = getInsertTableSetMap();    Set<Entry<Integer, Map<String, String>>> set = map.entrySet();    Iterator<Entry<Integer, Map<String, String>>> iterator = set.iterator();    String timestamp = row.get(TABLE_TIMESTAMP);    if (timestamp == null)      return false;    while (iterator.hasNext()) {      Entry<Integer, Map<String, String>> entry = iterator.next();      if (timestamp.equalsIgnoreCase(entry.getValue().get(TABLE_TIMESTAMP))) {        map.put(entry.getKey(), row);        return true;      }    }    return false;  }  public void setSaveParamsMap(Map<String, Object> paramsMap, List<String> tableNameList, List<List<GridColumn>> gridColumnsList,    List<List<Map<Integer, Map<String, String>>>> dataList, List<JTableModel> modelList) {    paramsMap.put("TABLE_NAMES", tableNameList);    paramsMap.put("GRID_COLUMNS", gridColumnsList);    paramsMap.put("DATA", dataList);    paramsMap.put("MODELS", modelList);    paramsMap.put("BUSINESS_BEAN", DO_BUSINESS_ON_SAVE_BEAN);  }  public int getRowCount() {    return getDataset().size();  }  public int getColumnCount() {    return getTableColumnModel().getColumnCount();  }  public Map<String, String> get(int row) {    return getDataset().get(row);  }  public Object getValueAt(int rowIndex, int columnIndex) {    JTableColumn tableColumn = getTableColumnModel().getColumnByModelIndex(columnIndex);    if (TABLE_ROWNUM.equalsIgnoreCase(tableColumn.getIdentifier().toString())) {      return getTable().convertRowIndexToView(rowIndex) + 1;    }    return getValue(tableColumn, rowIndex, true);  }  private String getValue(JTableColumn tableColumn, int rowIndex, boolean isThousandsSeparator) {    String value = getDataset().get(rowIndex).get(tableColumn.getIdentifier());    if (value == null || value.trim().length() == 0) {      return "";    }    GridColumn gridColumn = tableColumn.getGridColumn();    if (gridColumn.getValsetId() != null && gridColumn.getValsetId().trim().length() > 0) {      value = getValsetValue(value, gridColumn);    } else if (gridColumn.isFloat()) {      value = getNumberValue(value, gridColumn, isThousandsSeparator);    } else if (gridColumn.isDate()) {      value = getDataValue(value);    }    return value;  }  private String getDataValue(String value) {    if (value.trim().length() > 10) {      value = value.substring(0, 10);    }    return value;  }  @SuppressWarnings("unchecked")  private String getValsetValue(String value, GridColumn gridColumn) {    Map<String, Valset> map = gridColumn.getValsetMap();    if (map != null) {      Valset valset = map.get(value);      if (valset != null) {        value = valset.getVal();      }    }    return value;  }  public String getNumberValue(String value, GridColumn gridColumn, boolean isThousandsSeparator) {    if (value == null || value.trim().length() == 0) {      return "";    }    value = value.replaceAll(",", "");    Double dValue = Double.parseDouble(value);    if (dValue == 0 && !gridColumn.isShowZero()) {      return "";    }    if (gridColumn.getNumberFormatString() == null) {      gridColumn.createNumberFormatString();    }    if (gridColumn.getNumberFormatString() == null || gridColumn.getNumberFormatString().trim().length() == 0) {      return value;    }    String numberFormatString = gridColumn.getNumberFormatString();    if (!isThousandsSeparator) {      numberFormatString = numberFormatString.replaceAll(",", "");    }    DecimalFormat decimalFormat = numberFormatMap.get(numberFormatString);    if (decimalFormat == null) {      decimalFormat = new DecimalFormat(numberFormatString);      numberFormatMap.put(numberFormatString, decimalFormat);    }    value = decimalFormat.format(dValue);    return value;  }  public boolean isCellEditable(int rowIndex, int columnIndex) {    if (getTableColumnModel().getColumnByModelIndex(columnIndex).getGridColumn().isForceReadOnly()) {      return false;    }    if (getTableColumnModel().getColumnByModelIndex(columnIndex).getGridColumn().isReadOnly()) {      if (TABLE_ROWNUM.equalsIgnoreCase(getTableColumnModel().getColumnByModelIndex(columnIndex).getGridColumn().getColumnId())) {        return false;      }      if (!("Y".equalsIgnoreCase(getDataset().get(rowIndex).get(RECORD_IS_NEW)))) {        return false;      }    }    return true;  }  public List<Map<String, String>> getDataset() {    return dataset;  }  public void setDeleteTableSetMap(Map<Integer, Map<String, String>> deleteTableSetMap) {    this.deleteTableSetMap = deleteTableSetMap;  }  public Map<Integer, Map<String, String>> getDeleteTableSetMap() {    return deleteTableSetMap;  }  public void setUpdateTableSetMap(Map<Integer, Map<String, String>> updateTableSetMap) {    this.updateTableSetMap = updateTableSetMap;  }  public Map<Integer, Map<String, String>> getUpdateTableSetMap() {    return updateTableSetMap;  }  public void setInsertTableSetMap(Map<Integer, Map<String, String>> insertTableSetMap) {    this.insertTableSetMap = insertTableSetMap;  }  public Map<Integer, Map<String, String>> getInsertTableSetMap() {    return insertTableSetMap;  }  public void setTableColumnModel(JTableColumnModel tableColumnModel) {    this.tableColumnModel = tableColumnModel;  }  public JTableColumnModel getTableColumnModel() {    return tableColumnModel;  }  public void setTable(JTable table) {    this.table = table;  }  public JTable getTable() {    return table;  }  public boolean isChanged() {    if (getDeleteTableSetMap().size() == 0 && getInsertTableSetMap().size() == 0 && getUpdateTableSetMap().size() == 0) {      return false;    }    return true;  }  public void setDoBusinessOnSaveBean(String DO_BUSINESS_ON_SAVE_BEAN) {    this.DO_BUSINESS_ON_SAVE_BEAN = DO_BUSINESS_ON_SAVE_BEAN;  }  public static DecimalFormat getNumberFormat() {    return numberFormat;  }}
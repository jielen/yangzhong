package com.ufgov.zc.client.zc.ztb.table.tablecomponent.gtable;import javax.swing.*;import javax.swing.table.DefaultTableCellRenderer;import javax.swing.table.JTableHeader;import javax.swing.table.TableCellRenderer;import javax.swing.table.TableColumn;import java.awt.*;import java.util.Enumeration;import java.util.Vector;public class GTableHeaderColumnGroup {  protected TableCellRenderer renderer;  protected Vector v;  protected String text;  protected int margin = 0;  protected int headerOneRowHeight = 0;  public GTableHeaderColumnGroup(String text, int headerOneRowHeight) {    this(null, text, headerOneRowHeight);  }  public GTableHeaderColumnGroup(TableCellRenderer renderer, String text, int headerOneRowHeight) {    if (renderer == null) {      this.headerOneRowHeight = headerOneRowHeight;      this.renderer = new DefaultTableCellRenderer() {        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {          JTableHeader header = table.getTableHeader();          if (header != null) {            setForeground(header.getForeground());            setBackground(header.getBackground());            setFont(header.getFont());          }          setHorizontalAlignment(JLabel.CENTER);          setText((value == null) ? "" : value.toString());          setBorder(UIManager.getBorder("TableHeader.cellBorder"));          return this;        }      };    } else {      this.renderer = renderer;    }    this.text = text;    v = new Vector();  }  /**   * @param obj TableColumn or ColumnGroup   */  public void add(Object obj) {    if (obj == null) {      return;    }    if (!v.contains(obj)) {      v.addElement(obj);    }  }  /**   * @param c TableColumn   * @param v ColumnGroups   */  public Vector getColumnGroups(TableColumn c, Vector g) {    g.addElement(this);    if (v.contains(c))      return g;    Enumeration e = v.elements();    while (e.hasMoreElements()) {      Object obj = e.nextElement();      if (obj instanceof GTableHeaderColumnGroup) {        Vector groups = (Vector) ((GTableHeaderColumnGroup) obj).getColumnGroups(c, (Vector) g.clone());        if (groups != null)          return groups;      }    }    return null;  }  public TableCellRenderer getHeaderRenderer() {    return renderer;  }  public void setHeaderRenderer(TableCellRenderer renderer) {    if (renderer != null) {      this.renderer = renderer;    }  }  public Object getHeaderValue() {    return text;  }  public Dimension getSize(JTable table) {    int height = 0;    if (this.headerOneRowHeight > 0) {      height = this.headerOneRowHeight;    } else {      Component comp = renderer.getTableCellRendererComponent(table, getHeaderValue(), false, false, -1, -1);      height = comp.getPreferredSize().height;    }    int width = 0;    Enumeration e = v.elements();    while (e.hasMoreElements()) {      Object obj = e.nextElement();      if (obj instanceof TableColumn) {        TableColumn aColumn = (TableColumn) obj;        width += aColumn.getWidth();        width += margin;      } else {        width += ((GTableHeaderColumnGroup) obj).getSize(table).width;      }    }    return new Dimension(width, height);  }  public void setColumnMargin(int margin) {    this.margin = margin;    Enumeration e = v.elements();    while (e.hasMoreElements()) {      Object obj = e.nextElement();      if (obj instanceof GTableHeaderColumnGroup) {        ((GTableHeaderColumnGroup) obj).setColumnMargin(margin);      }    }  }}
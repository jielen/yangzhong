package com.ufgov.zc.client.zc.ztb.table.tablecomponent.combobox;import com.ufgov.zc.client.zc.ztb.table.entity.Valset;import javax.swing.*;import javax.swing.text.JTextComponent;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.util.Vector;public class JEditableComboBox extends JComboBox {  public JEditableComboBox() {    this(null);  }  public JEditableComboBox(Vector<Valset> vector) {    super();    init();    init2(vector);  }  private void init2(Vector<Valset> vector) {    if (vector != null) {      setModel(new JTableComboBoxModel(vector));    }  }  private void init() {    setEditable(true);    setMaximumRowCount(20);    final JTextComponent editor = (JTextComponent) getEditor().getEditorComponent();    editor.addKeyListener(new KeyAdapter() {      public void keyReleased(KeyEvent e) {        char ch = e.getKeyChar();        if (ch != KeyEvent.VK_BACK_SPACE) {          if (ch == KeyEvent.CHAR_UNDEFINED || Character.isISOControl(ch) || ch == KeyEvent.VK_DELETE) {            return;          }        }        JComboBox comboBox = JEditableComboBox.this;        if (comboBox.isDisplayable()) {          String text = editor.getText();          JTableComboBoxModel model = (JTableComboBoxModel) comboBox.getModel();          Vector<Valset> items = model.getMatchItems(text);          Vector<Valset> vector = model.getValSetList();          comboBox.setModel(new JTableComboBoxModel(vector, items));          editor.setText(text);          editor.setCaretPosition(text.length());          comboBox.setPopupVisible(true);        }      }    });    addItemListener(new ItemListener() {      public void itemStateChanged(ItemEvent event) {        if (event.getStateChange() == ItemEvent.SELECTED) {          int caretPosition = editor.getCaretPosition();          if (caretPosition != -1) {            try {              editor.moveCaretPosition(caretPosition);            } catch (IllegalArgumentException ex) {              ex.printStackTrace();              throw new RuntimeException(ex);            }          }        }      }    });  }}
/** * @(#) project: TableProject * @(#) file: Table3.java * * Copyright 2010 UFGOV, Inc. All rights reserved. * UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. * */package com.ufgov.zc.client.zc.ztb.table.demo;import com.ufgov.zc.client.zc.ztb.table.builder.GridColumnBuilder;import com.ufgov.zc.client.zc.ztb.table.entity.GridColumn;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableColumnModel;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableModel;import com.ufgov.zc.client.zc.ztb.util.GV;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @ClassName: Table3 * @Description: TODO(这里用一句话描述这个类的作用) * @date: 2010-4-23 下午02:44:28 * @version: V1.0 * @since: 1.0 * @author: Administrator * @modify: */public class Table3 extends Demo {  public static void main(String s[]) {    setLookAndFeel();    JFrame frame = new JFrame();    frame.setIconImage(frame.getToolkit().getImage(GV.getImageUrl("windowicon.jpg")));    JPanel panel = new Table3().createPanel();    frame.getContentPane().setLayout(new BorderLayout());    frame.getContentPane().add(panel, BorderLayout.CENTER);    frame.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });    frame.pack();    frame.setSize(900, 600);    frame.setVisible(true);  }  public JPanel createPanel() {    JPanel panel = new JPanel();    panel.setLayout(new BorderLayout());    final JSplitPane splitPane = new JSplitPane();    splitPane.setDividerLocation(400);    final JTable table = createTable();    splitPane.setLeftComponent(new JScrollPane(table));    panel.add(splitPane, BorderLayout.CENTER);    JToolBar toolBar = new JToolBar();    JButton button = new JButton("预览效果");    button.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        if (table.getCellEditor() != null) {          table.getCellEditor().stopCellEditing();        }        JTable ptable = createPreviewTable(table);        splitPane.setRightComponent(new JScrollPane(ptable));      }    });    toolBar.add(button);    panel.add(toolBar, BorderLayout.NORTH);    return panel;  }  public JTable createTable() {    com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable table = new com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable();    List<Map<String, String>> columnDataList = new GridColumnData().buildData();    List<GridColumn> gridColumns = GridColumnBuilder.buildGridColumn(columnDataList);    JTableColumnModel tableColumnModel = new JTableColumnModel(table, gridColumns);    JTableModel tableModel = new JTableModel(tableColumnModel, table);    table.setModel(tableModel);    table.setColumnModel(tableColumnModel);    table.setAutoCreateRowSorter(false);    List<Map<String, String>> rowset = new TableDataTemplate().buildData();    tableModel.add(rowset);    return table;  }  public JTable createPreviewTable(JTable ltable) {    JTableModel ltableModel = (JTableModel) ltable.getModel();    List<Map<String, String>> dataList = ltableModel.getDataset();    com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable table = new com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable();    List<Map<String, String>> columnDataList = new ArrayList<Map<String, String>>();    for (Map<String, String> row : dataList) {      String columnId = row.get("COLUMN_ID");      if (columnId != null && columnId.length() > 0) {        Map<String, String> map = new HashMap<String, String>(row);        map.put("CAPTION", columnId);        columnDataList.add(map);      }    }    List<GridColumn> gridColumns = GridColumnBuilder.buildGridColumn(columnDataList);    JTableColumnModel tableColumnModel = new JTableColumnModel(table, gridColumns);    JTableModel tableModel = new JTableModel(tableColumnModel, table);    table.setModel(tableModel);    table.setColumnModel(tableColumnModel);    table.setAutoCreateRowSorter(false);    return table;  }  /**   * 表头列数据,GROUP_ID是列属于哪一组的标识   *   * @date: 2010-4-23 下午02:33:51   * @version: V1.0   * @since: 1.0   * @author: Administrator   * @modify:   */  class GridColumnData {    public List<Map<String, String>> buildData() {      List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();      dataList.add(buildRow("COLUMN_ID", "", "列名", "200", "L", "TEXT", "", "", ""));      dataList.add(buildRow("WIDTH", "", "列宽", "120", "C", "NUM", "", "", ""));      return dataList;    }    private Map<String, String> buildRow(String columnId, String groupId, String caption, String width, String align, String dataType, String decLen,      String isThousandsSeparator, String isForceReadonly) {      Map<String, String> row = new HashMap<String, String>();      row.put("COLUMN_ID", columnId);//字段名      row.put("GROUP_ID", groupId);      row.put("CAPTION", caption);//列名（字段名的翻译）      row.put("WIDTH", width);//列宽      row.put("ALIGN", align);//水平对齐/L/C/R      row.put("DATA_TYPE", dataType);//数据类型/NUM/TEXT/DATE      row.put("DEC_LEN", decLen);//小数位      row.put("IS_THOUSANDS_SEPARATOR", isThousandsSeparator);      row.put("IS_FORCE_READONLY", isForceReadonly);      return row;    }  }  /**   * 组数据，可以分多层   *   * @date: 2010-4-23 下午02:34:06   * @version: V1.0   * @since: 1.0   * @author: Administrator   * @modify:   */  class GridColumnGroupData {    public List<Map<String, String>> buildData() {      List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();      dataList.add(buildRow("XZ", "行政单位", ""));      dataList.add(buildRow("SY", "事业单位", ""));      return dataList;    }    private Map<String, String> buildRow(String groupId, String groupName, String parentGroupId) {      Map<String, String> row = new HashMap<String, String>();      row.put("GROUP_ID", groupId);      row.put("GROUP_NAME", groupName);      row.put("PARENT_GROUP_ID", parentGroupId);      return row;    }  }  /**   * 表格行数据   *   * @date: 2010-4-23 下午02:34:39   * @version: V1.0   * @since: 1.0   * @author: Administrator   * @modify:   */  class TableDataTemplate {    public List<Map<String, String>> buildData() {      List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();      dataList.add(buildRow("栏次", "", "1", "2", "3", "4"));      dataList.add(buildRow("资产总额", "1", "--", "", "", ""));      dataList.add(buildRow("一、流动资产", "2", "--", "", "", ""));      dataList.add(buildRow("二、固定资产", "3", "--", "", "", ""));      dataList.add(buildRow("   （一）土地（平方米）", "4", "", "", "", ""));      dataList.add(buildRow("   （二）房屋构筑物（平方米）", "5", "", "", "", ""));      dataList.add(buildRow("   （三）汽车（台、辆）", "6", "", "", "", ""));      return dataList;    }    private Map<String, String> buildRow(String item, String row_no, String xz_qty, String xz_cost, String sy_qty, String sy_cost) {      Map<String, String> row = new HashMap<String, String>();      row.put("ITEM", item);      row.put("ROW_NO", row_no);      row.put("XZ_QTY", xz_qty);      row.put("XZ_COST", xz_cost);      row.put("SY_QTY", sy_qty);      row.put("SY_COST", sy_cost);      return row;    }  }}
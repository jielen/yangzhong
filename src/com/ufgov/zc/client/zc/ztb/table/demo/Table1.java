/** * @(#) project: TableProject * @(#) file: Table1.java * * Copyright 2010 UFGOV, Inc. All rights reserved. * UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. * */package com.ufgov.zc.client.zc.ztb.table.demo;import com.ufgov.zc.client.zc.ztb.table.builder.GridColumnBuilder;import com.ufgov.zc.client.zc.ztb.table.entity.GridColumn;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableColumnModel;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableModel;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableRowSorter;import com.ufgov.zc.client.zc.ztb.util.GV;import javax.swing.*;import java.awt.*;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * 普通表格例子，列可自定义，列可以排序，可以拖动 * * @date: 2010-4-23 上午11:37:32 * @version: V1.0 * @since: 1.0 * @author: Administrator * @modify: */public class Table1 extends Demo {  /**   * @param args   * @return void   * @throws   * @Description: TODO   */  public static void main(String[] args) {    setLookAndFeel();    JFrame frame = new JFrame(GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration());    frame.setIconImage(frame.getToolkit().getImage(GV.getImageUrl("windowicon.jpg")));    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    frame.setTitle("普通表格");    JScrollPane scrollpane = new JScrollPane(new Table1().createTable());    frame.getContentPane().add(scrollpane, BorderLayout.CENTER);    frame.pack();    frame.setExtendedState(JFrame.MAXIMIZED_BOTH);    frame.setVisible(true);  }  public JTable createTable() {    com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable table = new com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable();    List<Map<String, String>> columnDataList = buildData();    List<GridColumn> gridColumns = GridColumnBuilder.buildGridColumn(columnDataList);    JTableColumnModel tableColumnModel = new JTableColumnModel(table, gridColumns);    JTableModel tableModel = new JTableModel(tableColumnModel, table);    table.setModel(tableModel);    table.setColumnModel(tableColumnModel);    JTableRowSorter<JTableModel> sorter = new JTableRowSorter<JTableModel>(tableModel);    sorter.setComparators(tableColumnModel);    table.setRowSorter(sorter);    List<Map<String, String>> rowset = buildTableRowData();    tableModel.add(rowset);    return table;  }  /**   * 表格表头列属性   *   * @return List<Map<String,String>>   * @throws   */  public List<Map<String, String>> buildData() {    List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();    dataList.add(buildRow("ITEM", "", "项目", "300", "L", "TEXT", "", "", "Y"));    dataList.add(buildRow("TABLE.ROWNUM", "", "行次", "60", "C", "NUM", "", "", "Y"));    dataList.add(buildRow("XZ_QTY", "XZ", "数量", "120", "R", "NUM", "", "", ""));    dataList.add(buildRow("XZ_COST", "XZ", "价值", "120", "R", "NUM", "2", "Y", ""));    dataList.add(buildRow("SY_QTY", "SY", "数量", "120", "R", "NUM", "", "", ""));    dataList.add(buildRow("SY_COST", "SY", "价值", "120", "R", "NUM", "4", "Y", ""));    return dataList;  }  private Map<String, String> buildRow(String columnId, String groupId, String caption, String width, String align, String dataType, String decLen,    String isThousandsSeparator, String isForceReadonly) {    Map<String, String> row = new HashMap<String, String>();    row.put("COLUMN_ID", columnId);//字段名    row.put("GROUP_ID", groupId);    row.put("CAPTION", caption);//列名（字段名的翻译）    row.put("WIDTH", width);//列宽    row.put("ALIGN", align);//水平对齐/L/C/R    row.put("DATA_TYPE", dataType);//数据类型/NUM/TEXT/DATE    row.put("DEC_LEN", decLen);//小数位    row.put("IS_THOUSANDS_SEPARATOR", isThousandsSeparator);    row.put("IS_FORCE_READONLY", isForceReadonly);    return row;  }  /**   * 表格行数据   *   * @return List<Map<String,String>>   * @throws   */  private List<Map<String, String>> buildTableRowData() {    List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();    Map<String, String> row = new HashMap<String, String>();    row.put("ITEM", "供应商A");    dataList.add(row);    row = new HashMap<String, String>();    row.put("ITEM", "供应商B");    dataList.add(row);    row = new HashMap<String, String>();    row.put("ITEM", "供应商C");    dataList.add(row);    return dataList;  }}
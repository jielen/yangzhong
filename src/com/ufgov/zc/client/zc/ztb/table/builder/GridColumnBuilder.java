/** * @(#) project: TableProject * @(#) file: GridColumnBuilder.java * * Copyright 2010 UFGOV, Inc. All rights reserved. * UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. * */package com.ufgov.zc.client.zc.ztb.table.builder;import com.ufgov.zc.client.zc.ztb.table.entity.GridColumn;import com.ufgov.zc.client.zc.ztb.table.entity.Valset;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @ClassName: GridColumnBuilder * @Description: TODO(这里用一句话描述这个类的作用) * @date: 2010-4-23 上午11:43:46 * @version: V1.0 * @since: 1.0 * @author: Administrator * @modify: */public class GridColumnBuilder {  public static List<GridColumn> buildGridColumn(List<Map<String, String>> columnsData) {    GridColumnBuilder builder = new GridColumnBuilder();    return builder._buildGridColumn(columnsData);  }  // liuyunbin 给列设定值  public List<GridColumn> _buildGridColumn(List<Map<String, String>> columnsData) {    List<GridColumn> result = new ArrayList<GridColumn>();    GridColumn column;    for (Map<String, String> map : columnsData) {      column = new GridColumn();      column.setPageId(getString(map, GridColumn.PAGE_ID));      column.setGridId(getString(map, GridColumn.GRID_ID));      column.setColumnId(getString(map, GridColumn.COLUMN_ID));      column.setColIndex(getInt(map, GridColumn.ORD_INDEX));      column.setCaption(getString(map, GridColumn.CAPTION));      column.setWidth(getInt(map, GridColumn.WIDTH));      column.setVisible(getBoolean2(map, GridColumn.IS_VISIBLE));      column.setAlign(getString(map, GridColumn.ALIGN));      column.setDataType(getString(map, GridColumn.DATA_TYPE));      column.setValsetId(getString(map, GridColumn.VALSET_ID));      column.setRowIndex(getInt(map, GridColumn.ROW_INDEX));      column.setColIndex(getInt(map, GridColumn.COL_INDEX));      column.setFieldWidth(getInt(map, GridColumn.FIELD_WIDTH));      column.setFieldHeight(getInt(map, GridColumn.FIELD_HEIGHT));      column.setReadOnly(getBoolean(map, GridColumn.IS_READONLY));      column.setNull(getBoolean2(map, GridColumn.IS_NULL));      column.setAllowInput(getBoolean(map, GridColumn.IS_ALLOW_INPUT));      column.setMinValue(getMinValue(map, GridColumn.MIN_VALUE));      column.setMaxValue(getMaxValue(map, GridColumn.MAX_VALUE));      column.setMinLen(getInt(map, GridColumn.MIN_LEN));      column.setMaxLen(getInt(map, GridColumn.MAX_LEN));      column.setInEditor(getBoolean2(map, GridColumn.IS_IN_EDITOR));      column.setEditorType(getEditorType(map, GridColumn.EDITOR_TYPE));      column.setSave(getBoolean(map, GridColumn.IS_SAVE));      column.setPk(getBoolean(map, GridColumn.IS_PK));      column.setDecLen(getInt(map, GridColumn.DEC_LEN));      column.setInTable(getBoolean2(map, GridColumn.IS_IN_TABLE));      column.setDefaultValue(getString(map, GridColumn.DEFAULT_VALUE));      column.setAutoNum(getBoolean(map, GridColumn.IS_AUTO_NUM));      column.setForceReadOnly(getBoolean(map, GridColumn.IS_FORCE_READONLY));      column.setRemark(getString(map, GridColumn.REMARK));      column.setColumnPosition(getString(map, GridColumn.COLUMN_POSITION));      column.setWatchOnly(getBoolean(map, GridColumn.IS_WATCH_ONLY));      column.setShowZero(getBoolean(map, GridColumn.IS_SHOW_ZERO));      column.setThousandsSeparator(getBoolean2(map, GridColumn.IS_THOUSANDS_SEPARATOR));      column.setGroupId(getString(map, GridColumn.GROUP_ID));      if (column.isComboBox()) {        column.setValsetList(getValsetList(column, map, GridColumn.VALSET_ID));        column.setValsetMap(getValsetMap(column, map, GridColumn.VALSET_ID));      }      column.setDataMap(map);      result.add(column);    }    return result;  }  private String getString(Map<String, String> map, String field) {    String value = map.get(field);    if (value == null) {      value = "";    }    return value;  }  private boolean getBoolean(Map<String, String> map, String field) {    String value = map.get(field);    if ("Y".equalsIgnoreCase(value)) {      return true;    }    return false;  }  private boolean getBoolean2(Map<String, String> map, String field) {    String value = map.get(field);    if ("N".equalsIgnoreCase(value)) {      return false;    }    return true;  }  private int getInt(Map<String, String> map, String field) {    String value = map.get(field);    if (value == null || value.trim().length() == 0) {      return 0;    } else {      return Integer.parseInt(value, 10);    }  }  private double getMinValue(Map<String, String> map, String field) {    String value = map.get(field);    if (value == null || value.trim().length() == 0) {      return Double.MIN_VALUE;    } else {      return Double.parseDouble(value);    }  }  private double getMaxValue(Map<String, String> map, String field) {    String value = map.get(field);    if (value == null || value.trim().length() == 0) {      return Double.MAX_VALUE;    } else {      return Double.parseDouble(value);    }  }  private String getEditorType(Map<String, String> map, String field) {    String value = map.get(field);    if ("combobox".equalsIgnoreCase(value)) {      return GridColumn.EDITOR_TYPE_COMBOBOX;    } else if ("datebox".equalsIgnoreCase(value)) {      return GridColumn.EDITOR_TYPE_DATEFIELD;    } else if ("checkbox".equalsIgnoreCase(value)) {      return GridColumn.EDITOR_TYPE_CHECKBOX;    } else {      return GridColumn.EDITOR_TYPE_TEXTFIELD;    }  }  private List<Valset> getValsetList(GridColumn column, Map<String, String> map, String field) {    String valsetId = map.get(field);    return getValsetList(column, valsetId);  }  private List<Valset> getValsetList(GridColumn column, String valsetId) {    List<Valset> valsetVector = ValsetBuilder.buildValset(valsetId);    //    if (column.isNull()) {//在值集下拉框中添加一个空白选项    //      Valset valset = new Valset(valsetId, "", "");    //      Vector<Valset> valsets = new Vector<Valset>();    //      valsets.add(valset);    //      valsets.addAll(valsetVector);    //      return valsets;    //    }    return valsetVector;  }  private Map<String, Valset> getValsetMap(GridColumn column, Map<String, String> map, String field) {    String valsetId = map.get(field);    return getValsetMap(column, valsetId);  }  private Map<String, Valset> getValsetMap(GridColumn column, String valsetId) {    List<Valset> valsetList = getValsetList(column, valsetId);    if (valsetList != null) {      Map<String, Valset> valsetMap = new HashMap<String, Valset>();      for (Valset valset : valsetList) {        valsetMap.put(valset.getValId(), valset);      }      return valsetMap;    }    return null;  }}
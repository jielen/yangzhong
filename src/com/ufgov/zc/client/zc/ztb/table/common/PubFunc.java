package com.ufgov.zc.client.zc.ztb.table.common;import javax.swing.*;import java.awt.*;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.Locale;import java.util.regex.Pattern;public class PubFunc {  public static final DateFormat format = new SimpleDateFormat("yyyy-MM-dd");  public static int parseInt(String s) {    if (s == null || s.length() == 0) {      return 0;    } else {      return Integer.parseInt(s, 10);    }  }  public static int parseInt(Object o) {    String s = transStr(o);    return parseInt(s);  }  public static String transStr(Object oString) {    if (oString == null)      return "";    return oString.toString();  }  public static double parseDouble(Object o) {    return parseString(transStr(o));  }  public static double parseString(String s) {    if (PubFunc.isNullStr(s)) {      return 0;    } else {      return Double.parseDouble(s);    }  }  public static boolean isNullStr(String s) {    if (s == null || s.length() == 0 || "NULL".equalsIgnoreCase(s))      return true;    return false;  }  public static boolean isNullObj(Object s) {    if (s == null)      return true;    return false;  }  public static boolean isDecimal(String str) {    if (str == null || "".equals(str))      return false;    Pattern pattern = Pattern.compile("[0-9]*(\\.?)[0-9]*");    return pattern.matcher(str).matches();  }  public static boolean isInteger(String str) {    if (str == null)      return false;    Pattern pattern = Pattern.compile("[0-9]+");    return pattern.matcher(str).matches();  }  public static boolean isNaturalNumber(String str) {    if (!isInteger(str)) {      return false;    }    int num = Integer.parseInt(str);    if (num < 0) {      return false;    }    return true;  }  public static boolean isCurrency(String value) {    Pattern p = Pattern.compile("^-?(\\d{0,9}+\\.\\d{0,9})|\\d{0,9}?");    return p.matcher(value).matches();  }  public synchronized static final String getSystemDate() {    Date date = new Date();    return format.format(date);  }  public synchronized static int compareDate(String date1, String date2) {    try {      Date dt1;      dt1 = format.parse(date1);      Date dt2 = format.parse(date2);      if (dt1.getTime() > dt2.getTime()) {        return 1;      } else if (dt1.getTime() < dt2.getTime()) {        return -1;      }      return 0;    } catch (ParseException e) {      e.printStackTrace();    }    return 0;  }  public static final boolean isDate(String dateStr) {    if (null == dateStr || "".equals(dateStr.trim())) {      return false;    }    String yearStr = dateStr.substring(0, 4);    if (isRunNian(yearStr)) {      String regex = "(200){1}[\\d]{1}-[0|1]{1}[0|1]{1}-[0|1|2]{1}[\\d]{1}";      return dateStr.matches(regex);    } else {      String regex = "(200){1}[\\d]{1}-[0|1]{1}[0|1]{1}-[0|1|2]{1}[0-8]{1}";      return dateStr.matches(regex);    }  }  public static final boolean isValidDate(String dateStr) {    String regex = "^((((1[6-9]|[2-9]\\d)\\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\\d|3[01]))|(((1[6-9]|[2-9]\\d)\\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\\d|30))|(((1[6-9]|[2-9]\\d)\\d{2})-0?2-(0?[1-9]|1\\d|2[0-8]))|(((1[6-9]|[2-9]\\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-))$";    return dateStr.matches(regex);  }  public static final boolean isValidYear(String dateStr) {    String regex = "^((1[6-9]|[2-9]\\d)\\d{2})$";    return dateStr.matches(regex);  }  public static final boolean isRunNian(String yearStr) {    int year = Integer.parseInt(yearStr);    if ((year % 4 == 0) && ((year % 100 != 0) | (year % 400 == 0))) {      return true;    } else {      return false;    }  }  public static int getYear(String aDate) {    if (aDate == null)      return 0;    DateFormat dateFormatter = DateFormat.getDateInstance(DateFormat.MEDIUM, Locale.getDefault());    try {      dateFormatter.parse(aDate);    } catch (ParseException e) {    }    return dateFormatter.getCalendar().get(Calendar.YEAR);  }  public static int getMonth(String aDate) {    if (aDate == null)      return 0;    DateFormat dateFormatter = DateFormat.getDateInstance(DateFormat.MEDIUM, Locale.getDefault());    try {      dateFormatter.parse(aDate);    } catch (ParseException e) {    }    return dateFormatter.getCalendar().get(Calendar.MONTH) + 1;  }  public static int getDay(String aDate) {    if (aDate == null)      return 0;    DateFormat dateFormatter = DateFormat.getDateInstance(DateFormat.MEDIUM, Locale.getDefault());    try {      dateFormatter.parse(aDate);    } catch (ParseException e) {    }    return dateFormatter.getCalendar().get(Calendar.DAY_OF_MONTH);  }  public synchronized static String convertDateToString2(java.sql.Date date) {    if (null == date) {      return "";    }    return format.format(date);  }  public static java.sql.Date getSQLDateValue(String value) {    if (null == value || "".equals(value.trim())) {      return null;    }    if (value.trim().length() >= 10) {      value = value.substring(0, 10);    }    return java.sql.Date.valueOf(value);  }  public static String getFixedString(String value, int length) {    if (value.length() > length)      return value.substring(0, length - 3) + "...";    for (int i = 0, j = length - value.length(); i < j; i++) {      value += " ";    }    return value;  }  public static void setShowInMiddle(JDialog dialog) {    dialog.getWidth();    dialog.getHeight();    Toolkit kit = Toolkit.getDefaultToolkit();    Dimension screenSize = kit.getScreenSize();    int width = (int) screenSize.getWidth();    int height = (int) screenSize.getHeight();    int w = dialog.getWidth();    if (w == 0) {      w = dialog.getPreferredSize().width;    }    int h = dialog.getHeight();    if (h == 0) {      h = dialog.getPreferredSize().height;    }    dialog.setLocation((width - w) / 2, (height - h) / 2);  }}
/** * @(#) project: GK53_branch * @(#) file: ZBTable.java * * Copyright 2010 UFGOV, Inc. All rights reserved. * UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. * */package com.ufgov.zc.client.zc.ztb.table.panel;import com.ufgov.zc.client.zc.ztb.table.builder.GridColumnBuilder;import com.ufgov.zc.client.zc.ztb.table.demo.Demo;import com.ufgov.zc.client.zc.ztb.table.entity.GridColumn;import com.ufgov.zc.client.zc.ztb.table.entity.table.XmlTable;import com.ufgov.zc.client.zc.ztb.table.service.TableService;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableColumnModel;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableModel;import com.ufgov.zc.client.zc.ztb.util.GV;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * 招标书设计时，表格设计界面 * * @date: 2010-4-28 下午03:53:04 * @version: V1.0 * @since: 1.0 * @author: Administrator * @modify: */public class ZBTableSettingPanel extends JPanel {  private static final long serialVersionUID = -5134446351461856391L;  protected JSplitPane topSplitPane = new JSplitPane();  protected JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);  protected com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable settingTable;  protected JTextArea remarkTextArea = null;  protected XmlTable xmlTable;  public boolean isReadOnly = false;  public ZBTableSettingPanel() {    initComponents();  }  public ZBTableSettingPanel(boolean isReadOnly) {    this.isReadOnly = isReadOnly;    initComponents();  }  public ZBTableSettingPanel(XmlTable xmlTable) {    this.xmlTable = xmlTable;    initComponents();  }  public ZBTableSettingPanel(String filepath) {    this.xmlTable = new TableService().createXmlTable(filepath);    initComponents();  }  public ZBTableSettingPanel(XmlTable xmlTable, boolean isReadOnly) {    this.xmlTable = xmlTable;    this.isReadOnly = isReadOnly;    initComponents();  }  public ZBTableSettingPanel(String filepath, boolean isReadOnly) {    this.xmlTable = new TableService().createXmlTable(filepath);    this.isReadOnly = isReadOnly;    initComponents();  }  public static void main(String s[]) {    Demo.setLookAndFeel();    JFrame frame = new JFrame();    frame.setIconImage(frame.getToolkit().getImage(GV.getImageUrl("windowicon.jpg")));    ZBTableSettingPanel panel = new ZBTableSettingPanel(true);    JTableModel tableModel = (JTableModel) panel.settingTable.getModel();    tableModel.removeAll();    List<Map<String, String>> rowset = panel.new TableDataTemplate3().buildData();    tableModel.add(rowset);    frame.getContentPane().setLayout(new BorderLayout());    frame.getContentPane().add(new JScrollPane(panel), BorderLayout.CENTER);    frame.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });    frame.pack();    frame.setSize(900, 600);    frame.setVisible(true);  }  private void initComponents() {    setLayout(new BorderLayout());    splitPane.setDividerLocation(500);    add(splitPane, BorderLayout.CENTER);    JPanel topPanel = new JPanel();    topPanel.setLayout(new BorderLayout());    JToolBar toolBar = createToolBar();    //生成table    JTable table = createTable();    topPanel.add(toolBar, BorderLayout.NORTH);    topSplitPane.setDividerLocation(718);    topSplitPane.setLeftComponent(new JScrollPane(table));    JScrollPane scrollPane = new JScrollPane(createRemarkPanel());    scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);    topSplitPane.setRightComponent(scrollPane);    topPanel.add(topSplitPane, BorderLayout.CENTER);    splitPane.setTopComponent(topPanel);  }  protected JTable createTable() {    if (xmlTable == null) {      settingTable = new com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable();      List<Map<String, String>> columnDataList = buildData();      List<GridColumn> gridColumns = GridColumnBuilder.buildGridColumn(columnDataList);      JTableColumnModel tableColumnModel = new JTableColumnModel(settingTable, gridColumns);      JTableModel tableModel = new JTableModel(tableColumnModel, settingTable);      settingTable.setModel(tableModel);      settingTable.setColumnModel(tableColumnModel);      List<Map<String, String>> rowset = new TableDataTemplate().buildData();      tableModel.add(rowset);    } else {      settingTable = (com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable) new TableService().createTable(xmlTable);    }    settingTable.setAutoCreateRowSorter(false);    settingTable.getTableHeader().setReorderingAllowed(false);    settingTable.setEnabled(!isReadOnly);    return settingTable;  }  protected JToolBar createToolBar() {    JButtonActionListener buttonActionListener = new JButtonActionListener();    JToolBar toolBar = new JToolBar();    JButton button = createButton("预览效果", "fpreview", buttonActionListener);    toolBar.add(button);    if (!isReadOnly) {      toolBar.addSeparator();      button = createButton("增加一行", "faddrow", buttonActionListener);      toolBar.add(button);      toolBar.addSeparator();      button = createButton("插入一行", "finsertrow", buttonActionListener);      toolBar.add(button);      toolBar.addSeparator();      button = createButton("删除行", "fremoverow", buttonActionListener);      toolBar.add(button);      toolBar.addSeparator();    }    return toolBar;  }  private JButton createButton(String caption, String actionCommand, ActionListener buttonActionListener) {    JButton button = new JButton(caption);    button.addActionListener(buttonActionListener);    button.setActionCommand(actionCommand);    return button;  }  protected class JButtonActionListener extends AbstractAction {    private static final long serialVersionUID = 1L;    public void actionPerformed(ActionEvent e) {      String buttonID = null;      Object object = e.getSource();      if (object instanceof JButton) {        buttonID = ((JButton) object).getActionCommand();      } else {        buttonID = e.getActionCommand();      }      doAction(buttonID);    }  }  protected void doAction(String buttonID) {    if ("fsave".equals(buttonID)) {      fsave();    } else if ("fpreview".equals(buttonID)) {      fpreview();    } else if ("faddrow".equals(buttonID)) {      faddrow();    } else if ("finsertrow".equals(buttonID)) {      finsertrow();    } else if ("fremoverow".equals(buttonID)) {      fremoverow();    }  }  protected void fsave() {  }  protected void faddrow() {    Map<String, String> row = new HashMap<String, String>();    toSetDefaultValue(row);    JTableModel tableModel = (JTableModel) settingTable.getModel();    tableModel.add(row);  }  /**   * 设置格式的默认值   *   * @param row   */  private void toSetDefaultValue(Map<String, String> row) {    if (row == null) {      return;    }    row.put("WIDTH", "100");    row.put("ALIGN", "C");    row.put("IS_FORCE_READONLY", "N");    row.put("COLUMN_TYPE", "COMMON");    row.put("DATA_TYPE", "TEXT");    row.put("IS_THOUSANDS_SEPARATOR", "N");    row.put("DEC_LEN", "0");  }  protected void finsertrow() {    Map<String, String> row = new HashMap<String, String>();    JTableModel tableModel = (JTableModel) settingTable.getModel();    int[] selectRows = settingTable.getSelectedRows();    if (selectRows == null || selectRows.length == 0) {      faddrow();      return;    }    int rowIndex = settingTable.convertRowIndexToModel(selectRows[0]);    tableModel.insertRow(rowIndex, row);  }  protected void fremoverow() {    int[] selectRows = settingTable.getSelectedRows();    if (selectRows == null || selectRows.length == 0) {      JOptionPane.showMessageDialog(null, "请选择要删除的行", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int result = JOptionPane.showConfirmDialog(null, "确定删除吗?");    if (JOptionPane.OK_OPTION != result) {      return;    }    JTableModel tableModel = (JTableModel) settingTable.getModel();    tableModel.removeViewRows(selectRows);  }  protected void fpreview() {    if (settingTable.getCellEditor() != null) {      settingTable.getCellEditor().stopCellEditing();    }    JTable table = createPreviewTable(settingTable);    splitPane.setBottomComponent(new JScrollPane(table));    splitPane.setDividerLocation(0.6);  }  protected JPanel createRemarkPanel() {    remarkTextArea = new JTextArea("");    remarkTextArea.setRows(3);    remarkTextArea.setColumns(5);    remarkTextArea.setLineWrap(true);    remarkTextArea.setEditable(true);    JPanel panel = new JPanel(new BorderLayout());    JLabel label = new JLabel("<html>请填写备注信息:<hr></html>");    panel.add(label, BorderLayout.NORTH);    panel.add(new JScrollPane(remarkTextArea), BorderLayout.CENTER);    if (xmlTable != null) {      remarkTextArea.setText(xmlTable.getRemark());    }    return panel;  }  public com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable createPreviewTable(JTable settingTable) {    JTableModel ltableModel = (JTableModel) settingTable.getModel();    List<Map<String, String>> dataList = ltableModel.getDataset();    com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable table = new com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable();    List<Map<String, String>> columnDataList = new ArrayList<Map<String, String>>();    //为了保留在没有数据的时候进入有一行空值    Map<String, String> numrow = new ZBTableSettingPanel().new TableDataTemplate3().buildRow("TABLE.ROWNUM", "", "行次", "50", "C", "NUM", "", "", "Y",      "");    columnDataList.add(numrow);    for (Map<String, String> row : dataList) {      String columnId = row.get("COLUMN_ID");      if (columnId != null && columnId.length() > 0) {        Map<String, String> map = new HashMap<String, String>(row);        if (row.get("CAPTION") == null) {          map.put("CAPTION", columnId);        }        columnDataList.add(map);      }    }    List<GridColumn> gridColumns = GridColumnBuilder.buildGridColumn(columnDataList);    JTableColumnModel tableColumnModel = new JTableColumnModel(table, gridColumns);    JTableModel tableModel = new JTableModel(tableColumnModel, table);    table.setModel(tableModel);    table.setColumnModel(tableColumnModel);    table.setAutoCreateRowSorter(false);    settingTable.getTableHeader().setReorderingAllowed(false);    List<Map<String, String>> rowset = new TableDataTemplate2().buildData();    tableModel.add(rowset);    return table;  }  public String getXmlTableString() {    if (settingTable.getCellEditor() != null) {      settingTable.getCellEditor().stopCellEditing();    }    XmlTable xmlTable = new TableService().JTableToXmlTable(settingTable);    String remark = remarkTextArea.getText();    xmlTable.setRemark(remark);    return new TableService().XmlTableToXmls(xmlTable);  }  public String getPreviewXmlTableString() {    com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable table = createPreviewTable(settingTable);    XmlTable xmlTable = new TableService().JTableToXmlTable(table);    String remark = remarkTextArea.getText();    xmlTable.setRemark(remark);    return new TableService().XmlTableToXmls(xmlTable);  }  public com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable getSettingTable() {    return settingTable;  }  public List<Map<String, String>> buildData() {    List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();    dataList.add(buildRow("TABLE.ROWNUM", "", "行次", "50", "C", "NUM", "", "", "Y", ""));    dataList.add(buildRow("COLUMN_ID", "", "列名", "110", "L", "TEXT", "", "", "", ""));    dataList.add(buildRow("WIDTH", "", "列宽", "90", "C", "NUM", "", "", "", ""));    dataList.add(buildRow("ALIGN", "", "水平对齐", "90", "C", "TEXT", "", "", "", "VS_ALIGN"));    dataList.add(buildRow("DATA_TYPE", "", "数据类型", "90", "C", "TEXT", "", "", "", "VS_DATA_TYPE"));    dataList.add(buildRow("DEC_LEN", "", "小数位", "90", "C", "NUM", "", "", "", ""));    dataList.add(buildRow("IS_THOUSANDS_SEPARATOR", "", "显示千分位", "90", "C", "TEXT", "", "", "", "VS_Y/S"));    dataList.add(buildRow("IS_FORCE_READONLY", "", "只读", "90", "C", "TEXT", "", "", "", "VS_Y/S"));    dataList.add(buildRow("COLUMN_TYPE", "", "列类型", "90", "C", "TEXT", "", "", "", "VS_COLUMN_TYPE"));    return dataList;  }  protected Map<String, String> buildRow(String columnId, String groupId, String caption, String width, String align, String dataType, String decLen,    String isThousandsSeparator, String isForceReadonly, String valsetId) {    Map<String, String> row = new HashMap<String, String>();    row.put("COLUMN_ID", columnId);//字段名    row.put("GROUP_ID", groupId);    row.put("CAPTION", caption);//列名（字段名的翻译）    row.put("WIDTH", width);//列宽    row.put("ALIGN", align);//水平对齐/L/C/R    row.put("DATA_TYPE", dataType);//数据类型/NUM/TEXT/DATE    row.put("DEC_LEN", decLen);//小数位    row.put("IS_THOUSANDS_SEPARATOR", isThousandsSeparator);//千分位    row.put("IS_FORCE_READONLY", isForceReadonly);//只读    row.put("VALSET_ID", valsetId);    return row;  }  class TableDataTemplate {    public List<Map<String, String>> buildData() {      List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();      for (int i = 0, j = 10; i < j; i++) {        Map<String, String> map = new HashMap<String, String>();        toSetDefaultValue(map);        dataList.add(map);      }      return dataList;    }  }  class TableDataTemplate2 {    public List<Map<String, String>> buildData() {      List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();      for (int i = 0, j = 5; i < j; i++) {        Map<String, String> map = new HashMap<String, String>();        dataList.add(map);      }      return dataList;    }  }  /**   * 调试数据，正式运行不使用   *   * @date: 2010-4-29 上午11:38:55   * @version: V1.0   * @since: 1.0   * @author: Administrator   * @modify:   */  class TableDataTemplate3 {    public List<Map<String, String>> buildData() {      List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();      dataList.add(buildRow("品牌及车型", "", "品牌及车型", "150", "L", "TEXT", "", "", "", ""));      dataList.add(buildRow("最低销售限价(元)", "", "最低销售限价(元)", "150", "R", "NUM", "2", "Y", "", ""));      dataList.add(buildRow("折扣率(%)", "", "折扣率(%)", "150", "R", "NUM", "2", "Y", "", ""));      dataList.add(buildRow("投标报价(元)", "", "投标报价(元)", "150", "R", "NUM", "2", "Y", "", ""));      dataList.add(buildRow("免费质保期", "", "免费质保期", "150", "L", "TEXT", "", "", "", ""));      dataList.add(buildRow("交货时间(天)", "", "交货时间(天)", "150", "L", "TEXT", "", "", "", ""));      return dataList;    }    public Map<String, String> buildRow(String columnId, String groupId, String caption, String width, String align, String dataType, String decLen,      String isThousandsSeparator, String isForceReadonly, String valsetId) {      Map<String, String> row = new HashMap<String, String>();      row.put("COLUMN_ID", columnId);//字段名      row.put("GROUP_ID", groupId);      row.put("CAPTION", caption);//列名（字段名的翻译）      row.put("WIDTH", width);//列宽      row.put("ALIGN", align);//水平对齐/L/C/R      row.put("DATA_TYPE", dataType);//数据类型/NUM/TEXT/DATE      row.put("DEC_LEN", decLen);//小数位      row.put("IS_THOUSANDS_SEPARATOR", isThousandsSeparator);//千分位      row.put("IS_FORCE_READONLY", isForceReadonly);//只读      row.put("VALSET_ID", valsetId);      return row;    }  }}
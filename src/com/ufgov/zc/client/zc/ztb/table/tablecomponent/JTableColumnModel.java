package com.ufgov.zc.client.zc.ztb.table.tablecomponent;import com.ufgov.zc.client.zc.ztb.table.entity.GridColumn;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.checkbox.JTableCheckBoxEditor;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.checkbox.JTableCheckBoxRenderer;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.combobox.JTableComboBoxEditor;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.combobox.JTableComboBoxModel;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.combobox.JTableComboBoxRenderer;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.numberfield.JTableNumberFieldEditor;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.numberfield.JTableNumberFieldListener;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.textfield.JTableTextFieldEditor;import javax.swing.*;import javax.swing.JTable;import javax.swing.event.ChangeEvent;import javax.swing.event.ListSelectionEvent;import javax.swing.event.TableColumnModelEvent;import javax.swing.event.TableColumnModelListener;import javax.swing.table.DefaultTableColumnModel;import javax.swing.table.TableCellEditor;import javax.swing.text.MaskFormatter;import java.awt.*;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.text.ParseException;import java.util.*;import java.util.List;public class JTableColumnModel extends DefaultTableColumnModel {  private final HashMap<Integer, JTableColumn> columnMap = new HashMap<Integer, JTableColumn>();  private List<GridColumn> gridColumns;  private Color[] colors = getTableRowColors();  private JTable table;  public JTableColumnModel() {  }  public <K extends javax.swing.JTable> JTableColumnModel(K table, List<GridColumn> gridColumns) {    setTable(table);    setGridColumns(gridColumns);    createColumnModel();    addColumnModelListener(new TableColumnModelListener() {      public void columnAdded(TableColumnModelEvent e) {      }      public void columnMarginChanged(ChangeEvent e) {        //PageCache.setGridColumnWidthCache(JTableColumnModel.this);      }      public void columnMoved(TableColumnModelEvent e) {        int fromIndex = e.getFromIndex();        int toIndex = e.getToIndex();        if (fromIndex != toIndex) {          //PageCache.setGridColumnOrderCache(JTableColumnModel.this);        }      }      public void columnRemoved(TableColumnModelEvent e) {      }      public void columnSelectionChanged(ListSelectionEvent e) {      }    });  }  protected void createColumnModel() {    createColumnModel(getTable(), getGridColumns());  }  protected <K extends javax.swing.JTable> void createColumnModel(K table, List<GridColumn> gridColumns) {    gridColumns = rebuildGridColumn(gridColumns);    int modexIndex = 0;    JTableColumn column;    for (GridColumn gridColumn : gridColumns) {      column = createTableColumn(gridColumn, modexIndex);      if (column == null) {        continue;      }      addColumn(column);      putColumnMap(modexIndex, column);      modexIndex++;    }  }  protected List<GridColumn> rebuildGridColumn(List<GridColumn> gridColumns) {    if (gridColumns == null || gridColumns.size() == 0) {      return gridColumns;    }    Vector<String> vector = null;    if (vector == null || gridColumns.size() == 0) {      return gridColumns;    }    List<GridColumn> newGridColumns = new ArrayList<GridColumn>();    for (int i = 0, j = vector.size(); i < j; i++) {      for (int m = 0, k = gridColumns.size(); m < k; m++) {        if (gridColumns.get(m).getColumnId().equals(vector.get(i))) {          newGridColumns.add(gridColumns.get(m));          break;        }      }    }    return newGridColumns;  }  protected void setColumnCellRenderer(JTableColumn column, GridColumn gridColumn) {    column.setCellRenderer(new JTableCellRenderers.RowRenderer(gridColumn, colors));  }  protected JTableColumn createTableColumn(GridColumn gridColumn, int modexIndex) {    if (!gridColumn.isInTable()) {      return null;    }    rebuildGridColumn(gridColumn);    JTableColumn column = new JTableColumn();    column.setModelIndex(modexIndex);    column.setHeaderValue(gridColumn.getCaption());    column.setDefaultWidth(gridColumn.getWidth());    column.setPreferredWidth(gridColumn.getWidth());    setColumnCellRenderer(column, gridColumn);    column.setIdentifier(gridColumn.getColumnId());    column.setMinWidth(0);    column.setGridColumn(gridColumn);    if (gridColumn.isComboBox()) {      final JComboBox comboBox = new JComboBox(new JTableComboBoxModel(getTable(), gridColumn));      comboBox.setRenderer(new JTableComboBoxRenderer());      column.setCellEditor(new JTableComboBoxEditor(comboBox));    } else if (gridColumn.isNumber()) {      createNumberTextField(gridColumn, column);    } else if (gridColumn.isCheckBox()) {      JCheckBox checkBox = new JCheckBox();      column.setCellRenderer(new JTableCheckBoxRenderer());      column.setCellEditor(new JTableCheckBoxEditor(checkBox));    } else if (gridColumn.isDate()) {      MaskFormatter mf1 = null;      try {        mf1 = new MaskFormatter("####-##-##");      } catch (ParseException e1) {        e1.printStackTrace();      }      final JFormattedTextField textField = new JFormattedTextField(mf1);      column.setCellEditor(new JTableTextFieldEditor(textField, gridColumn));    } else {      JTextField textField = createJTextField(column);      column.setCellEditor(new JTableTextFieldEditor(textField, gridColumn));      textField.getDocument().addDocumentListener(new JTableNumberFieldListener(textField, gridColumn));    }    if (!gridColumn.isVisible()) {      column.setMaxWidth(0);    }    if (gridColumn.isTableHeaderCheckBox()) {      column.setHeaderRenderer(new JTableCheckBoxHeader(new MyItemListener()));    }    return column;  }  class MyItemListener implements ItemListener {    public void itemStateChanged(ItemEvent e) {      Object source = e.getSource();      if (source instanceof AbstractButton == false)        return;      boolean checked = e.getStateChange() == ItemEvent.SELECTED;      String value = checked ? JTableCheckBoxEditor.IS_SELECT_STAT : JTableCheckBoxEditor.IS_NOT_SELECT_STAT;      for (int x = 0, y = table.getRowCount(); x < y; x++) {        int row = table.convertRowIndexToModel(x);        ((JTableModel) table.getModel()).updateRow(row, JTableModel.TABLE_CHECKBOX, value);      }    }  }  protected void createNumberTextField(GridColumn gridColumn, JTableColumn column) {    JTextField numField = createJTextField(column);    numField.getDocument().addDocumentListener(new JTableNumberFieldListener(numField, gridColumn));    column.setCellEditor(new JTableNumberFieldEditor(numField, gridColumn));  }  protected void rebuildGridColumn(GridColumn gridColumn) {    Integer width = null;//PageCache.getGridColumnWidth(gridColumn.getPageId(), gridColumn.getGridId(), gridColumn.getColumnId());    if (width == null) {      return;    }    gridColumn.setWidth(width.intValue());    if (width > 0) {      gridColumn.setVisible(true);    } else {      gridColumn.setVisible(false);    }  }  protected JTextField createJTextField(JTableColumn column) {    JTextField jTextField = new JTextField();    return jTextField;  }  protected Color[] getTableRowColors() {    Color[] rowColors = new Color[2];    rowColors[0] = UIManager.getColor("Table.background");    rowColors[1] = new Color((int) (rowColors[0].getRed() * .9), (int) (rowColors[0].getGreen() * .9), (int) (rowColors[0].getBlue() * .9));    rowColors[1] = rowColors[0];    return rowColors;  }  public void reLoadData() {    StringBuffer valsetIds = new StringBuffer();    Map<String, String> valsetMap = new HashMap<String, String>();    List<JTableColumn> tableColumnList = new ArrayList<JTableColumn>();    for (int i = 0, j = getColumnCount(); i < j; i++) {      JTableColumn tableColumn = (JTableColumn) getColumn(i);      GridColumn gridColumn = tableColumn.getGridColumn();      String valsetId = gridColumn.getValsetId();      if (valsetId == null || valsetId.trim().length() == 0) {        continue;      }      if (valsetMap.containsKey(valsetId)) {        continue;      }      /*      if (ValsetCache.isNeedLoadData(valsetId)) {        valsetIds.append(valsetId);        valsetIds.append(",");        tableColumnList.add(tableColumn);        valsetMap.put(valsetId, valsetId);      }      */    }    if (valsetIds.length() > 0) {      valsetIds.deleteCharAt(valsetIds.length() - 1);      //ValsetCache.reLoadData(valsetIds.toString());      for (JTableColumn tableColumn : tableColumnList) {        reLoadDataColumn(tableColumn, tableColumn.getGridColumn());      }    }  }  private void reLoadDataColumn(JTableColumn tableColumn, GridColumn gridColumn) {    TableCellEditor tableCellEditor = tableColumn.getCellEditor();    if (tableCellEditor == null) {      return;    }    if (tableCellEditor instanceof DefaultCellEditor) {      Component component = ((DefaultCellEditor) tableCellEditor).getComponent();      if (component == null) {        return;      }      if (component instanceof JComboBox) {        //GridColumnCache.reLoadData(gridColumn);        JComboBox comboBox = (JComboBox) component;        comboBox.setModel(new JTableComboBoxModel(getTable(), gridColumn));      }    }  }  public JTableColumn getColumnByModelIndex(int modexIndex) {    return getColumnMap().get(modexIndex);  }  public void setGridColumns(List<GridColumn> gridColumns) {    this.gridColumns = gridColumns;  }  public List<GridColumn> getGridColumns() {    return gridColumns;  }  public HashMap<Integer, JTableColumn> getColumnMap() {    return columnMap;  }  public void putColumnMap(int modexIndex, JTableColumn column) {    columnMap.put(modexIndex, column);  }  public void setTable(JTable table) {    this.table = table;  }  public JTable getTable() {    return table;  }}
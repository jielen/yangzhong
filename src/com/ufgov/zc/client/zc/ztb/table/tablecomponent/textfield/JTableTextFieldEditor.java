/** * @(#) project: TableProject * @(#) file: JTableTextFieldEditor.java * * Copyright 2010 UFGOV, Inc. All rights reserved. * UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. * */package com.ufgov.zc.client.zc.ztb.table.tablecomponent.textfield;import com.ufgov.zc.client.zc.ztb.table.common.LangTrans;import com.ufgov.zc.client.zc.ztb.table.common.PubFunc;import com.ufgov.zc.client.zc.ztb.table.entity.GridColumn;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableModel;import javax.swing.*;import java.awt.*;import java.awt.event.FocusEvent;import java.awt.event.FocusListener;/** * @ClassName: JTableTextFieldEditor * @Description: TODO(这里用一句话描述这个类的作用) * @date: 2010-4-23 上午11:12:44 * @version: V1.0 * @since: 1.0 * @author: Administrator * @modify: */public class JTableTextFieldEditor extends DefaultCellEditor {  /**   *   */  private static final long serialVersionUID = 3366186454040122277L;  protected JTable table;  protected int row;  protected int column;  private JTextField textField;  private GridColumn gridColumn;  public JTableTextFieldEditor(JTextField textField) {    this(textField, null);  }  public JTableTextFieldEditor(final JTextField textField, final GridColumn gridColumn) {    super(textField);    setClickCountToStart(1);    this.textField = textField;    this.textField.addFocusListener(new FocusListener() {      public void focusGained(FocusEvent e) {        textField.selectAll();      }      public void focusLost(FocusEvent e) {      }    });    this.gridColumn = gridColumn;  }  public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {    super.getTableCellEditorComponent(table, value, isSelected, row, column);    this.table = table;    this.row = table.convertRowIndexToModel(row);    this.column = table.convertColumnIndexToModel(column);    ((JTextField) editorComponent).selectAll();    return editorComponent;  }  public boolean stopCellEditing() {    String value = ((JTextField) super.getComponent()).getText();    if (gridColumn != null) {      if (gridColumn.isNumber()) {        if (value == null || value.trim().length() == 0) {          value = "0";        }        if (!PubFunc.isCurrency(value)) {          return false;        }        double dvalue = Double.parseDouble(value);        if (gridColumn.getMinValue() != Double.MIN_VALUE) {          if (dvalue < gridColumn.getMinValue()) {            JOptionPane.showMessageDialog(null, LangTrans.getLangTrans("JTextFieldEditor.message1") + gridColumn.getMinValue(), "",              JOptionPane.ERROR_MESSAGE);            return false;          }        }        if (gridColumn.getMaxValue() != Double.MAX_VALUE) {          if (dvalue > gridColumn.getMaxValue()) {            JOptionPane.showMessageDialog(null, LangTrans.getLangTrans("JTextFieldEditor.message2") + gridColumn.getMaxValue(), "",              JOptionPane.ERROR_MESSAGE);            return false;          }        }      } else if (gridColumn.isDate()) {        if (value == null) {          value = "";        }        String value2 = value.replaceAll("-", "").trim();        if (value2.length() > 0 && !PubFunc.isValidDate(value)) {          JOptionPane.showMessageDialog(null, LangTrans.getLangTrans("JTextFieldEditor.message3"));          return false;        }      }    }    if (table.getModel() instanceof JTableModel) {      JTableModel tableModel = (JTableModel) table.getModel();      tableModel.updateRow(this.row, this.column, ((JTextField) super.getComponent()).getText());    }    return super.stopCellEditing();  }  public JTextField getJTextField() {    return textField;  }}
/** * @(#) project: GK53_branch * @(#) file: ZBTable.java * * Copyright 2010 UFGOV, Inc. All rights reserved. * UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. * */package com.ufgov.zc.client.zc.ztb.table.service;import com.ufgov.zc.client.zc.ztb.table.builder.GridColumnBuilder;import com.ufgov.zc.client.zc.ztb.table.demo.Demo;import com.ufgov.zc.client.zc.ztb.table.entity.GridColumn;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableColumnModel;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableModel;import com.ufgov.zc.client.zc.ztb.util.GV;import javax.swing.*;import java.awt.*;import java.awt.event.WindowAdapter;import java.awt.event.WindowEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * 招标书设计时，表格设计界面 * * @date: 2010-4-28 下午03:53:04 * @version: V1.0 * @since: 1.0 * @author: Administrator * @modify: */public class ZBTablePanel extends JPanel {  public ZBTablePanel() {    initComponents();  }  public static void main(String s[]) {    Demo.setLookAndFeel();    JFrame frame = new JFrame();    frame.setIconImage(frame.getToolkit().getImage(GV.getImageUrl("windowicon.jpg")));    JTable panel = new ZBTablePanel().createTable();    frame.getContentPane().setLayout(new BorderLayout());    frame.getContentPane().add(new JScrollPane(panel), BorderLayout.CENTER);    frame.addWindowListener(new WindowAdapter() {      public void windowClosing(WindowEvent e) {        System.exit(0);      }    });    frame.pack();    frame.setSize(900, 600);    frame.setVisible(true);  }  private void initComponents() {    setLayout(new BorderLayout());  }  public JTable createTable() {    com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable table = new com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable();    List<Map<String, String>> columnDataList = new GridColumnData().buildData();    List<GridColumn> gridColumns = GridColumnBuilder.buildGridColumn(columnDataList);    JTableColumnModel tableColumnModel = new JTableColumnModel(table, gridColumns);    JTableModel tableModel = new JTableModel(tableColumnModel, table);    table.setModel(tableModel);    table.setColumnModel(tableColumnModel);    table.setAutoCreateRowSorter(false);    table.getTableHeader().setReorderingAllowed(false);    List<Map<String, String>> rowset = new TableDataTemplate().buildData();    tableModel.add(rowset);    return table;  }  /**   * 表头列数据,GROUP_ID是列属于哪一组的标识   *   * @date: 2010-4-23 下午02:33:51   * @version: V1.0   * @since: 1.0   * @author: Administrator   * @modify:   */  class GridColumnData {    public List<Map<String, String>> buildData() {      List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();      dataList.add(buildRow("TABLE.ROWNUM", "", "行次", "50", "C", "NUM", "", "", "Y", ""));      dataList.add(buildRow("COLUMN_ID", "", "列名", "100", "L", "TEXT", "", "", "", ""));      dataList.add(buildRow("WIDTH", "", "列宽", "80", "C", "NUM", "", "", "", ""));      dataList.add(buildRow("ALIGN", "", "水平对齐", "80", "C", "TEXT", "", "", "", "VS_ALIGN"));      dataList.add(buildRow("DATA_TYPE", "", "数据类型", "80", "C", "TEXT", "", "", "", "VS_DATA_TYPE"));      dataList.add(buildRow("DEC_LEN", "", "小数位", "80", "C", "NUM", "", "", "", ""));      dataList.add(buildRow("IS_THOUSANDS_SEPARATOR", "", "显示千分位", "80", "C", "TEXT", "", "", "", "VS_Y/S"));      dataList.add(buildRow("IS_FORCE_READONLY", "", "只读", "80", "C", "TEXT", "", "", "", "VS_Y/S"));      dataList.add(buildRow("COLUMN_TYPE", "", "列类型", "90", "C", "TEXT", "", "", "", "VS_COLUMN_TYPE"));      return dataList;    }    private Map<String, String> buildRow(String columnId, String groupId, String caption, String width, String align, String dataType, String decLen,      String isThousandsSeparator, String isForceReadonly, String valsetId) {      Map<String, String> row = new HashMap<String, String>();      row.put("COLUMN_ID", columnId);//字段名      row.put("GROUP_ID", groupId);      row.put("CAPTION", caption);//列名（字段名的翻译）      row.put("WIDTH", width);//列宽      row.put("ALIGN", align);//水平对齐/L/C/R      row.put("DATA_TYPE", dataType);//数据类型/NUM/TEXT/DATE      row.put("DEC_LEN", decLen);//小数位      row.put("IS_THOUSANDS_SEPARATOR", isThousandsSeparator);//千分位      row.put("IS_FORCE_READONLY", isForceReadonly);//只读      row.put("VALSET_ID", valsetId);      return row;    }  }  class TableDataTemplate {    public List<Map<String, String>> buildData() {      List<Map<String, String>> dataList = new ArrayList<Map<String, String>>();      for (int i = 0, j = 10; i < j; i++) {        Map<String, String> map = new HashMap<String, String>();        dataList.add(map);      }      return dataList;    }  }}
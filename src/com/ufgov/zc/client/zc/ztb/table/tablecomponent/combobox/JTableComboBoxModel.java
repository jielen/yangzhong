package com.ufgov.zc.client.zc.ztb.table.tablecomponent.combobox;import com.ufgov.zc.client.zc.ztb.table.entity.GridColumn;import com.ufgov.zc.client.zc.ztb.table.entity.Valset;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTable;import com.ufgov.zc.client.zc.ztb.table.tablecomponent.JTableModel;import javax.swing.*;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Vector;import java.util.regex.Pattern;public class JTableComboBoxModel extends DefaultComboBoxModel {  private JTable table;  private GridColumn gridColumn;  private Vector<Valset> valSetList;  public JTableComboBoxModel() {  }  public <K extends javax.swing.JTable> JTableComboBoxModel(K table, GridColumn gridColumn) {    super(gridColumn.getValsetList().toArray());    valSetList = new Vector<Valset>();    List<Valset> lists = (List<Valset>) gridColumn.getValsetList();    for (Valset valset : lists) {      getValSetList().add(valset);    }    this.setTable((JTable) table);    this.setGridColumn(gridColumn);  }  public <K extends javax.swing.JTable> JTableComboBoxModel(K table, GridColumn gridColumn, Vector<Valset> vector) {    super(vector);    setValSetList(vector);    this.setTable((JTable) table);    this.setGridColumn(gridColumn);  }  public <K extends javax.swing.JTable> JTableComboBoxModel(K table, GridColumn gridColumn, Vector<Valset> vector, Vector<Valset> items) {    super(items);    setValSetList(vector);    this.setTable((JTable) table);    this.setGridColumn(gridColumn);  }  public JTableComboBoxModel(Vector<Valset> vector) {    super(vector);    setValSetList(vector);  }  public JTableComboBoxModel(Vector<Valset> vector, Vector<Valset> items) {    super(items);    setValSetList(vector);  }  public void setSelectedItem(Object anObject) {    if (getTable() != null) {      if (anObject != null) {        int editingRowIndex = getTable().getEditingRow();        if (editingRowIndex == -1) {          return;        }        editingRowIndex = table.convertRowIndexToModel(editingRowIndex);        JTableModel tableModel = (JTableModel) getTable().getModel();        if (anObject instanceof Valset) {          tableModel.updateRow(editingRowIndex, gridColumn.getColumnId(), ((Valset) anObject).getValId());        } else if (anObject instanceof String) {          for (Valset valset : valSetList) {            if (valset.getVal().equalsIgnoreCase((String) anObject)) {              tableModel.updateRow(editingRowIndex, gridColumn.getColumnId(), valset.getValId());              break;            }          }        }      }    }    super.setSelectedItem(anObject);  }  public void setDefaultItem(JTable table, Object value, boolean isSelected, int row, int column) {    row = table.convertRowIndexToModel(row);    JTableModel tableModel = (JTableModel) table.getModel();    HashMap<String, String> rowdata = (HashMap<String, String>) tableModel.get(row);    String valid = rowdata.get(getGridColumn().getColumnId());    Map map = getGridColumn().getValsetMap();    if (map == null || map.size() == 0)      return;    Object anObject = map.get(valid);    super.setSelectedItem(anObject);  }  public Vector<Valset> getMatchItems(String value) {    Vector<Valset> items = new Vector<Valset>();    for (int i = 0, j = getValSetList().size(); i < j; i++) {      Valset valset = getValSetList().get(i);      if (value == null || value.trim().length() == 0) {        items.addElement(valset);      } else {        Pattern p = Pattern.compile(".*" + value + ".*", Pattern.CASE_INSENSITIVE);        if (p.matcher(valset.getVal()).matches()) {          items.addElement(valset);        }      }    }    return items;  }  public void setValSetList(Vector<Valset> valSetList) {    this.valSetList = valSetList;  }  public Vector<Valset> getValSetList() {    return valSetList;  }  public void setTable(JTable table) {    this.table = table;  }  public JTable getTable() {    return table;  }  public void setGridColumn(GridColumn gridColumn) {    this.gridColumn = gridColumn;  }  public GridColumn getGridColumn() {    return gridColumn;  }}
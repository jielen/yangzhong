package com.ufgov.zc.client.zc.ztb.util;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.util.Enumeration;import org.apache.tools.zip.ZipEntry;import org.apache.tools.zip.ZipFile;import com.ufgov.zc.client.zc.ztb.dao.FileImportDao;import com.ufgov.zc.client.zc.ztb.model.BusinessProject;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;public class ZipFilePubFunc {  private static FileImportDao importTbFileDao = FileImportDao.getInstance();  @SuppressWarnings("unchecked")  public SmartTreeNode getProject(ZipFile zipFile) throws IOException {    Enumeration<ZipEntry> emu = zipFile.getEntries();    SmartTreeNode projNode = null;    try {      String projCode = "";      while (emu.hasMoreElements()) {        ZipEntry entry = (ZipEntry) emu.nextElement();        String fileName = entry.getName().toLowerCase();        if (fileName.indexOf(GV.PROJECT_INFO_XML_SUFFIX) != -1) {          BusinessProject bp = (BusinessProject) FileImportDao.getInstance().readProject(zipFile.getInputStream(entry));          projCode = bp.getNo();          if (projCode == null) {            projCode = fileName.substring(0, fileName.indexOf(GV.PROJECT_INFO_XML_SUFFIX));          }          break;        }      }      //重新获取起始位置      emu = zipFile.getEntries();      while (emu.hasMoreElements()) {        ZipEntry entry = (ZipEntry) emu.nextElement();        String fileName = entry.getName().toLowerCase();        if (fileName.endsWith(projCode.toLowerCase() + GV.SUFFIX_XML)) {          projNode = (SmartTreeNode) importTbFileDao.readProject(zipFile.getInputStream(entry));        }      }    } catch (IOException e) {      e.printStackTrace();      throw e;    } finally {      if (zipFile != null) {        try {          zipFile.close();        } catch (IOException e) {          e.printStackTrace();        }      }    }    return projNode;  }  public static void unzipFileToDestDir(File zfile, String destination) {    File newFile = new File(destination);    if (newFile.exists()) {      PubFunction.deleteFile(newFile.getAbsolutePath());    }    ZipFile zipFile = null;    try {      zipFile = new ZipFile(zfile, GV.FILE_CHAR_CODE);    } catch (IOException e) {      e.printStackTrace();    }    BufferedInputStream bis = null;    FileOutputStream fos = null;    BufferedOutputStream bos = null;    Enumeration<ZipEntry> emu = zipFile.getEntries();    try {      while (emu.hasMoreElements()) {        ZipEntry entry = (ZipEntry) emu.nextElement();        if (entry.isDirectory()) {          new File(destination + entry.getName()).mkdirs();          continue;        }        bis = new BufferedInputStream(zipFile.getInputStream(entry));        File file = new File(destination + entry.getName());        File parent = file.getParentFile();        if (parent != null && (!parent.exists())) {          parent.mkdirs();        }        fos = new FileOutputStream(file);        bos = new BufferedOutputStream(fos, GV.BUFFER_SIZE);        int count;        byte data[] = new byte[GV.BUFFER_SIZE];        while ((count = bis.read(data, 0, GV.BUFFER_SIZE)) != -1) {          bos.write(data, 0, count);        }        bos.flush();        fos.close();        bos.close();        bis.close();      }      zipFile.close();    } catch (Exception e) {      e.printStackTrace();      try {        if (bos != null) {          bos.close();        }        if (fos != null) {          fos.close();        }        if (bis != null) {          bis.close();        }      } catch (Exception e2) {        e2.printStackTrace();      }    }  }}
package com.ufgov.zc.client.zc.ztb.dao;import java.io.BufferedInputStream;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import java.util.Enumeration;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.tools.zip.ZipEntry;import org.apache.tools.zip.ZipFile;import com.ufgov.zc.client.zc.ztb.fileResumeBroken.authentication.Transfer;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.zc.model.ZcZBFileTemplate;public class AsFileDao extends BaseDao {  private static AsFileDao asFileDao = new AsFileDao();  public static AsFileDao getInstance() {    return asFileDao;  }  private AsFileDao() {  }  /**   * 上传文件，根据项目编号来查询相关参数   *   * @param proNo   * @param xmlPath   * @param asFileList   * @throws Exception   */  public Map uploadFile(String projNo, String projName, String ztbFilePath) throws Exception {    String managerName = getRequestMeta().getEmpName();    String managerCode = getRequestMeta().getEmpCode();    Map<String, Object> para = new HashMap<String, Object>();    para.put("operationname", "uploadzbfile");    para.put("PROJSTATUS", "exec");    para.put("URL", getServerURL());    para.put("PROJCODE", projNo);    para.put("PROJNAME", projName);    para.put("FILETYPE", "zip/ztb");    para.put("MANAGERCODE", managerCode);    para.put("MANAGERNAME", managerName);    para.put("FILECONTENT", getFileContent(ztbFilePath));    ZipFile zipFile = null;    try {      File tempFile = new File(ztbFilePath);      zipFile = new ZipFile(tempFile, "GBK");      Enumeration emu = zipFile.getEntries();      while (emu.hasMoreElements()) {        ZipEntry entry = (ZipEntry) emu.nextElement();        System.err.println(entry.getName());        String name = entry.getName();        boolean isMatchFile = false;        if ((name.indexOf("\\招标文件") != -1 || name.indexOf("\\竞争性谈判文件") != -1 || name.indexOf("\\询价采购文件") != -1 ||        name.indexOf("\\单一来源采购文件\\项目通知书") != -1) && name.endsWith(".doc")) {          isMatchFile = true;        } else if ((name.indexOf("/招标文件") != -1 || name.indexOf("/竞争性谈判文件") != -1 || name.indexOf("\\询价采购文件") != -1) && name.endsWith(".doc")) {          isMatchFile = true;        }        if (isMatchFile) {          System.out.println(entry.getName() + "---------->命中...");          BufferedInputStream bis = new BufferedInputStream(zipFile.getInputStream(entry));          int fileLen = (int) entry.getSize();          byte buff[] = new byte[fileLen];          bis.read(buff);          /**           * 获取招标文件的数据大小           */          para.put("WORDFILECONTENT", buff);          bis.close();          zipFile.close();          break;        }      }    } catch (Exception e) {      e.printStackTrace();      try {        if (zipFile != null) {          zipFile.close();        }      } catch (IOException e1) {        e1.printStackTrace();        throw new Exception(e1);      }      e.printStackTrace();      throw new Exception(e);    }    para.put("FLOWINGNO", getFlowingNO());    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    return transfer.getReturnMap();  }  private byte[] getFileContent(String ztbFilePath) throws Exception {    byte[] buff = new byte[(int) (new File(ztbFilePath)).length()];    FileInputStream fis = new FileInputStream(ztbFilePath);    int len = fis.read(buff);    fis.close();    return buff;  }  public List<Map<String, String>> findDetailsFilesList(String projCode, String packCode) throws Exception {    Map<String, Object> para = new HashMap<String, Object>();    para.put("operationname", "searchprojpackrequiredetails");    para.put("PROJCODE", projCode);    para.put("PACKCODE", packCode);    para.put("URL", getServerURL());    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    return (List<Map<String, String>>) transfer.getReturnMap().get("RESULTMAPLIST");  }  /**   * 从AS_FILE 文件中取得file_id对应的文件   *   * @param fileId   * @return   * @throws Exception   */  public File readFile(String fileID) throws Exception {    Map<String, Object> para = new HashMap<String, Object>();    para.put("operationname", "readfilecontentfromasfile");    para.put("FILEID", fileID);    para.put("URL", getServerURL());    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    return toWriteFileToLocal(transfer.getReturnMap());  }  public Map getFileFromAsFile(String fileID) throws Exception {    Map<String, Object> para = new HashMap<String, Object>();    para.put("operationname", "readfilecontentfromasfile");    para.put("FILEID", fileID);    para.put("URL", getServerURL());    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    return transfer.getReturnMap();  }  public Map getReqFileFromZcEbReqFile(String entrustCode) throws Exception {    Map<String, Object> para = new HashMap<String, Object>();    para.put("operationname", "getReqFileFromZcEbReqFile");    para.put("ENTRUSTCODE", entrustCode);    para.put("URL", getServerURL());    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    return transfer.getReturnMap();  }  private File toWriteFileToLocal(Map data) {    String fullName = (String) data.get("FILENAME");    String parentFilePath = GV.USER_DIR + File.separator + GV.EXPORT_FILE_DIR + File.separator;    PubFunction.checkAndMakeDirs(parentFilePath);    String filePath = parentFilePath + fullName;    File file = new File(filePath);    OutputStream writer = null;    try {      writer = new BufferedOutputStream(new FileOutputStream(file));      byte buf[] = (byte[]) data.get("FILECONTENT");      writer.write(buf, 0, buf.length);    } catch (Exception e) {      e.printStackTrace();    } finally {      if (writer != null) {        try {          writer.close();        } catch (Exception e) {          e.printStackTrace();        }      }    }    return file;  }  /**   * 上传文件，模板上传   *   * @param proNo   * @param xmlPath   * @param asFileList   * @throws Exception   */  public String uploadTemplateFile(SmartTreeNode templateNode, String ztbFilePath, ZcZBFileTemplate template) throws Exception {    String fileID = Guid.genID();    Map<String, Object> para = new HashMap<String, Object>();    para.put("operationname", "uploadtplfile");    para.put("FILEID", fileID);    para.put("FILENAME", fileID + "." + GV.TEMPLATE_ZIP);    para.put("FILETYPE", "application/zip");    para.put("FILECONTENT", this.getFileContent(ztbFilePath));    String tplAppType = template.getTplAppType();    String tplBelongBidWay = template.getTplBelongBidWay();    String description = template.getDescription();    SmartTreeNode parentSmartTreeNode = (SmartTreeNode) templateNode.getParent();    String projName = parentSmartTreeNode.getNodeName();    String projNo = parentSmartTreeNode.getNodeCode();    String tplNo = template.getTplNo();    para.put("TEMPLATE_ID", Guid.genID());    para.put("TPLNO", tplNo);    para.put("TPLAPPTYPE", tplAppType);    para.put("TPLBELONGBIDWAY", tplBelongBidWay);    para.put("FILEID", fileID);    para.put("PROJNAME", projName);    para.put("PROJNO", projNo);    para.put("DESCRIPTION", description);    para.put("URL", getServerURL());    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    String uploadStatus = (String) transfer.getReturnMap().get("UPLOADSTATUS");    if ("success".equals(uploadStatus)) {      return GV.getSimpleMsg("templateUploadSucc");    } else {      return GV.getSimpleMsg("templateUploadFailAndReason") + (String) transfer.getReturnMap().get("FAILREASON");    }  }  /**   * 判断模板名称是否存在   *   * @param tplNo   * @return   * @throws Exception   */  public boolean isExistTemplateNo(String tplNo) throws Exception {    Map<String, Object> para = new HashMap<String, Object>();    para.put("operationname", "searchtemplateisexist");    para.put("TPLNO", tplNo);    para.put("URL", getServerURL());    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    return "Y".equals(transfer.getReturnMap().get("SEARCHREASULT"));  }  /**   * 删除指定的模板文件   *   * @param TEMPLATEID   * @return   * @throws Exception   */  public Map<String, String> deleteTemplateByTempateID(String tplID) throws Exception {    Map<String, Object> para = new HashMap<String, Object>();    para.put("operationname", "deletetemplatefile");    para.put("TEMPLATEID", tplID);    para.put("URL", getServerURL());    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    return transfer.getReturnMap();  }  /**   * 进行再次报价   *   * @param pmap   * @return   * @throws Exception   */  @SuppressWarnings("unchecked")  public Map<String, String> uploadEcbjFile(Map pmap) throws Exception {    Transfer transfer = new Transfer(pmap, "doecbjaction");    transfer.startTransfer();    return transfer.getReturnMap();  }}
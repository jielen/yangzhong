package com.ufgov.zc.client.zc.ztb.dao;import com.ufgov.zc.client.zc.ztb.P;import com.ufgov.zc.client.zc.ztb.model.BusinessProject;import com.ufgov.zc.client.zc.ztb.model.BusinessProjects;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.util.GV;import java.io.*;public class LocalProjectDAO extends ZTbFileDao {  private static LocalProjectDAO localProjectDAO = new LocalProjectDAO();  private LocalProjectDAO() {    super();  }  private synchronized void createFile(String fileName, String content, String encodType) throws Exception {    String dir = fileName.substring(0, fileName.lastIndexOf(File.separator));    File file = new File(dir);    if (!file.exists()) {      boolean flag = file.mkdirs();      if (!flag) {        throw new Exception(GV.getSimpleMsg("directoryCreateErr"));      }    }    FileOutputStream writerStream = new FileOutputStream(fileName);    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(writerStream, encodType));    writer.write(content);    writer.close();  }  public synchronized String createXMLFile(String destination, SmartTreeNode node) throws Exception {    String xmls = xstreamW.toXML(node);    String filePath = destination + node.getNodeCode() + ".xml";    createFile(filePath, "<?xml version=\"1.0\" encoding=\"" + GV.XML_CHAR_CODE + "\"?>\n" + xmls, GV.XML_CHAR_CODE);    return filePath;  }  public synchronized String createXMLStr(BusinessProject businessProject) {    String xmls = xstreamW.toXML(businessProject);    return "<?xml version=\"1.0\" encoding=\"" + GV.XML_CHAR_CODE + "?>\n" + xmls;  }  public BusinessProject getProject(String proNo) throws Exception {    BusinessProjects businessProjects = null;    for (BusinessProject p : businessProjects.getProList()) {      if (p.getNo().equals(proNo)) {        return p;      }    }    return null;  }  /**   * @param providerTabFileName供应商投标文件绝对路径。   *   * @return BusinessProject 返回供应商投标文件对象项目对象。   * @Description: 读取供应商投标文件。   * @since 1.0   */  public synchronized BusinessProject readProject(String xmlFilePath) {    FileInputStream fis = null;    try {      fis = new FileInputStream(xmlFilePath);    } catch (FileNotFoundException e) {      e.printStackTrace();      throw new RuntimeException(e.getMessage());    }    BusinessProject proj = null;    try {      proj = new BusinessProject();      SmartTreeNode node = (SmartTreeNode) xstreamR.fromXML(new InputStreamReader(fis, GV.XML_CHAR_CODE));      proj.setName(node.getNodeName());      proj.setNo(node.getNodeCode());      proj.setDir(node.getNodeDirPath());      fis.close();    } catch (UnsupportedEncodingException e) {      e.printStackTrace();      throw new RuntimeException(e.getMessage());    } catch (IOException ee) {      throw new RuntimeException(ee.getMessage());    }    return proj;  }  public synchronized SmartTreeNode readXmlToObject(String xmlFilePath) {    SmartTreeNode node = null;    FileInputStream fis = null;    try {      fis = new FileInputStream(xmlFilePath);      P.p("ReadTbFileDao.readXmlToObject()=准备构建SmartTreeNode对象xml文件L" + xmlFilePath);      node = (SmartTreeNode) xstreamR.fromXML(new InputStreamReader(fis, GV.XML_CHAR_CODE));    } catch (Exception e) {      e.printStackTrace();    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (Exception e) {        e.printStackTrace();      }    }    return node;  }  public static LocalProjectDAO getInstance() {    return localProjectDAO;  }  public static void main(String[] args) {    LocalProjectDAO dao = LocalProjectDAO.getInstance();    String fileName = "C:\\ufgovzceb\\resource\\provider1\\A_000003\\projects.xml";    BusinessProject businessProject = dao.readProject(fileName);    System.out.println(businessProject.getName());  }}
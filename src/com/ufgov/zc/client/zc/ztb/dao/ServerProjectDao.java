package com.ufgov.zc.client.zc.ztb.dao;import java.util.HashMap;import java.util.List;import java.util.Map;import com.ufgov.zc.client.zc.ztb.P;import com.ufgov.zc.client.zc.ztb.component.MainPanel;import com.ufgov.zc.client.zc.ztb.fileResumeBroken.authentication.Transfer;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.common.zc.model.ZcEbWaitingDecodeItem;public class ServerProjectDao extends BaseDao {  private static ServerProjectDao dbProjectDao = new ServerProjectDao();  private ServerProjectDao() {  }  public static ServerProjectDao getInstance() {    return dbProjectDao;  }  /**   * 读取需要制作招标书的所有项目   *   * @return   * @throws Exception   */  @SuppressWarnings("unchecked")  public Map<String, Object> findProjectsList() throws Exception {    Map<String, String> para = new HashMap<String, String>();    para.put("operationname", "searchprojlistshouldzbf");    para.put("PROJSTATUS", "exec");    para.put("URL", getServerURL());    para.put("MANAGERCODE", this.getRequestMeta().getSvUserID());    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    return transfer.getReturnMap();  }  /**   * 读取项目的相关信息   *   * @param projCode   * @return   */  @SuppressWarnings("unchecked")  public Map<String, Object> readBusinessProject(String projCode) throws Exception {    Map<String, String> para = new HashMap<String, String>();    para.put("operationname", "searchprojbyprojcode");    para.put("PROJCODE", projCode);    if (GV.DIS_ZHAOBIAO_ONLY.equals(MainPanel.getWHO_I_AM())) {//招标文件获取地址模式      para.put("URL", getServerURL());    } else {//投标文件制作时，直接从配置文件获取      para.put("URL", getServerURLFromConfig());    }    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    Map rp = transfer.getReturnMap();    if ("fail".equals(rp.get("SEARCHRESULT")) || ((String) rp.get("FAILREASON")) != null) {      throw new Exception((String) rp.get("FAILREASON"));    }    return rp;  }  /**   * 获取项目下的所有标段列表   *   * @param projCode   * @return   * @throws Exception   */  @SuppressWarnings("unchecked")  public Map<String, Object> getProjectPackList(String projCode) throws Exception {    Map<String, String> para = new HashMap<String, String>();    para.put("operationname", "searchpackesbyprojcode");    para.put("PROJCODE", projCode);    para.put("URL", getServerURL());    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    return transfer.getReturnMap();  }  /**   * 查询填充模板的数据   *   * @param projCode   * @param packCode   * @return   * @throws Exception   */  @SuppressWarnings("unchecked")  public Map<String, Object> searchProjectPackDetailForFillMold(String projCode, String packCode) throws Exception {    Map<String, String> para = new HashMap<String, String>();    para.put("operationname", "searchprojdetailforfillmold");    para.put("PROJCODE", projCode);    para.put("PACKCODE", packCode);    para.put("URL", getServerURL());    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    return transfer.getReturnMap();  }  /**   * 投标书上传成功后，更新供应商的项目报名相关信息；   *   * @param pmap   * @return   * @throws Exception   */  @SuppressWarnings("unchecked")  public Map<String, String> finishOtherBusiness(Map<String, String> pmap) throws Exception {    Transfer transfer = new Transfer(pmap, "updatedataaction");    transfer.startTransfer();    return transfer.getReturnMap();  }  /**   * 读取已报名的可投标项目，需要projstatus作为参数   *   * @param paras   * @return   * @throws Exception   */  @SuppressWarnings("unchecked")  public Map<String, Object> readSignupBusinessProject(Map<String, String> paras) throws Exception {    Map<String, String> para = new HashMap<String, String>();    para.put("operationname", "searchsignupprojlist");    para.put("PROJSTATUS", paras.get("projstatus"));    para.put("URL", getServerURLFromConfig());    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    return transfer.getReturnMap();  }  /**   * 暂不需要传入参数   *   * @param paras   * @return   * @throws Exception   */  @SuppressWarnings("unchecked")  public Map<String, Object> readEcbjBusinessProject(Map<String, String> paras) throws Exception {    Map<String, String> para = new HashMap<String, String>();    para.put("operationname", "searchecbjprojlist");    if (paras.get("URL") == null) {      para.put("URL", getServerURLFromConfig());    }    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    return transfer.getReturnMap();  }  /**   * 根据当前供应商查询所有可以解密的投标书的状态   *   * @param paras   * @return   * @throws Exception   */  @SuppressWarnings("unchecked")  public List<ZcEbWaitingDecodeItem> readWatingForDecodeProjects(Map<String, String> paras) throws Exception {    paras.put("operationname", "getwaitingdecodingitems");    if (paras.get("URL") == null) {      paras.put("URL", getServerURLFromConfig());    }    P.pm(paras);    Transfer transfer = new Transfer(paras, "tbfiledecodeaction");    transfer.startTransfer();    if ("fail".equals(transfer.getReturnMap().get("UPDATESTATUS")) || (String) transfer.getReturnMap().get("FAILREASON") != null) {      throw new Exception((String) transfer.getReturnMap().get("FAILREASON"));    }    return (List<ZcEbWaitingDecodeItem>) transfer.getReturnMap().get("RESULTLIST");  }  /**   * 商家或者主持人解密完毕后更新数据库的相关信息，主要是ZC_EB_SECURITY_RECORD表   *   * @param paras   * @return   */  @SuppressWarnings("unchecked")  public Map<String, String> doUpdateDecodedRecord(Map paras) throws Exception {    paras.put("operationname", "updatedecodedrecord");    if (paras.get("URL") == null) {      paras.put("URL", getServerURLFromConfig());    }    P.p("解密时");    P.pm(paras);    Transfer transfer = new Transfer(paras, "tbfiledecodeaction");    transfer.startTransfer();    return transfer.getReturnMap();  }  /**   * 直接调用执行服务器端解密，前提是商家和主持人都已经完成了解密   *   * @param paras   * @return   */  @SuppressWarnings("unchecked")  public Map<String, String> doExecuteServerDecoded(Map paras) throws Exception {    paras.put("operationname", "executeserverdecoded");    if (paras.get("URL") == null) {      paras.put("URL", getServerURLFromConfig());    }    Transfer transfer = new Transfer(paras, "tbfiledecodeaction");    transfer.startTransfer();    return transfer.getReturnMap();  }  @SuppressWarnings("unchecked")  public Map<String, Object> toSearchZBFileByProjCode(String projCode) throws Exception {    Map<String, String> paras = new HashMap<String, String>();    paras.put("operationname", "tosearchzbfilebyprojcode");    paras.put("PROJCODE", projCode);    paras.put("URL", getServerURL());    Transfer transfer = new Transfer(paras, "datasearchaction");    transfer.startTransfer();    return transfer.getReturnMap();  }  public Map<String, String> getProjectInfoByUserID(String userID, String url) throws Exception {    Map<String, String> paras = new HashMap<String, String>();    paras.put("operationname", "tosearchprojinfobyuserid");    paras.put("USERID", userID);    if (url == null || "".equals(url)) {      paras.put("URL", getServerURLFromConfig());    } else {      paras.put("URL", url);    }    Transfer transfer = new Transfer(paras, "datasearchaction");    transfer.startTransfer();    return transfer.getReturnMap();  }}
package com.ufgov.zc.client.zc.ztb.dao;import com.ufgov.zc.client.zc.ztb.fileResumeBroken.authentication.Transfer;import com.ufgov.zc.client.zc.ztb.model.BusinessProjects;import com.ufgov.zc.client.zc.ztb.model.ResponsePoint;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.model.Templates;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.zc.model.ZcZBFileTemplate;import java.io.File;import java.io.FileInputStream;import java.io.InputStreamReader;import java.text.SimpleDateFormat;import java.util.*;public class ReadObjectFileToObjectDao extends ZTbFileDao {  private static ReadObjectFileToObjectDao readObjectFileDao = new ReadObjectFileToObjectDao();  Map<String, String> templateFileMap = new HashMap<String, String>();  private ReadObjectFileToObjectDao() {    super();  }  public synchronized SmartTreeNode readProjects() throws Exception {    PubFunction.checkAndCreateDirOrFile(GV.getFilePathFromMap(GV.NODE_TYPE_PROJECT), "F", true, false, new BusinessProjects());    FileInputStream fis = new FileInputStream(GV.getFilePathFromMap(GV.NODE_TYPE_PROJECT));    SmartTreeNode nodes = (SmartTreeNode) xstreamR.fromXML(new InputStreamReader(fis, GV.XML_CHAR_CODE));    if (fis != null) {      fis.close();    }    return nodes;  }  public synchronized SmartTreeNode readTreeNodes() throws Exception {    PubFunction.checkAndCreateDirOrFile(GV.getFilePathFromMap(GV.NODE_TYPE_PROJECT), "F", true, false, new SmartTreeNode());    FileInputStream fis = new FileInputStream(GV.getFilePathFromMap(GV.NODE_TYPE_PROJECT));    SmartTreeNode treeNodes = (SmartTreeNode) xstreamR.fromXML(new InputStreamReader(fis, GV.XML_CHAR_CODE));    if (fis != null) {      fis.close();    }    return treeNodes;  }  public synchronized SmartTreeNode readTreeNodes(String objectFileFullPath) throws Exception {    FileInputStream fis = new FileInputStream(objectFileFullPath);    SmartTreeNode treeNodes = (SmartTreeNode) xstreamR.fromXML(new InputStreamReader(fis, GV.XML_CHAR_CODE));    if (fis != null) {      fis.close();    }    return treeNodes;  }  /**   * 如果没有现成的模板配置文件，那么自动读取resource/templatefiles/目录下的所有模板文件，   * <p/>   * 组成templates对象，该方法主要用在用户选择模板时读取模板信息，并在模板列表中显示.   *   * @return   * @throws Exception   */  public synchronized Templates readTemplateFromTPLLib(String tplbelongbidway) throws Exception {    generateTemplateInfoFileByDirectoryStruct(GV.USER_DIR + File.separator + GV.TEMPLATE_FILE_DIR);    FileInputStream fis = new FileInputStream(GV.USER_DIR + File.separator + GV.TEMPLATES_CONFIG_XML);    Templates templates = (Templates) xstreamR.fromXML(new InputStreamReader(fis, GV.XML_CHAR_CODE));    List<Object> listtempListTemp = templates.getTemplateList();    for (Iterator it = listtempListTemp.iterator(); it.hasNext();) {      Object o = it.next();      ZcZBFileTemplate template = (ZcZBFileTemplate) o;      String tplbelongbidwayXMl = template.getTplBelongBidWay();      if (!tplbelongbidway.equals(tplbelongbidwayXMl)) {        it.remove(); // 第二种删除方法      }    }    templates.setTemplateList(listtempListTemp);    if (fis != null) {      fis.close();    }    return templates;  }  /**   * 根据目录结构来反向构造模板配置文件   *   * @param tplPath   */  public static Templates generateTemplateInfoFileByDirectoryStruct(String tplPath) {    Templates tpls = PubFunction.buildTemplateListByDirectoryStruct(tplPath);    PubFunction.checkAndCreateDirOrFile(GV.USER_DIR + File.separator + GV.TEMPLATES_CONFIG_XML, "F", true, true, tpls);    return tpls;  }  public static ReadObjectFileToObjectDao getInstance() {    return readObjectFileDao;  }  /**   * 如果没有现成的模板配置文件，那么自动读取resource/templatefiles/目录下的所有模板文件，   * <p/>   * 组成templates对象，该方法主要用在用户选择模板时读取模板信息，并在模板列表中显示.   *   * @return   * @throws Exception   */  public synchronized Templates readTemplateFromDB(String tplbelongbidway) throws Exception {    //取到数据列数据  从数据库中读取数据  zc_zb_Templates    List<Map<String, String>> templatesMapLists = this.getTemplatesMapLists(tplbelongbidway);    Templates templates = this.getTemplatesModelsLists(templatesMapLists);    return templates;  }  /**   * 获得 从数据库获得模板数据   *   * @return   * @throws Exception   */  public synchronized List<Map<String, String>> getTemplatesMapLists(String way) throws Exception {    // 从数据库获得模板数据 是否需要添加条件过滤    Map<String, Object> para = new HashMap<String, Object>();    para.put("operationname", "searchtemplatelistbyway");    para.put("TPLBELONGBIDWAY", way);    para.put("URL", getServerURL());    Transfer transfer = new Transfer(para, "datasearchaction");    transfer.startTransfer();    Map result = transfer.getReturnMap();    if ("fail".equals(result.get("SEARCHRESULT"))) {      throw new Exception(GV.getSimpleMsg("templateListSearchErr") + result.get("FAILREASON"));    }    if (null == result.get("RESULTLIST")) {      throw new Exception(GV.getOperateMsg("databaseNoMatchTemplate", way));    }    return convertModelToMap(result);  }  private List<Map<String, String>> convertModelToMap(Map data) {    List<Map<String, String>> list = new ArrayList<Map<String, String>>();    List<ZcZBFileTemplate> resultList = (List<ZcZBFileTemplate>) data.get("RESULTLIST");    for (int i = 0; i < resultList.size(); i++) {      Map<String, String> item = new HashMap<String, String>();      ZcZBFileTemplate tpl = resultList.get(i);      item.put("DESCRIPTION", tpl.getDescription());      item.put("FILEID", tpl.getFileId());      item.put("PROJECTNAME", tpl.getProjName());      item.put("TPLAPPTYPE", tpl.getTplAppType());      item.put("TPLBELONGBIDWAY", tpl.getTplBelongBidWay());      item.put("TPLNO", tpl.getTplNo());      item.put("TEMPLATEID", tpl.getTemplateID());      item.put("PROJNO", tpl.getProjNo());      item.put("TEMPLATECREATOR", tpl.getTemplateCreator());      SimpleDateFormat sdf = new SimpleDateFormat(ZcSettingConstants.SIMPLE_DATE_FORMAT_DATE_ONLY);      if (tpl.getLatestUsed() != null) {        try {          item.put("LATESTUSED", sdf.format(tpl.getLatestUsed()));        } catch (Exception e) {          e.printStackTrace();          item.put("LATESTUSED", "不详");        }      }      list.add(item);    }    return list;  }  /**   * 获取模板名称和存储文件的id   *   * @return   * @throws Exception   */  public synchronized Map<String, String> templateFileMap(String tplbelongbidway) throws Exception {    Map<String, String> templateFileMap = new HashMap<String, String>();    List<Map<String, String>> listMaps = this.getTemplatesMapLists(tplbelongbidway);    for (Map<String, String> map : listMaps) {      templateFileMap.put(map.get("TPLNO"), map.get("FILEID"));    }    return templateFileMap;  }  /**   * 把TemplatesMapLists 转变成 List<Template>   *   * @param templatesMapLists Template 列值 map数组   * @return   * @throws Exception   */  public synchronized Templates getTemplatesModelsLists(List<Map<String, String>> templatesMapLists) throws Exception {    Templates templates = new Templates();    templates.setTemplateList(new ArrayList<Object>());    List<Object> templatesLists = templates.getTemplateList();    for (Map<String, String> templatesMap : templatesMapLists) {      ZcZBFileTemplate template = new ZcZBFileTemplate();      template = template.setMapData(templatesMap);      templatesLists.add(template);      templateFileMap.put(template.getTplNo(), template.getFileId());    }    return templates;  }  public synchronized List<ResponsePoint> readListNodes(String fullPath) throws Exception {    PubFunction.checkAndCreateDirOrFile(fullPath, "F", true, false, new ArrayList<ResponsePoint>());    FileInputStream fis = new FileInputStream(fullPath);    List<ResponsePoint> list = (List<ResponsePoint>) xstreamR.fromXML(new InputStreamReader(fis, GV.XML_CHAR_CODE));    if (fis != null) {      fis.close();    }    return list;  }}
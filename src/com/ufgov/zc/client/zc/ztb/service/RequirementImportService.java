package com.ufgov.zc.client.zc.ztb.service;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.util.ArrayList;import java.util.Enumeration;import java.util.HashMap;import java.util.HashSet;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import com.thoughtworks.xstream.XStream;import com.thoughtworks.xstream.io.xml.DomDriver;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.zc.project.reqfile.component.reqFileLeftTree.ReqTreeNode;import com.ufgov.zc.client.zc.ztb.component.MainPanel;import com.ufgov.zc.client.zc.ztb.dao.AsFileDao;import com.ufgov.zc.client.zc.ztb.dao.ServerProjectDao;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.client.zc.ztb.util.ZipFilePubFunc;import com.ufgov.zc.common.zc.model.ZcEbReqFile;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;public class RequirementImportService {  private final AsFileDao asFileDao = AsFileDao.getInstance();  private final ServerProjectDao serverProjectDao = ServerProjectDao.getInstance();  public IZcEbBaseServiceDelegate zcEbBaseServiceDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class,  "zcEbBaseServiceDelegate");  private final String reqFileDown = GV.USER_DIR + File.separator + GV.REQ_FILE_DIR + File.separator;  private String reqFileZipPath;  public List<Map<String, String>> findDetailsFilesList(String proNo, String packNo) throws Exception {    return asFileDao.findDetailsFilesList(proNo, packNo);  }  public void updateBagDetails(final List<String> checkedCodes, final String combineFilePath, final MainPanel mainPanel) throws Exception {    List<String> fListPath = new ArrayList<String>();    for (String fildPath : checkedCodes) {      File f = new File(fildPath);      fListPath.add(f.getAbsolutePath());    }    mainPanel.getWordPane().combineMsWord(fListPath);    //    for (String fPath : fListPath) {    ////      PubFunction.deleteFile(fPath);    ////    }  }  //添加方法，根据项目编号或者标段获取需求文件中的内容.  public List<Map<String, String>> getReqFilesList(String projNo) throws Exception {    //    ZcEbReqFile zcEbReqFile = (ZcEbReqFile) zcEbBaseServiceDelegate.queryObject("ZC_EB_REQ_FILE.selectZcEbReqFileByPackCode", packNo, requestMeta);    //    Map map = new HashMap();    //    map.put("ZCEBREQFILE", zcEbReqFile);    Map returnMap = serverProjectDao.getProjectPackList(projNo);    List<Map<String, Object>> mapList = (List<Map<String, Object>>) returnMap.get("RESULTMAPLIST");    Set set = new HashSet();    List<String> packList = new ArrayList<String>();    for (int i = 0; i < mapList.size(); i++) {      Map<String, Object> item = mapList.get(i);      set.add(item.get("REQ_CODE"));      packList.add((String) item.get("PACK_CODE"));    }    List<Map<String, String>> list = new ArrayList<Map<String, String>>();    Iterator it = set.iterator();    while (it.hasNext()) {      String reqCode = (String) it.next();      Map map = asFileDao.getReqFileFromZcEbReqFile(reqCode);      ZcEbReqFile zcEbReqFile = (ZcEbReqFile) map.get("ZCEBREQFILE");      if (zcEbReqFile == null) {        throw new Exception("没有找到需求文件!");      }      reqFileZipPath = reqFileDown + zcEbReqFile.getFileName().replaceAll(".zip", "") + File.separator;      unZipReqFile(toWriteFileToLocal(map), reqFileZipPath);      readTreeNodes(list, packList);    }    return list;  }  private File toWriteFileToLocal(Map data) throws Exception {    ZcEbReqFile zcEbReqFile = (ZcEbReqFile) data.get("ZCEBREQFILE");    if (zcEbReqFile == null) {      throw new Exception("需求文件没有找到！");    }    String fullName = zcEbReqFile.getFileName();    String parentFilePath = GV.USER_DIR + File.separator + GV.REQ_FILE_DIR + File.separator;    PubFunction.checkAndMakeDirs(parentFilePath);    String filePath = parentFilePath + fullName;    File file = new File(filePath);    OutputStream writer = null;    try {      writer = new BufferedOutputStream(new FileOutputStream(file));      byte buf[] = zcEbReqFile.getFileContent();      writer.write(buf, 0, buf.length);    } catch (Exception e) {      e.printStackTrace();    } finally {      if (writer != null) {        try {          writer.close();        } catch (Exception e) {          e.printStackTrace();        }      }    }    return file;  }  private void unZipReqFile(File file, String unZipDestionFile) {    ZipFilePubFunc.unzipFileToDestDir(file, unZipDestionFile);  }  public void readTreeNodes(List<Map<String, String>> list, List<String> packList) throws Exception {    FileInputStream fis = new FileInputStream(reqFileZipPath + "config.xml");    XStream xs = new XStream(new DomDriver());    ReqTreeNode treeNodes = (ReqTreeNode) xs.fromXML(new InputStreamReader(fis, GV.XML_CHAR_CODE));    if (fis != null) {      fis.close();    }    generNodeFile(treeNodes, packList, list);  }  public void generNodeFile(ReqTreeNode rootNode, List<String> packList, List<Map<String, String>> list) {    Enumeration en = rootNode.children();    while (en.hasMoreElements()) {      ReqTreeNode packNode = (ReqTreeNode) en.nextElement();      packList.contains(packNode.getNodeCode());      if (packList.contains(packNode.getNodeCode())) {        Enumeration packEn = packNode.children();        while (packEn.hasMoreElements()) {          ReqTreeNode treeNode = (ReqTreeNode) packEn.nextElement();          Map<String, String> map1 = new HashMap<String, String>();          map1.put("DETAILS_NAME", treeNode.getNodesFullPathWithExtIfExist());          map1.put("FILE_NAME", treeNode.getNodeName());          map1.put("FILE_ID", reqFileDown + treeNode.getNodesFullPath() + treeNode.getFileExtension());          list.add(map1);        }      }    }  }  //}
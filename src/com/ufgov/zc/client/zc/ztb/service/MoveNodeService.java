package com.ufgov.zc.client.zc.ztb.service;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;public class MoveNodeService {  private SmartTreeNode currentNode;  private SmartTreeNode parentNode;  public boolean moveuptofirst(SmartTreeNode currentNode) throws Exception {    this.currentNode = currentNode;    this.parentNode = (SmartTreeNode) currentNode.getParent();    if (parentNode == null) {      return false;    }    if (moveuptofirstTreeNode()) {      updateProjectsConfig();      return true;    } else {      return false;    }  }  /**   * 将当前节点移到最顶上位置   *   * @return   */  private boolean moveuptofirstTreeNode() {    int index = parentNode.getIndex(currentNode);    if (index <= 0) {      return false;    }    for (int i = index; i > 0; i--) {      SmartTreeNode pNode = (SmartTreeNode) parentNode.getChildAt(i - 1);      parentNode.remove(i);      parentNode.remove(i - 1);      parentNode.insert(currentNode, i - 1);      parentNode.insert(pNode, i);    }    return true;  }  /**   * 将节点往上移动一个位置   *   * @param currentNode   * @return   * @throws Exception   */  public boolean moveup(SmartTreeNode currentNode) throws Exception {    this.currentNode = currentNode;    this.parentNode = (SmartTreeNode) currentNode.getParent();    if (parentNode == null) {      return false;    }    if (moveupTreeNode()) {      updateProjectsConfig();      return true;    } else {      return false;    }  }  private boolean moveupTreeNode() {    int index = parentNode.getIndex(currentNode);    if (index <= 0) {      return false;    }    SmartTreeNode pNode = (SmartTreeNode) parentNode.getChildAt(index - 1);    parentNode.remove(index);    parentNode.remove(index - 1);    parentNode.insert(currentNode, index - 1);    parentNode.insert(pNode, index);    return true;  }  public boolean movedown(SmartTreeNode currentNode) throws Exception {    this.currentNode = currentNode;    this.parentNode = (SmartTreeNode) currentNode.getParent();    if (parentNode == null) {      return false;    }    if (movedownTreeNode()) {      updateProjectsConfig();      return true;    } else {      return false;    }  }  private boolean movedownTreeNode() {    int index = parentNode.getIndex(currentNode);    if (index + 1 >= parentNode.getChildCount()) {      return false;    }    SmartTreeNode pNode = (SmartTreeNode) parentNode.getChildAt(index + 1);    parentNode.remove(index + 1);    parentNode.remove(index);    parentNode.insert(pNode, index);    parentNode.insert(currentNode, index + 1);    return true;  }  public boolean movedowntolast(SmartTreeNode currentNode) throws Exception {    this.currentNode = currentNode;    this.parentNode = (SmartTreeNode) currentNode.getParent();    if (parentNode == null) {      return false;    }    if (movedowntolastTreeNode()) {      updateProjectsConfig();      return true;    } else {      return false;    }  }  private boolean movedowntolastTreeNode() {    int index = parentNode.getIndex(currentNode);    if (index + 1 >= parentNode.getChildCount()) {      return false;    }    for (int i = index; i < parentNode.getChildCount() - 1; i++) {      SmartTreeNode pNode = (SmartTreeNode) parentNode.getChildAt(i + 1);      parentNode.remove(i + 1);      parentNode.remove(i);      parentNode.insert(pNode, i);      parentNode.insert(currentNode, i + 1);    }    return true;  }  private void updateProjectsConfig() throws Exception {    PubFunction.checkAndCreateDirOrFile(GV.getFilePathFromMap(GV.NODE_TYPE_PROJECT), "F", true, true, currentNode.getRoot());  }}
package com.ufgov.zc.client.zc.ztb.service;import com.ufgov.zc.client.zc.ztb.dao.FileImportDao;import com.ufgov.zc.client.zc.ztb.model.*;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import java.util.List;public class DeleteTbFileService {  private FileImportDao importTbFileDao = FileImportDao.getInstance();  public String deleteNode(SmartTreeNode treeNode) throws Exception {    SmartTreeNode parentNode = (SmartTreeNode) treeNode.getParent();    parentNode.remove(treeNode);    return treeNode.getNodeName() + "(" + treeNode.getNodeCode() + ")";  }  public void deleteProjectNode(BusinessProject obj) throws Exception {    deleteProjectConfigInfo(obj);    PubFunction.deleteFile(obj.getDir(), true);  }  public void deleteProjectConfigInfo(BusinessProject pro) throws Exception {    BusinessProjects businessProjects = null;    for (BusinessProject p : businessProjects.getProList()) {      if (p.getNo().equals(pro.getNo())) {        businessProjects.getProList().remove(p);        break;      }    }    importTbFileDao.createProjectsXMLFile(new SmartTreeNode());  }  public void deletePackNode(BusinessProject pro, BusinessPack pack) throws Exception {    BusinessProjects businessProjects = null;    for (BusinessProject p : businessProjects.getProList()) {      if (p.getNo().equals(pro.getNo())) {        deletePackConfigInfo(p.getZtbFile(), pack);        break;      }    }    importTbFileDao.createProjectsXMLFile(new SmartTreeNode());    PubFunction.deleteFile(pack.getDir(), true);  }  public boolean deletePackConfigInfo(List<Object> ztbFile, BusinessPack pack) {    boolean flag = false;    if (ztbFile != null && ztbFile.size() > 0) {      for (Object o : ztbFile) {        if (o instanceof BusinessPack) {          BusinessPack pp = (BusinessPack) o;          if (pp.getNo().equals(pack.getNo())) {            ztbFile.remove(pp);            return true;          } else {            flag = deletePackConfigInfo(pp.getZtbFile(), pack);            if (flag) {              return true;            }          }        }      }    }    return false;  }  public void deleteDetailsNode(BusinessProject pro, PackDetails details) throws Exception {    BusinessProjects businessProjects = null;    for (BusinessProject p : businessProjects.getProList()) {      if (p.getNo().equals(pro.getNo())) {        deleteDetailsConfigInfo(p.getZtbFile(), details);        break;      }    }    importTbFileDao.createProjectsXMLFile(new SmartTreeNode());    PubFunction.deleteFile(details.getDir(), true);    if (!details.getType().equals(GV.NODE_TYPE_DOC)) {      PubFunction.deleteFile(details.getDir() + ".setting", true);    }  }  public boolean deleteDetailsConfigInfo(List<Object> ztbFile, PackDetails details) {    boolean flag = false;    if (ztbFile != null && ztbFile.size() > 0) {      for (Object o : ztbFile) {        if (o instanceof BusinessPack) {          BusinessPack pp = (BusinessPack) o;          flag = deleteDetailsConfigInfo(pp.getZtbFile(), details);          if (flag) {            return true;          }        } else if (o instanceof PackDetails) {          PackDetails pd = (PackDetails) o;          if (pd.getNo().equals(details.getNo())) {            ztbFile.remove(pd);            return true;          }        }      }    }    return false;  }  public boolean isCurrentNodeOrChildNodeOpened(SmartTreeNode openedPackNode, SmartTreeNode openedLeafNode, SmartTreeNode currNode) {    if (openedPackNode == null) {      return false;    }    //如果当前节点不是叶子节点，则还需要判断是否有子节点被打开。    if (!currNode.isLeaf()) {      return (-1 == openedLeafNode.getNodesFullPath().indexOf(openedPackNode.getNodesFullPath()));    } else {      return currNode.getNodeGUID().equals(openedLeafNode.getNodeGUID());    }  }}
package com.ufgov.zc.client.zc.ztb.service;import com.ufgov.zc.client.zc.ztb.P;import com.ufgov.zc.client.zc.ztb.VersionControler;import com.ufgov.zc.client.zc.ztb.dao.FileImportDao;import com.ufgov.zc.client.zc.ztb.model.BusinessProject;import com.ufgov.zc.client.zc.ztb.model.BusinessProjects;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.util.DESEncodeAndDecode;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import org.apache.tools.zip.ZipEntry;import org.apache.tools.zip.ZipFile;import java.io.*;import java.util.ArrayList;import java.util.Enumeration;import java.util.Map;import java.util.zip.ZipException;public class ImportTbFileService {  private FileImportDao importTbFileDao = FileImportDao.getInstance();  private BusinessProjects businessProjects;  private BusinessProject businessProject;  private SmartTreeNode projectNode;  private VersionControler vc = new VersionControler();  public BusinessProject importProject(String source, String destination, boolean overrided) throws Exception {    ZipFile zipFile = null;    try {      zipFile = new ZipFile(source, GV.FILE_CHAR_CODE);    } catch (IOException e) {      e.printStackTrace();      return null;    }    String proDir = getProjectDirAndObject(zipFile);    destination += File.separator;    destination += proDir;    if (overrided) {      deleteOldData(destination, proDir);    }    unzipFileToDestDir(zipFile, destination + File.separator);    updateTbConfigFile();    return businessProject;  }  private void deleteOldData(String destination, String proDir) throws Exception {    PubFunction.deleteFile(new File(destination));  }  public boolean checkProject(String source) throws Exception {    ZipFile zipFile = null;    try {      zipFile = new ZipFile(source, GV.FILE_CHAR_CODE);    } catch (IOException e) {      e.printStackTrace();    }    getProjectDirAndObject(zipFile);    return true;  }  /**   * 文件解压缩 ztb   *   * @param zipFile   * @param destination   */  public void unzipFileToDestDir(ZipFile zipFile, String destination) {    Enumeration<ZipEntry> emu = zipFile.getEntries();    try {      while (emu.hasMoreElements()) {        ZipEntry entry = (ZipEntry) emu.nextElement();        if (entry.isDirectory()) {          new File(destination + File.separator + entry.getName()).mkdirs();          continue;        }        BufferedInputStream bis = new BufferedInputStream(zipFile.getInputStream(entry));        File file = new File(destination + File.separator + entry.getName());        File parent = file.getParentFile();        if (parent != null && (!parent.exists())) {          parent.mkdirs();        }        FileOutputStream fos = new FileOutputStream(file);        BufferedOutputStream bos = new BufferedOutputStream(fos, GV.BUFFER_SIZE);        int count;        byte data[] = new byte[GV.BUFFER_SIZE];        while ((count = bis.read(data, 0, GV.BUFFER_SIZE)) != -1) {          bos.write(data, 0, count);        }        bos.flush();        bos.close();        bis.close();      }      zipFile.close();    } catch (Exception e) {      e.printStackTrace();    }  }  /**   * 更新节点树   *   * @throws Exception   */  public void updateTbConfigFile() throws Exception {    if (businessProjects == null) {      businessProjects = new BusinessProjects();    }    ArrayList<BusinessProject> proList = businessProjects.getProList();    if (proList == null) {      proList = new ArrayList<BusinessProject>();    }    proList.add(businessProject);    businessProjects.setProList(proList);    SmartTreeNode rootNode = new SmartTreeNode();    rootNode.add(projectNode);    importTbFileDao.createProjectsXMLFile(rootNode);  }  /**   * 获得项目目录及项目树内容   *   * @param zipFile   * @return   */  public String getProjectDirAndObject(ZipFile zipFile) {    Enumeration<ZipEntry> emu = zipFile.getEntries();    String projCode = "";    try {      while (emu.hasMoreElements()) {        ZipEntry entry = (ZipEntry) emu.nextElement();        String fileName = entry.getName().toLowerCase();        if (fileName.indexOf(GV.PROJECT_INFO_XML_SUFFIX) != -1) {          BusinessProject bp = (BusinessProject) FileImportDao.getInstance().readProject(zipFile.getInputStream(entry));          projCode = bp.getNo();          if (projCode == null) {            projCode = fileName.substring(0, fileName.indexOf(GV.PROJECT_INFO_XML_SUFFIX));          }          break;        }      }      //重新获取起始位置      emu = zipFile.getEntries();      while (emu.hasMoreElements()) {        ZipEntry entry = emu.nextElement();        String fileName = entry.getName().toLowerCase();        if (fileName.endsWith(projCode.toLowerCase() + GV.SUFFIX_XML)) {          projectNode = (SmartTreeNode) importTbFileDao.readProject(zipFile.getInputStream(entry));          businessProject = new BusinessProject();          businessProject.setId(projectNode.getNodeGUID());          businessProject.setName(projectNode.getNodeName());          businessProject.setDir(projectNode.getNodeDirPath());          businessProject.setNo(projectNode.getNodeCode());          return projectNode.getNodeCode();        }      }    } catch (Exception e) {      e.printStackTrace();      if (zipFile != null) {        try {          zipFile.close();        } catch (IOException e2) {          e2.printStackTrace();          return null;        }      }    }    return null;  }  public BusinessProject getProject() {    return businessProject;  }  public void setProject(BusinessProject businessProject) {    this.businessProject = businessProject;  }  /**   * 执行版本比较   *   * @param zipPath   * @return   */  public boolean checkVersionMatching(String zipPath) throws Exception {    String askInfo = getTBFileVersionInfoAfterDecoded(zipPath);    if (askInfo == null) {      //JOptionPane.showMessageDialog(null, "经检测发现，该电子标书为较早版本的电子标书，\n如果遇到影响标书制作的相关问题，请联系标书发布机构.");      return true;    }    String beInfo = getToolVersionInfo();    if (beInfo == null) {      throw new Exception(GV.getSimpleMsg("missingSoftConfigFile"));    }    P.p("askInfo:" + askInfo + ",beInfo:" + beInfo);    String askVNO = exctractVersionInfo(askInfo);    String beVNO = exctractVersionInfo(beInfo);    int res = vc.versionComparor(askVNO, beVNO, false);    if (res == 1) {      return true;    } else {      throw new Exception(vc.translateNumToCN(res));    }  }  /**   * 提取版本信息   *   * @param info   * @return   */  public String exctractVersionInfo(String info) {    String[] arr = info.split("@;@");    for (int i = 0; i < arr.length; i++) {      String[] subArr = arr[i].split(":");      if ("version".equals(subArr[0])) {        return subArr[1];      }    }    return "";  }  /**   * 获得制作工具当前版本   *   * @return   */  public String getToolVersionInfo() {    try {      Map<String, String> map = vc.readDefaultSoftConfigInfoAfterDecoded();      return map.get("info");    } catch (Exception e) {      e.printStackTrace();      return null;    }  }  /**   * 获取投标文件中的要求版本信息   *   * @param zipPath   * @return   */  public String getTBFileVersionInfoAfterDecoded(String zipPath) throws Exception {    String enStr = this.getTBFileVersionInfo(zipPath);    if (enStr == null || "".equals(enStr)) {      return null;    }    return DESEncodeAndDecode.decryptBASE64s(enStr);  }  /**   * 获取投标文件中的要求版本信息   *   * @param zipPath   * @return   */  public String getTBFileVersionInfo(String zipPath) throws Exception {    String info = null;    BusinessProject bp = getBusinessProject(zipPath);    if (bp == null) {      throw new Exception(GV.getSimpleMsg("missingProjectConfigInfo"));    } else {      info = bp.getSoftInfo();    }    return info;  }  /**   * 读取投标书中包含版本信息的xml文件   *   * @param zipPath   * @return   * @throws IOException   * @throws ZipException   */  public BusinessProject getBusinessProject(String zipPath) throws ZipException, IOException {    ZipFile zipFile = null;    zipFile = new ZipFile(zipPath, GV.FILE_CHAR_CODE);    Enumeration<ZipEntry> emu = zipFile.getEntries();    ZipEntry entry = null;    while (emu.hasMoreElements()) {      entry = emu.nextElement();      String fileName = entry.getName().toLowerCase();      if (fileName.indexOf(GV.PROJECT_INFO_XML_SUFFIX) != -1) {        return (BusinessProject) importTbFileDao.readProject(zipFile.getInputStream(entry));      }    }    return null;  }  /**   * 读取投标书中包含版本信息的xml文件   *   * @param zipPath   * @return   */  public BusinessProject readAllZipDirectories(String zipPath) {    ZipFile zipFile = null;    try {      zipFile = new ZipFile(zipPath, GV.FILE_CHAR_CODE);    } catch (IOException e) {      e.printStackTrace();      return null;    }    Enumeration<ZipEntry> emu = zipFile.getEntries();    ZipEntry entry = null;    while (emu.hasMoreElements()) {      entry = emu.nextElement();      String fileName = entry.getName().toLowerCase();      System.out.println(fileName);    }    return null;  }  public static void main(String[] args) throws Exception {    ImportTbFileService service = new ImportTbFileService();    service.checkVersionMatching("E:\\work_doc\\标书编辑器开发\\XCZX2011-111.ztb");    service.readAllZipDirectories("d:\\123.ztb");  }}
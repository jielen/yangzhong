package com.ufgov.zc.client.zc.ztb.service;import com.snca.financebidding.FinanceBiddingCall;import com.ufgov.zc.client.zc.ztb.JobThreads;import com.ufgov.zc.client.zc.ztb.P;import com.ufgov.zc.client.zc.ztb.component.ProjectInfoPanel;import com.ufgov.zc.client.zc.ztb.model.LevelOneItem;import com.ufgov.zc.client.zc.ztb.model.LevelOneXmlModel;import com.ufgov.zc.client.zc.ztb.model.LevelTwoModel;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import javax.swing.*;import java.io.File;import java.io.IOException;import java.lang.reflect.Method;import java.security.NoSuchAlgorithmException;import java.util.HashMap;import java.util.Iterator;import java.util.Map;public class LevelOneTwoBuilder {  XmlOperateService xos = new XmlOperateService();  /**   * 首先要判断一级文件是否存在，如果存在，那么需要将已有的内容读取出来，然后将新的内容一并写入到文件中   *   * @param packNode   * @param destination   * @param uploadMold   */  public boolean levelOneBuilder(SmartTreeNode packNode, String fileFullPath, String uploadMold) {    LevelOneXmlModel levelOne = getLevelOneXmlModel();    buildLevelOneModel(levelOne, fileFullPath, uploadMold);    try {      xos.buildLevelOneXml(GV.getLevelOneXmlFullPath(), levelOne);    } catch (Exception e) {      e.printStackTrace();      return false;    }    return true;  }  /**   * 获得空白的或者已有的一级xml文件内容   *   * @return   */  private LevelOneXmlModel getLevelOneXmlModel() {    LevelOneXmlModel levelOne = null;    String onePath = GV.getLevelOneXmlFullPath();    if ((new File(onePath)).exists()) {      try {        xos.xmlReader(onePath, "one");        levelOne = xos.getLevelOne();      } catch (Exception e) {        e.printStackTrace();      }    }    if (levelOne == null) {      levelOne = new LevelOneXmlModel();    }    String serverUrl = ProjectInfoPanel.getWebServerIPAddr();    if (!serverUrl.endsWith("communication")) {      serverUrl = serverUrl + "communication";    }    levelOne.setWebServerURL(serverUrl);    return levelOne;  }  /**   * 填充数据   *   * @param levelOne   * @param xmlFullPath   * @param isCompress   */  private void buildLevelOneModel(LevelOneXmlModel levelOne, String xmlFullPath, String uploadMold) {    LevelOneItem loi = new LevelOneItem();    loi.setBidEndTime(ProjectInfoPanel.getBusinessProject().getTbEndTime());    loi.setTbfileUploadStatus(LevelOneItem.UPLOAD_STATUS_WAITING);    loi.setUploadMold(uploadMold);    loi.setXmlFileFullPath(xmlFullPath);    loi.setXmlFileName(new File(xmlFullPath).getName());    loi.setSummitStatus(LevelOneItem.SUMMIT_STATUS_INIT);    toDeleteOlderSameRecord(levelOne, loi);    levelOne.getLevelOneItems().add(loi);  }  /**   * 删除冗余的标段记录   *   * @param levelOne   * @param loi   */  private void toDeleteOlderSameRecord(LevelOneXmlModel levelOne, LevelOneItem loi) {    for (int i = 0; i < levelOne.getLevelOneItems().size(); i++) {      if (loi.getXmlFileName().equalsIgnoreCase((((LevelOneItem) levelOne.getLevelOneItems().get(i)).getXmlFileName()))) {        levelOne.getLevelOneItems().remove(i);        i--;      }    }  }  /**   * 先判断是否已经存在该文件，如果存在的话，也需要先读取里面的内容   *   * @param packNode   * @param destination   * @param uploadMold   * @throws Exception   */  public String levelTwoBuilder(SmartTreeNode packNode, String fileFullPath, String uploadMold) throws Exception {    String levelTwoXmlPath = getLevelTwoXmlPath(packNode);    try {      xos.buildLevelTwoXml(levelTwoXmlPath, buildLevelTwoModel(packNode, uploadMold, fileFullPath));    } catch (Exception e) {      e.printStackTrace();      throw new Exception(e.getMessage());    }    return levelTwoXmlPath;  }  /**   * 获得二级xml文件的路径   *   * @param packNode   * @return   */  private String getLevelTwoXmlPath(SmartTreeNode packNode) {    String projCode = PubFunction.getNeedingNodeInParent(packNode, GV.NODE_TYPE_PROJECT).getNodeCode();    String packCode = packNode.getNodeCode();    return getLevelTwoXmlPath(projCode, packCode);  }  /**   * 获得二级xml文件的路径   *   * @param projCode   * @param packCode   * @return   */  public static String getLevelTwoXmlPath(String projCode, String packCode) {    return GV.getLevelTwoXmlBasePath().append(projCode).append("@").append(packCode).append("@LEVEL2.xml").toString();  }  static String supplierPubKey = null;  static String supplierTrustCode = null;  static String masterPubKeyA = null;  static String masterTrustCodeA = null;  static String masterPubKeyB = null;  static String masterTrustCodeB = null;  /**   * 填充二级xml文件数据   *   * @param packNode   * @param fileFullPath   * @return   * @throws Exception   */  private Map<String, String> buildLevelTwoModel(SmartTreeNode packNode, String uploadMold, String fileFullPath) throws Exception {    SmartTreeNode projNode = PubFunction.getNeedingNodeInParent(packNode, GV.NODE_TYPE_PROJECT);    Map<String, String> map = new HashMap<String, String>();    map.put("TBFILENAME", new File(fileFullPath).getName());    map.put("LOCALFILEFULLPATH", fileFullPath);    map.put("SERVERFILEFULLPATH", "/zfcg/bea/user_projects/domains/test2/fileUploads");    map.put("PROJCODE", projNode.getNodeCode());    map.put("PROJNAME", projNode.getNodeName());    map.put("PACKCODE", packNode.getNodeCode());    map.put("PACKNAME", packNode.getNodeName());    map.put("SUPPLIERNAME", "defaultSupplierName");    map.put("SUPPLIERCODE", "defaultSupplierID");    String mPubKeyA = ProjectInfoPanel.readCA_PUB_KEY(ProjectInfoPanel.MAIN_PUB_KEY);    mPubKeyA = mPubKeyA.replaceAll("\r\n", "").replaceAll("\n", "");    if (mPubKeyA != null && !"".equals(mPubKeyA)) {      //如果上次的公钥为空，或者这次的公钥和上次的不相等，那么需要重新获取客服信任号      if (masterPubKeyA == null || !mPubKeyA.equals(masterPubKeyA)) {        masterPubKeyA = mPubKeyA;        masterTrustCodeA = FinanceBiddingCall.getCertInfoNocustbase64Cert(masterPubKeyA);      }      map.put("MASTERPUBLICKEYA", masterPubKeyA);      String origMD5 = ProjectInfoPanel.readCA_PUB_KEY(ProjectInfoPanel.MAIN_PUB_KEY_MD5);      String newMD5 = PubFunction.getMD5DigestHexStr(masterPubKeyA.getBytes());      if (origMD5.equals(newMD5)) {        map.put("MASTERPUBLICKEYAMD5", newMD5);      } else {        throw new Exception(GV.getSimpleMsg("wrongPubKey"));      }      map.put("MASTERTRUSTCODEA", masterTrustCodeA);    } else {      map.put("MASTERPUBLICKEYA", "");      map.put("MASTERPUBLICKEYAMD5", "");      map.put("MASTERTRUSTCODEA", "");    }    String mPubKeyB = ProjectInfoPanel.readCA_PUB_KEY(ProjectInfoPanel.MINOR_PUB_KEY);    mPubKeyB = mPubKeyB.replaceAll("\r\n", "").replaceAll("\n", "");    if (mPubKeyB != null && !"".equals(mPubKeyB)) {      if (masterPubKeyB == null || !mPubKeyB.equals(masterPubKeyB)) {        masterPubKeyB = mPubKeyB;        masterTrustCodeB = FinanceBiddingCall.getCertInfoNocustbase64Cert(masterPubKeyB);      }      map.put("MASTERPUBLICKEYB", masterPubKeyB);      String origMD5 = ProjectInfoPanel.readCA_PUB_KEY(ProjectInfoPanel.MINOR_PUB_KEY_MD5);      String newMD5 = PubFunction.getMD5DigestHexStr(masterPubKeyB.getBytes());      if (origMD5.equals(newMD5)) {        map.put("MASTERPUBLICKEYBMD5", newMD5);      } else {        throw new Exception(GV.getSimpleMsg("wrongPubKey"));      }      map.put("MASTERTRUSTCODEB", masterTrustCodeB);    } else {      map.put("MASTERPUBLICKEYB", "");      map.put("MASTERPUBLICKEYBMD5", "");      map.put("MASTERTRUSTCODEB", "");    }    String pubKey = supplierPubKey;    if (pubKey == null) {      boolean flag = false;      if (LevelOneItem.UPLOAD_MOLD_COMMON.equals(uploadMold)) {        if ("Y".equals(JobThreads.toGetCodedDemand().get("ISPROVIDERMUSTCODED"))) {          String msg = GV.getSimpleMsg("askForSupPubKey");          int sel = JOptionPane.showConfirmDialog(null, msg, "询问", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);          if (sel == JOptionPane.OK_OPTION) {            flag = true;          }        }      } else {        JOptionPane.showMessageDialog(null, GV.getSimpleMsg("askForSupPubKeyInsert"));        flag = true;      }      if (flag) {        pubKey = PubFunction.doFetchPubKey();        pubKey = pubKey.replaceAll("\r\n", "").replaceAll("\n", "");        supplierPubKey = pubKey;        supplierTrustCode = FinanceBiddingCall.getCertInfoNocustbase64Cert(pubKey);      }    }    if (supplierPubKey != null && !"".equals(supplierPubKey)) {      map.put("SUPPLIERPUBLICKEY", supplierPubKey);      map.put("SUPPLIERPUBLICKEYMD5", PubFunction.getMD5DigestHexStr(supplierPubKey.getBytes()));      map.put("SUPPLIERTRUSTCODE", supplierTrustCode);    } else {      map.put("SUPPLIERPUBLICKEY", "");      map.put("SUPPLIERPUBLICKEYMD5", "");      map.put("SUPPLIERTRUSTCODE", "");    }    map.put("ORIGTBFILEMD5", getOrigFileMD5(fileFullPath));    map.put("DOUBLEENCODEDDIGITALENVELOPEA", "defaultenvilopeA");    map.put("DOUBLEENCODEDDIGITALENVELOPEB", "defaultenvilopeB");    map.put("SUPPLIERPASSWDENCODEDDIGITALENVELOPE", "defaultenvilopeSupPwd");    map.put("SUPPLIERPUBKEYENCODEDDIGITALENVELOPE", "defaultenvilopeSupKey");    map.put("TBRECEIPT", "receiptContent");    map.put("CLIENTSYSTEMINFO", PubFunction.getDefaultSystemInfo());    return map;  }  /**   * 更新一级xml文件中的相关信息   *   * @param projCode   * @param packCode   * @param paras   */  public static void toUpdateLevelOneXmlFile(String projCode, String packCode, Map<String, String> paras) {    String level2fileName = LevelOneTwoBuilder.getLevelTwoXmlPath(projCode, packCode);    level2fileName = (new File(level2fileName)).getName();    JobThreads.toUpdateLevelOnexmlFile(level2fileName, paras);  }  /**   * 获得原始招标文件的md5码   *   * @param fileFullPath   * @return   */  private String getOrigFileMD5(String fileFullPath) {    try {      return PubFunction.getFileMD5DigestHexStr(fileFullPath);    } catch (NoSuchAlgorithmException e) {      e.printStackTrace();    } catch (IOException e) {      e.printStackTrace();    }    return null;  }  /**   * 更新一级xml文件的部分内容   *   * @param fileName   * @param loi   * @return   */  public boolean updateLevelOneXmlFile(LevelOneItem loi) {    if (loi.getXmlFileName() == null || "".equals(loi.getXmlFileName())) {      return false;    }    LevelOneXmlModel levelOne = getLevelOneXmlModel();    for (int i = 0; i < levelOne.getLevelOneItems().size(); i++) {      LevelOneItem tmp = (LevelOneItem) levelOne.getLevelOneItems().get(i);      if (tmp.getXmlFileName().equalsIgnoreCase(loi.getXmlFileName())) {        if (loi.getBidEndTime() != null) {          tmp.setBidEndTime(loi.getBidEndTime());        }        if (loi.getTbfileUploadETime() != null) {          tmp.setTbfileUploadETime(loi.getTbfileUploadETime());        }        if (loi.getTbfileUploadSTime() != null) {          tmp.setTbfileUploadSTime(loi.getTbfileUploadSTime());        }        if (loi.getTbfileUploadStatus() != null) {          tmp.setTbfileUploadStatus(loi.getTbfileUploadStatus());        }        if (loi.getUploadMold() != null) {          tmp.setUploadMold(loi.getUploadMold());        }        if (loi.getSummitStatus() != null) {          tmp.setSummitStatus(loi.getSummitStatus());        }        break;      }    }    try {      xos.buildLevelOneXml(GV.getLevelOneXmlFullPath(), levelOne);    } catch (Exception e) {      e.printStackTrace();      return false;    }    return true;  }  /**   * 更新二级xml文件的部分内容   *   * @param fileFullPath   * @param ltm   * @return   */  public boolean updateLevelTwoXmlFile(LevelTwoModel ltm) {    String levelTwoXmlPath = getLevelTwoXmlPath(ltm.getProjCode(), ltm.getPackCode());    try {      xos.xmlReader(levelTwoXmlPath, "two");      Map mergedMap = mergeTwoMap(convertBeanToMap(ltm), xos.getLevel2Data());      xos.buildLevelTwoXml(levelTwoXmlPath, mergedMap);    } catch (Exception e) {      e.printStackTrace();      return false;    }    return true;  }  /**   * 合并两个map里面的数据   *   * @param from   * @param to   * @return   */  private Map mergeTwoMap(Map from, Map to) {    Iterator fit = from.keySet().iterator();    while (fit.hasNext()) {      String key = (String) fit.next();      String uKey = key.toUpperCase();      String value = (String) from.get(key);      if (value != null && !"".equals(value)) {        to.put(key, from.get(uKey));      }    }    return to;  }  private Map<String, String> convertBeanToMap(LevelTwoModel ltm) {    Map<String, String> data = new HashMap<String, String>();    data.put("DOUBLEENCODEDDIGITALENVELOPEA", ltm.getDoubleEncodedDigitalEnvelopeA());    data.put("DOUBLEENCODEDDIGITALENVELOPEB", ltm.getDoubleEncodedDigitalEnvelopeB());    data.put("LOCALFILEFULLPATH", ltm.getLocalFileFullPath());    data.put("SERVERFILEFULLPATH", ltm.getServerFileFullPath());    data.put("MASTERPUBLICKEYA", ltm.getMasterPublicKeyA());    data.put("MASTERPUBLICKEYAMD5", ltm.getMasterPublicKeyAMD5());    data.put("MASTERPUBLICKEYB", ltm.getMasterPublicKeyB());    data.put("MASTERPUBLICKEYBMD5", ltm.getMasterPublicKeyBMD5());    data.put("MASTERTRUSTCODEA", ltm.getMasterTrustCodeA());    data.put("MASTERTRUSTCODEB", ltm.getMasterTrustCodeB());    data.put("ORIGTBFILESIGNITURE", ltm.getOrigTbFileSigniture());    data.put("PACKCODE", ltm.getPackCode());    data.put("PACKNAME", ltm.getPackName());    data.put("PROJCODE", ltm.getProjCode());    data.put("PROJNAME", ltm.getProjName());    data.put("SUPPLIERCODE", ltm.getSupplierCode());    data.put("SUPPLIERNAME", ltm.getSupplierName());    data.put("SUPPLIERPASSWDENCODEDDIGITALENVELOPE", ltm.getSupplierPasswdEncodedDigitalEnvelope());    data.put("SUPPLIERPUBKEYENCODEDDIGITALENVELOPE", ltm.getSupplierPubkeyEncodedDigitalEnvelope());    data.put("SUPPLIERPUBLICKEY", ltm.getSupplierPublicKey());    data.put("SUPPLIERPUBLICKEYMD5", ltm.getSupplierPublicKeyMD5());    data.put("SUPPLIERTRUSTCODE", ltm.getSupplierTrustCode());    data.put("TBFILENAME", ltm.getTbFileName());    data.put("TBRECEIPT", ltm.getTbReceipt());    return data;  }  public XmlOperateService getXos() {    return xos;  }  public void setXos(XmlOperateService xos) {    this.xos = xos;  }  public void mergeDetailFromMapToObject(Map fromLevel2Data, LevelTwoModel toLtm) throws ClassNotFoundException {    Class c = Class.forName(toLtm.getClass().getName());    Method m[] = c.getDeclaredMethods();    for (int i = 0; i < m.length; i++) {      String mName = m[i].getName();      if (mName.startsWith("set")) {        try {          String key = mName.substring(3, mName.length());          String value = (String) fromLevel2Data.get(key.toUpperCase());          if (value != null) {            m[i].invoke(toLtm, value);            continue;          }        } catch (Exception e) {          e.printStackTrace();        }      }    }  }  public static void main(String[] args) throws ClassNotFoundException {    LevelTwoModel ltm = new LevelTwoModel();    Class c = Class.forName(ltm.getClass().getName());    Method m[] = c.getDeclaredMethods();    for (int i = 0; i < m.length; i++) {      P.p(m[i].getName());    }  }}
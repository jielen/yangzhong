package com.ufgov.zc.client.zc.ztb.service;import com.ufgov.zc.client.zc.ztb.dao.PackDetailsDAO;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.table.TableBuilder;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import javax.swing.*;import java.io.File;public class PackDetailsService {  private PackDetailsDAO packDetailsDAO = PackDetailsDAO.getInstance();  /**   * 创建当前节点下的新的子节点，根据用户传来的父节点及相关参数进行构建   *   * @param panelName   * @param currentNode   * @param dtType   * @param dtName   * @return   * @throws Exception   */  public SmartTreeNode createChildNode(SmartTreeNode currentNode, String dtType, String dtName, String filePath) throws Exception {    boolean isSuccess = true;    SmartTreeNode newNode = new SmartTreeNode();    newNode.setAllowsChildren(false);    String fullPath = GV.getProjectConfigFullPath();    TableBuilder tableBuilder = null;    if (GV.NODE_TYPE_FOLDER.equals(dtType)) {      newNode.setAllowsChildren(true);      fillSmartTreeNode(newNode, dtType, dtName);      currentNode.add(newNode);    } else if (GV.NODE_TYPE_DOC.equals(dtType)) {      fillSmartTreeNode(newNode, dtType, dtName);      currentNode.add(newNode);      newNode.setFileExtension(GV.SUFFIX_DOC);      if (filePath == null || "".equals(filePath)) {        try {          packDetailsDAO.createPackDetailsDocFile(newNode.getNodesFullPath() + GV.SUFFIX_DOC);        } catch (Exception e) {          currentNode.remove(newNode);          throw e;        }      } else {        String tarPath = GV.getImportFileDir_FromRoot().append(File.separator).append(newNode.getNodesFullPath()).append(GV.SUFFIX_DOC).toString();        PubFunction.copyFile(filePath, tarPath);      }    } else if (GV.NODE_TYPE_TABLE.equals(dtType)) {      fillSmartTreeNode(newNode, dtType, dtName);      currentNode.add(newNode);      newNode.setFileExtension(GV.SUFFIX_TABLE);      tableBuilder = new TableBuilder();      StringBuffer buff = GV.getImportFileDir_FromRoot();      buff.append(newNode.getNodesFullPath());      buff.append(GV.SUFFIX_TABLE);      tableBuilder.buildZBSettingPanel(buff.toString());      tableBuilder.save();    } else if (GV.NODE_TYPE_TBYLB.equals(dtType)) {      fillSmartTreeNode(newNode, dtType, dtName);      currentNode.add(newNode);      newNode.setFileExtension(GV.SUFFIX_TABLE);      tableBuilder = new TableBuilder();      StringBuffer buff = GV.getImportFileDir_FromRoot();      buff.append(newNode.getNodesFullPath());      buff.append(GV.SUFFIX_TABLE);      tableBuilder.buildZBTbylbTablePanel(buff.toString());      tableBuilder.save();    } else if (GV.NODE_TYPE_ECBJB.equals(dtType)) {      String bjPath = PubFunction.getTBYLBFilePath(currentNode);      if (bjPath != null && !"".equals(bjPath)) {        fillSmartTreeNode(newNode, dtType, dtName);        currentNode.add(newNode);        newNode.setFileExtension(GV.SUFFIX_TABLE);        tableBuilder = new TableBuilder();        StringBuffer buff = GV.getImportFileDir_FromRoot();        String sameRoot = buff.toString();        buff.append(newNode.getNodesFullPath());        buff.append(GV.SUFFIX_TABLE);        doCopyFromLocalTBYLB(currentNode, sameRoot, buff.toString());      } else {        JOptionPane.showMessageDialog(null, GV.getSimpleMsg("missingImportantFile"));        newNode = null;      }    } else if (GV.NODE_TYPE_ZB.equals(dtType) || GV.NODE_TYPE_TB.equals(dtType)) {      newNode.setAllowsChildren(true);      fillSmartTreeNode(newNode, dtType, dtName);      currentNode.add(newNode);    } else {      newNode = null;    }    if (newNode != null) {      isSuccess = PubFunction.checkAndCreateDirOrFile(fullPath, "F", true, true, currentNode.getRoot());      if (!isSuccess) {        currentNode.remove(newNode);      }    }    return newNode;  }  /**   * 拷贝开标一览表作为二次报价表   *   * @param packNode   * @param tarPath   */  private boolean doCopyFromLocalTBYLB(SmartTreeNode packNode, String sameRoot, String tarPath) {    String srcPath = null;    try {      srcPath = PubFunction.getTBYLBFilePath(packNode);      if ("".equals(srcPath)) {        return false;      }      srcPath = sameRoot + srcPath;      PubFunction.copyFile(srcPath, tarPath);      return true;    } catch (Exception e) {      e.printStackTrace();      return false;    }  }  /**   * 填充新建的对象的内容   *   * @param newNode   * @param nodeType   * @param dtName   */  private void fillSmartTreeNode(SmartTreeNode newNode, String nodeType, String dtName) {    newNode.setNodeCode(nodeType + "_" + SmartTreeNode.SMART_TREE_NODE_COUNT);    newNode.setNodeDirPath(dtName);    newNode.setNodeDisplayName(dtName);    newNode.setNodeName(dtName);    newNode.setNodeType(nodeType);    newNode.setNodeSource(GV.NODE_SOURCE_FORM_SELF);  }  public boolean existDupChildNode(SmartTreeNode currentNode, String dtName) {    int childNodeCount = currentNode.getChildCount();    SmartTreeNode node = null;    if (dtName == null || "".equals(dtName)) {      return true;    }    for (int i = 0; i < childNodeCount; i++) {      node = (SmartTreeNode) currentNode.getChildAt(i);      if (dtName.equals(node.getNodeName()) || dtName.equals(node.getNodeDisplayName())) {        return true;      }    }    return false;  }}
package com.ufgov.zc.client.zc.ztb.service;//需要导入的包import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.regex.Matcher;import java.util.regex.Pattern;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import javax.xml.transform.OutputKeys;import javax.xml.transform.Transformer;import javax.xml.transform.TransformerException;import javax.xml.transform.TransformerFactory;import javax.xml.transform.dom.DOMSource;import javax.xml.transform.stream.StreamResult;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.w3c.dom.Text;import org.xml.sax.SAXException;import com.ufgov.zc.client.zc.ztb.component.ProjectInfoPanel;import com.ufgov.zc.client.zc.ztb.model.FileToUploadItem;import com.ufgov.zc.client.zc.ztb.model.LevelOneItem;import com.ufgov.zc.client.zc.ztb.model.LevelOneXmlModel;import com.ufgov.zc.client.zc.ztb.model.ToUploadFileXmlModel;import com.ufgov.zc.client.zc.ztb.util.GV;public class XmlOperateService {  private Map level2data = new HashMap();  private StringBuffer buff = new StringBuffer();  private LevelOneXmlModel levelOne = new LevelOneXmlModel();  private ToUploadFileXmlModel toUploadFileXmlModel = new ToUploadFileXmlModel();  DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();  DocumentBuilder builder = null;  public XmlOperateService() {    try {      builder = dFactory.newDocumentBuilder();    } catch (ParserConfigurationException e) {      e.printStackTrace();    }  }  public static void main(String[] args) {    XmlOperateService xos = new XmlOperateService();    try {      xos.buildLevelOneXml("e:\\student1.xml", DataFactory.getDataModel());      xos.buildLevelTwoXml("e:\\student2.xml", DataFactory.getDataMap());      xos.buildFileToUploadModleXml("e:\\student3.xml", DataFactory.getFileToUploadDataModel());    } catch (Exception e) {      e.printStackTrace();    }    try {      xos.xmlReader("e:\\student1.xml", "one");      xos.xmlReader("e:\\student2.xml", "two");      xos.xmlReader("e:\\student3.xml", "toupload");    } catch (FileNotFoundException e) {      e.printStackTrace();    } catch (ParserConfigurationException e) {      e.printStackTrace();    } catch (SAXException e) {      e.printStackTrace();    } catch (IOException e) {      e.printStackTrace();    }  }  /**   * 创建一级xml文件内容及文件   *   * @param xmlPath   * @param model   * @throws TransformerException   */  public void buildLevelOneXml(String xmlPath, LevelOneXmlModel model) throws Exception {    Document dom = builder.newDocument();    Element root = dom.createElement("ROOT");    Element webUrl = dom.createElement("WEBSERVERURL");    Text webUrlValue = dom.createTextNode(model.getWebServerURL());    webUrl.appendChild(webUrlValue);    root.appendChild(webUrl);    List list = model.getLevelOneItems();    for (int i = 0; i < list.size(); i++) {      LevelOneItem oItem = (LevelOneItem) list.get(i);      Element item = dom.createElement("ITEM");      Text value = null;      if (oItem.getXmlFileName() != null) {        Element ele1 = dom.createElement("XMLFILENAME");        value = dom.createTextNode(oItem.getXmlFileName());        ele1.appendChild(value);        item.appendChild(ele1);      }      if (oItem.getXmlFileFullPath() != null) {        Element ele2 = dom.createElement("XMLFILEFULLPATH");        value = dom.createTextNode(oItem.getXmlFileFullPath());        ele2.appendChild(value);        item.appendChild(ele2);      }      if (oItem.getTbfileUploadStatus() != null) {        Element ele3 = dom.createElement("TBFILEUPLOADSTATUS");        value = dom.createTextNode(oItem.getTbfileUploadStatus());        ele3.appendChild(value);        item.appendChild(ele3);      }      if (oItem.getTbfileUploadSTime() != null) {        Element ele4 = dom.createElement("TBFILEUPLOADSTIME");        value = dom.createTextNode(oItem.getTbfileUploadSTime());        ele4.appendChild(value);        item.appendChild(ele4);      }      if (oItem.getTbfileUploadETime() != null) {        Element ele5 = dom.createElement("TBFILEUPLOADETIME");        value = dom.createTextNode(oItem.getTbfileUploadETime());        ele5.appendChild(value);        item.appendChild(ele5);      }      if (oItem.getUploadMold() != null) {        Element ele6 = dom.createElement("UPLOADMOLD");        value = dom.createTextNode(oItem.getUploadMold());        ele6.appendChild(value);        item.appendChild(ele6);      }      if (oItem.getBidEndTime() != null) {        Element ele7 = dom.createElement("BIDENDTIME");        value = dom.createTextNode(oItem.getBidEndTime());        ele7.appendChild(value);        item.appendChild(ele7);      }      if (oItem.getSummitStatus() != null) {        Element ele8 = dom.createElement("SUMMITSTATUS");        value = dom.createTextNode(oItem.getSummitStatus());        ele8.appendChild(value);        item.appendChild(ele8);      }      root.appendChild(item);    }    dom.appendChild(root);    this.writeXmlFile(dom, xmlPath);  }  /**   * 创建待发送xml文件内容及文件   *   * @param xmlPath   * @param data   * @throws TransformerException   */  public void buildFileToUploadModleXml(String xmlPath, ToUploadFileXmlModel data) throws Exception {    Document dom = builder.newDocument();    Element root = dom.createElement("ROOT");    Element webUrl = dom.createElement("WEBSERVERURL");    String url = data.getWebServerURL();    Text webUrlValue = null;    Pattern pattern = Pattern.compile(GV.REG_URL);    Matcher matcher = pattern.matcher(url);    if (!matcher.matches()) {      if (ProjectInfoPanel.getBusinessProject().getNo() == null) {        webUrlValue = dom.createTextNode("");      } else {        url = ProjectInfoPanel.getWebServerIPAddr();        webUrlValue = dom.createTextNode(url + "communication");      }    } else {      if (url.endsWith("/communication")) {        webUrlValue = dom.createTextNode(url);      } else {        webUrlValue = dom.createTextNode(url + "communication");      }    }    webUrl.appendChild(webUrlValue);    root.appendChild(webUrl);    for (int i = 0; i < data.getLevelOneItems().size(); i++) {      FileToUploadItem oItem = (FileToUploadItem) data.getLevelOneItems().get(i);      Element item = dom.createElement("ITEM");      Text value = null;      if (oItem.getFileName() != null) {        Element ele1 = dom.createElement("FILENAME");        value = dom.createTextNode(oItem.getFileName());        ele1.appendChild(value);        item.appendChild(ele1);      }      if (oItem.getFileFullPath() != null) {        Element ele2 = dom.createElement("FILEFULLPATH");        value = dom.createTextNode(oItem.getFileFullPath());        ele2.appendChild(value);        item.appendChild(ele2);      }      if (oItem.getFileMD5() != null) {        Element ele3 = dom.createElement("FILEMD5");        value = dom.createTextNode(oItem.getFileMD5());        ele3.appendChild(value);        item.appendChild(ele3);      }      root.appendChild(item);    }    dom.appendChild(root);    this.writeXmlFile(dom, xmlPath);  }  /**   * 创建xml文件   *   * @param dom   * @param xmlPath   * @throws TransformerException   */  private synchronized void writeXmlFile(Document dom, String xmlPath) throws Exception {    //创建Transformer对象，它的作用是将Document对象以流的方式输出    TransformerFactory tFactory = TransformerFactory.newInstance();    Transformer transformer = tFactory.newTransformer();    //将Document对象转为DOMSource    DOMSource source = new DOMSource(dom);    //创建流    File file = new File(xmlPath);    if (!file.exists()) {      file.getParentFile().mkdirs();    } else {      if (!file.delete()) {        System.out.println("删除旧的" + file.getCanonicalPath() + "文件失败！");        //throw new Exception("删除旧的" + file.getCanonicalPath() + "文件失败！");      } else {        file.createNewFile();      }    }    StreamResult result = new StreamResult(file);    //设置输出格式    transformer.setOutputProperty(OutputKeys.ENCODING, "utf-8");    transformer.setOutputProperty(OutputKeys.INDENT, "yes");    //输出保存    transformer.transform(source, result);  }  /**   * 创建二级xml文件对象及文件   *   * @param xmlPath   * @param paras   * @throws TransformerException   */  public void buildLevelTwoXml(String xmlPath, Map paras) throws Exception {    Document dom = builder.newDocument();    Element root = dom.createElement("ROOT");    Iterator it = paras.keySet().iterator();    while (it.hasNext()) {      String key = (String) it.next();      Element item = dom.createElement(key);      Text txt = dom.createTextNode((String) paras.get(key));      item.appendChild(txt);      root.appendChild(item);    }    dom.appendChild(root);    this.writeXmlFile(dom, xmlPath);  }  /**   * 读取xml文件内容   *   * @param xmlPath   * @param level   value in "one" or "two"   * @throws ParserConfigurationException   * @throws FileNotFoundException   * @throws SAXException   * @throws IOException   */  public void xmlReader(String xmlPath, String level) throws ParserConfigurationException, FileNotFoundException, SAXException, IOException {    DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();    DocumentBuilder builder = dFactory.newDocumentBuilder();    Document dom = builder.parse(new FileInputStream(xmlPath));    this.buff.setLength(0);    if ("one".equalsIgnoreCase(level)) {      levelOne.getLevelOneItems().clear();      readLevelOneNodes(dom);    } else if ("two".equalsIgnoreCase(level)) {      this.level2data.clear();      Element root = dom.getDocumentElement();      readLevelTwoNodes(root);    } else if ("toupload".equalsIgnoreCase(level)) {      toUploadFileXmlModel.getLevelOneItems().clear();      readToUploadFileList(dom);    }  }  private void readToUploadFileList(Node node) {    NodeList nl = node.getChildNodes();    for (int i = 0; i < nl.getLength(); i++) {      Node curr = nl.item(i);      if ("ITEM".equalsIgnoreCase(curr.getNodeName())) {        FileToUploadItem item = new FileToUploadItem();        for (int j = 0; j < curr.getChildNodes().getLength(); j++) {          Node leafNode = curr.getChildNodes().item(j);          String nodeName = leafNode.getNodeName();          if (leafNode.getFirstChild() == null) {            continue;          }          String nodeValue = leafNode.getFirstChild().getNodeValue();          if ("FILENAME".equalsIgnoreCase(nodeName)) {            item.setFileName(nodeValue);          } else if ("FILEFULLPATH".equalsIgnoreCase(nodeName)) {            item.setFileFullPath(nodeValue);          } else if ("FILEMD5".equalsIgnoreCase(nodeName)) {            item.setFileMD5(nodeValue);          }        }        toUploadFileXmlModel.getLevelOneItems().add(item);      } else if ("WEBSERVERURL".equalsIgnoreCase(curr.getNodeName())) {        if (curr.getFirstChild() != null) {          toUploadFileXmlModel.setWebServerURL(curr.getFirstChild().getNodeValue());        } else {          toUploadFileXmlModel.setWebServerURL("");        }      } else {        readToUploadFileList(curr);      }    }  }  String lastPath = null;  /**   * 读取二级xml文件内容,读取的键值对中的key将被转换为大写   *   * @param node   */  private void readLevelTwoNodes(Node node) {    if (node.hasChildNodes()) {      lastPath = node.getNodeName().toUpperCase();      for (Node n = node.getFirstChild(); n != null; n = n.getNextSibling()) {        readLevelTwoNodes(n);      }    } else {      if (level2data.get(lastPath) == null || "".equals(level2data.get(lastPath)) || "\n".equals(level2data.get(lastPath))) {        level2data.put(lastPath, node.getNodeValue());      }    }  }  /**   * 读取一级xml文件的内容   *   * @param node   */  private void readLevelOneNodes(Node node) {    NodeList nl = node.getChildNodes();    for (int i = 0; i < nl.getLength(); i++) {      Node curr = nl.item(i);      if ("ITEM".equalsIgnoreCase(curr.getNodeName())) {        LevelOneItem item = new LevelOneItem();        for (int j = 0; j < curr.getChildNodes().getLength(); j++) {          Node leafNode = curr.getChildNodes().item(j);          String nodeName = leafNode.getNodeName();          if (leafNode.getFirstChild() == null) {            continue;          }          String nodeValue = leafNode.getFirstChild().getNodeValue();          if ("UPLOADMOLD".equalsIgnoreCase(nodeName)) {            item.setUploadMold(nodeValue);          } else if ("TBFILEUPLOADETIME".equalsIgnoreCase(nodeName)) {            item.setTbfileUploadETime(nodeValue);          } else if ("TBFILEUPLOADSTATUS".equalsIgnoreCase(nodeName)) {            item.setTbfileUploadStatus(nodeValue);          } else if ("TBFILEUPLOADSTIME".equalsIgnoreCase(nodeName)) {            item.setTbfileUploadSTime(nodeValue);          } else if ("XMLFILENAME".equalsIgnoreCase(nodeName)) {            item.setXmlFileName(nodeValue);          } else if ("XMLFILEFULLPATH".equalsIgnoreCase(nodeName)) {            item.setXmlFileFullPath(nodeValue);          } else if ("BIDENDTIME".equalsIgnoreCase(nodeName)) {            item.setBidEndTime(nodeValue);          }        }        levelOne.getLevelOneItems().add(item);      } else if ("WEBSERVERURL".equalsIgnoreCase(curr.getNodeName())) {        levelOne.setWebServerURL(curr.getFirstChild().getNodeValue());      } else {        readLevelOneNodes(curr);      }    }  }  public Map getLevel2Data() {    if (level2data != null) {      level2data.remove("ROOT");    }    return level2data;  }  public LevelOneXmlModel getLevelOne() {    return levelOne;  }  public void setLevelOne(LevelOneXmlModel levelOne) {    this.levelOne = levelOne;  }  public ToUploadFileXmlModel getToUploadFileXmlModel() {    return toUploadFileXmlModel;  }  public void setToUploadFileXmlModel(ToUploadFileXmlModel toUploadFileXmlModel) {    this.toUploadFileXmlModel = toUploadFileXmlModel;  }}
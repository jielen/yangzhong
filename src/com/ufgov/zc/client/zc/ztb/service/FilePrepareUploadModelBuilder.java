package com.ufgov.zc.client.zc.ztb.service;import com.ufgov.zc.client.zc.ztb.component.ProjectInfoPanel;import com.ufgov.zc.client.zc.ztb.fileResumeBroken.fileOperate.MD5Util;import com.ufgov.zc.client.zc.ztb.model.FileToUploadItem;import com.ufgov.zc.client.zc.ztb.model.LevelTwoModel;import com.ufgov.zc.client.zc.ztb.model.ToUploadFileXmlModel;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import javax.swing.*;import java.io.File;import java.io.IOException;import java.lang.reflect.Method;import java.security.NoSuchAlgorithmException;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import java.util.Map;public class FilePrepareUploadModelBuilder {  XmlOperateService xos = new XmlOperateService();  /**   * 首先要判断待上传列表xml文件是否存在，如果存在，那么需要将已有的内容读取出来，然后将新的内容一并写入到文件中   *   * @param fileFullPath   */  public void fileToUploadModelBuilder(final File currFile) {    if (currFile == null) {      return;    }    Thread worker = new Thread(new Runnable() {      public void run() {        doTheJob(currFile);      }    });    worker.start();  }  public synchronized void doTheJob(File currFile) {    try {      ToUploadFileXmlModel data = getFileToUploadModel();      data = buildFileToUploadModel(data, currFile);      xos.buildFileToUploadModleXml(GV.getFileToUploadXmlFullPath(), data);    } catch (Exception e) {      e.printStackTrace();    }  }  public void initTheJob() {    final ToUploadFileXmlModel data = getFileToUploadModel();    try {      xos.buildFileToUploadModleXml(GV.getFileToUploadXmlFullPath(), data);    } catch (Exception e) {      e.printStackTrace();      JOptionPane.showMessageDialog(null, GV.getSimpleMsg("createWaitingUploadListErr") + e.getStackTrace());    }  }  /**   * 获得空白的或者已有的待上传xml文件内容   *   * @return   */  private ToUploadFileXmlModel getFileToUploadModel() {    ToUploadFileXmlModel data = null;    String xmlPath = GV.getFileToUploadXmlFullPath();    if ((new File(xmlPath)).exists()) {      try {        xos.xmlReader(xmlPath, "toupload");        data = xos.getToUploadFileXmlModel();      } catch (Exception e) {        e.printStackTrace();      }    } else {      data = new ToUploadFileXmlModel();    }    return data;  }  /**   * 填充数据   *   * @param data   * @param xmlFullPath   * @throws IOException   * @throws NoSuchAlgorithmException   */  private ToUploadFileXmlModel buildFileToUploadModel(ToUploadFileXmlModel model, File currFile) throws NoSuchAlgorithmException, IOException {    if (currFile == null) {      return model;    }    List<FileToUploadItem> data = model.getLevelOneItems();    data = toDeleteOlderSameRecord(data, currFile.getAbsolutePath());    if (toCheckIsOverDate(currFile.getAbsolutePath())) {      return model;    }    FileToUploadItem item = new FileToUploadItem();    item.setFileFullPath(currFile.getAbsolutePath());    String md5 = (new MD5Util()).getBigFileMD5NotDispatchProgressMsg(currFile);    item.setFileMD5(md5);    item.setFileName(currFile.getName());    data.add(item);    return model;  }  //检查当前项目是否已经过期  /**   * return 如果过期返回true，否则返回false   */  private boolean toCheckIsOverDate(String absolutePath) {    if (GV.SESSION_MAP.isEmpty()) {      return false;    }    String projCodes = GV.SESSION_MAP.get("PROJCODES");    String currProjCode = ProjectInfoPanel.getBusinessProject().getNo();    if (projCodes == null || "".equals(projCodes)) {      projCodes = "";      if (currProjCode != null) {        projCodes = currProjCode;      }      String pEndTime = ProjectInfoPanel.getBusinessProject().getKbTime();      Date endTime = null;      SimpleDateFormat sdf = new SimpleDateFormat(ZcSettingConstants.SIMPLE_DATE_FORMAT_FULL);      if (pEndTime != null && !"".equals(pEndTime)) {        try {          endTime = sdf.parse(pEndTime);        } catch (ParseException e) {          e.printStackTrace();        }      }      if (endTime == null) {        ServerProjectService sps = new ServerProjectService();        try {          Map<String, String> projInfo = sps.getProjectsInfoByUserID(GV.SESSION_MAP.get(GV.USER_ID), ProjectInfoPanel.getWebServerIPAddr());          projCodes = projInfo.get("PROJCODES");        } catch (Exception e) {          e.printStackTrace();        }      } else {        if (currProjCode != null && !"".equals(currProjCode) && (new Date()).before(endTime)) {          GV.SESSION_MAP.put("PROJCODES", currProjCode);        } else {          deleteFileToUploadXmlFileWithProjCode(currProjCode);        }      }    }    return projCodes.indexOf(currProjCode) == -1;  }  /**   * 删除冗余的标段记录   *   * @param data   * @param item   */  private List<FileToUploadItem> toDeleteOlderSameRecord(List<FileToUploadItem> data, String fileFullPath) {    for (int i = 0; i < data.size(); i++) {      if (fileFullPath.equalsIgnoreCase(data.get(i).getFileFullPath())) {        data.remove(i);      }    }    return data;  }  /**   * 更新一级xml文件的部分内容   *   * @param fileName   * @param loi   * @return   */  public boolean updateFileToUploadXmlFile(FileToUploadItem item) {    if (item.getFileFullPath() == null || "".equals(item.getFileFullPath())) {      return false;    }    ToUploadFileXmlModel model = getFileToUploadModel();    List<FileToUploadItem> data = model.getLevelOneItems();    for (int i = 0; i < data.size(); i++) {      FileToUploadItem tmp = data.get(i);      if (tmp.getFileFullPath().equalsIgnoreCase(item.getFileFullPath())) {        if (item.getFileMD5() != null) {          tmp.setFileMD5(item.getFileMD5());        }        if (item.getFileName() != null) {          tmp.setFileName(item.getFileName());        }        break;      }    }    try {      xos.buildFileToUploadModleXml(GV.getFileToUploadXmlFullPath(), model);    } catch (Exception e) {      e.printStackTrace();      return false;    }    return true;  }  /**   * 更新xml文件的部分内容   *   * @param fileName   * @param loi   * @return   */  public boolean deleteFileToUploadXmlFileWithProjCode(String projCode) {    if ("".equals(projCode)) {      return false;    }    ToUploadFileXmlModel model = getFileToUploadModel();    List<FileToUploadItem> data = model.getLevelOneItems();    for (int i = 0; i < data.size(); i++) {      if (data.get(i).getFileFullPath().indexOf(projCode) >= 0) {        data.remove(i);      }    }    try {      xos.buildFileToUploadModleXml(GV.getFileToUploadXmlFullPath(), model);    } catch (Exception e) {      e.printStackTrace();      return false;    }    return true;  }  /**   * 更新xml文件的部分内容   *   * @param 待留项目编号串   * @return   */  public void deleteFileToUploadXmlFileWithoutProjCode(String projCode) {    if (projCode == null) {      return;    }    ToUploadFileXmlModel model = getFileToUploadModel();    List<FileToUploadItem> data = model.getLevelOneItems();    boolean isRemove = false;    for (int i = 0; i < data.size(); i++) {      if (data.get(i).getFileFullPath().indexOf(projCode) == -1) {        data.remove(i);        isRemove = true;      }    }    if (!isRemove) {      return;    }    try {      xos.buildFileToUploadModleXml(GV.getFileToUploadXmlFullPath(), model);    } catch (Exception e) {      e.printStackTrace();    }  }  public XmlOperateService getXos() {    return xos;  }  public void setXos(XmlOperateService xos) {    this.xos = xos;  }  public void mergeDetailFromMapToObject(Map fromLevel2Data, LevelTwoModel toLtm) throws ClassNotFoundException {    Class c = Class.forName(toLtm.getClass().getName());    Method m[] = c.getDeclaredMethods();    for (int i = 0; i < m.length; i++) {      String mName = m[i].getName();      if (mName.startsWith("set")) {        try {          String key = mName.substring(3, mName.length());          String value = (String) fromLevel2Data.get(key.toUpperCase());          if (value != null) {            m[i].invoke(toLtm, value);            continue;          }        } catch (Exception e) {          e.printStackTrace();        }      }    }  }}
package com.ufgov.zc.client.zc.ztb.service;import com.thoughtworks.xstream.converters.ConversionException;import com.ufgov.zc.client.zc.ztb.P;import com.ufgov.zc.client.zc.ztb.VersionControler;import com.ufgov.zc.client.zc.ztb.component.MainPanel;import com.ufgov.zc.client.zc.ztb.dao.FileImportDao;import com.ufgov.zc.client.zc.ztb.dao.ReadObjectFileToObjectDao;import com.ufgov.zc.client.zc.ztb.dao.ServerProjectDao;import com.ufgov.zc.client.zc.ztb.model.*;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.zc.model.ZcEbWaitingDecodeItem;import java.io.File;import java.io.FileInputStream;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;public class ServerProjectService {  private ServerProjectDao serverProjectDao = ServerProjectDao.getInstance();  private ReadObjectFileToObjectDao readObjectFileDao = ReadObjectFileToObjectDao.getInstance();  private FileImportDao fileImportDao = FileImportDao.getInstance();  private BusinessProjects businessProjects = null;  private SmartTreeNode rootTreeNode = new SmartTreeNode();  public ServerProjectService() {  }  public void init() {    try {      rootTreeNode = readObjectFileDao.readTreeNodes();    } catch (Exception e) {      if (e instanceof ConversionException) {        e.printStackTrace();      }    }  }  @SuppressWarnings("unchecked")  public List<Map<String, String>> findProjectsList() throws Exception {    Map<String, Object> retMap = serverProjectDao.findProjectsList();    if (null != retMap.get("FAILREASON") && !"".equals(retMap.get("FAILREASON"))) {      throw new Exception(retMap.get("FAILREASON").toString());    }    return this.convertDBDataToViewData((List<Map<String, Object>>) retMap.get("RESULTMAPLIST"));  }  private List<Map<String, String>> convertDBDataToViewData(List<Map<String, Object>> data) {    List<Map<String, String>> retData = new ArrayList<Map<String, String>>();    for (int i = 0; i < data.size(); i++) {      Map<String, Object> currData = (Map<String, Object>) data.get(i);      Map<String, String> item = new HashMap<String, String>();      item.put("PROJ_CODE", preProcessData(currData.get("PROJ_CODE")));      item.put("PROJ_NAME", preProcessData(currData.get("PROJ_NAME")));      item.put("PROJ_SUM", preProcessData(currData.get("PROJ_SUM")));      item.put("PUR_TYPE", preProcessData(currData.get("PUR_TYPE")));      item.put("MANAGER", preProcessData(currData.get("MANAGER")));      item.put("PROJ_DATE", preProcessData(currData.get("PROJ_DATE")));      item.put("PHONE", preProcessData(currData.get("PHONE")));      item.put("EMAIL", preProcessData(currData.get("EMAIL")));      item.put("FAX", preProcessData(currData.get("FAX")));      item.put("IS_HAVE_ZBFILE", "0".equals(preProcessData(currData.get("IS_HAVE_ZBFILE"))) ? "未制作" : "已制作");      retData.add(item);    }    return retData;  }  private String preProcessData(Object data) {    if (data == null || "".equals(data)) {      return "不详";    } else {      return data + "";    }  }  /**   * 根据项目编号和分包编号去获得项目及分包详细信息   *   * @param projCode   * @param packCode   * @return   */  public Map<String, Object> searchProjectPackDetail(String projCode, String packCode) throws Exception {    return serverProjectDao.searchProjectPackDetailForFillMold(projCode, packCode);  }  /**   * 读入项目信息   */  public void importProjectFromServer(List<String> projNoList) throws Exception {    if (this.rootTreeNode != null) {      init();      this.rootTreeNode.removeAllChildren();    }    this.rootTreeNode.setNodeDisplayName("项目列表");    this.rootTreeNode.setNodeDirPath("");// 项目列表节点不能设置路径    this.rootTreeNode.setNodeSource(GV.NODE_SOURCE_FROM_SYS);    for (String projNo : projNoList) {      loadPackagesInProj(convertMapToBean(serverProjectDao.readBusinessProject(projNo)));      fileImportDao.createProjectsXMLFile(rootTreeNode);    }  }  /**   * 读取项目概要信息   *   * @param projCode   * @return   * @throws Exception   */  public BusinessProject readBusinessProject(String projCode) throws Exception {    return convertMapToBean(this.serverProjectDao.readBusinessProject(projCode));  }  /**   * 读入项目信息   */  public void importProjectFromLocal(String objFileFullPath) throws Exception {    if (this.rootTreeNode != null) {      init();      this.rootTreeNode.removeAllChildren();    }    this.rootTreeNode.setNodeDisplayName("项目列表");    this.rootTreeNode.setNodeDirPath("");// 项目列表节点不能设置路径    this.rootTreeNode.setNodeSource(GV.NODE_SOURCE_FROM_SYS);    SmartTreeNode projNodes = this.readObjectFileDao.readTreeNodes(objFileFullPath);    this.rootTreeNode.add(projNodes);    this.fileImportDao.createProjectsXMLFile(rootTreeNode);  }  public BusinessProject getBusinessProject(String projCode, String fullPath) throws Exception {    if (projCode == null || "".equals(projCode)) {      return new BusinessProject();    }    BusinessProject businessProject = null;//    boolean isHaving = PubFunction.checkAndCreateDirOrFile(fullPath, "F", false, false, null);    boolean isHaving = false;    if (GV.DIS_ZHAOBIAO_ONLY.equals(MainPanel.getWHO_I_AM()) && !isHaving) {      P.p("88888888888888888----from database----88888888888888888888");      Map<String, Object> resMap = serverProjectDao.readBusinessProject(projCode);      businessProject = convertMapToBean(resMap);      PubFunction.checkAndCreateDirOrFile(fullPath, "F", true, true, businessProject);    } else if (GV.DIS_TOUBIAO_ONLY.equals(MainPanel.getWHO_I_AM())) {      P.p("88888888888888888----from xml----88888888888888888888");      if (!new File(fullPath).exists()) {        return new BusinessProject();      }      FileInputStream fis = new FileInputStream(fullPath);      businessProject = (BusinessProject) fileImportDao.readProject(fis);      fis.close();    } else {      if ((new File(fullPath)).exists()) {        try {          FileInputStream fis = new FileInputStream(fullPath);          businessProject = (BusinessProject) fileImportDao.readProject(fis);          fis.close();        } catch (Exception e) {          e.printStackTrace();        }      }      if (businessProject == null || !projCode.equals(businessProject.getNo())) {        P.p("88888888888888888----from database2----88888888888888888888");        Map<String, Object> resMap = serverProjectDao.readBusinessProject(projCode);        businessProject = convertMapToBean(resMap);        PubFunction.checkAndCreateDirOrFile(fullPath, "F", true, true, businessProject);      }    }    return businessProject;  }  private BusinessProject convertMapToBean(Map resMap) throws Exception {    if (null != resMap.get("FAILREASON") && !"".equals(resMap.get("FAILREASON"))) {      throw new Exception((String) resMap.get("FAILREASON"));    }    Map dataMap = (Map) resMap.get("RESULTMAP");    BusinessProject proj = new BusinessProject();    proj.setId(Guid.genID());    proj.setNo((String) dataMap.get("PROJ_CODE"));    proj.setName((String) dataMap.get("PROJ_NAME"));    proj.setPurType((String) dataMap.get("PUR_TYPE"));    proj.setManager((String) dataMap.get("MANAGER"));    proj.setKbTime((String) dataMap.get("OPEN_BID_TIME"));    proj.setTbEndTime((String) dataMap.get("BID_END_TIME"));    proj.setPhone((String) dataMap.get("PHONE"));    proj.setEmail((String) dataMap.get("EMAIL"));    proj.setkBidAddr((String) dataMap.get("OPEN_BID_ADDRESS"));    proj.setPurCenter((String) dataMap.get("ZC_AGEY_NAME"));    proj.setPurCenterCode((String) dataMap.get("ZC_AGEY_CODE"));    proj.setWebServerIPAddr((String) dataMap.get("OUT_WEB_SERVER_IP_ADDRESS"));    proj.setEncodeDemand((String) dataMap.get("ENCODE_DEMAND"));    //获得版本信息，如：version:1.2.0@;@year:2011@;@month:05@;@date:28    VersionControler vc = new VersionControler();    proj.setSoftInfo(vc.getSoftConfigInfoStringAfterEncoded((String) dataMap.get("ZTB_FILE_ASKFOR_SOFTINFO")));    return proj;  }  private void loadPackagesInProj(BusinessProject bProj) throws Exception {    SmartTreeNode projNode = new SmartTreeNode();    this.rootTreeNode.add(projNode);    projNode.setNodeCode(bProj.getNo());    projNode.setNodeName(bProj.getName());    projNode.setNodeType(GV.NODE_TYPE_PROJECT);    projNode.setNodeDisplayName(bProj.getName() + "(" + bProj.getNo() + ")");    projNode.setNodeDirPath(bProj.getNo());    projNode.setUserObject(bProj);    projNode.setNodeSource(GV.NODE_SOURCE_FROM_PROJ);    SmartTreeNode packNode = null;    BusinessPack pack = null;    Map returnMap = serverProjectDao.getProjectPackList(bProj.getNo());    List<Map<String, Object>> mapList = (List<Map<String, Object>>) returnMap.get("RESULTMAPLIST");    List<BusinessPack> pList = convertResultMapListToPackList(mapList);    for (int i = 0; i < pList.size(); i++) {      pack = pList.get(i);      packNode = new SmartTreeNode();      projNode.add(packNode);      packNode.setNodeCode(pack.getNo());      packNode.setNodeName(pack.getName());      packNode.setNodeDisplayName(pack.getPackDesc() + "[" + pack.getName() + "]");      packNode.setNodeType(GV.NODE_TYPE_PACK);      packNode.setNodeDirPath(pack.getNo());      packNode.setUserObject(pack);      packNode.setNodeSource(GV.NODE_SOURCE_FROM_PROJ);    }  }  private List<BusinessPack> convertResultMapListToPackList(List<Map<String, Object>> data) {    List<BusinessPack> list = new ArrayList<BusinessPack>();    for (int i = 0; i < data.size(); i++) {      Map<String, Object> item = (Map<String, Object>) data.get(i);      BusinessPack bp = new BusinessPack();      bp.setNo((String) item.get("PACK_CODE"));      bp.setName((String) item.get("PACK_NAME"));      bp.setPackDesc((String) item.get("PACK_DESC"));      list.add(bp);    }    return list;  }  public Map<String, String> finishOtherBusiness(Map<String, String> map) throws Exception {    return serverProjectDao.finishOtherBusiness(map);  }  public boolean checkExistProject(List<String> checkedProCodes) {    if (this.businessProjects == null || this.businessProjects.getProList() == null || this.businessProjects.getProList().size() == 0) {      return false;    }    for (BusinessProject p : this.businessProjects.getProList()) {      if (checkedProCodes.contains(p.getNo())) {        return true;      }    }    return false;  }  public List<BusinessProject> getSignupBusinessProjectForTB(Map<String, String> paras) throws Exception {    Map<String, Object> result = serverProjectDao.readSignupBusinessProject(paras);    return converListMapToListObject(result);  }  @SuppressWarnings("unchecked")  private List<BusinessProject> converListMapToListObject(Map<String, Object> result) {    List<BusinessProject> list = new ArrayList<BusinessProject>();    List<Map<String, Object>> data = (List<Map<String, Object>>) result.get("RESULTMAPLIST");    for (int i = 0; i < data.size(); i++) {      Map<String, Object> tmp = data.get(i);      BusinessProject bp = new BusinessProject();      bp.setNo((String) tmp.get("PROJ_CODE"));      bp.setName((String) tmp.get("PROJ_NAME"));      List packList = (List) tmp.get("PACKLIST");      if (packList == null) {        return list;      }      for (int j = 0; j < packList.size(); j++) {        Map<String, String> pack = (Map<String, String>) packList.get(j);        ProjectBag pb = new ProjectBag();        pb.setNo(pack.get("pack_code"));        pb.setName(pack.get("pack_name"));        pb.setPackDesc(pack.get("pack_desc"));        bp.getPackList().add(pb);      }      list.add(bp);    }    return list;  }  public List<BusinessProject> getSignupBusinessProjectForEcbj(Map<String, String> paras) throws Exception {    Map<String, Object> result = serverProjectDao.readEcbjBusinessProject(paras);    return converListMapToListObject(result);  }  public List<ZcEbWaitingDecodeItem> getWaitingForDecodeProjects(Map<String, String> paras) throws Exception {    return serverProjectDao.readWatingForDecodeProjects(paras);  }  public Map<String, String> doUpdateDecodedRecord(Map paras) throws Exception {    return serverProjectDao.doUpdateDecodedRecord(paras);  }  public Map<String, String> doExecuteServerDecoded(Map paras) throws Exception {    return serverProjectDao.doExecuteServerDecoded(paras);  }  public Map<String, Object> toSearchZBFileByProjCode(String projCode) throws Exception {    return serverProjectDao.toSearchZBFileByProjCode(projCode);  }  public Map<String, String> getProjectsInfoByUserID(String userID, String url) throws Exception {    return serverProjectDao.getProjectInfoByUserID(userID, url);  }}
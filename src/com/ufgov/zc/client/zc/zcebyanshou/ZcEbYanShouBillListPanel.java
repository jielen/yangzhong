/** *  */package com.ufgov.zc.client.zc.zcebyanshou;import java.awt.Color;import java.awt.Container;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbYanShouBillToTableModelConverter;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.ui.AbstractDataDisplay;import com.ufgov.zc.client.component.ui.AbstractEditListBill;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SaveableSearchConditionArea;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.component.ui.conditionitem.SearchConditionUtil;import com.ufgov.zc.client.print.PrintSettingDialog;import com.ufgov.zc.client.util.BalanceUtil;import com.ufgov.zc.client.util.ListUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BaseException;import com.ufgov.zc.common.system.exception.DataAlreadyDeletedException;import com.ufgov.zc.common.system.exception.OtherException;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcEbYanShouBill;import com.ufgov.zc.common.zc.publish.IZcEbYanShouBillServiceDelegate;/** * @author fanpl * */public class ZcEbYanShouBillListPanel extends AbstractEditListBill implements ParentWindowAware {  private static final Logger logger = Logger.getLogger(ZcEbYanShouBillListPanel.class);  private ZcEbYanShouBillListPanel self = this;  private Window parentWindow;  private String compoId = "ZC_EB_YANSHOU";  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private ElementConditionDto elementConditionDto = new ElementConditionDto();  private IZcEbYanShouBillServiceDelegate zcEbYanShouBillServiceDelegate = (IZcEbYanShouBillServiceDelegate) ServiceFactory.create(  IZcEbYanShouBillServiceDelegate.class, "zcEbYanShouBillServiceDelegate");  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  public IZcEbYanShouBillServiceDelegate getZcEbYanShouBillServiceDelegate() {    return zcEbYanShouBillServiceDelegate;  }  public void setZcEbYanShouBillServiceDelegate(IZcEbYanShouBillServiceDelegate zcEbYanShouBillServiceDelegate) {    this.zcEbYanShouBillServiceDelegate = zcEbYanShouBillServiceDelegate;  }  private final class DataDisplay extends MultiDataDisplay {    private DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays, AbstractSearchConditionArea conditionArea,    boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, ZcSettingConstants.TAB_ID_ZC_EB_YANSHOU);      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "项目验收单", TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体",      Font.BOLD, 15), Color.BLUE));    }    @Override    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          @Override          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {              String tabStatus = d.getStatus();              JGroupableTable table = d.getTable();              MyTableModel model = (MyTableModel) table.getModel();              int row = table.getSelectedRow();              List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(model.getList(), table));              new ZcEbYanShouBillDialog(self, viewList, row, tabStatus);            }          }        });      }    }    @Override    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems, final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(compoId);      elementConditionDto.setExecutor(WorkEnv.getInstance().getCurrUserId());      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setStatus(tableDisplay.getStatus());      elementConditionDto.setMonth(BalanceUtil.getMonthIdBySysOption());      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        @Override        public void before() {          assert c != null;          installLoadingComponent(c);        }        @Override        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        @Override        public TableModel execute() throws Exception {          ZcEbYanShouBillToTableModelConverter mc = new ZcEbYanShouBillToTableModelConverter();          return mc.convertToTableModel(self.zcEbYanShouBillServiceDelegate.getEbYanShouBillList(elementConditionDto, requestMeta));        }        @Override        public void success(TableModel model) {          tableDisplay.setTableModel(model);          setButtonsVisiable();        }      });    }  }  static {    LangTransMeta.init("ZC%");  }  /**   * 构造函数   */  public ZcEbYanShouBillListPanel() {    UIUtilities.asyncInvoke(new DefaultInvokeHandler<List<SearchCondition>>() {      @Override      public List<SearchCondition> execute() throws Exception {        List<SearchCondition> needDisplaySearchConditonList = SearchConditionUtil.getNeedDisplaySearchConditonListJoinRole(WorkEnv.getInstance()        .getCurrUserId(), ZcSettingConstants.TAB_ID_ZC_EB_YANSHOU);        return needDisplaySearchConditonList;      }      @Override      public void success(List<SearchCondition> needDisplaySearchConditonList) {        List<TableDisplay> showingDisplays = SearchConditionUtil.getNeedDisplayTableDisplay(needDisplaySearchConditonList);        init(createDataDisplay(showingDisplays), null);//调用父类方法        revalidate();        repaint();      }    });    requestMeta.setCompoId(compoId);  }  private AbstractSearchConditionArea topSearchConditionArea;  private AbstractSearchConditionArea createTopConditionArea() {    Map defaultValueMap = new HashMap();    topSearchConditionArea = new SaveableSearchConditionArea(ZcSettingConstants.CONDITION_ID_TAB_ID_ZC_EB_YANSHOU, null, true, defaultValueMap, null);    return topSearchConditionArea;  }  private AbstractDataDisplay createDataDisplay(List<TableDisplay> showingDisplays) {    return new DataDisplay(SearchConditionUtil.getAllTableDisplayJoinRole(WorkEnv.getInstance().getCurrUserId(),    ZcSettingConstants.TAB_ID_ZC_EB_YANSHOU), showingDisplays, createTopConditionArea(), true);//true:显示收索条件区 false：不显示收索条件区  }  @Override  protected void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(deleteButton);    toolBar.add(sendButton);    //toolBar.add(isSendToNextButton);    toolBar.add(suggestPassButton);//填写意见审核通过    //toolBar.add(auditPassButton);    //toolBar.add(callbackButton);    //toolBar.add(unTreadButton);//退回    toolBar.add(traceButton);    //toolBar.add(this.auditFinalButton);    //    toolBar.add(printButton);    //    toolBar.add(printPreviewButton);    //    toolBar.add(printSettingButton);    //    toolBar.add(helpButton);    // 初始化按钮的action事件    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSend();      }    });    isSendToNextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSendNext();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAuditPass();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSuggestPass();      }    });    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doCallBack();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doUnTread();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doTrace();      }    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        //        doPrint();      }    });    printPreviewButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        //        doPrintPreview();      }    });    printSettingButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrintSetting();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });  }  public void refreshCurrentTabData() {    topSearchConditionArea.doSearch();  }  public List getCheckedList() {    List<ZcEbYanShouBill> beanList = new ArrayList<ZcEbYanShouBill>();    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    MyTableModel model = (MyTableModel) table.getModel();    //Modal的数据    List list = model.getList();    Integer[] checkedRows = table.getCheckedRows();    for (Integer checkedRow : checkedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      ZcEbYanShouBill bean = (ZcEbYanShouBill) list.get(accordDataRow);      beanList.add(bean);    }    return beanList;  }  public void doAdd() {    new ZcEbYanShouBillDialog(self, new ArrayList(), this.topDataDisplay.getActiveTableDisplay().getTable().getRowCount(), topDataDisplay    .getActiveTableDisplay().getStatus());  }  private void doDelete() {    List checkedList = getCheckedList();    if (checkedList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要删除的数据!", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int result = JOptionPane.showConfirmDialog(self, "是否要删除选中的数据?", "删除确认", JOptionPane.YES_NO_OPTION);    if (result != JOptionPane.YES_OPTION) {      return;    }    StringBuffer errorInfo = new StringBuffer("");    boolean success = true;    requestMeta.setFuncId(deleteButton.getFuncId());    try {      zcEbYanShouBillServiceDelegate.deleteZcEbYanShouBillListFN(checkedList, requestMeta);    } catch (DataAlreadyDeletedException ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getStackTraceMessage(), ex);      success = false;    } catch (BaseException ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getStackTraceMessage(), ex);      success = false;    } catch (OtherException ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getStackTraceMessage(), ex);      success = false;    } catch (Exception ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getMessage(), ex);      success = false;    }    if (success) {      JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "删除错误!\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doSend() {    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    String errorInfo = "";    requestMeta.setFuncId(this.sendButton.getFuncId());    try {      for (int i = 0; i < beanList.size(); i++) {        ZcEbYanShouBill bill = (ZcEbYanShouBill) ObjectUtil.deepCopy(beanList.get(i));        bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());        this.getZcEbYanShouBillServiceDelegate().newCommitFN(bill, requestMeta);      }    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    }  }  private void doSendNext() {    List beanList = getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    //    int sel = JOptionPane.showConfirmDialog(this, "是否送主任审核？");    //    if (sel == JOptionPane.OK_OPTION) {    //      executeAudit(beanList, ZcSettingConstants.IS_GOON_AUDIT_YES);    //    } else {    //      executeAudit(beanList, ZcSettingConstants.IS_GOON_AUDIT_NO);    //    }    executeAudit(beanList, ZcSettingConstants.IS_GOON_AUDIT_YES);  }  private void executeAudit(List beanList, int isGoonAudit) {    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    String errorInfo = "";    try {      for (int i = 0; i < beanList.size(); i++) {        ZcEbYanShouBill bill = (ZcEbYanShouBill) beanList.get(i);        bill.setIsGoonAudit(isGoonAudit);        bill.setComment(commentDialog.getComment());        bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      }      requestMeta.setFuncId(this.isSendToNextButton.getFuncId());      for (int i = 0; i < beanList.size(); i++) {        ZcEbYanShouBill bill = (ZcEbYanShouBill) ObjectUtil.deepCopy(beanList.get(i));        bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());        this.zcEbYanShouBillServiceDelegate.saveZcEbYanShouBillFN(bill, requestMeta);        this.zcEbYanShouBillServiceDelegate.auditFN(bill, requestMeta);      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doAuditPass() {    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    executeAudit(beanList, ZcSettingConstants.IS_GOON_AUDIT_NO);  }  private void doSuggestPass() {    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    String errorInfo = "";    requestMeta.setFuncId(this.suggestPassButton.getFuncId());    try {      for (int i = 0; i < beanList.size(); i++) {        ZcEbYanShouBill bill = (ZcEbYanShouBill) ObjectUtil.deepCopy(beanList.get(i));        bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());        String ysdwfz = AsOptionMeta.getOptVal(ZcElementConstants.OPT_ZC_YSDWCG_ROLE);        String suppplier = AsOptionMeta.getOptVal("OPT_PR_GYS_ROLE_ID");        if (WorkEnv.getInstance().containRole(ysdwfz)) {          //预算单位负责人送审到采购中心负责人          zcEbYanShouBillServiceDelegate.CaiGouCommitFN(bill, requestMeta);        } else if (WorkEnv.getInstance().containRole(suppplier)) {          zcEbYanShouBillServiceDelegate.providerAuditFN(bill, requestMeta);        } else {          zcEbYanShouBillServiceDelegate.auditFN(bill, requestMeta);        }      }    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    }  }  private void doTrace() {    ZcUtil.showTraceDialog(getCheckedList(), this);  }  private void doCallBack() {    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    String errorInfo = "";    try {      for (int i = 0; i < beanList.size(); i++) {        requestMeta.setFuncId(this.callbackButton.getFuncId());        ZcEbYanShouBill bill = (ZcEbYanShouBill) beanList.get(i);        bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());        this.zcEbYanShouBillServiceDelegate.callbackFN(bill, requestMeta);      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doUnTread() {    List beanList = this.getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    String errorInfo = "";    try {      for (int i = 0; i < beanList.size(); i++) {        requestMeta.setFuncId(unTreadButton.getFuncId());        ZcEbYanShouBill bill = (ZcEbYanShouBill) beanList.get(i);        bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());        bill.setComment(commentDialog.getComment());        this.zcEbYanShouBillServiceDelegate.untreadFN(bill, requestMeta);      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrintSetting() {    requestMeta.setFuncId(this.printSettingButton.getFuncId());    requestMeta.setPageType(this.compoId + "_L");    new PrintSettingDialog(requestMeta);  }  public BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(compoId);  public BillElementMeta getBillElementMeta() {    return billElementMeta;  }  public static void main(String[] args) throws Exception {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        //        UIManager.getDefaults().put("SplitPaneUI", BigButtonSplitPaneUI.class.getName());        ZcEbYanShouBillListPanel bill = new ZcEbYanShouBillListPanel();        JFrame frame = new JFrame("frame");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }  public void refreshCurrentTabData(List dataList) {    ZcEbYanShouBillToTableModelConverter mc = new ZcEbYanShouBillToTableModelConverter();    topDataDisplay.getActiveTableDisplay().getTable().setModel(mc.convertToTableModel(dataList));  }}
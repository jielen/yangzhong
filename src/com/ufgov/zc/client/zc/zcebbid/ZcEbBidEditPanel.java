/** * ZcEbBidupEditPanel.java * com.ufgov.gk.client.zc.zcebbid * Administrator * 2010-5-23 */package com.ufgov.zc.client.zc.zcebbid;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.ZcEbSignupToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.SelectFileFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.activeztb.TbDocService;import com.ufgov.zc.client.zc.zcebsignup.ZcEbSignupEditPanel;import com.ufgov.zc.client.zc.ztb.model.ProjectBag;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BusinessException;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbSignup;import com.ufgov.zc.common.zc.model.ZcEbSignupPackDetail;import com.ufgov.zc.common.zc.publish.IZcEbSignupServiceDelegate;/** * @author Administrator * */public class ZcEbBidEditPanel extends AbstractMainSubEditPanel {  private static final Logger logger = Logger.getLogger(ZcEbSignupEditPanel.class);  private IZcEbSignupServiceDelegate zcEbSignupServiceDelegate = (IZcEbSignupServiceDelegate) ServiceFactory.create(IZcEbSignupServiceDelegate.class,  "zcEbSignupServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_BID";  private FuncButton saveButton = new SaveButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private final ListCursor<ZcEbSignup> listCursor;  private ZcEbSignup oldSignup;  private String tabStatus;  private ZcEbBidListPanel listPanel;  private JTablePanel tablePanel = new JTablePanel();  private ZcEbBidEditPanel self = this;  private GkBaseDialog parent;  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  ElementConditionDto packDto = new ElementConditionDto();  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId);  SelectFileFieldEditor upFile;  public ZcEbBidEditPanel(ZcEbBidDialog parent, ListCursor<ZcEbSignup> listCursor, String tabStatus, ZcEbBidListPanel listPanel) {    // TCJLODO Auto-generated constructor stub    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("投标管理"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();    setButtonStatus();    updateFieldEditorsEditable();  }  /**   * 设置工具条上按钮的可用性   *    * Administrator   * 2010-5-15   */  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.exitButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.helpButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbSignup obj = (this.listCursor.getCurrentObject());    String billStatus = obj.getIsSubmitBidDoc();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, obj.getProcessInstId());  }  private void refreshData() {    // TCJLODO Auto-generated method stub    ZcEbSignup signup = listCursor.getCurrentObject();    this.setEditingObject(signup);    List detailList = new ArrayList();    if (signup != null && (signup.getSignupPacks() == null || signup.getSignupPacks().size() == 0)) {        ElementConditionDto dto=new ElementConditionDto();        dto.setZcText1(signup.getSignupId());      detailList = zcEbSignupServiceDelegate.getZcEbSignupPackDetail(dto, requestMeta);      signup.setSignupPacks(detailList);    }    refreshSubTableData(signup.getSignupPacks());    setOldObject();  }  private void refreshSubTableData(List<ZcEbPack> deList) {    ZcEbSignupToTableModelConverter mc = new ZcEbSignupToTableModelConverter();    tablePanel.setTableModel(mc.convertSignupPackDeToTableModel2(deList));    setTableProperty(tablePanel.getTable());  }  /* (non-Javadoc)   * @see com.ufgov.gk.client.component.zc.AbstractMainSubEditPanel#updateFieldEditorsEditable()   */  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null && (fd.getFieldName().equals("bidDocFile"))) {          fd.setEnabled(true);        } else {          fd.setEnabled(false);        }      }      this.tablePanel.getTable().setEnabled(true);    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      this.tablePanel.getTable().setEnabled(false);    }  }  private void setTableProperty(JTable table) {    ZcUtil.translateColName(table, "ZC_EB_");    SwingUtil.setTableCellEditor(table, "IS_PAY_GUARANTEE", new AsValComboBoxCellEditor("VS_ZC_EB_GUARANTEE_STATUS"));    SwingUtil.setTableCellRenderer(table, "IS_PAY_GUARANTEE", new AsValCellRenderer("VS_ZC_EB_GUARANTEE_STATUS"));    SwingUtil.setTableCellEditor(table, "IS_SUBMIT_BID_DOC", new AsValComboBoxCellEditor("VS_Y/N"));    SwingUtil.setTableCellRenderer(table, "IS_SUBMIT_BID_DOC", new AsValCellRenderer("VS_Y/N"));  }  private void setOldObject() {    oldSignup = (ZcEbSignup) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  /* (non-Javadoc)   * @see com.ufgov.gk.client.component.zc.AbstractMainSubEditPanel#createFieldEditors()   */  @Override  public List<AbstractFieldEditor> createFieldEditors() {    // TCJLODO Auto-generated method stub    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    TextFieldEditor editor0 = new TextFieldEditor("采购项目", "projCode");    editorList.add(editor0);    TextFieldEditor projNameEditor = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJ_NAME), "projName");    editorList.add(projNameEditor);    TextFieldEditor providerCodeEditor = new TextFieldEditor("投标人", "providerName");    editorList.add(providerCodeEditor);    TextFieldEditor editor3 = new TextFieldEditor("联系人", "linkMan");    editorList.add(editor3);    AsValFieldEditor editor11 = new AsValFieldEditor("是否已投标", "isSubmitBidDoc", "ZC_VS_YN");    editorList.add(editor11);    AsValFieldEditor editor9 = new AsValFieldEditor("投标方式", "submitBidDocType", "ZC_VS_SUBMITDOC_TYPE");    editorList.add(editor9);    this.upFile = new SelectFileFieldEditor("投标文件", "bidDocFile", "bidDocFileId", true, true, false, false);    upFile.addValueChangeListener(new ValueChangeListener() {      public void valueChanged(ValueChangeEvent e) {        setBidContent();      }    });    editorList.add(upFile);    return editorList;  }  private void setBidContent() {    if (this.upFile == null)      return;    AsFile bidDoc = this.upFile.getFileUploader().getFile();    if (bidDoc == null)      return;    TbDocService tbs = null;    try {      tbs = new TbDocService(bidDoc.getFileId());      ZcEbSignup sg = listCursor.getCurrentObject();      if (!sg.getProjCode().equals(tbs.getProject().getNo())) {        JOptionPane.showMessageDialog(self, "投标文件不正确，请确认是当前项目的投标文件", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      if (setPackStatus(tbs, bidDoc)) {        sg.setIsSubmitBidDoc("Y");        sg.setSubmitBidDocType("1");        sg.setBidDocFile(bidDoc.getFileName());        sg.setBidDocFileId(bidDoc.getFileId());        setEditingObject(sg);        this.listCursor.setCurrentObject(sg);      }    } catch (BusinessException e) {      // TCJLODO Auto-generated catch block      e.printStackTrace();      JOptionPane.showMessageDialog(self, e.getMessage(), "提示", JOptionPane.INFORMATION_MESSAGE);    } finally {      if (tbs != null)        tbs.clear();    }  }  private boolean setPackStatus(TbDocService tbs, AsFile bidDoc) {    // TCJLODO Auto-generated method stub    ZcEbSignup sg = listCursor.getCurrentObject();    List<ZcEbSignupPackDetail> packs = sg.getSignupPacks();    if (packs == null || packs.size() == 0)      return true;    for (ZcEbSignupPackDetail zcEbPack : packs) {      ProjectBag pb = tbs.getPack(zcEbPack.getPackCode());      if (pb == null)        continue;      if (zcEbPack.getPackCode().equals(pb.getNo())) {        //在上传标书时，不能写投标报价（为了防止数据篡改），在开标时写投标报价（在开标时加CA验证）        //        BigDecimal bidSum = tbs.getTbSum(zcEbPack.getPackCode());        //        if (bidSum != null)        //        zcEbPack.setBidSum(bidSum.toPlainString());        zcEbPack.setIsSubmitBidDoc("Y");        zcEbPack.setBidDocId(bidDoc.getFileId());        zcEbPack.setBidDocName(bidDoc.getFileName());        zcEbPack.setSubmitBidDocType("1");      }    }    JTable table = tablePanel.getTable();    BeanTableModel tm = (BeanTableModel) table.getModel();    tm.fireTableDataChanged();    return true;  }  /* (non-Javadoc)   * @see com.ufgov.gk.client.component.zc.AbstractMainSubEditPanel#createSubBillPanel()   */  @Override  public JComponent createSubBillPanel() {    JTabbedPane tabPane = new JTabbedPane();    tablePanel.init();    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_table");    tablePanel.getTable().setShowCheckedColumn(false);    tablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 0));    tabPane.addTab("报名标段", tablePanel);    return tabPane;  }  private boolean checkProj() {    // TCJLODO Auto-generated method stub    ZcEbSignup s = listCursor.getCurrentObject();    if (s.getProjCode() == null || s.getProjCode().trim().equals(""))      return false;    return true;  }  /* (non-Javadoc)   * @see com.ufgov.gk.client.component.zc.AbstractMainSubEditPanel#initToolBar(com.ufgov.gk.client.component.JFuncToolBar)   */  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        // TCJLODO Auto-generated method stub        doSave();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  private void doPrevious() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldSignup);      }    }    listCursor.previous();    refreshData();    setButtonStatus();  }  private void doNext() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldSignup);      }    }    listCursor.next();    refreshData();    setButtonStatus();  }  public void doExit() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    this.parent.dispose();  }  public boolean doSave() {    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    ZcEbSignup signup = this.listCursor.getCurrentObject();    //    if (!validateData(signup, this.compoId))    //      return false;    if (!checkBeforeSave())      return false;    //    if(this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)){    //      this.zcEbSignupServiceDelegate.updateZcEbSignup(signup,this.requestMeta);    //    }else if(this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)){    //      this.zcEbSignupServiceDelegate.insertZcEbSignup(signup,this.requestMeta);    //    }    boolean success = true;    String errorInfo = "";    try {      if ((signup.getSubmitBidDocType() == null || signup.getSubmitBidDocType().trim().length() == 0) && signup.getBidDocFileId() != null      && signup.getBidDocFileId().trim().length() > 0) {        signup.setSubmitBidDocType("1");      }      signup = this.zcEbSignupServiceDelegate.saveFN(signup, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(signup);      this.oldSignup = (ZcEbSignup) ObjectUtil.deepCopy(signup);      this.listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      setButtonStatus();      setOldObject();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  private boolean checkBeforeSave() {    List notNullBillElementList = this.billElementMeta.getNotNullBillElement();    ZcEbSignup signup = this.listCursor.getCurrentObject();    StringBuilder errorInfo = new StringBuilder();    String validateInfo = ZcUtil.validateBillElementNull(signup, notNullBillElementList);    if (validateInfo.length() != 0) {      errorInfo.append("").append(validateInfo.toString()).append("\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  public void doHelp() {    setButtonStatus();  }  private void stopTableEditing() {    JPageableFixedTable table = this.tablePanel.getTable();    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldSignup).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }}
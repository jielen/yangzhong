/** * @(#) project: ZFCG * @(#) file: zbCommonAction.java * * Copyright 2011 UFGOV, Inc. All rights reserved. * UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms. * */package com.ufgov.zc.client.zc.zbfile;import com.ufgov.zc.client.zc.ztb.JobThreads;import com.ufgov.zc.client.zc.ztb.activex.WordPane;import com.ufgov.zc.client.zc.ztb.component.AddChildNodePanel;import com.ufgov.zc.client.zc.ztb.component.CommonAction;import com.ufgov.zc.client.zc.ztb.component.MainPanel;import com.ufgov.zc.client.zc.ztb.component.SingleSeletionTree;import com.ufgov.zc.client.zc.ztb.model.SmartTreeNode;import com.ufgov.zc.client.zc.ztb.service.DeleteTbFileService;import com.ufgov.zc.client.zc.ztb.service.FileExportService;import com.ufgov.zc.client.zc.ztb.table.common.PubFunc;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.File;import java.lang.reflect.Method;/** * @ClassName: zbCommonAction * @Description: 招标文件右键功能实现类 * @date: 2011-3-27 下午03:18:31 * @version: V1.0 * @since: 1.0 * @author: fanpl * @modify: */public class zbCommonAction extends CommonAction implements ActionListener {  private String fileDownLoadPath = "";  private String projCode;  private static JProgressBar progressBar = null;  public zbCommonAction(String actionId, String actionName, String fileDownLoadPath, String projCode) {    super(actionId, actionName);    this.fileDownLoadPath = fileDownLoadPath;    this.projCode = projCode;  }  @Override  public void actionPerformed(ActionEvent e) {    try {      Method methods = getClass().getDeclaredMethod(actionId, new Class[] {});      methods.invoke(this, new Object[] {});    } catch (Exception ee) {      GV.showMessageDialog(null, ee.getCause().getMessage());      ee.printStackTrace();    }  }  /**   * 添加新的子节点   */  @SuppressWarnings("unused")  private void addNode() {    SingleSeletionTree ssTree = (SingleSeletionTree) component;    SmartTreeNode currNode = ssTree.getCurrentNode();    MainPanel mainPanel = (MainPanel) ssTree.getParent().getParent().getParent();    JDialog dialog = new JDialog((JFrame) ssTree.getRootPane().getParent(), GV.ADD_BAG_DETAILS, true);    dialog.setLayout(new BorderLayout());    dialog.add(new AddChildNodePanel(currNode, mainPanel), BorderLayout.NORTH);    dialog.setPreferredSize(new Dimension(320, 150));    dialog.setResizable(true);    PubFunc.setShowInMiddle(dialog);    dialog.pack();    dialog.setVisible(true);    dialog.toFront();  }  @SuppressWarnings("unused")  private void deleteNode() throws Exception {    String delFileName = "";    SingleSeletionTree ssTree = (SingleSeletionTree) component;    SmartTreeNode currNode = ssTree.getCurrentNode();    String content = currNode.getNodeDisplayName();    String meg = GV.getSpecialMsg("deleteNode.confirm", currNode);    if (GV.showConfirmDialog(ssTree.getRootPane(), meg, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {      String tigMeg = GV.getOperateMsg("deleteNode.success", content);      MainPanel mainPanel = (MainPanel) ssTree.getParent().getParent().getParent();      boolean opened = (new DeleteTbFileService()).isCurrentNodeOrChildNodeOpened(mainPanel.getOpenedPackNode(), mainPanel.getOpenedLeavesNode(),        currNode);      delFileName = fileDownLoadPath + currNode.getNodesFullPath();      SmartTreeNode parentNode = removeCurrNodeFromParent(currNode);      String fullPath = fileDownLoadPath + projCode + File.separator + projCode + ".xml";      if (parentNode != null) {        parentNode = (SmartTreeNode) parentNode.getRoot();      } else {        //删除完所有的子节点后，还应该保留【项目列表】根节点        parentNode = new SmartTreeNode();      }      boolean isSuccess = PubFunction.checkAndCreateDirOrFile(fullPath, "F", true, true, parentNode);      if (isSuccess) {        String nodeType = currNode.getNodeType();        //这段代码应该修改一下，使得自动根据节点的类型进行文件级联删除        if (GV.NODE_TYPE_TABLE.equals(nodeType) || GV.NODE_TYPE_TBYLB.equals(nodeType) || GV.NODE_TYPE_DOC.equals(nodeType)          || GV.NODE_TYPE_ECBJB.equals(nodeType)) {          if (GV.NODE_TYPE_DOC.equals(nodeType)) {            delFileName += GV.SUFFIX_DOC;            PubFunction.deleteFile(delFileName);          } else if (GV.NODE_TYPE_TABLE.equals(nodeType) || GV.NODE_TYPE_TBYLB.equals(nodeType) || GV.NODE_TYPE_ECBJB.equals(nodeType)) {            PubFunction.deleteFile(delFileName + GV.SUFFIX_TABLE);          }        } else {          PubFunction.deleteFile(delFileName);        }        mainPanel.refreshLeftFilesTreePanel();        if (opened) {          mainPanel.closePackDetailsNode();          mainPanel.refreshRightPanel();        }      } else {        tigMeg = GV.getOperateMsg("deleteNode.fail", content);      }      GV.showMessageDialog(ssTree.getRootPane(), tigMeg);    }  }  private SmartTreeNode removeCurrNodeFromParent(SmartTreeNode currNode) {    SmartTreeNode parentNode = (SmartTreeNode) currNode.getParent();    if (parentNode == null) {      return null;    }    for (int i = 0; i < parentNode.getChildCount(); i++) {      if (parentNode.getChildAt(i).equals(currNode)) {        parentNode.remove(i);        return parentNode;      }    }    return parentNode;  }  @SuppressWarnings("unused")  private void exportProject() {    JFileChooser fileChooser = new JFileChooser();    fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);    fileChooser.setAcceptAllFileFilterUsed(true);    int result = fileChooser.showSaveDialog(null);    String filePath;    if (result == JFileChooser.APPROVE_OPTION) {      filePath = fileChooser.getSelectedFile().getAbsolutePath();      SingleSeletionTree ssTree = (SingleSeletionTree) component;      exportProjectThread(ssTree, fileDownLoadPath, filePath, this);    }  }  /**   * /**   * <p/>   * 从叶节点往父节点遍历查找该叶节点所属的标段节点   *   * @param currNode   * @return   */  public static SmartTreeNode getPackNode(SmartTreeNode currNode) {    if (GV.NODE_TYPE_ROOT.equals(currNode.getNodeType()) || GV.NODE_TYPE_PROJECT.equals(currNode.getNodeType())) {      return null;    } else if (GV.NODE_TYPE_PACK.equals(currNode.getNodeType())) {      return currNode;    } else {      return getPackNode((SmartTreeNode) currNode.getParent());    }  }  /**   * 给当前word文档加锁   */  @SuppressWarnings("unused")  private void lockWord() {    MainPanel mainPanel = ((MainPanel) component);    WordPane wp = mainPanel.getWordPane();    SmartTreeNode openedNode = mainPanel.getOpenedLeavesNode();    if (openedNode != null && !GV.NODE_TYPE_DOC.equals(openedNode.getNodeType())) {      GV.showMessageDialog(null, "当前文档无需保护...");      return;    }    if (wp == null) {      GV.showMessageDialog(null, "请先打开需要保护的文档.");      return;    }    if (openedNode.isLocked()) {      GV.showMessageDialog(null, "文档已经处于保护状态，无需再保护...");      return;    }    JPasswordField pwd = new JPasswordField();    Object[] message = { "请输入密码:", pwd };    int res = JOptionPane.showConfirmDialog(null, message, "", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);    if (res == JOptionPane.CANCEL_OPTION) {      return;    } else {      boolean flag = wp.protectDoc(new String(pwd.getPassword()));      updateNodeAttribute("protectFile", true, flag);    }  }  /**   * 给当前word文档加锁   */  @SuppressWarnings("unused")  private void unLockWord() {    MainPanel mainPanel = ((MainPanel) component);    WordPane wp = mainPanel.getWordPane();    SmartTreeNode openedNode = mainPanel.getOpenedLeavesNode();    if (openedNode != null && !GV.NODE_TYPE_DOC.equals(openedNode.getNodeType())) {      GV.showMessageDialog(null, "当前文档无需解除保护...");      return;    }    if (wp == null) {      GV.showMessageDialog(null, "请先打开需要解除保护的文档.");      return;    }    if (!openedNode.isLocked()) {      GV.showMessageDialog(null, "文档已经处于未保护状态，无需解除保护...");      return;    }    JPasswordField pwd = new JPasswordField();    Object[] message = { "请输入密码:", pwd };    int res = JOptionPane.showConfirmDialog(null, message, "", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);    if (res == JOptionPane.CANCEL_OPTION) {      return;    } else {      boolean flag = wp.unProtectDoc(new String(pwd.getPassword()));      updateNodeAttribute("unprotectFile", false, flag);    }  }  /**   * 修改被修改节点的图标为加锁状态图标   */  private void updateNodeAttribute(String opt, boolean flag, boolean wordFlag) {    if (wordFlag == false) {      return;    }    MainPanel mainPanel = ((MainPanel) component);    SmartTreeNode openedNode = mainPanel.getOpenedLeavesNode();    openedNode.setLocked(flag);    String disName = openedNode.getNodeDisplayName();    String fullPath = GV.USER_DIR + File.separator + GV.PROJECTS_CONFIG_XML;    boolean isSuccess = PubFunction.checkAndCreateDirOrFile(fullPath, "F", true, true, openedNode.getRoot());    if (isSuccess) {      try {        mainPanel.refreshLeftFilesTreePanel();        JOptionPane.showMessageDialog(null, GV.getOperateMsg(opt + ".success", disName));      } catch (Exception e) {        e.printStackTrace();        JOptionPane.showMessageDialog(null, GV.getOperateMsg(opt + ".refreshfail", disName));      }    } else if (wordFlag) {      JOptionPane.showMessageDialog(null, GV.getOperateMsg(opt + ".fail", disName));    }  }  public static void exportProjectThread(final SingleSeletionTree ssTree, final String source, final String destination, final zbCommonAction action) {    final JDialog progressDialog = new JDialog();    progressDialog.add(getProgressBar(0));    progressDialog.setSize(new Dimension(500, 20));    progressDialog.setLocation(new Point(300, 700));    progressDialog.setUndecorated(true);    progressDialog.setAlwaysOnTop(true);    progressDialog.setVisible(true);    Thread worker = new Thread(new Runnable() {      public void run() {        boolean rlt = false;        String expInfo = "";        try {          String ps = GV.getFileOperatorCN(GV.PROGRESS_STATUS_EXPORT_READY);          JobThreads.publishProgressMsg(ps);          //把招标文件导出成ztb文件          String ztbPath = (new FileExportService()).exportProject(ssTree.getCurrentNode(), source, destination, true);          ps = GV.getFileOperatorCN(GV.PROGRESS_STATUS_UPLOAD_READY);          JobThreads.publishProgressMsg(ps);          ps = GV.getFileOperatorCN(GV.PROGRESS_STATUS_UPLOAD_OK);          JobThreads.publishProgressMsg(ps);          rlt = true;        } catch (Exception e) {          rlt = false;          expInfo = e.getMessage();          e.printStackTrace();        }        String tigMeg;        if (rlt) {          tigMeg = GV.getOperateMsg("uploadProject.success", null);        } else {          tigMeg = GV.getOperateMsg("uploadProject.failure", null);        }        GV.showMessageDialog(ssTree.getRootPane(), tigMeg + expInfo);        progressDialog.dispose();      }    });    worker.start();  }  private static JProgressBar getProgressBar(int len) {    if (len == 0) {      len = 100;    }    if (progressBar == null) {      progressBar = new JProgressBar(0, len);      progressBar.setStringPainted(true);      progressBar.setBounds(new Rectangle(101, 305, 420, 30));    }    return progressBar;  }}
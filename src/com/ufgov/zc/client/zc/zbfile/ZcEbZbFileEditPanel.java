/**   * @(#) project: ZFCG* @(#) file: ZcEbZbFileEditPanel.java* * Copyright 2011 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.zbfile;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.Date;import java.util.List;import java.util.Timer;import java.util.TimerTask;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.AgreeButton;import com.ufgov.zc.client.component.button.AuditFinalPassButton;import com.ufgov.zc.client.component.button.AuditPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DisagreeButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.IsSendToNextButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.PrintPreviewButton;import com.ufgov.zc.client.component.button.PrintSettingButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SendToProcurementUnitButton;import com.ufgov.zc.client.component.button.SendToXieBanButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.button.UpdateZbFileButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.options.ZcEbOptionsEditTabPanel;import com.ufgov.zc.client.zc.zcebsignup.ZcEbSignupEditPanel;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcBaseBill;import com.ufgov.zc.common.zc.model.ZcEbProjZbFile;import com.ufgov.zc.common.zc.publish.IZcEbZbFileServiceDelegate;/*** @ClassName: ZcEbZbFileEditPanel* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2011-3-17 下午03:20:15* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbZbFileEditPanel extends AbstractMainSubEditPanel {  private static final Logger logger = Logger.getLogger(ZcEbSignupEditPanel.class);  private IZcEbZbFileServiceDelegate zcEbZbFileServiceDelegate = (IZcEbZbFileServiceDelegate) ServiceFactory  .create(IZcEbZbFileServiceDelegate.class, "zcEbZbFileServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_PROJ_ZBFILE";  public FuncButton previousButton = new PreviousButton();  public FuncButton saveButton = new SaveButton();  public FuncButton updateZbFileButton = new UpdateZbFileButton();  public FuncButton editButton = new EditButton();  public FuncButton nextButton = new NextButton();  public FuncButton exitButton = new ExitButton();  public FuncButton helpButton = new HelpButton();  // 工作流送审  public FuncButton sendButton = new SendButton();  //是否送主任审核  private FuncButton isSendToNextButton = new IsSendToNextButton();  // 工作流收回  public FuncButton callbackButton = new CallbackButton();  // 工作流填写意见审核通过  public FuncButton suggestPassButton = new SuggestAuditPassButton();  public FuncButton auditFinalPassButton = new AuditFinalPassButton();  // 工作流审核通过  public FuncButton auditPassButton = new AuditPassButton();  // 工作流销审  public FuncButton unAuditButton = new UnauditButton();  // 工作流退回  public FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  public FuncButton traceButton = new TraceButton();  //送采购单位确认  private FuncButton sendToProcurementUnitButton = new SendToProcurementUnitButton();  //同意  private FuncButton agreeButton = new AgreeButton();  //不同意  private FuncButton disagreeButton = new DisagreeButton();  //送协办人审核  private FuncButton sendToXieBanButton = new SendToXieBanButton();  private PrintButton printButton = new PrintButton();  private PrintPreviewButton printPreviewButton = new PrintPreviewButton();  private PrintSettingButton printSettingButton = new PrintSettingButton();  private final ListCursor<ZcEbProjZbFile> listCursor;  private ZcEbProjZbFile oldZcEbProjZbFile;  private ZcEbZbFilePanel zbFilePanel;  private JTabbedPane tabPane;  private String tabStatus;  private ZcEbZbFileListPanel listPanel;  private ZcEbZbFileEditPanel self = this;  private GkBaseDialog parent;  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  ElementConditionDto dto = new ElementConditionDto();  Boolean isVisible = false;  //征求意见  private ZcEbOptionsEditTabPanel editPanel;  public ZcEbZbFileEditPanel(ZcEbZbFileDialog parent, ListCursor<ZcEbProjZbFile> listCursor,  String tabStatus, ZcEbZbFileListPanel listPanel) {    // TODO Auto-generated constructor stub    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),    LangTransMeta.translate("招标文件管理"), TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();    getSession();    setButtonStatus();    updateFieldEditorsEditable();    if (sendToProcurementUnitButton.isVisible()) {      setIsVisible(true);    }  }  public Boolean getIsVisible() {    return isVisible;  }  public void setIsVisible(Boolean isVisible) {    this.isVisible = isVisible;  }  /**   * 设置工具条上按钮的可用性   *    * Administrator   * 2010-5-15   */  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      btnStatusList.add(bs);      bs.setButton(this.isSendToNextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      btnStatusList.add(bs);      bs.setButton(this.suggestPassButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      btnStatusList.add(bs);      bs.setButton(this.callbackButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      btnStatusList.add(bs);      bs.setButton(this.unAuditButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      btnStatusList.add(bs);      bs.setButton(this.unTreadButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.exitButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.helpButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.traceButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbProjZbFile obj = this.listCursor.getCurrentObject();    String billStatus = obj.getStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, obj    .getProcessInstId());  }  private void refreshData() {    ZcEbProjZbFile zbFile = listCursor.getCurrentObject();    setEditingObject(zbFile);    //显示招标文件    try {      zbFilePanel = new ZcEbZbFilePanel(zbFile);    } catch (Exception e) {      JOptionPane.showMessageDialog(this, "下载招标文件失败！\n" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);      // TODO Auto-generated catch block      e.printStackTrace();    }    tabPane.removeAll();    tabPane.addTab("招标文件", zbFilePanel);    setButtonStatus(zbFile, requestMeta, listCursor);    Long processInstId = zbFile.getProcessInstId();    if (processInstId == null || processInstId.longValue() < 0) {      sendToProcurementUnitButton.setVisible(false);      sendToXieBanButton.setVisible(false);    }  }  private void setOldObject() {    oldZcEbProjZbFile = (ZcEbProjZbFile) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  /* (non-Javadoc)   * @see com.ufgov.gk.client.component.zc.AbstractMainSubEditPanel#createFieldEditors()   */  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    TextFieldEditor editor0 = new TextFieldEditor("项目编号", "projCode");    editor0.setEnabled(false);    editorList.add(editor0);    TextFieldEditor projNameEditor = new TextFieldEditor("项目名称", "projName");    projNameEditor.setEnabled(false);    editorList.add(projNameEditor);    AsValFieldEditor editor9 = new AsValFieldEditor("审核状态", "status", "ZC_ZB_FILE_STATUS");    editor9.setEnabled(false);    editorList.add(editor9);    return editorList;  }  /* (non-Javadoc)   * @see com.ufgov.gk.client.component.zc.AbstractMainSubEditPanel#createSubBillPanel()   */  @Override  public JComponent createSubBillPanel() {    tabPane = new JTabbedPane();    return tabPane;  }  /* (non-Javadoc)   * @see com.ufgov.gk.client.component.zc.AbstractMainSubEditPanel#initToolBar(com.ufgov.gk.client.component.JFuncToolBar)   */  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    //    toolBar.add(saveButton);    toolBar.add(updateZbFileButton);    toolBar.add(sendButton);    toolBar.add(isSendToNextButton);    toolBar.add(suggestPassButton);    toolBar.add(auditPassButton);    toolBar.add(sendToProcurementUnitButton);    toolBar.add(auditFinalPassButton);    toolBar.add(agreeButton);    toolBar.add(disagreeButton);    toolBar.add(sendToXieBanButton);    toolBar.add(callbackButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(traceButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    //    toolBar.add(printButton);    //    toolBar.add(printPreviewButton);    //    toolBar.add(printSettingButton);    toolBar.add(exitButton);    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 保存        doSave();      }    });    updateZbFileButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        updateZbFile();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送审        doSend();      }    });    isSendToNextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送审        doSendNext();      }    });    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 收回        doCallback();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核        doSuggestPass();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 审核        doAuditPass();      }    });    sendToProcurementUnitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送采购单位确认        doSendToProcurementUnit();      }    });    agreeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 同意        doAgree();      }    });    disagreeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 不同意        doDisagree();      }    });    sendToXieBanButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送协办人        doSendToXieBan();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 销审        doUnaudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doUntread();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 流程跟踪        doTrace();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 上一页        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 下一页        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退出        doExit();      }    });    auditFinalPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 终审        doAuditFinalPass();      }    });  }  /**   * 同意   */  private void doAgree() {    ZcEbProjZbFile zcEbProjZbFile = (ZcEbProjZbFile) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());    requestMeta.setFuncId(this.agreeButton.getFuncId());    Integer auditFlag = zcEbProjZbFile.getIsGoonAudit();    auditFlag = ZcUtil.getAuditFlagValue(auditFlag, 0, requestMeta);    executeAudit(zcEbProjZbFile, auditFlag, null);  }  /**   * 不同意   */  private void doDisagree() {    ZcEbProjZbFile zcEbProjZbFile = (ZcEbProjZbFile) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());    requestMeta.setFuncId(this.disagreeButton.getFuncId());    Integer auditFlag = zcEbProjZbFile.getIsGoonAudit();    auditFlag = ZcUtil.getAuditFlagValue(auditFlag, 1, requestMeta);    executeAudit(zcEbProjZbFile, auditFlag, ZcSettingConstants.AUDIT_DISAGREE_DEFULT_MESSAGE);  }  /**   * 送协办人   */  private void doSendToXieBan() {    ZcEbProjZbFile zcEbProjZbFile = (ZcEbProjZbFile) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());    requestMeta.setFuncId(this.sendToXieBanButton.getFuncId());    executeAudit(zcEbProjZbFile, ZcSettingConstants.IS_GOON_AUDIT_NO, null);  }  private void doSendToProcurementUnit() {    ZcEbProjZbFile zcEbProjZbFile = (ZcEbProjZbFile) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());    requestMeta.setFuncId(this.sendToProcurementUnitButton.getFuncId());    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager    .getCurrentKeyboardFocusManager().getActiveWindow(), ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    String errorInfo = "";    try {      zcEbProjZbFile.setIsGoonAudit(ZcSettingConstants.IS_GOON_AUDIT_YES);      zcEbProjZbFile.setComment(commentDialog.getComment());      zcEbProjZbFile.setAuditorId(WorkEnv.getInstance().getCurrUserId());      this.listPanel.getZcEbZbFileServiceDelegate().saveZcEbProjZbFileFN(zcEbProjZbFile, requestMeta);      this.listPanel.getZcEbZbFileServiceDelegate().sendToProcurementUnitFN(zcEbProjZbFile, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshAll(zcEbProjZbFile, true);    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doAuditFinalPass() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    ZcEbProjZbFile zcEbProjFile = this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.auditFinalPassButton.getFuncId());    executeAudit(zcEbProjFile, ZcSettingConstants.IS_GOON_AUDIT_YES, null);  }  public void updateZbFile() {    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "招标文件没有发生改变不需要保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    zbFilePanel.updateZbFileToDb();  }  public void doSend() {    boolean success = true;    ZcEbProjZbFile afterSaveBill = null;    String errorInfo = "";    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    ZcEbProjZbFile zcEbProjFile = (ZcEbProjZbFile) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager    .getCurrentKeyboardFocusManager().getActiveWindow(), ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    try {      requestMeta.setFuncId(this.sendButton.getFuncId());      zcEbProjFile.setAuditorId(WorkEnv.getInstance().getCurrUserId());      zcEbProjFile.setComment(commentDialog.getComment());      this.listPanel.getZcEbZbFileServiceDelegate().newCommitFN(zcEbProjFile, requestMeta);      afterSaveBill = listPanel.getZcEbZbFileServiceDelegate().getZcebZbFileByProjCode(      zcEbProjFile.getProjCode(), requestMeta);    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      System.out.println(ex.getMessage());    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    }  }  /**   * 是否送主任审核   */  private void doSendNext() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    ZcEbProjZbFile zcEbProjFile = this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.isSendToNextButton.getFuncId());    executeAudit(zcEbProjFile, ZcSettingConstants.IS_GOON_AUDIT_YES, null);  }  private void executeAudit(ZcEbProjZbFile bill, int isGoonAudit, String defaultMsg) {    GkCommentDialog commentDialog = null;    if (defaultMsg == null) {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager()      .getActiveWindow(), ModalityType.APPLICATION_MODAL);    } else {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager()      .getActiveWindow(), ModalityType.APPLICATION_MODAL, defaultMsg);    }    if (commentDialog.cancel) {      return;    }    boolean success = true;    String errorInfo = "";    try {      bill.setIsGoonAudit(isGoonAudit);      bill.setComment(commentDialog.getComment());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      this.listPanel.getZcEbZbFileServiceDelegate().saveZcEbProjZbFileFN(bill, requestMeta);      this.listPanel.getZcEbZbFileServiceDelegate().auditFN(bill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshAll(bill, true);    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  public void doTrace() {    ZcBaseBill bean = this.listCursor.getCurrentObject();    if (bean == null) {      return;    }    ZcUtil.showTraceDialog(bean, compoId);  }  /*   * 收回   */  public void doCallback() {    boolean success = true;    ZcEbProjZbFile afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.callbackButton.getFuncId());      ZcEbProjZbFile zcEbProjZbFile = (ZcEbProjZbFile) ObjectUtil      .deepCopy(this.listCursor.getCurrentObject());      zcEbProjZbFile.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getZcEbZbFileServiceDelegate().callbackFN(zcEbProjZbFile, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 审核通过   */  private void doAuditPass() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    ZcEbProjZbFile zcEbProjZbFile = this.listCursor.getCurrentObject();    executeAudit(zcEbProjZbFile, ZcSettingConstants.IS_GOON_AUDIT_NO, null);  }  /*   * 填写意见审核   */  private void doSuggestPass() {    ZcEbProjZbFile zcEbProjFile = this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.suggestPassButton.getFuncId());    String jianShenRoleId = AsOptionMeta.getOptVal("OPT_ZC_CGZX_JSKY_ROLE");//监审组员角色    if (WorkEnv.getInstance().containRole(jianShenRoleId)) {//如果是监审员，则不修改审批状态      Integer auditFlag = zcEbProjFile.getIsGoonAudit();      executeAudit(zcEbProjFile, auditFlag, null);    } else {      executeAudit(zcEbProjFile, ZcSettingConstants.IS_GOON_AUDIT_NO, null);    }  }  /*   * 审核   */  public void doAudit() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    ZcEbProjZbFile make = (ZcEbProjZbFile) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());    boolean success = true;    ZcEbProjZbFile afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.auditPassButton.getFuncId());      make.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getZcEbZbFileServiceDelegate().auditFN(make, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 销审   */  public void doUnaudit() {    boolean success = true;    ZcEbProjZbFile afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unAuditButton.getFuncId());      ZcEbProjZbFile make = (ZcEbProjZbFile) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      make.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getZcEbZbFileServiceDelegate().unAuditFN(make, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 退回   */  public void doUntread() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager    .getCurrentKeyboardFocusManager().getActiveWindow(), ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcEbProjZbFile afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unTreadButton.getFuncId());      ZcEbProjZbFile make = (ZcEbProjZbFile) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      make.setAuditorId(WorkEnv.getInstance().getCurrUserId());      make.setComment(commentDialog.getComment());      afterSaveBill = listPanel.getZcEbZbFileServiceDelegate().untreadFN(make, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  private void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldZcEbProjZbFile);      }    }    listCursor.previous();    refreshData();    setButtonStatus();  }  private void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldZcEbProjZbFile);      }    }    listCursor.next();    refreshData();    setButtonStatus();  }  public void doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    //删除本地电脑上的招标文件    if (zbFilePanel != null) {      zbFilePanel.deleteZbFile();    }    this.parent.dispose();  }  public boolean doSave() {    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    boolean success = true;    ZcEbProjZbFile afterSaveBill = null;    String errorInfo = "";    try {      ZcEbProjZbFile zbFile = (ZcEbProjZbFile) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      afterSaveBill = listPanel.getZcEbZbFileServiceDelegate().saveZcEbProjZbFileFN(zbFile, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }    return false;  }  public void doHelp() {    setButtonStatus();  }  public void refreshAll(ZcEbProjZbFile afterSaveBill, boolean isRefreshButton) {    this.listCursor.setCurrentObject(afterSaveBill);    refreshData();    if (isRefreshButton) {      setButtonStatus(afterSaveBill, requestMeta, this.listCursor);    }  }  //防止session过期，每隔5分钟做一次session握手  private void getSession() {    Timer timer = new Timer();    TimerTask task = new TestTimerTask();    //每五分钟握手一次    timer.schedule(task, 60 * 5 * 1000L, 60 * 5 * 1000L);  }  private class TestTimerTask extends TimerTask {    /**     * 此计时器任务要执行的操作。     */    @Override    public void run() {      listPanel.zcEbZbFileServiceDelegate.getSession(requestMeta);      zbFilePanel.baseDataServiceDelegate.getSysDate(requestMeta);      Date executeTime = new Date(this.scheduledExecutionTime());      System.out.println("本次任务执行的时间是" + executeTime);    }  }  private boolean isDataChanged() {    zbFilePanel.saveZbFile();    boolean isChanged = false;    try {      isChanged = zbFilePanel.isZbFileChanged();    } catch (Exception e) {      e.printStackTrace();    }    return isChanged;  }}
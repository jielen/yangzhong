/** *  */package com.ufgov.zc.client.zc.zcHtPrePayBill;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import javax.swing.event.TableModelEvent;import javax.swing.event.TableModelListener;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.ZcWorkFlowAdapter;import com.ufgov.zc.client.common.converter.zc.ZcHtPrePayBillToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AuditPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.PrintPreviewButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SubaddButton;import com.ufgov.zc.client.component.button.SubdelButton;import com.ufgov.zc.client.component.button.SubinsertButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.celleditor.MoneyCellEditor;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.cellrenderer.NumberCellRenderer;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.CompanyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.FileFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.IntFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcPProBalConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcBaseBill;import com.ufgov.zc.common.zc.model.ZcHtPrePayBill;import com.ufgov.zc.common.zc.model.ZcHtPrePayBillItem;import com.ufgov.zc.common.zc.model.ZcPProMake;import com.ufgov.zc.common.zc.model.ZcXmcgHt;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcHtPrePayBillServiceDelegate;/** * @author fanpl * */public class ZcHtPrePayBillEditPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = -2779110682087878491L;  private static final Logger logger = Logger.getLogger(ZcHtPrePayBillEditPanel.class);  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_HT_PRE_PAY_BILL";  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private FuncButton addButton = new AddButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton nextButton = new NextButton();  private FuncButton editButton = new EditButton();  private FuncButton exitButton = new ExitButton();  // 工作流送审  private FuncButton sendButton = new SendButton();  // 工作流收回  private FuncButton callbackButton = new CallbackButton();  // 工作流填写意见审核通过  private FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流审核通过  private FuncButton auditPassButton = new AuditPassButton();  // 工作流销审  private FuncButton unAuditButton = new UnauditButton();  // 工作流退回  private FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  private FuncButton traceButton = new TraceButton();  private FuncButton printButton = new PrintButton();  private PrintPreviewButton printPreviewButton = new PrintPreviewButton();  protected ListCursor listCursor;  private ZcHtPrePayBill oldZcHtPrePayBill;  private ZcHtPrePayBillListPanel listPanel;  private ZcHtPrePayBillEditPanel self = this;  private GkBaseDialog parent;  private JTabbedPane jTabbedPane = null;  private JTablePanel detailTablePanel = new JTablePanel();  private JFuncToolBar bottomToolBar1 = null;  private ElementConditionDto zcMakeElementCondtiontDto = new ElementConditionDto();  private ElementConditionDto htElementCondtiontDto = new ElementConditionDto();  private ForeignEntityFieldEditor zcHtSelectEdit;  ForeignEntityFieldEditor zcMakeSelectEdit;  private BigDecimal bi = new BigDecimal("100");  private BigDecimal zerobi = new BigDecimal("0");  public IZcEbBaseServiceDelegate zcEbBaseServiceDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class,  "zcEbBaseServiceDelegate");  public IZcHtPrePayBillServiceDelegate zcHtPrePayBillServiceDelegate = (IZcHtPrePayBillServiceDelegate) ServiceFactory.create(    IZcHtPrePayBillServiceDelegate.class, "zcHtPrePayBillServiceDelegate");  public ZcHtPrePayBillEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus, ZcHtPrePayBillListPanel listPanel) {    super(ZcHtPrePayBill.class, listPanel.getBillElementMeta());    this.listCursor = listCursor;    this.listPanel = listPanel;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta      .translate(ZcElementConstants.FIELD_TRANS_ZC_HT_PRE_PAY_BILL_TITLE), TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15),      Color.BLUE));    this.parent = parent;    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    String columNames[] = { "采购计划编号", "采购项目", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME), "供应商名称", "采购方式" };    String zcMakeColumNames[] = { LangTransMeta.translate(ZcPProBalConstants.FIELD_TRANS_ZC_MAKE_NAME),      LangTransMeta.translate(ZcPProBalConstants.FIELD_TRANS_ZC_MAKE_CODE), LangTransMeta.translate(ZcPProBalConstants.FIELD_TRANS_ZC_MONEY_BI_SUM) };    ZcPProMakeHandler handler1 = new ZcPProMakeHandler(zcMakeColumNames);    zcMakeElementCondtiontDto.setNd(requestMeta.getSvNd());    zcMakeElementCondtiontDto.setCoCode(requestMeta.getSvCoCode());    zcMakeElementCondtiontDto.setZcText0("Z01");    zcMakeSelectEdit = new ForeignEntityFieldEditor("ZC_P_PRO_MAKE.selectProjectForJSXM", zcMakeElementCondtiontDto, 20, handler1, columNames,      LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_CODE), "zcPProMake.zcMakeCode");    TextFieldEditor zcMakeName = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_NAME), "zcPProMake.zcMakeName");    MoneyFieldEditor zcMakeBiSum = new MoneyFieldEditor("采购预算", "zcPProMake.zcMoneyBiSum");    /**     * 选择合同     */    String HtColumNames[] = { LangTransMeta.translate(ZcPProBalConstants.FIELD_TRANS_ZC_HT_CODE),      LangTransMeta.translate(ZcPProBalConstants.FIELD_TRANS_ZC_HT_NAME), LangTransMeta.translate(ZcPProBalConstants.FIELD_TRANS_ZC_MAKE_NAME),      LangTransMeta.translate(ZcPProBalConstants.FIELD_TRANS_ZC_SU_NAME), LangTransMeta.translate(ZcPProBalConstants.FIELD_TRANS_ZC_HT_NUM) };    ZcHtCodeHandler handler = new ZcHtCodeHandler(HtColumNames);    zcHtSelectEdit = new ForeignEntityFieldEditor("ZC_XMCG_HT.zcHtPrePayBillHTList", htElementCondtiontDto, 20, handler, HtColumNames,      LangTransMeta.translate(ZcPProBalConstants.FIELD_TRANS_ZC_HT_CODE), "zcXmcgHt.zcHtCode");    TextFieldEditor zcHtName = new TextFieldEditor(LangTransMeta.translate(ZcPProBalConstants.FIELD_TRANS_ZC_HT_NAME), "zcXmcgHt.zcHtName");    MoneyFieldEditor zcHtNum = new MoneyFieldEditor(LangTransMeta.translate(ZcPProBalConstants.FIELD_TRANS_ZC_HT_NUM), "zcXmcgHt.zcHtNum");    DateFieldEditor zcSgnDate = new DateFieldEditor("合同签订日期", "zcXmcgHt.zcSgnDate");    DateFieldEditor zcProLimitStartDate = new DateFieldEditor("工期开始时间", "zcXmcgHt.zcProLimitStartDate");    DateFieldEditor zcProLimitEndDate = new DateFieldEditor("工期结束时间", "zcXmcgHt.zcProLimitEndDate");    CompanyFieldEditor zcCoCode = new CompanyFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_CODE), "coCode");    IntFieldEditor zcCoCodeNd = new IntFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_CODE_ND), "nd", 4);    //    editorList.add(zcCoCodeNd);    FileFieldEditor zcImpFile = new FileFieldEditor("打印审批单", "zcImpFile", "zcImpFileBlobid");    AsValFieldEditor status = new AsValFieldEditor("审批状态", "status", "ZC_HT_PRE_PAY_BILL_STATUS");    //    editorList.add(zcMakeSelectEdit);    //    editorList.add(zcMakeName);    //    editorList.add(zcMakeBiSum);    //    editorList.add(zcHtSelectEdit);    //    editorList.add(zcHtName);    //    editorList.add(zcHtNum);    //    editorList.add(zcSgnDate);    //    editorList.add(zcProLimitStartDate);    //    editorList.add(zcProLimitEndDate);    //    editorList.add(zcCoCode);    //    editorList.add(zcImpFile);    //    editorList.add(status);    editorList.add(zcCoCode);    editorList.add(zcHtName);    editorList.add(zcProLimitStartDate);    editorList.add(zcMakeName);    editorList.add(zcHtNum);    editorList.add(zcProLimitEndDate);    editorList.add(zcMakeSelectEdit);    editorList.add(zcHtSelectEdit);    editorList.add(zcImpFile);    editorList.add(zcMakeBiSum);    editorList.add(zcSgnDate);    editorList.add(status);    return editorList;  }  @Override  public JComponent createSubBillPanel() {    jTabbedPane = new JTabbedPane();    detailTablePanel.init();    detailTablePanel.getSearchBar().setVisible(false);    detailTablePanel.setTablePreferencesKey(this.getClass().getName() + "_biTable");    detailTablePanel.getTable().setShowCheckedColumn(true);    detailTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    jTabbedPane.addTab("付款明细", detailTablePanel);    bottomToolBar1 = new JFuncToolBar();    FuncButton addBtn1 = new SubaddButton(false);    FuncButton insertBtn1 = new SubinsertButton(false);    FuncButton delBtn1 = new SubdelButton(false);    //    bottomToolBar1.add(addBtn1);    //    //    bottomToolBar1.add(insertBtn1);    //    //    bottomToolBar1.add(delBtn1);    detailTablePanel.add(bottomToolBar1, BorderLayout.SOUTH);    addBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZcHtPrePayBillItem detail = new ZcHtPrePayBillItem();        detail.setTempId(Guid.genID());        setdetailBiDefaultValue(detail);        int rowNum = addSub(detailTablePanel, detail);        detailTablePanel.getTable().setRowSelectionInterval(rowNum, rowNum);      }    });    insertBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZcHtPrePayBillItem detail = new ZcHtPrePayBillItem();        detail.setTempId(Guid.genID());        setdetailBiDefaultValue(detail);        int rowNum = insertSub(detailTablePanel, detail);        detailTablePanel.getTable().setRowSelectionInterval(rowNum, rowNum);      }    });    delBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        Integer[] checkedRows = deleteSub(detailTablePanel);      }    });    return jTabbedPane;  }  private void setdetailBiDefaultValue(ZcHtPrePayBillItem detail) {    ZcHtPrePayBill bill = (ZcHtPrePayBill) listCursor.getCurrentObject();    detail.setBillCode(bill.getBillCode());  }  private void refreshData() {    ZcHtPrePayBill bill = (ZcHtPrePayBill) listCursor.getCurrentObject();    if (bill != null && !"".equals(ZcUtil.safeString(bill.getBillCode()))) {      bill = zcHtPrePayBillServiceDelegate.selectByPrimaryKey(bill.getBillCode(), requestMeta);      ZcPProMake zcPProMake1 = new ZcPProMake();      zcPProMake1.setZcMakeCode(bill.getZcMakeCode());      ZcPProMake zcPProMake = (ZcPProMake) zcEbBaseServiceDelegate.queryObject("ZC_P_PRO_MAKE.ibatorgenerated_selectByPrimaryKey", zcPProMake1,        requestMeta);      if (zcPProMake != null) {        bill.setZcPProMake(zcPProMake);      }      ZcXmcgHt zcXmcgHt1 = new ZcXmcgHt();      zcXmcgHt1.setZcHtCode(bill.getZcHtCode());      ZcXmcgHt zcXmcgHt = (ZcXmcgHt) zcEbBaseServiceDelegate.queryObject("ZC_XMCG_HT.ibatorgenerated_selectByPrimaryKey", zcXmcgHt1, requestMeta);      if (zcXmcgHt != null) {        bill.setZcXmcgHt(zcXmcgHt);      }      zcMakeElementCondtiontDto.setZcMakeCode(bill.getZcMakeCode());      pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      listCursor.setCurrentObject(bill);    } else {      if (bill == null) {        bill = new ZcHtPrePayBill();        pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      }      bill.setStatus("0");      bill.setCoCode(this.requestMeta.getSvCoCode());      bill.setExecuteDate(new Date());      bill.setExecutor(this.requestMeta.getSvUserID());      bill.setExecutorName(this.requestMeta.getSvUserName());      bill.setNd(this.requestMeta.getSvNd());      bill.setZcImpFile("");      bill.setZcImpFileBlobid("");      if (bill.getBillList() == null) {        bill.setBillList(new ArrayList());      }      listCursor.getDataList().add(bill);      bill.setZcPProMake(new ZcPProMake());      bill.setZcXmcgHt(new ZcXmcgHt());    }    this.setEditingObject(bill);    updateFieldEditorsEditable();    updateTableEditable();    refreshSubData(bill.getBillList());    setButtonStatus(bill, requestMeta, listCursor);    setButtonStatus();  }  private void refreshSubData(List biList) {    detailTablePanel.setTableModel(ZcHtPrePayBillToTableModelConverter.convertSubBiTableData(biList, false));    ZcUtil.translateColName(detailTablePanel.getTable(), ZcHtPrePayBillToTableModelConverter.getBillDetailInfo());    setOldObject();    setTableEditor(detailTablePanel.getTable());    detailTablePanel.repaint();    addItemTableLisenter(detailTablePanel.getTable());  }  private void setTableEditor(JTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    SwingUtil.setTableCellEditor(table, "PAY_MONEY", new MoneyCellEditor());    SwingUtil.setTableCellRenderer(table, "PAY_MONEY", new NumberCellRenderer());    SwingUtil.setTableCellEditor(table, "PAY_YEAR", new AsValComboBoxCellEditor("ZC_PAY_YEAR"));    SwingUtil.setTableCellRenderer(table, "PAY_YEAR", new AsValCellRenderer("ZC_PAY_YEAR"));    SwingUtil.setTableCellEditor(table, "PAY_MONTH", new AsValComboBoxCellEditor("ZC_PAY_MONTH"));    SwingUtil.setTableCellRenderer(table, "PAY_MONTH", new AsValCellRenderer("ZC_PAY_MONTH"));    SwingUtil.setTableCellEditor(table, "STATUS", new AsValComboBoxCellEditor("ZC_VS_PAY_BILL_ITEM_STATUS"));    SwingUtil.setTableCellRenderer(table, "STATUS", new AsValCellRenderer("ZC_VS_PAY_BILL_ITEM_STATUS"));  }  private void setOldObject() {    oldZcHtPrePayBill = (ZcHtPrePayBill) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  public void addItemTableLisenter(final JPageableFixedTable table) {    final BeanTableModel model = (BeanTableModel) table.getModel();    model.addTableModelListener(new TableModelListener() {      public void tableChanged(TableModelEvent e) {        ZcHtPrePayBill bill = (ZcHtPrePayBill) listCursor.getCurrentObject();        if (e.getType() == TableModelEvent.UPDATE) {          if (e.getColumn() >= 0          && ("PAY_MONEY".equals(model.getColumnIdentifier(e.getColumn())))) {            int k = table.getSelectedRow();            if (k < 0)              return;            ZcHtPrePayBillItem item = (ZcHtPrePayBillItem) model.getBean(table.convertRowIndexToModel(k));            BigDecimal payMoeny = item.getPayMoney();            payMoeny.setScale(4, BigDecimal.ROUND_HALF_UP);            if (payMoeny != null && bill.getZcXmcgHt().getZcHtNum() != null) {              if (payMoeny.compareTo(bill.getZcXmcgHt().getZcHtNum()) == 1) {                JOptionPane.showMessageDialog(self, "支付金额不能大于合同总金额.", "提示", JOptionPane.INFORMATION_MESSAGE);                item.setPayMoney(zerobi);                return;              }              BigDecimal percent = payMoeny.divide(bill.getZcXmcgHt().getZcHtNum(), 4, 4).multiply(bi);              item.setPercent(percent.doubleValue() + "%");            }            model.fireTableRowsUpdated(k, k);          }        }      }    });  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(saveButton);    toolBar.add(editButton);    toolBar.add(sendButton);    toolBar.add(suggestPassButton);    toolBar.add(auditPassButton);    toolBar.add(callbackButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(traceButton);    toolBar.add(deleteButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(printPreviewButton);    toolBar.add(exitButton);    toolBar.add(printButton);    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrint();      }    });    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 新增        //        doAdd();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 保存        doSave();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 删除        doDelete();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送审        doSend();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 修改        doEdit();      }    });    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 收回        doCallback();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核        doSuggestPass();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 审核        doSuggestPass();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 销审        doUnaudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退回        doUntread();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 流程跟踪        doTrace();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 上一页        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 下一页        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退出        doExit();      }    });    printPreviewButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrintPreview();      }    });  }  private void doPrint() {    this.requestMeta.setFuncId(this.printButton.getFuncId());    this.requestMeta.setPageType(this.compoId + "_L");    try {      ZcHtPrePayBill bill = (ZcHtPrePayBill) this.listCursor.getCurrentObject();      String billCode = bill.getBillCode();      String condition = " t.BILL_CODE='" + billCode + "'";    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印出错！\n" + e.getMessage(), "错误", 0);    }  }  public void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    updateTableEditable();    setButtonStatus();  }  /*   * 流程跟踪   */  private void doTrace() {    ZcBaseBill bean = (ZcBaseBill) this.listCursor.getCurrentObject();    if (bean == null) {      return;    }    ZcUtil.showTraceDialog(bean, compoId);  }  /*   * 送审   */  private void doSend() {    if (!checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    ZcHtPrePayBill bal = (ZcHtPrePayBill) this.listCursor.getCurrentObject();    ZcBaseBill afterBill = ZcWorkFlowAdapter.newCommitFN(bal, this, sendButton, requestMeta, null);    if (afterBill != null) {      ZcHtPrePayBill afterSaveBill = (ZcHtPrePayBill) zcHtPrePayBillServiceDelegate.selectByPrimaryKey(bal.getBillCode(), requestMeta);      this.listCursor.setCurrentObject(afterSaveBill);      this.refreshData();      this.listPanel.refreshCurrentTabData();    }  }  /*   * 收回   */  private void doCallback() {    ZcHtPrePayBill bal = (ZcHtPrePayBill) this.listCursor.getCurrentObject();    ZcBaseBill afterBill = ZcWorkFlowAdapter.callbackFN(bal, this, callbackButton, requestMeta, null);    if (afterBill != null) {      ZcHtPrePayBill afterSaveBill = (ZcHtPrePayBill) zcHtPrePayBillServiceDelegate.selectByPrimaryKey(bal.getBillCode(), requestMeta);      this.listCursor.setCurrentObject(afterSaveBill);      this.refreshData();      this.listPanel.refreshCurrentTabData();    }  }  /*   * 审核通过   */  private void doSuggestPass() {    if (!checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    ZcHtPrePayBill bal = (ZcHtPrePayBill) this.listCursor.getCurrentObject();    ZcBaseBill afterBill = ZcWorkFlowAdapter.auditFN(bal, this, suggestPassButton, requestMeta, null);    if (afterBill != null) {      ZcHtPrePayBill afterSaveBill = (ZcHtPrePayBill) zcHtPrePayBillServiceDelegate.selectByPrimaryKey(bal.getBillCode(), requestMeta);      this.listCursor.setCurrentObject(afterSaveBill);      this.refreshData();      this.listPanel.refreshCurrentTabData();    }  }  /*   * 销审   */  private void doUnaudit() {    ZcHtPrePayBill bal = (ZcHtPrePayBill) this.listCursor.getCurrentObject();    ZcBaseBill afterBill = ZcWorkFlowAdapter.unAuditFN(bal, this, unTreadButton, requestMeta, null);    if (afterBill != null) {      ZcHtPrePayBill afterSaveBill = (ZcHtPrePayBill) zcHtPrePayBillServiceDelegate.selectByPrimaryKey(bal.getBillCode(), requestMeta);      this.listCursor.setCurrentObject(afterSaveBill);      this.refreshData();      this.listPanel.refreshCurrentTabData();    }  }  /*   * 退回   */  private void doUntread() {    ZcHtPrePayBill bal = (ZcHtPrePayBill) this.listCursor.getCurrentObject();    ZcBaseBill afterBill = ZcWorkFlowAdapter.untreadFN(bal, this, unTreadButton, requestMeta, null);    if (afterBill != null) {      ZcHtPrePayBill afterSaveBill = (ZcHtPrePayBill) zcHtPrePayBillServiceDelegate.selectByPrimaryKey(bal.getBillCode(), requestMeta);      this.listCursor.setCurrentObject(afterSaveBill);      this.refreshData();      this.listPanel.refreshCurrentTabData();    }  }  private void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldZcHtPrePayBill);      }    }    listCursor.previous();    refreshData();  }  private void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldZcHtPrePayBill);      }    }    listCursor.next();    refreshData();  }  public boolean doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return false;        }      }    }    parent.dispose();    return true;  }  /**   * 保存前校验   * @param cpApply   * @return   */  private boolean checkBeforeSave() {    ZcHtPrePayBill zcHtPrePayBill = (ZcHtPrePayBill) this.listCursor.getCurrentObject();    List mainNotNullList = ((BillElementMeta) this.listPanel.getBillElementMeta()).getNotNullBillElement();    String mainValidateInfo = ZcUtil.validateBillElementNull(zcHtPrePayBill, mainNotNullList);    if (mainValidateInfo.length() != 0) {      JOptionPane.showMessageDialog(this, mainValidateInfo.toString(), "错误", JOptionPane.ERROR_MESSAGE);      return false;    }    BigDecimal sum = new BigDecimal("0");    if (zcHtPrePayBill.getBillList() == null || zcHtPrePayBill.getBillList().size() == 0) {      JOptionPane.showMessageDialog(this, "确认内容不能为空 ！\n", "错误", JOptionPane.ERROR_MESSAGE);      return false;    }    //    for (Object item : zcHtPrePayBill.getBillList()) {    //      ZcHtPrePayBillItem bill = (ZcHtPrePayBillItem) item;    //    //      if (bill.getPayMoney() == null) {    //        JOptionPane.showMessageDialog(this, "支付金额不能为空 ！\n", "错误", JOptionPane.ERROR_MESSAGE);    //        return false;    //      } else {    //        sum = sum.add(bill.getPayMoney());    //      }    //    }    //    if (sum.compareTo(zcHtPrePayBill.getZcXmcgHt().getZcHtNum()) != 0) {    //      JOptionPane.showMessageDialog(this, "分次付款的总金额不等于合同金额 ！\n", "错误", JOptionPane.ERROR_MESSAGE);    //      return false;    //    }    return true;  }  public void stopTableEditing() {    JPageableFixedTable biTable = this.detailTablePanel.getTable();    if (biTable.isEditing()) {      biTable.getCellEditor().stopCellEditing();    }  }  public boolean doSave() {    if (!checkBeforeSave()) {      return false;    }    boolean success = true;    ZcHtPrePayBill ZcHtPrePayBill = new ZcHtPrePayBill();    String errorInfo = "";    try {      requestMeta.setFuncId(saveButton.getFuncId());      ZcHtPrePayBill inData = (ZcHtPrePayBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      ZcHtPrePayBill = this.zcHtPrePayBillServiceDelegate.updateZcHtPrePayBillFN(inData, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      listCursor.setCurrentObject(ZcHtPrePayBill);      refreshData();      this.setOldObject();      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }    return true;  }  protected void doDelete() {    int num = JOptionPane.showConfirmDialog(this, "是否删除当前单据", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      ZcHtPrePayBill zcHtPrePayBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(deleteButton.getFuncId());        zcHtPrePayBill = (ZcHtPrePayBill) this.listCursor.getCurrentObject();        this.listPanel.getZcHtPrePayBillServiceDelegate().deleteZcHtPrePayBillFN(zcHtPrePayBill, requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.listCursor.removeCurrentObject();        refreshData();        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doPrintPreview() {    ZcHtPrePayBill ZcHtPrePayBill = (ZcHtPrePayBill) this.listCursor.getCurrentObject();    this.requestMeta.setFuncId(this.printPreviewButton.getFuncId());    this.requestMeta.setPageType(this.compoId + "_L");    try {      String billCode = ZcHtPrePayBill.getBillCode();      String url = WorkEnv.getInstance().getWebRoot() + "app/page/perpayBill/toPrePayBillPrint.do?billCode=" + billCode;      ZcUtil.anyBrowse(url);    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印预览出错！\n" + e.getMessage(), "错误", 0);    }  }  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      //      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.sendButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      //      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      //      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.printButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcHtPrePayBill obj = (ZcHtPrePayBill) this.listCursor.getCurrentObject();    String billStatus = obj.getStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, obj.getProcessInstId());  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {      zcMakeSelectEdit.setEnabled(true);      zcHtSelectEdit.setEnabled(true);      for (AbstractFieldEditor fd : this.fieldEditors) {        if ("zcPProMake.zcMakeCode".equals(fd.getFieldName()) || "zcXmcgHt.zcHtCode".equals(fd.getFieldName())) {          fd.setEnabled(true);        } else {          fd.setEnabled(false);        }      }    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if ("zcPProMake.zcMakeCode".equals(fd.getFieldName()) || "zcXmcgHt.zcHtCode".equals(fd.getFieldName())) {          fd.setEnabled(true);        } else {          fd.setEnabled(false);        }      }    }  }  private void updateTableEditable() {    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      detailTablePanel.getTable().setEnabled(true);    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      detailTablePanel.getTable().setEnabled(false);    }  }  public boolean isDataChanged() {    return false;  }  /*   * 选择合同的web实体   */  private class ZcHtCodeHandler implements IForeignEntityHandler {    private String columNames[];    public ZcHtCodeHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcXmcgHt zcXmcgHt = (ZcXmcgHt) object;        ZcHtPrePayBill bean = (ZcHtPrePayBill) self.listCursor.getCurrentObject();        bean.setZcHtCode(zcXmcgHt.getZcHtCode());        bean.setZcHtName(zcXmcgHt.getZcHtName());        bean.setZcXmcgHt(zcXmcgHt);        bean.setBillList(self.zcHtPrePayBillServiceDelegate.getZcHtPrePayBillListByHtCode(bean, self.requestMeta));        self.setEditingObject(bean);        listCursor.setCurrentObject(bean);        refreshSubData(bean.getBillList());      }    }    public void afterClear() {      ZcHtPrePayBill bean = (ZcHtPrePayBill) self.listCursor.getCurrentObject();      bean.setZcHtCode("");      bean.getZcXmcgHt().setZcHtCode("");      self.setEditingObject(bean);    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcXmcgHt zcXmcgHt = (ZcXmcgHt) showDatas.get(i);        int col = 0;        data[i][col++] = zcXmcgHt.getZcHtCode();        data[i][col++] = zcXmcgHt.getZcHtName();        data[i][col++] = zcXmcgHt.getZcPProMake().getZcMakeCode();        data[i][col++] = zcXmcgHt.getZcSuName();        data[i][col++] = zcXmcgHt.getZcHtNum();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  /*   * 选择项目的web实体   */  private class ZcPProMakeHandler implements IForeignEntityHandler {    private String columNames[];    public ZcPProMakeHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcPProMake zcPProMake = (ZcPProMake) object;        ZcHtPrePayBill bean = (ZcHtPrePayBill) self.listCursor.getCurrentObject();        bean.setZcMakeCode(zcPProMake.getZcMakeCode());        bean.setCoCode(zcPProMake.getCoCode());        bean.setOrgCode(zcPProMake.getOrgCode());        bean.setZcMakeName(zcPProMake.getZcMakeName());        bean.setZcPProMake(zcPProMake);        htElementCondtiontDto.setZcText0(zcPProMake.getZcMakeCode());        zcHtSelectEdit.setEnabled(true);        self.setEditingObject(bean);      }    }    public void afterClear() {      ZcHtPrePayBill bean = (ZcHtPrePayBill) self.listCursor.getCurrentObject();      bean.setZcMakeCode("");      bean.getZcPProMake().setZcMakeCode("");      self.setEditingObject(bean);    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcPProMake zcPProMake = (ZcPProMake) showDatas.get(i);        int col = 0;        data[i][col++] = zcPProMake.getZcMakeCode();        data[i][col++] = zcPProMake.getZcMakeName();        data[i][col++] = zcPProMake.getZcMoneyBiSum();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }}
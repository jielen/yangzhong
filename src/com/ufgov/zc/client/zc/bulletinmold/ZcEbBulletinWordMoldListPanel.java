package com.ufgov.zc.client.zc.bulletinmold;import java.awt.Color;import java.awt.Container;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbBulletinWordMoldToTableModelConverter;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.BlankOutButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EnableButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.PrintPreviewButton;import com.ufgov.zc.client.component.button.PrintSettingButton;import com.ufgov.zc.client.component.ui.AbstractDataDisplay;import com.ufgov.zc.client.component.ui.AbstractEditListBill;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SaveableSearchConditionArea;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.component.ui.conditionitem.SearchConditionUtil;import com.ufgov.zc.client.print.PrintSettingDialog;import com.ufgov.zc.client.util.ListUtil;import com.ufgov.zc.client.util.NumUtil;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.WFConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BaseException;import com.ufgov.zc.common.system.exception.OtherException;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMold;import com.ufgov.zc.common.zc.publish.IZcEbBulletinWordMoldServiceDelegate;public class ZcEbBulletinWordMoldListPanel extends AbstractEditListBill implements ParentWindowAware {  private static final Logger logger = Logger.getLogger(ZcEbBulletinWordMoldListPanel.class);  private ZcEbBulletinWordMoldListPanel self = this;  private Window parentWindow;  public static final String compoId = "ZC_EB_BULLETIN_WORD_MOLD";  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private ElementConditionDto elementConditionDto = new ElementConditionDto();  private IZcEbBulletinWordMoldServiceDelegate zcEbBulletinWordMoldServiceDelegate = (IZcEbBulletinWordMoldServiceDelegate) ServiceFactory.create(  IZcEbBulletinWordMoldServiceDelegate.class, "zcEbBulletinWordMoldServiceDelegate");  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  private final class DataDisplay extends MultiDataDisplay {    private DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays, AbstractSearchConditionArea conditionArea,    boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, ZcSettingConstants.TAB_ID_ZC_EB_BULLETIN_WORD_MOLD);      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "模板管理", TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体",      Font.BOLD, 15), Color.BLUE));    }    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {              String tabStatus = d.getStatus();              JGroupableTable table = d.getTable();              MyTableModel model = (MyTableModel) table.getModel();              int row = table.getSelectedRow();              List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(model.getList(), table));              new ZcEbBulletinWordMoldEditDialog(self, viewList, row, tabStatus, ZcSettingConstants.PAGE_STATUS_EDIT);            }          }        });      }    }    @Override    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems, final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(compoId);      elementConditionDto.setExecutor(WorkEnv.getInstance().getCurrUserId());      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setStatus(tableDisplay.getStatus());      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        @Override        public void before() {          assert c != null;          installLoadingComponent(c);        }        @Override        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        @Override        public TableModel execute() throws Exception {          return ZcEbBulletinWordMoldToTableModelConverter.convertToTableModel(self.zcEbBulletinWordMoldServiceDelegate.getZcEbBulletinWordMold(          elementConditionDto, requestMeta));        }        @Override        public void success(TableModel model) {          tableDisplay.setTableModel(model);          setButtonStatus();        }      });    }  }  static {    LangTransMeta.init("ZC%");  }  /**   * 构造函数   */  public ZcEbBulletinWordMoldListPanel() {    UIUtilities.asyncInvoke(new DefaultInvokeHandler<List<SearchCondition>>() {      @Override      public List<SearchCondition> execute() throws Exception {        List<SearchCondition> needDisplaySearchConditonList = SearchConditionUtil.getNeedDisplaySearchConditonList(WorkEnv.getInstance()        .getCurrUserId(), ZcSettingConstants.TAB_ID_ZC_EB_BULLETIN_WORD_MOLD);        return needDisplaySearchConditonList;      }      @Override      public void success(List<SearchCondition> needDisplaySearchConditonList) {        List<TableDisplay> showingDisplays = SearchConditionUtil.getNeedDisplayTableDisplay(needDisplaySearchConditonList);        init(createDataDisplay(showingDisplays), null);//调用父类方法        revalidate();        repaint();      }    });    requestMeta.setCompoId(compoId);  }  private AbstractSearchConditionArea topSearchConditionArea;  private AbstractSearchConditionArea createTopConditionArea() {    Map defaultValueMap = new HashMap();    topSearchConditionArea = new SaveableSearchConditionArea(ZcSettingConstants.CONDITION_ID_ZC_EB_BULLETIN_WORD_MOLD, null, false, defaultValueMap,    null);    return topSearchConditionArea;  }  private AbstractDataDisplay createDataDisplay(List<TableDisplay> showingDisplays) {    return new DataDisplay(SearchConditionUtil.getAllTableDisplay(ZcSettingConstants.TAB_ID_ZC_EB_BULLETIN_WORD_MOLD), showingDisplays,    createTopConditionArea(), true);//true:显示收索条件区 false：不显示收索条件区  }  private AddButton addButton = new AddButton();  private FuncButton deleteButton = new DeleteButton();  private EnableButton enableButton = new EnableButton();  private BlankOutButton unableButton = new BlankOutButton(); // 作废  private FuncButton printButton = new PrintButton();  private FuncButton printPreviewButton = new PrintPreviewButton();  private PrintSettingButton printSettingButton = new PrintSettingButton();  private HelpButton helpButton = new HelpButton();  @Override  protected void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(deleteButton);    toolBar.add(enableButton);    toolBar.add(unableButton);    //    toolBar.add(printButton);    //    toolBar.add(printPreviewButton);    //    toolBar.add(printSettingButton);    //    toolBar.add(helpButton);    // 初始化按钮的action事件    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    enableButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEnable();      }    });    unableButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doUnable();      }    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrint();      }    });    printPreviewButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrintPreview();      }    });    printSettingButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        doPrintSetting();      }    });  }  public void refreshCurrentTabData() {    topSearchConditionArea.doSearch();  }  public List getCheckedList() {    List<ZcEbBulletinWordMold> beanList = new ArrayList<ZcEbBulletinWordMold>();    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    MyTableModel model = (MyTableModel) table.getModel();    //Modal的数据    List list = model.getList();    Integer[] checkedRows = table.getCheckedRows();    for (Integer checkedRow : checkedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      ZcEbBulletinWordMold bean = (ZcEbBulletinWordMold) list.get(accordDataRow);      beanList.add(bean);    }    return beanList;  }  /**   * 新增   */  private void doAdd() {    ZcEbBulletinWordMold zcEbBulletinWordMold = new ZcEbBulletinWordMold();    java.util.Date nowDate = new java.util.Date();    String bulletinMoldCode = NumUtil.getNum(compoId, "BULLETIN_MOLD_CODE", zcEbBulletinWordMold, requestMeta);    zcEbBulletinWordMold.setInputorId(WorkEnv.getInstance().getCurrUser().getUserId());    zcEbBulletinWordMold.setInputorName(WorkEnv.getInstance().getCurrUser().getUserName());    zcEbBulletinWordMold.setBulletinMoldCode(bulletinMoldCode);    zcEbBulletinWordMold.setInputDate(nowDate);    zcEbBulletinWordMold.setStatus("1");    //设置默认的公告类型    zcEbBulletinWordMold.setBulletinMoldType("B");    List listBean = new ArrayList();    listBean.add(zcEbBulletinWordMold);    List viewList = (List) ObjectUtil.deepCopy(listBean);    new ZcEbBulletinWordMoldEditDialog(self, viewList, 0, "edit", ZcSettingConstants.PAGE_STATUS_NEW);  }  /**   * 批量删除   */  private void doDelete() {    List beanList = getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int num = JOptionPane.showConfirmDialog(this, "是否删除当前选择的单据", "删除确认", 0);    if (num == JOptionPane.NO_OPTION)      return;    boolean success = true;    try {      requestMeta.setFuncId(deleteButton.getFuncId());      this.zcEbBulletinWordMoldServiceDelegate.deleteListFN(beanList, requestMeta);    } catch (BaseException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (OtherException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (Exception ex) {      success = false;      logger.error(ex.getMessage(), ex);      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "处理成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      refreshCurrentTabData();    }  }  /**   * 批量作废   */  private void doUnable() {    List beanList = getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    try {      requestMeta.setFuncId(unableButton.getFuncId());      this.zcEbBulletinWordMoldServiceDelegate.unableListFN(beanList, requestMeta);    } catch (BaseException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (OtherException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (Exception ex) {      success = false;      logger.error(ex.getMessage(), ex);      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "处理成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      refreshCurrentTabData();    }  }  private void doEnable() {    List beanList = getCheckedList();    if (beanList.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    try {      requestMeta.setFuncId(this.enableButton.getFuncId());      this.zcEbBulletinWordMoldServiceDelegate.enableListFN(beanList, requestMeta);    } catch (BaseException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (OtherException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (Exception ex) {      success = false;      logger.error(ex.getMessage(), ex);      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "处理成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      refreshCurrentTabData();    }  }  private void doPrint() {    List printList = getCheckedList();    if (printList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要打印的数据 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    requestMeta.setFuncId(this.printButton.getFuncId());    requestMeta.setPageType(this.compoId + "_L");    boolean success = true;    boolean printed = false;    try {      //      PrintObject printObject = this.zcEbBulletinWordMoldServiceDelegate.genMainSubPrintObjectFN(printList, requestMeta);      //      if (Printer.print(printObject)) {      //        printed = true;      //      }    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印出错！\n" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    }    if (success && printed) {    }  }  private void doPrintPreview() {    final List printList = getCheckedList();    if (printList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要打印预览的数据 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    requestMeta.setFuncId(this.printPreviewButton.getFuncId());    requestMeta.setPageType(this.compoId + "_L");    try {      //      PrintObject printObject = this.zcEbBulletinWordMoldServiceDelegate      //        .genMainSubPrintObjectFN(printList, requestMeta);      //      PrintPreviewer previewer = new PrintPreviewer(printObject) {      //        protected void afterSuccessPrint() {      //        }      //      };      //      previewer.preview();    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印预览出错！\n" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrintSetting() {    requestMeta.setFuncId(this.printSettingButton.getFuncId());    requestMeta.setPageType(this.compoId + "_L");    new PrintSettingDialog(requestMeta);  }  protected void setButtonStatus() {    String panelId = WFConstants.EDIT_TAB_STATUS_EDIT;    if (topDataDisplay != null && topDataDisplay.getActiveTableDisplay() != null) {      panelId = topDataDisplay.getActiveTableDisplay().getStatus();    }    if (WFConstants.EDIT_TAB_STATUS_EDIT.equalsIgnoreCase(panelId)) {      addButton.setEnabled(true);      enableButton.setEnabled(true);      unableButton.setEnabled(false);      deleteButton.setEnabled(true);      printButton.setEnabled(true);      printPreviewButton.setEnabled(true);      printSettingButton.setEnabled(true);    } else if (WFConstants.EDIT_TAB_STATUS_ENABLE.equalsIgnoreCase(panelId)) {      addButton.setEnabled(true);      enableButton.setEnabled(false);      unableButton.setEnabled(true);      deleteButton.setEnabled(false);      printButton.setEnabled(true);      printPreviewButton.setEnabled(true);      printSettingButton.setEnabled(true);    } else if (WFConstants.EDIT_TAB_STATUS_UNABLE.equalsIgnoreCase(panelId)) {      addButton.setEnabled(true);      enableButton.setEnabled(true);      unableButton.setEnabled(false);      deleteButton.setEnabled(true);      printButton.setEnabled(true);      printPreviewButton.setEnabled(true);      printSettingButton.setEnabled(true);    } else if (WFConstants.AUDIT_TAB_STATUS_ALL.equalsIgnoreCase(panelId)) {      addButton.setEnabled(true);      enableButton.setEnabled(false);      unableButton.setEnabled(false);      deleteButton.setEnabled(false);      printButton.setEnabled(true);      printPreviewButton.setEnabled(true);      printSettingButton.setEnabled(true);    }  }  public static void main(String[] args) throws Exception {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        //        UIManager.getDefaults().put("SplitPaneUI", BigButtonSplitPaneUI.class.getName());        ZcEbBulletinWordMoldListPanel bill = new ZcEbBulletinWordMoldListPanel();        JFrame frame = new JFrame("frame");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }}
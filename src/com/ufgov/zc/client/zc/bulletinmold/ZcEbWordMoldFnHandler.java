package com.ufgov.zc.client.zc.bulletinmold;import java.math.BigDecimal;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import javax.swing.JOptionPane;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.util.DateUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMold;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMoldParam;import com.ufgov.zc.common.zc.publish.IZcEbBulletinWordMoldServiceDelegate;public class ZcEbWordMoldFnHandler implements IForeignEntityHandler {  private String columNames[];  private List bulletinMoldParamList = null;  private String bulletinMoldCode = null;  private String replaceValue;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private IZcEbBulletinWordMoldServiceDelegate zcEbBulletinWordMoldServiceDelegate = (IZcEbBulletinWordMoldServiceDelegate) ServiceFactory.create(  IZcEbBulletinWordMoldServiceDelegate.class, "zcEbBulletinWordMoldServiceDelegate");  private IWordMoldFn editPanelFun;  private Map valueMap;  protected IZcEbBulletinWordMoldServiceDelegate getIZcEbBulletinWordMoldServiceDelegate() {    return this.zcEbBulletinWordMoldServiceDelegate;  }  public List getParamList() {    return this.bulletinMoldParamList;  }  public void setParamList(List paramList) {    this.bulletinMoldParamList = paramList;  }  public ZcEbWordMoldFnHandler(String columNames[], IWordMoldFn editPanelFun) {    this.columNames = columNames;    this.editPanelFun = editPanelFun;  }  public void flashReplaceValue() {    if (bulletinMoldCode == null) {      return;    }    ZcEbBulletinWordMold bulletinMold = zcEbBulletinWordMoldServiceDelegate.selectMoldByPrimaryKey(bulletinMoldCode, requestMeta);    if (bulletinMold == null) {      return;    }    initReplaceValue(bulletinMold);    if (replaceValue != null && replaceValue.length() > 0) {      editPanelFun.setIfLoadMold(true);      editPanelFun.setIfRePalceBookMark(false);      editPanelFun.getWordPane().setEnabled(false);    }  }  public void excute(List selectedDatas) {    replaceValue = "";    valueMap = null;    for (Object object : selectedDatas) {      ZcEbBulletinWordMold bulletinMold = (ZcEbBulletinWordMold) object;      editPanelFun.setMoldName(bulletinMold.getBulletinMoldName());      editPanelFun.setWordMold(bulletinMold);      bulletinMoldCode = bulletinMold.getBulletinMoldCode();      initReplaceValue(bulletinMold);    }    if (replaceValue != null && replaceValue.length() > 0) {      editPanelFun.setIfLoadMold(true);      editPanelFun.setIfRePalceBookMark(false);      editPanelFun.getWordPane().setEnabled(false);    }  }  private void initReplaceValue(ZcEbBulletinWordMold bulletinMold) {    List bulletinMoldParamList = zcEbBulletinWordMoldServiceDelegate.getZcEbBulletinWordMoldParam(requestMeta, bulletinMold.getBulletinMoldCode());    for (Iterator it = bulletinMoldParamList.iterator(); it.hasNext();) {      ZcEbBulletinWordMoldParam bulletinMoldParam = (ZcEbBulletinWordMoldParam) it.next();      if (bulletinMoldParam.getParamType() == null) {        continue;      }      Map paramMap = new HashMap();      paramMap.put("fieldName", bulletinMoldParam.getFieldName());      paramMap.put("tableName", bulletinMold.getDataView());      paramMap.put("projCode", editPanelFun.getWordMoldViewId());      paramMap.put("packCode", editPanelFun.getPackCode());      try {        String paramValue = getParamValue(paramMap, editPanelFun.getWordMoldViewId(), bulletinMoldParam.getParamType(), bulletinMoldParam        .getFieldName());        paramValue = paramValue == null ? "" : paramValue;        bulletinMoldParam.setParamValue(paramValue);      } catch (Exception ex) {        ex.printStackTrace();        JOptionPane.showMessageDialog(editPanelFun.getWindowObject(), "没有找到模板“" + bulletinMold.getBulletinMoldName() + "”（模板代码:"        + bulletinMold.getBulletinMoldCode() + "）参数【" + bulletinMoldParam.getParamName() + "】的信息，请检查模板参数是否正确！", "提示", JOptionPane.ERROR_MESSAGE);        return;      }    }    this.setParamList(bulletinMoldParamList);    replaceValue = editPanelFun.doOpenMold(bulletinMoldParamList, bulletinMold);    editPanelFun.setReplaceValue(replaceValue);  }  public String getParamValue(Map paramMap, String projCode, String paramType, String tableName) {    String strParamValue = "";    if (paramType.equals(ZcSettingConstants.MOLD_PARAM_TYPE_FIELD)) {      if (valueMap == null) {        valueMap = this.getIZcEbBulletinWordMoldServiceDelegate().getZcEbBulletinWordMoldParamValue(requestMeta, paramMap);      }      Object obj = valueMap.get(paramMap.get("fieldName"));      if (obj instanceof String) {        return obj.toString();      }      if (obj instanceof BigDecimal) {        BigDecimal b1 = (BigDecimal) obj;        return b1.toString();      }      if (obj instanceof Date) {        return DateUtil.dateToDdString((Date) obj);      }    } else {      //FIELD_NAME 是表面和视图的情况      String subParamValue = getSubParamValue(tableName, projCode, paramType);      if (subParamValue != null && subParamValue.length() != 0) {        strParamValue = subParamValue;      }    }    return strParamValue;  }  /**   * 获得循环类型标签需要替换的值，如分包信息等   * @param tableName：子视图名称   * @param projCode：项目名称   * @param loopType：   * @return   */  public String getSubParamValue(String tableName, String projCode, String loopType) {    Map subParamMap = new HashMap();    subParamMap.put("tableName", tableName);    subParamMap.put("projCode", projCode);    subParamMap.put("packCode", editPanelFun.getPackCode());    List subParamValueList = getValueList(subParamMap);    if (loopType.equals("LONG_STRING")) {      System.out.println("---------------------------------查询视图获取参数值subParamValueList------------" + subParamValueList);    }    if (subParamValueList == null || subParamValueList.size() == 0) {      return null;    }    StringBuffer sb = new StringBuffer();    for (Iterator item = subParamValueList.iterator(); item.hasNext();) {      Map valueMap = (Map) item.next();      for (Iterator valueItem = valueMap.entrySet().iterator(); valueItem.hasNext();) {        Map.Entry entry = (Map.Entry) valueItem.next();        if (entry.getKey().toString().equalsIgnoreCase("PROJECT_CODE")) {          continue;        }        Object value = entry.getValue();        if (value == null)          value = "";        if (loopType.equalsIgnoreCase(ZcSettingConstants.MOLD_PARAM_TYPE_TABLE)) {          sb.append(value + "\n");        } else if (loopType.equalsIgnoreCase(ZcSettingConstants.MOLD_PARAM_TYPE_LONG_STRING)) {          sb.append("、" + value);        }      }    }    if (loopType.equalsIgnoreCase(ZcSettingConstants.MOLD_PARAM_TYPE_LONG_STRING)) {      return sb.substring(1, sb.length()).toString();    } else {      return sb.toString();    }  }  public List getValueList(Map paramMap) {    List valueList = null;    valueList = this.getIZcEbBulletinWordMoldServiceDelegate().getZcEbBulletinMoldTableParamValue(requestMeta, paramMap);    return valueList;  }  @Override  public TableModel createTableModel(List showDatas) {    Object data[][] = new Object[showDatas.size()][columNames.length];    for (int i = 0; i < showDatas.size(); i++) {      ZcEbBulletinWordMold rowData = (ZcEbBulletinWordMold) showDatas.get(i);      int col = 0;      data[i][col++] = rowData.getBulletinMoldCode();      data[i][col++] = rowData.getBulletinMoldName();      data[i][col++] = AsValDataCache.getName("VS_ZC_EB_BULLETIN_MOLD_TYPE", rowData.getBulletinMoldType());      data[i][col++] = rowData.getInputDate();      data[i][col++] = rowData.getInputorName();    }    MyTableModel model = new MyTableModel(data, columNames) {      public boolean isCellEditable(int row, int colum) {        return false;      }    };    return model;  }  @Override  public boolean isMultipleSelect() {    return false;  }}
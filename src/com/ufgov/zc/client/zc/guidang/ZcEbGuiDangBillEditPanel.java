/** *  */package com.ufgov.zc.client.zc.guidang;import java.awt.BorderLayout;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Dimension;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbGuiDangBillToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AgreeButton;import com.ufgov.zc.client.component.button.AuditFinalPassButton;import com.ufgov.zc.client.component.button.AuditPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.DisagreeButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.IsSendToNextButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.OpenNotepadButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.PrintPreviewButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SendToXieBanButton;import com.ufgov.zc.client.component.button.SubaddButton;import com.ufgov.zc.client.component.button.SubdelButton;import com.ufgov.zc.client.component.button.SubinsertButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.cellrenderer.IntCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AutoNumFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.CompanyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.notepad.ZcNotepadDialog;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsVal;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcBaseBill;import com.ufgov.zc.common.zc.model.ZcEbAuditSheet;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.model.ZcEbGuiDangBill;import com.ufgov.zc.common.zc.model.ZcEbGuiDangItem;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;public class ZcEbGuiDangBillEditPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = -2779110682087878491L;  private static final Logger logger = Logger.getLogger(ZcEbGuiDangBillEditPanel.class);  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_GUIDANG";  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private FuncButton addButton = new AddButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton nextButton = new NextButton();  private FuncButton editButton = new EditButton();  private FuncButton exitButton = new ExitButton();  public FuncButton openNotepadButton = new OpenNotepadButton();  // 工作流送审  private FuncButton sendButton = new SendButton();  // 工作流收回  private FuncButton callbackButton = new CallbackButton();  //是否送主任审核  private FuncButton isSendToNextButton = new IsSendToNextButton();  // 工作流填写意见审核通过  private FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流审核通过  private FuncButton auditPassButton = new AuditPassButton();  // 工作流销审  private FuncButton unAuditButton = new UnauditButton();  // 工作流退回  private FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  private FuncButton traceButton = new TraceButton();  //工作流终审核通过  private FuncButton auditFinalPassButton = new AuditFinalPassButton();  //同意  private FuncButton agreeButton = new AgreeButton();  //不同意  private FuncButton disagreeButton = new DisagreeButton();  //送协办人审核  private FuncButton sendToXieBanButton = new SendToXieBanButton();  private PrintPreviewButton printPreviewButton = new PrintPreviewButton();  protected ListCursor listCursor;  private ZcEbGuiDangBill oldZcEbYanShouBill;  private final ZcEbGuiDangBillListPanel listPanel;  private final ZcEbGuiDangBillEditPanel self = this;  private final GkBaseDialog parent;  private JTabbedPane jTabbedPane = new JTabbedPane();  private JTablePanel itemTablePanel = new JTablePanel();  private JFuncToolBar bottomToolBar1 = null;  ElementConditionDto sheetDto = new ElementConditionDto();  public IZcEbBaseServiceDelegate zcBaseDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class,  "zcEbBaseServiceDelegate");  public IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class,  "baseDataServiceDelegate");  public ZcEbGuiDangBillEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus, ZcEbGuiDangBillListPanel listPanel) {    super(ZcEbGuiDangBill.class, listPanel.getBillElementMeta());    this.listCursor = listCursor;    this.listPanel = listPanel;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "项目归档", TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.parent = parent;    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    AutoNumFieldEditor zcGuiDangId = new AutoNumFieldEditor("归档编号", "guiDangId", false);    editorList.add(zcGuiDangId);    ElementConditionDto projDto = new ElementConditionDto();    projDto.setNd(requestMeta.getSvNd());    projDto.setZcText0(requestMeta.getSvUserID());    String projColumNames[] = { "任务单编号", "任务单名称" };    ProjSelectedHandler projHandler = new ProjSelectedHandler(projColumNames);    ForeignEntityFieldEditor projName = new ForeignEntityFieldEditor("ZcEbGuiDang.selectSheetList", projDto, 10, projHandler, projColumNames,      "任务单名称",      "projName");    editorList.add(projName);    CompanyFieldEditor zcCoCode = new CompanyFieldEditor("采购单位", "coCode");    zcCoCode.setEnabled(false);    editorList.add(zcCoCode);    MoneyFieldEditor zcMoneyBiSum = new MoneyFieldEditor("采购限额", "zcMoneyBiSum");    editorList.add(zcMoneyBiSum);    //    AsValFieldEditor zcPifuCgfs = new AsValFieldEditor("采购方式", "zcPifuCgfs", "ZC_EB_PUR_TYPE");    //    //    editorList.add(zcPifuCgfs);    DateFieldEditor guiDangTime = new DateFieldEditor("归档时间", "executeDate");    editorList.add(guiDangTime);    TextFieldEditor superintendentName = new TextFieldEditor("项目经办人", "executorName");    editorList.add(superintendentName);    return editorList;  }  @Override  public JComponent createSubBillPanel() {    return createItemPanel();  }  private JTabbedPane createItemPanel() {    itemTablePanel.init();    itemTablePanel.getSearchBar().setVisible(false);    itemTablePanel.setTablePreferencesKey(this.getClass().getName() + "_biTable");    itemTablePanel.getTable().setShowCheckedColumn(true);    itemTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(60, 0));    bottomToolBar1 = new JFuncToolBar();    FuncButton addBtn1 = new SubaddButton(false);    JButton insertBtn1 = new SubinsertButton(false);    JButton delBtn1 = new SubdelButton(false);    bottomToolBar1.add(addBtn1);    bottomToolBar1.add(insertBtn1);    bottomToolBar1.add(delBtn1);    itemTablePanel.add(bottomToolBar1, BorderLayout.SOUTH);    addBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZcEbGuiDangItem detail = new ZcEbGuiDangItem();        detail.setTempId(Guid.genID());        setdetailBiDefaultValue(detail);        int rowNum = addSub(itemTablePanel, detail);        itemTablePanel.getTable().setRowSelectionInterval(rowNum, rowNum);      }    });    insertBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        ZcEbGuiDangItem detail = new ZcEbGuiDangItem();        detail.setTempId(Guid.genID());        setdetailBiDefaultValue(detail);        int rowNum = insertSub(itemTablePanel, detail);        itemTablePanel.getTable().setRowSelectionInterval(rowNum, rowNum);      }    });    delBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        Integer[] checkedRows = deleteSub(itemTablePanel);      }    });    jTabbedPane.add("归档资料清单", itemTablePanel);    return jTabbedPane;  }  private void setdetailBiDefaultValue(ZcEbGuiDangItem detail) {    ZcEbGuiDangBill bill = (ZcEbGuiDangBill) listCursor.getCurrentObject();    detail.setGuiDangId(bill.getGuiDangId());  }  private void refreshData() {    ZcEbGuiDangBill afterBill = (ZcEbGuiDangBill) listCursor.getCurrentObject();    boolean isNew;    if (afterBill == null) {      isNew = true;      afterBill = new ZcEbGuiDangBill();      afterBill.setStatus("0");      afterBill.setNd(requestMeta.getSvNd());      afterBill.setExecuteDate(requestMeta.getSysDate());      afterBill.setExecutor(requestMeta.getSvUserID());      afterBill.setExecutorName(requestMeta.getSvUserName());      pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      //默认是取归档明细子集表中的内容      List guidangItemList = new ArrayList();      List<AsVal> asValList = AsValDataCache.getAsVal(ZcElementConstants.FIELD_AS_VAL_GUIDANG);      if (asValList != null && asValList.size() > 0) {        for (int i = 0; i < asValList.size(); i++) {          ZcEbGuiDangItem item = new ZcEbGuiDangItem();          item.setName(asValList.get(i).getVal());          item.setNum(1);          guidangItemList.add(item);        }      }      afterBill.setItemList(guidangItemList);      listCursor.setCurrentObject(afterBill);      listCursor.getDataList().add(afterBill);    }    this.setEditingObject(afterBill);    itemTablePanel.setTableModel(ZcEbGuiDangBillToTableModelConverter.convertSubBiTableData(afterBill.getItemList()));    // 翻译从表表头列    ZcUtil.translateColName(itemTablePanel.getTable(), ZcEbGuiDangBillToTableModelConverter.getBillDetailInfo());    // 设置从表列类型    setTabledetailEditor(itemTablePanel.getTable());    setOldObject();    // 根据工作流模版设置字段是否可编辑    updateWFEditorEditable(afterBill, requestMeta);    // 根据工作流模版设置功能按钮是否可用    setButtonStatus(afterBill, requestMeta, listCursor);    Long processInstId = afterBill.getProcessInstId();    if (processInstId == null || processInstId.longValue() < 0) {      sendToXieBanButton.setVisible(false);      isSendToNextButton.setVisible(false);    }    setButtonStatus();    updateFieldEditorsEditable();    updateTableEditable();    this.fitTable();  }  private void setTabledetailEditor(JPageableFixedTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    //    SwingUtil.setTableCellEditor(table, "NUM", new IntCellEditor());    SwingUtil.setTableCellRenderer(table, "BOOK_NUM", new IntCellRenderer());    SwingUtil.setTableCellRenderer(table, "PAGE_NUM", new IntCellRenderer());  }  private void setOldObject() {    oldZcEbYanShouBill = (ZcEbGuiDangBill) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(saveButton);    toolBar.add(editButton);    toolBar.add(sendButton);    toolBar.add(suggestPassButton);    toolBar.add(auditPassButton);    toolBar.add(callbackButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(traceButton);    toolBar.add(isSendToNextButton);    toolBar.add(auditFinalPassButton);    toolBar.add(agreeButton);    toolBar.add(disagreeButton);    toolBar.add(sendToXieBanButton);    toolBar.add(deleteButton);    toolBar.add(openNotepadButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(printPreviewButton);    toolBar.add(exitButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 新增        doAdd();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 保存        doSave();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 删除        doDelete();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送审        doSend();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 修改        doEdit();      }    });    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 收回        doCallback();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核        doSuggestPass();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 审核        doAuditPass();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 销审        doUnaudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退回        doUntread();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 流程跟踪        doTrace();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 上一页        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 下一页        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退出        doExit();      }    });    isSendToNextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送审        doSendNext();      }    });    auditFinalPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 终审        doAuditFinalPass();      }    });    agreeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 同意        doAgree();      }    });    disagreeButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 不同意        doDisagree();      }    });    sendToXieBanButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送协办人        doSendToXieBan();      }    });    openNotepadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doOpenNotepad();      }    });  }  private void doOpenNotepad() {    ZcEbGuiDangBill sheet = (ZcEbGuiDangBill) this.listCursor.getCurrentObject();    String sn = fetchSn(sheet);    if (sn != null) {      new ZcNotepadDialog(sn, parent);    }  }  public String fetchSn(ZcEbGuiDangBill sheet) {    String sn = null;    if (sheet.getProjCode() == null || "".equals(sheet.getProjCode())) {      JOptionPane.showMessageDialog(this, "项目为空不能记录相关信息 ！", "错误", JOptionPane.ERROR_MESSAGE);      return sn;    }        ZcEbEntrust st = (ZcEbEntrust) this.zcBaseDelegate.queryObject("ZcEbEntrust.getZcEbEntrustBySnCode", sheet.getProjCode(), requestMeta);    sn = st.getSn();    return sn;  }  /**   * 送协办人   */  private void doSendToXieBan() {    ZcEbGuiDangBill bill = (ZcEbGuiDangBill) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.sendToXieBanButton.getFuncId());    executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_NO, null);  }  /**   * 同意   */  private void doAgree() {    ZcEbGuiDangBill bill = (ZcEbGuiDangBill) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.agreeButton.getFuncId());    Integer auditFlag = bill.getIsGoonAudit();    auditFlag = ZcUtil.getAuditFlagValue(auditFlag, 0, requestMeta);    executeAudit(bill, auditFlag, null);  }  /**   * 不同意   */  private void doDisagree() {    ZcEbGuiDangBill bill = (ZcEbGuiDangBill) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.disagreeButton.getFuncId());    Integer auditFlag = bill.getIsGoonAudit();    auditFlag = ZcUtil.getAuditFlagValue(auditFlag, 1, requestMeta);    executeAudit(bill, auditFlag, ZcSettingConstants.AUDIT_DISAGREE_DEFULT_MESSAGE);  }  /*   * 填写意见审核   */  private void doSuggestPass() {    ZcEbGuiDangBill bill = (ZcEbGuiDangBill) this.listCursor.getCurrentObject();    requestMeta.setFuncId(this.suggestPassButton.getFuncId());    String jianShenRoleId = AsOptionMeta.getOptVal("OPT_ZC_CGZX_JSKY_ROLE");//监审组员角色    if (WorkEnv.getInstance().containRole(jianShenRoleId)) {//如果是监审员，则不修改审批状态      Integer auditFlag = bill.getIsGoonAudit();      executeAudit(bill, auditFlag, null);    } else {      executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_NO, null);    }  }  public void doAuditFinalPass() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    String errorInfo = "";    try {      requestMeta.setFuncId(this.auditFinalPassButton.getFuncId());      ZcEbGuiDangBill bill = (ZcEbGuiDangBill) this.listCursor.getCurrentObject();      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_YES, null);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }  }  private void refreshAll(ZcEbGuiDangBill afterSaveBill, boolean isRefreshButton) {    pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;    this.listCursor.setCurrentObject(afterSaveBill);    refreshData();  }  /*   * 新增   */  private void doAdd() {    if (this.doExit()) {      this.listPanel.doAdd();    }  }  public void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    //updateFieldEditorsEditable();    updateTableEditable();    setButtonStatus();  }  /*   * 流程跟踪   */  private void doTrace() {    ZcBaseBill bean = (ZcBaseBill) this.listCursor.getCurrentObject();    if (bean == null) {      return;    }    ZcUtil.showTraceDialog(bean, compoId);  }  /*   * 送审   */  ;  private void doSend() {    boolean success = true;    ZcEbGuiDangBill afterSaveBill = null;    String errorInfo = "";    if (!checkBeforeSave()) {      return;    }    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    try {      requestMeta.setFuncId(this.sendButton.getFuncId());      ZcEbGuiDangBill bill = (ZcEbGuiDangBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      bill.setComment(commentDialog.getComment());      this.listPanel.getZcEbGuiDangBillServiceDelegate().newCommitFN(bill, requestMeta);      afterSaveBill = this.listPanel.getZcEbGuiDangBillServiceDelegate().getZcEbGuiDangBill(bill.getGuiDangId(), requestMeta);    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.refreshAll(afterSaveBill, true);      this.listPanel.refreshCurrentTabData();    }  }  /*   * 收回   */  private void doCallback() {    boolean success = true;    ZcEbGuiDangBill afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.callbackButton.getFuncId());      ZcEbGuiDangBill bill = (ZcEbGuiDangBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      listPanel.getZcEbGuiDangBillServiceDelegate().callbackFN(bill, requestMeta);      afterSaveBill = this.listPanel.getZcEbGuiDangBillServiceDelegate().getZcEbGuiDangBill(bill.getGuiDangId(), requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 审核通过（副主任不送主任直接审核通过）   */  private void doAuditPass() {    if (!checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    ZcEbGuiDangBill bill = (ZcEbGuiDangBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());    requestMeta.setFuncId(this.auditPassButton.getFuncId());    executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_NO, null);  }  /*   * 销审   */  private void doUnaudit() {    boolean success = true;    ZcEbGuiDangBill afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unAuditButton.getFuncId());      ZcEbGuiDangBill bill = (ZcEbGuiDangBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      listPanel.getZcEbGuiDangBillServiceDelegate().unAuditFN(bill, requestMeta);      afterSaveBill = this.listPanel.getZcEbGuiDangBillServiceDelegate().getZcEbGuiDangBill(bill.getGuiDangId(), requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 退回   */  private void doUntread() {    if (!checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcEbGuiDangBill afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unTreadButton.getFuncId());      ZcEbGuiDangBill bill = (ZcEbGuiDangBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      bill.setComment(commentDialog.getComment());      listPanel.getZcEbGuiDangBillServiceDelegate().saveZcEbGuiDangBillFN(bill, requestMeta);      listPanel.getZcEbGuiDangBillServiceDelegate().untreadFN(bill, requestMeta);      afterSaveBill = this.listPanel.getZcEbGuiDangBillServiceDelegate().getZcEbGuiDangBill(bill.getGuiDangId(), requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doSendNext() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    ZcEbGuiDangBill bill = (ZcEbGuiDangBill) this.listCursor.getCurrentObject();    //    int sel = JOptionPane.showConfirmDialog(this, "是否送主任审核？");    //    if (sel == JOptionPane.OK_OPTION) {    //      executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_YES);    //    } else {    //      executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_NO);    //    }    requestMeta.setFuncId(this.isSendToNextButton.getFuncId());    executeAudit(bill, ZcSettingConstants.IS_GOON_AUDIT_YES, null);  }  private void executeAudit(ZcEbGuiDangBill bill, Integer isGoonAudit, String defaultMsg) {    GkCommentDialog commentDialog = null;    if (defaultMsg == null) {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL);    } else {      commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),      ModalityType.APPLICATION_MODAL, defaultMsg);    }    if (commentDialog.cancel) {      return;    }    ZcEbGuiDangBill afterBill = new ZcEbGuiDangBill();    boolean success = true;    String errorInfo = "";    try {      isGoonAudit = isGoonAudit == null ? 0 : isGoonAudit;      bill.setIsGoonAudit(isGoonAudit);      bill.setComment(commentDialog.getComment());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      listPanel.getZcEbGuiDangBillServiceDelegate().saveZcEbGuiDangBillFN(bill, requestMeta);      afterBill = listPanel.getZcEbGuiDangBillServiceDelegate().auditFN(bill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterBill, true);      this.listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldZcEbYanShouBill);      }    }    listCursor.previous();    refreshData();  }  private void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldZcEbYanShouBill);      }    }    listCursor.next();    refreshData();  }  public boolean doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return false;        }      }    }    this.parent.dispose();    return true;  }  /**   * 保存前校验   * @param cpApply   * @return   */  private boolean checkBeforeSave() {    stopTableEditing();    ZcEbGuiDangBill bill = (ZcEbGuiDangBill) listCursor.getCurrentObject();    StringBuffer errStr = new StringBuffer();    if (bill.getProjCode() == null || bill.getProjName() == null || "".equals(bill.getProjName())) {      errStr.append("<html><b><font size='3' color='red'>项目名称没有填写</font></b></html>\n");    }    if (bill.getSheetId() == null || "".equals(bill.getSheetId())) {      errStr.append("<html><b><font size='3' color='red'>批办单没有选择</font></b></html>\n");    }    if (bill.getCoCode() == null) {      errStr.append("<html><b><font size='3' color='red'>采购单位没有选择</font></b></html>\n");    }    if (bill.getItemList() == null || bill.getItemList().size() == 0) {      errStr.append("<html><b><font size='3' color='red'>归档资料没有填写</font></b></html>\n");    } else {      for (int i = 0; i < bill.getItemList().size(); i++) {        ZcEbGuiDangItem item = (ZcEbGuiDangItem) bill.getItemList().get(i);        if (item.getName() == null) {          errStr.append("<html><b><font size='3' color='red'>归档资料名称没有填写</font></b></html>\n");        }        if (item.getBookNum() < 1) {          errStr.append("<html><b><font size='3' color='red'>归档资料册数不能小于1</font></b></html>\n");        }        if (item.getPageNum() < 1) {          errStr.append("<html><b><font size='3' color='red'>归档资料页数不能小于1</font></b></html>\n");        }        //        if (item.getNum() < 1) {        //        //          errStr.append("<html><b><font size='3' color='red'>归档资料数量不能小于1</font></b></html>\n");        //        //        }      }    }    if (errStr.toString().length() > 0) {      errStr.append("");      JOptionPane.showMessageDialog(this, errStr.toString(), "提示", JOptionPane.ERROR_MESSAGE);      return false;    }    return true;  }  public void stopTableEditing() {    JPageableFixedTable biTable = this.itemTablePanel.getTable();    if (biTable.isEditing()) {      biTable.getCellEditor().stopCellEditing();    }  }  public boolean doSave() {    if (!isDataChanged()) {      if (!checkBeforeSave()) {        return false;      }      pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      //      JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      setButtonStatus();      return true;    }    if (!checkBeforeSave()) {      return false;    }    boolean success = true;    ZcEbGuiDangBill zcEbGuiDangBill = new ZcEbGuiDangBill();    String errorInfo = "";    try {      requestMeta.setFuncId(saveButton.getFuncId());      ZcEbGuiDangBill inData = (ZcEbGuiDangBill) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      zcEbGuiDangBill = this.listPanel.getZcEbGuiDangBillServiceDelegate().saveZcEbGuiDangBillFN(inData, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      System.out.println(e.getMessage());      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      refreshAll(zcEbGuiDangBill, true);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }    return true;  }  protected void doDelete() {    int num = JOptionPane.showConfirmDialog(this, "是否删除当前单据", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      ZcEbGuiDangBill ZcEbGuiDangBill = null;      String errorInfo = "";      try {        requestMeta.setFuncId(deleteButton.getFuncId());        ZcEbGuiDangBill = (ZcEbGuiDangBill) this.listCursor.getCurrentObject();        if (!"0".equals(ZcEbGuiDangBill.getStatus()))          JOptionPane.showMessageDialog(this, "非编辑状态单据，不可以删除！", "提示", JOptionPane.ERROR_MESSAGE);        this.listPanel.getZcEbGuiDangBillServiceDelegate().deleteZcEbGuiDangBillFN(ZcEbGuiDangBill, requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        this.listCursor.removeCurrentObject();        JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        refreshAll(ZcEbGuiDangBill, true);        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.sendButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.traceButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbGuiDangBill obj = (ZcEbGuiDangBill) this.listCursor.getCurrentObject();    String billStatus = obj.getStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, obj.getProcessInstId());  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if ("guiDangId".equals(fd.getFieldName()) || "coCode".equals(fd.getFieldName()) || "zcPifuCgfs".equals(fd.getFieldName())        || "zcMoneyBiSum".equals(fd.getFieldName()) || "jingBanName".equals(fd.getFieldName())) {          fd.setEnabled(false);        } else {          fd.setEnabled(true);        }      }    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }    }  }  private void updateTableEditable() {    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      itemTablePanel.getTable().setEnabled(true);      bottomToolBar1.setEnabled(true);    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      itemTablePanel.getTable().setEnabled(false);      bottomToolBar1.setEnabled(false);    }  }  public boolean isDataChanged() {    ZcEbGuiDangBill currentBill = (ZcEbGuiDangBill) listCursor.getCurrentObject();    return !DigestUtil.digest(oldZcEbYanShouBill).equals(DigestUtil.digest(currentBill));  }  private class ProjSelectedHandler implements IForeignEntityHandler {    private final String columNames[];    public ProjSelectedHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      ZcEbGuiDangBill bill = (ZcEbGuiDangBill) listCursor.getCurrentObject();      for (Object object : selectedDatas) {        ZcEbAuditSheet sh = (ZcEbAuditSheet) object;        bill.setProjCode(sh.getZcEbEntrust().getSnCode());        bill.setProjName(sh.getZcEbEntrust().getZcMakeName());        bill.setOrgCode(sh.getSuperintendentOrg());        bill.setAgency(sh.getZcEbEntrust().getAgency());        bill.setSheetId(sh.getSheetId());        bill.setCoCode(sh.getZcEbEntrust().getCoCode());        if (!"".equals(bill.getCoCode()) && bill.getCoCode() != null) {          bill.setCoName(baseDataServiceDelegate.getCompanyByCoCode(requestMeta.getSvNd(), bill.getCoCode(), requestMeta).getName());        }        bill.setZcPifuCgfs(sh.getZcEbEntrust().getZcPifuCgfs());        bill.setZcMoneyBiSum(sh.getZcEbEntrust().getZcMoneyBiSum());      }      setEditingObject(bill);    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbAuditSheet rowData = (ZcEbAuditSheet) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getZcEbEntrust().getSnCode();        data[i][col++] = rowData.getZcEbEntrust().getZcMakeName();      }      MyTableModel model = new MyTableModel(data, columNames) {        @Override        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }}
package com.ufgov.zc.client.zc.supplierprice.component;import java.awt.Component;import java.util.List;import javax.swing.JTable;import javax.swing.table.DefaultTableCellRenderer;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityDataCache;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcBCatalogue;import com.ufgov.zc.common.zc.publish.IForeignEntityDelegate;public class ZcBCatalogueCellRenderer extends DefaultTableCellRenderer {  private IForeignEntityDelegate delegate = (IForeignEntityDelegate) ServiceFactory.create(    IForeignEntityDelegate.class, "foreignEntityServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private List<ZcBCatalogue> dataBufferList;  public ZcBCatalogueCellRenderer() {    super();    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText0(String.valueOf(requestMeta.getSvNd()));    dataBufferList = getCataData(dto);  }    public List getCataData(ElementConditionDto dto){	  	  dataBufferList = (List)ForeignEntityDataCache.getDataMap().get(ForeignEntityDataCache.CACHE_ZC_B_CATALOGUE);	  	  if(dataBufferList == null || dataBufferList.size() == 0){		  		  dataBufferList = delegate.getZcBCatalogue(dto, requestMeta);		  		  ForeignEntityDataCache.setData(ForeignEntityDataCache.CACHE_ZC_B_CATALOGUE, dataBufferList);	  }	  	  return dataBufferList;  }  public Component getTableCellRendererComponent(JTable table, Object value,  boolean isSelected, boolean hasFocus, int row, int column) {    try {      String catalogueName = "";      for (ZcBCatalogue catalogue : dataBufferList) {        if (catalogue.getZcCatalogueCode().equals(value)) {          catalogueName = catalogue.getZcCatalogueName();          break;        }      }      return super.getTableCellRendererComponent(table, catalogueName, isSelected, hasFocus, row, column);    } catch (Exception e) {      e.printStackTrace();      throw new RuntimeException(e);    }  }}
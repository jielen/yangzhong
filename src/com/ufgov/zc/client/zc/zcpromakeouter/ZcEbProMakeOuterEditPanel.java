package com.ufgov.zc.client.zc.zcpromakeouter;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbProMakeOuterTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.AutoNumFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityDialog;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProMakeOuter;import com.ufgov.zc.common.zc.model.ZcebZb;import com.ufgov.zc.common.zc.publish.IZcEbProMakeOuterServiceDelegate;public class ZcEbProMakeOuterEditPanel extends AbstractMainSubEditPanel {  private static final Logger logger = Logger.getLogger(ZcEbProMakeOuterEditPanel.class);  private IZcEbProMakeOuterServiceDelegate zcEbProMakeOuterServiceDelegate = (IZcEbProMakeOuterServiceDelegate) ServiceFactory  .create(IZcEbProMakeOuterServiceDelegate.class, "zcEbProMakeOuterServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_PROMAKE_OUTER";  private FuncButton addButton = new AddButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton editButton = new EditButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton nextButton = new NextButton();  private final ListCursor listCursor;  private ZcEbProMakeOuter oldProMakeOuter;  private String tabStatus;  private JTablePanel tablePanel = new JTablePanel();  private ZcEbProMakeOuterEditPanel self = this;  private GkBaseDialog parent;  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId);  private ForeignEntityDialog forenEntityDialog;  private JFuncToolBar subPackTableToolbar;  private zcebProMakeOuterListPanel listPanel;  public ZcEbProMakeOuterEditPanel(ZcEbProMakeOuterDialog dialog, ListCursor listCursor, String tabStatus,  ForeignEntityDialog forenEntityDialog) {    super(new ZcEbProMakeOuter(), "ZC_EB_PROMAKE_OUTER");    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.parent = dialog;    this.forenEntityDialog = forenEntityDialog;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),    LangTransMeta.translate("采购项目登记管理"), TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD,    15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();    setButtonStatus();    updateFieldEditorsEditable();  }  public ZcEbProMakeOuterEditPanel(ZcEbProMakeOuterDialog parent, ListCursor listCursor, String tabStatus,  zcebProMakeOuterListPanel listPanel) {    // TCJLODO Auto-generated constructor stub    super(ZcebZb.class, BillElementMeta.getBillElementMetaWithoutNd("ZC_EB_PROMAKE_OUTER"));    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),    LangTransMeta.translate("采购项目登记管理"), TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD,    15), Color.BLUE));    this.colCount = 3;    init();    //    this.auditButton.setText("备案");    //    this.unAuditButton.setText("取消备案");    //    this.sendButton.setText("提交备案");    requestMeta.setCompoId(compoId);    refreshData();    setButtonStatus();    updateFieldEditorsEditable();  }  /**   * 设置字表下面的按钮状态   *    * Administrator   * 2010-5-15   */  private void setSubTableButton() {    if (this.subPackTableToolbar != null) {      if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)      || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {        this.subPackTableToolbar.setEnabled(true);      } else {        this.subPackTableToolbar.setEnabled(false);      }    }  }  private void refreshData() {    ZcEbProMakeOuter proMakeOuter = (ZcEbProMakeOuter) listCursor.getCurrentObject();    if (proMakeOuter == null) {//新增页面      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      proMakeOuter = new ZcEbProMakeOuter();      setDefualtValue(proMakeOuter, ZcSettingConstants.PAGE_STATUS_NEW);      List lst = new ArrayList();      lst.add(proMakeOuter);      this.listCursor.setDataList(lst, -1);      listCursor.setCurrentObject(proMakeOuter);    } else {      proMakeOuter.setDbDigest(null);      proMakeOuter.setDbDigest(proMakeOuter.digest());    }    List detailList = new ArrayList();    if (proMakeOuter != null && (proMakeOuter.getPackLst() == null || proMakeOuter.getPackLst().size() == 0)) {      detailList = this.zcEbProMakeOuterServiceDelegate.getZcEbProMakeOuterPack(proMakeOuter.getCode(),      requestMeta);      proMakeOuter.setPackLst(detailList == null ? new ArrayList() : detailList);    }    refreshSubTableData(proMakeOuter.getPackLst());    this.setEditingObject(proMakeOuter);    setOldObject();  }  private void refreshSubTableData(List deList) {    ZcEbProMakeOuterTableModelConverter mc = new ZcEbProMakeOuterTableModelConverter();    tablePanel.setTableModel(mc.convertPackDeToTableModel(deList));    setTableProperty(tablePanel.getTable());  }  private void setTableProperty(JTable table) {    ZcUtil.translateColName(table, "ZC_EB_");  }  /**   * 设置工具条上按钮的可用性   *    * Administrator   * 2010-5-15   */  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs.setButton(this.addButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.exitButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.helpButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbProMakeOuter obj = (ZcEbProMakeOuter) (this.listCursor.getCurrentObject());    ZcUtil.setButtonEnable(this.btnStatusList, ZcSettingConstants.BILL_STATUS_ALL, this.pageStatus,    this.compoId, obj.getProcessInstId());    setSubTableButton();  }  private void setDefualtValue(ZcEbProMakeOuter proMakeOuter, String pageStatus) {    if (pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {      proMakeOuter.setOperator(this.requestMeta.getSvUserName());      proMakeOuter.setOperDate(this.requestMeta.getSysDate());      proMakeOuter.setNd(this.requestMeta.getSvNd());            proMakeOuter.setAgencyName(this.requestMeta.getSvCoName());            proMakeOuter.setAgency(this.requestMeta.getSvCoCode());    }  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)    || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {//        if (fd.getFieldName() != null && (fd.getFieldName().equals("operator") || fd.getFieldName().equals("operDate") || fd.getFieldName().equals("status"))) {        if (fd.getFieldName() != null && (fd.getFieldName().equals("operator") || fd.getFieldName().equals("status"))) {//将输入日期变为可编辑          fd.setEnabled(false);        } else {          fd.setEnabled(true);        }      }    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }    }  }  private void setOldObject() {    this.oldProMakeOuter = (ZcEbProMakeOuter) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    AutoNumFieldEditor code = new AutoNumFieldEditor("项目编号", "code");    editorList.add(code);    TextFieldEditor editor = new TextFieldEditor("项目名称", "name");    editorList.add(editor);    editor = new TextFieldEditor("采购单位", "coName");    editorList.add(editor);    AsValFieldEditor zcPitemOpiway = new AsValFieldEditor("招标方式", "purchaseType", "ZC_VS_PITEM_OPIWAY");    editorList.add(zcPitemOpiway);    editor = new TextFieldEditor("联系人", "contactor");    editorList.add(editor);    editor = new TextFieldEditor("联系电话", "phone");    editorList.add(editor);    DateFieldEditor editor2 = new DateFieldEditor("开标日期", "openBidDate");    editorList.add(editor2);    editor = new TextFieldEditor("开标地点", "openBidAddress");    editorList.add(editor);    editor = new TextFieldEditor("招标机构", "agentName");    editorList.add(editor);    editor = new TextFieldEditor("招标机构联系人", "agentContactor");    editorList.add(editor);    editor = new TextFieldEditor("招标机构联系电话", "agentPhone");    editorList.add(editor);    editor = new TextFieldEditor("录入人", "operator");    editorList.add(editor);    editor2 = new DateFieldEditor("录入日期", "operDate");    editorList.add(editor2);    return editorList;  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    deleteButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doSave();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });  }  private void doAdd() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;    ZcEbProMakeOuter proMakeOuter = new ZcEbProMakeOuter();    setDefualtValue(proMakeOuter, ZcSettingConstants.PAGE_STATUS_NEW);    listCursor.setCurrentObject(proMakeOuter);    setEditingObject(proMakeOuter);    refreshData();    updateFieldEditorsEditable();    setDefualtValue(proMakeOuter, this.pageStatus);    setButtonStatus();  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  private void doDelete() {    ZcEbProMakeOuter proMakeOuter = (ZcEbProMakeOuter) this.listCursor.getCurrentObject();    int num = JOptionPane.showConfirmDialog(this, "确认删除当前数据？", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      String errorInfo = "";      try {        success = this.zcEbProMakeOuterServiceDelegate.deleteZcProMake(proMakeOuter, this.requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(self, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;        this.listCursor.removeCurrentObject();        refreshData();        if (this.forenEntityDialog == null) {          this.listPanel.refreshCurrentTabData();        } else {          refreshParentForeignDialog(null);        }        updateFieldEditorsEditable();        setButtonStatus();      } else {        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  public void doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    this.parent.dispose();  }  public boolean doSave() {    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    ZcEbProMakeOuter proMakeOuter = (ZcEbProMakeOuter) this.listCursor.getCurrentObject();    if (!checkBeforeSave())      return false;    boolean success = true;    String errorInfo = "";    try {      proMakeOuter = this.zcEbProMakeOuterServiceDelegate.save(proMakeOuter, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(proMakeOuter);      this.oldProMakeOuter = (ZcEbProMakeOuter) ObjectUtil.deepCopy(proMakeOuter);      if (this.forenEntityDialog == null) {        this.listPanel.refreshCurrentTabData();      } else {        refreshParentForeignDialog(proMakeOuter);      }      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      setButtonStatus();      setOldObject();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  private boolean checkBeforeSave() {    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {      ZcEbProMakeOuter curObj = (ZcEbProMakeOuter) this.listCursor.getCurrentObject();      ZcEbProMakeOuter oldObj = this.zcEbProMakeOuterServiceDelegate.getproMakeById(curObj.getCode(),      this.requestMeta);      if (oldObj != null) {        JOptionPane.showMessageDialog(this.parent, curObj.getName() + "\"已经存在！", "提示",        JOptionPane.WARNING_MESSAGE);        return false;      }    }    List notNullBillElementList = this.billElementMeta.getNotNullBillElement();    ZcEbProMakeOuter proMakeOuter = (ZcEbProMakeOuter) this.listCursor.getCurrentObject();    StringBuilder errorInfo = new StringBuilder();    String validateInfo = ZcUtil.validateBillElementNull(proMakeOuter, notNullBillElementList);    if (validateInfo.length() != 0) {      errorInfo.append("").append(validateInfo.toString()).append("\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  public void doHelp() {    setButtonStatus();  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldProMakeOuter).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  private void doPrevious() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(this.oldProMakeOuter);      }    }    listCursor.previous();    refreshData();    setButtonStatus();  }  private void doNext() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(this.oldProMakeOuter);      }    }    listCursor.next();    refreshData();    setButtonStatus();  }  /**   * 刷新对话框的数据   * @param proMakeOuter   * Administrator   * 2010-5-18   */  void refreshParentForeignDialog(ZcEbProMakeOuter proMakeOuter) {    //   if(this.forenEntityDialog!=null&&this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)){    //     this.forenEntityDialog.refresh(supplier);    //   }    this.forenEntityDialog.refresh(proMakeOuter);  }  public String getPageStatus() {    return pageStatus;  }  public void setPageStatus(String pageStatus) {    this.pageStatus = pageStatus;  }  @Override  public JComponent createSubBillPanel() {    JTabbedPane tabPane = new JTabbedPane();    tablePanel.init();    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_table");    tablePanel.getTable().setShowCheckedColumn(false);    tablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 0));    setTableCell(tablePanel.getTable());    tabPane.addTab(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PAKE_NAME), tablePanel);    this.subPackTableToolbar = new JFuncToolBar();    JButton addBtn1 = new JButton("添加");    JButton insertBtn1 = new JButton("插入");    JButton delBtn1 = new JButton("删除");    this.subPackTableToolbar.add(addBtn1);    this.subPackTableToolbar.add(insertBtn1);    this.subPackTableToolbar.add(delBtn1);    tablePanel.add(this.subPackTableToolbar, BorderLayout.SOUTH);    addBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        addSub(tablePanel);      }    });    insertBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        insertSub(tablePanel);      }    });    delBtn1.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        deleteSub(tablePanel);      }    });    return tabPane;  }  private void stopTableEditing() {    JPageableFixedTable table = this.tablePanel.getTable();    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }  }  protected Integer[] deleteSub(JTablePanel tablePanel) {    JPageableFixedTable table = tablePanel.getTable();    stopTableEditing();    int[] selectedRows = table.getSelectedRows();    if (selectedRows.length == 0) {      JOptionPane.showMessageDialog(self, "没有选择数据！", "提示", JOptionPane.INFORMATION_MESSAGE);      return null;    }    BeanTableModel tableModel = ((BeanTableModel) table.getModel());    int[] selRows = new int[selectedRows.length];    for (int i = 0; i < selRows.length; i++) {      selRows[i] = table.convertRowIndexToModel(selectedRows[i]);    }    Arrays.sort(selRows);    for (int i = selRows.length - 1; i >= 0; i--) {      tableModel.deleteRow(selRows[i]);    }    return null;  }  private void insertSub(JTablePanel tablePanel) {    stopTableEditing();    ZcEbProMakeOuter proMake = (ZcEbProMakeOuter) listCursor.getCurrentObject();    BeanTableModel editTableModel = (BeanTableModel) tablePanel.getTable().getModel();    ZcEbPack bean = new ZcEbPack();    bean.setProjCode(proMake.getCode());    bean.setId(Guid.genID());    //    signup.getSignupPacks().add(bean);    int selectedRow = tablePanel.getTable().getSelectedRow();    if (selectedRow != -1) {      editTableModel.insertRow(selectedRow + 1, bean);    } else {      editTableModel.insertRow(editTableModel.getRowCount(), bean);    }  }  private void addSub(JTablePanel tablePanel) {    tablePanel.getTable().clearSelection();    stopTableEditing();    BeanTableModel editTableModel = (BeanTableModel) tablePanel.getTable().getModel();    ZcEbPack bean = new ZcEbPack();    ZcEbProMakeOuter promake = (ZcEbProMakeOuter) listCursor.getCurrentObject();    bean.setProjCode(promake.getCode());    bean.setId(Guid.genID());    editTableModel.insertRow(editTableModel.getRowCount(), bean);    //    signup.getSignupPacks().add(bean);  }  private void setTableCell(JPageableFixedTable table) {    //    SwingUtil.setTableCellEditor(table,columnIdentifier, cellEditor)  }}
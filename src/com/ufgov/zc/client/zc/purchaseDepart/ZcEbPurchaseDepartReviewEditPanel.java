package com.ufgov.zc.client.zc.purchaseDepart;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Vector;import javax.swing.BorderFactory;import javax.swing.JCheckBox;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import javax.swing.event.TableModelEvent;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableColumn;import javax.swing.table.TableColumnModel;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.JTextAreaLabel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.zc.emfundpay.EmFundReportEditPanel;import com.ufgov.zc.client.zc.supplierIntegrityManage.JCheckBoxCellEditor;import com.ufgov.zc.client.zc.supplierIntegrityManage.JCheckBoxRenderer;import com.ufgov.zc.common.commonbiz.model.Company;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.SupplierIntegrityManage;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbPurchaseDepRevDetail;import com.ufgov.zc.common.zc.model.ZcEbPurchaseDepartReview;public class ZcEbPurchaseDepartReviewEditPanel extends AbstractMainSubEditPanel {  /**   *    */  private static final long serialVersionUID = 1L;  private static final Logger logger = Logger.getLogger(EmFundReportEditPanel.class);  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_PURCHASE_DEPART_REVIEW";  private ElementConditionDto packDto = new ElementConditionDto();  private JTablePanel tablePanel = new JTablePanel();  protected ListCursor<ZcEbPurchaseDepartReview> listCursor;  protected ZcEbPurchaseDepartReview oldSupplierIntegrityManage;  private ZcEbPurchaseDepartReviewListPanel listPanel;  private String tabStatus;  private GkBaseDialog parent;  private List<String> bdSelect = new ArrayList<String>();  // 按钮  private FuncButton addButton = new AddButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private JPanel panel1;  private List blSelect;  private JTabbedPane mainSubPanel;  private List<JTable> auditResultTables = new ArrayList<JTable>();  private IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class,  "baseDataServiceDelegate");  public ZcEbPurchaseDepartReviewEditPanel(ZcEbPurchaseDepartReviewDialog parent, ListCursor listCursor, ZcEbPurchaseDepartReviewListPanel listPanel) {    super(ZcEbPurchaseDepartReview.class, BillElementMeta.getBillElementMetaWithoutNd("SUPPLIER_INTEGRITY_MANAGE"));    this.listCursor = listCursor;    this.listPanel = listPanel;    this.parent = parent;    this.tabStatus = tabStatus;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta    .translate(ZcSettingConstants.TITLE_ID_ZC_EB_PUR_DEPART_REVIEW), TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15),    Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    ElementConditionDto dto = new ElementConditionDto();    String columNamesSupplier[] = { "采购单位", "联系人", "电话" };    ZcEbPurchaseDepFnHandler zcCoFnHandler = new ZcEbPurchaseDepFnHandler(columNamesSupplier);    dto.setNd(WorkEnv.getInstance().getTransNd());    ForeignEntityFieldEditor editor1 = new ForeignEntityFieldEditor("ZC_EB_PURCHASE_DEPART_REVIEW.getZcCompanys", dto, 20, zcCoFnHandler,    columNamesSupplier, "采购单位名称", "zcCoName");    editorList.add(editor1);    TextFieldEditor zcCoPerson = new TextFieldEditor("采购单位联系人", "zcCoPerson");    editorList.add(zcCoPerson);    TextFieldEditor zcCoPhone = new TextFieldEditor("采购单位电话", "zcCoPhone");    editorList.add(zcCoPhone);    String columNames[] = { "项目名称", "采购类型", "负责人" };    ZcEbProjFnHandler projHandler = new ZcEbProjFnHandler(columNames);    dto.setCoCode("");    dto.setNd(WorkEnv.getInstance().getTransNd());    ForeignEntityFieldEditor editor0 = new ForeignEntityFieldEditor("ZcEbProj.getZcEbProj", dto, 20, projHandler, columNames, "采购项目名称", "projName");    editorList.add(editor0);    TextFieldEditor projLinkMan = new TextFieldEditor("项目负责人", "projLeader");    editorList.add(projLinkMan);    TextFieldEditor proxyDepartName = new TextFieldEditor("代理机构名称", "proxyDepartName");    editorList.add(proxyDepartName);    TextFieldEditor proxyDepartPerson = new TextFieldEditor("代理机构联系人", "proxyDepartPerson");    editorList.add(proxyDepartPerson);    TextFieldEditor proxyDepartPhone = new TextFieldEditor("代理机构电话", "proxyDepartPhone");    editorList.add(proxyDepartPhone);    return editorList;  }  @Override  public JComponent createSubBillPanel() {    mainSubPanel = new JTabbedPane();    mainSubPanel.add("采购单位招标书评价", createPanel1());    mainSubPanel.add("采购单位保密情况评价", createPanel2());    mainSubPanel.add("采购单位综合评价", createPanel3());    // pane.add("采购监管部门奖惩情况", createPanel4());    return mainSubPanel;  }  JPanel createPanel1() {    panel1 = new JPanel();    JPanel messagePanel = new JPanel(new BorderLayout());    JTextAreaLabel message = new JTextAreaLabel();    message.setFont(new Font("宋体", Font.BOLD, 16));    message.setText("请按照客观事实、认真核对信息后选择、如果违反在相应的选择框");    message.setForeground(Color.RED);    messagePanel.add(message, BorderLayout.CENTER);    BorderLayout borderLayout = new BorderLayout();    panel1.setLayout(borderLayout);    List showData = new ArrayList();    showData.add("列入限制、排斥潜在供应商的商务、技术条款");    showData.add("有倾向性或者排斥潜在供应商的规格技术标准及其他有违公平竞争的条款");    showData.add("以不合理的注册资本金、销售业绩以及资格等条款对潜在供应商实行歧视或者差别待遇");    showData.add("擅自对采购文件作出修改");    List selectList = new ArrayList();    ZcEbPurchaseDepartReview integrityManage = this.listCursor.getCurrentObject();    if (integrityManage != null) {      //      selectList.add(integrityManage.getBlindex1());      //      selectList.add(integrityManage.getBlindex2());      //      selectList.add(integrityManage.getBlindex3());      //      selectList.add(integrityManage.getBlindex4());      //      selectList.add(integrityManage.getBlindex5());      //      selectList.add(integrityManage.getBlindex6());      //      selectList.add(integrityManage.getBlindex7());    } else {      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");    }    //selectList = blSelect;    List reasonList = new ArrayList();    panel1.add(messagePanel, BorderLayout.NORTH);    JTable table = getJtable(showData, selectList, reasonList);    JPanel panel = new JPanel(new BorderLayout());    JScrollPane scrollPane = new JScrollPane(table);    table.setPreferredScrollableViewportSize(new Dimension(500, 70));    panel.add(scrollPane);    panel1.add(panel, BorderLayout.CENTER);    auditResultTables.add(table);    return panel1;  }  JPanel createSelectPane(List showData, List selectList, List reasonList) {    JTable table = getJtable(showData, selectList, reasonList);    JPanel panel = new JPanel(new BorderLayout());    JScrollPane scrollPane = new JScrollPane(table);    table.setPreferredScrollableViewportSize(new Dimension(500, 70));    panel.add(scrollPane);    return panel;  }  JPanel createPanel2() {    JPanel messagePanel = new JPanel(new BorderLayout());    JTextAreaLabel message = new JTextAreaLabel();    message.setFont(new Font("宋体", Font.BOLD, 16));    message.setText("请按照客观事实、认真核对信息后选择、如果违反在相应的选择框");    message.setForeground(Color.RED);    messagePanel.add(message, BorderLayout.CENTER);    List showData = new ArrayList();    showData.add("泄露未公布的项目预算");    showData.add("泄露已获取采购文件的供应商名单");    showData.add("泄露评审专家及评审的有关情况");    showData.add("泄露尚未公布的中标（成交）结果");    showData.add("泄露不得公开的供应商报价");    showData.add("泄露供应商的投标文件");    showData.add("泄露提供假冒伪劣产品的");    showData.add("泄露财政部门规定的其他保密事项");    List selectList = new ArrayList();    ZcEbPurchaseDepartReview integrityManage = this.listCursor.getCurrentObject();    if (integrityManage != null) {      //      selectList.add(integrityManage.getBdindex1());      //      selectList.add(integrityManage.getBdindex2());      //      selectList.add(integrityManage.getBdindex3());      //      selectList.add(integrityManage.getBdindex4());      //      selectList.add(integrityManage.getBdindex5());      //      selectList.add(integrityManage.getBdindex6());      //      selectList.add(integrityManage.getBdindex7());      //      selectList.add(integrityManage.getBdindex8());      //      selectList.add(integrityManage.getBdindex9());      //      selectList.add(integrityManage.getBdindex10());    } else {      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");    }    List reasonList = new ArrayList();    JTable table = getJtable(showData, selectList, reasonList);    JPanel panel = new JPanel(new BorderLayout());    JScrollPane scrollPane = new JScrollPane(table);    table.setPreferredScrollableViewportSize(new Dimension(500, 70));    panel.add(messagePanel, BorderLayout.NORTH);    panel.add(scrollPane, BorderLayout.CENTER);    auditResultTables.add(table);    return panel;  }  public JTable getMYDJtable(List showData, List selectList) {    DefaultTableModel dm = new DefaultTableModel();// .getModel();    Vector vectorP = new Vector();    vectorP.add("行号");    vectorP.add("评审标准");    vectorP.add("");    vectorP.add("满意度");    vectorP.add(" ");    Vector vectorData = new Vector();    for (int i = 0; i < showData.size(); i++) {      Vector rowData = new Vector();      rowData.add(i);      rowData.add(showData.get(i));      final JCheckBox checkMY = new JCheckBox("满意");      final JCheckBox checkBMY = new JCheckBox("不满意");      final JCheckBox checkYB = new JCheckBox("一般");      rowData.add(checkMY);      rowData.add(checkYB);      rowData.add(checkBMY);      vectorData.add(rowData);    }    dm.setDataVector(vectorData, vectorP);    JTable table = new JTable(dm) {      public void tableChanged(TableModelEvent e) {        super.tableChanged(e);        repaint();      }    };    table.getColumn("满意度").setCellEditor(new JCheckBoxCellEditor(new JCheckBox()));    table.getColumn("").setCellEditor(new JCheckBoxCellEditor(new JCheckBox()));    table.getColumn(" ").setCellEditor(new JCheckBoxCellEditor(new JCheckBox()));    table.getColumn("满意度").setCellRenderer(new JCheckBoxRenderer());    table.getColumn("").setCellRenderer(new JCheckBoxRenderer());    table.getColumn(" ").setCellRenderer(new JCheckBoxRenderer());    table.setRowHeight(30);    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);    TableColumnModel tm = table.getColumnModel();    TableColumn tc = tm.getColumn(1);    tc.setMinWidth(200);    tc = tm.getColumn(0);    tc.setMaxWidth(40);    auditResultTables.add(table);    return table;  }  private void setValue(int j, String str) throws Exception {    Class cls = SupplierIntegrityManage.class;    Method[] method = cls.getMethods();    for (int i = 0; i < method.length; i++) {      Method me = method.clone()[i];      if (me.getName().startsWith("setMydindex") && me.getName().endsWith(j + "")) {        System.out.println(me.getName());        ZcEbPurchaseDepartReview integrityManage = this.listCursor.getCurrentObject();        me.invoke(integrityManage, str);        this.listCursor.setCurrentObject(integrityManage);      }    }  }  @SuppressWarnings("unchecked")  public JTable getJtable(List showData, List selectList, List reasonList) {    final List list = selectList;    DefaultTableModel dm = new DefaultTableModel();// .getModel();    Vector vectorP = new Vector();    vectorP.add("行号");    vectorP.add("评审标准");    vectorP.add("是否违反");    vectorP.add("说明");    Vector vectorData = new Vector();    for (int i = 0; i < showData.size(); i++) {      JCheckBox yesorno = new JCheckBox();      Vector rowData = new Vector();      rowData.add(i + 1);      rowData.add(showData.get(i));      rowData.add(yesorno);      rowData.add("");      vectorData.add(rowData);      final int m = showData.size();      final int j = i;      yesorno.addItemListener(new ItemListener() {        @Override        public void itemStateChanged(ItemEvent e) {          if (e.getStateChange() == e.SELECTED) {            try {              getMethodIndex(m, j + 1, "y");            } catch (Exception e1) {              e1.printStackTrace();            }          } else if (e.getStateChange() == e.DESELECTED) {            try {              getMethodIndex(m, j + 1, "n");            } catch (Exception e1) {              e1.printStackTrace();            }          }        }      });    }    dm.setDataVector(vectorData, vectorP);    JTable table = new JTable(dm) {      public void tableChanged(TableModelEvent e) {        super.tableChanged(e);        repaint();      }    };    table.getColumn("是否违反").setCellEditor(new JCheckBoxCellEditor(new JCheckBox()));    table.getColumn("说明").setCellEditor(new TextCellEditor());    table.getColumn("是否违反").setCellRenderer(new JCheckBoxRenderer());    table.setRowHeight(30);    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);    TableColumnModel tm = table.getColumnModel();    TableColumn tc = tm.getColumn(0);    tc.setMaxWidth(40);    tc = tm.getColumn(1);    tc.setMinWidth(600);    tc = tm.getColumn(2);    tc.setMinWidth(20);    tc = tm.getColumn(3);    tc.setMinWidth(200);    return table;  }  private void setTableItemEditor(JTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());  }  private void getMethodIndex(int c, int index, String str) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {    Class cls = SupplierIntegrityManage.class;    Method[] method = cls.getMethods();    for (int i = 0; i < method.length; i++) {      Method me = method.clone()[i];      if (c == 7) {        if (me.getName().startsWith("setBlindex") && me.getName().endsWith(index + "")) {          ZcEbPurchaseDepartReview integrityManage = this.listCursor.getCurrentObject();          me.invoke(integrityManage, str);          this.listCursor.setCurrentObject(integrityManage);        }      } else if (c == 10) {        if (me.getName().startsWith("setBdindex") && me.getName().endsWith(index + "")) {          ZcEbPurchaseDepartReview integrityManage = this.listCursor.getCurrentObject();          me.invoke(integrityManage, str);          this.listCursor.setCurrentObject(integrityManage);        }      }    }  }  JPanel createPanel3() {    JPanel messagePanel = new JPanel(new BorderLayout());    JTextAreaLabel message = new JTextAreaLabel();    message.setFont(new Font("宋体", Font.BOLD, 16));    message.setText("请按照客观事实、认真核对信息后选择、如果违反在相应的选择框");    message.setForeground(Color.RED);    messagePanel.add(message, BorderLayout.CENTER);    List showData = new ArrayList();    showData.add("招标文件");    showData.add("评审过程");    showData.add("质疑答复");    showData.add("归档情况");    List selectList = new ArrayList();    ZcEbPurchaseDepartReview integrityManage = this.listCursor.getCurrentObject();    if (integrityManage != null) {      //      selectList.add(integrityManage.getMydindex1());      //      selectList.add(integrityManage.getMydindex2());      //      selectList.add(integrityManage.getMydindex3());      //      selectList.add(integrityManage.getMydindex4());    } else {      selectList.add("1");      selectList.add("1");      selectList.add("1");      selectList.add("1");    }    JTable table = getMYDJtable(showData, selectList);    JPanel panel = new JPanel(new BorderLayout());    JScrollPane scrollPane = new JScrollPane(table);    table.setPreferredScrollableViewportSize(new Dimension(500, 70));    panel.add(messagePanel, BorderLayout.NORTH);    panel.add(scrollPane, BorderLayout.CENTER);    return panel;  }  @SuppressWarnings("unchecked")  JPanel createPanel4() {    tablePanel.init();    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_table");    tablePanel.getTable().setShowCheckedColumn(true);    tablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 0));    return tablePanel;  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    //toolBar.add(previousButton);    //toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopEditing();        doAdd();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopEditing();        doDelete();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopEditing();        doSave();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });  }  private void doEdit() {  }  @SuppressWarnings("unchecked")  private void doAdd() {    ZcEbPurchaseDepartReview integrityManage = new ZcEbPurchaseDepartReview();    this.listCursor = new ListCursor(new ArrayList(1), -1);    listCursor.setCurrentObject(integrityManage);    setEditingObject(integrityManage);    refreshData();    updateFieldEditorsEditable();  }  private void doDelete() {    ZcEbPurchaseDepartReview po = this.listCursor.getCurrentObject();    ZcEbPurchaseDepartReview afterbill = null;    String reviewId = po.getReviewId();    this.listPanel.getZcEbPurchaseDepartReviewDelegate().deleteZcEbPurchaseDepartReviewById(reviewId, requestMeta);    //this.listCursor.setCurrentObject(afterbill);    JOptionPane.showMessageDialog(this, "删除成功.", "提示", JOptionPane.INFORMATION_MESSAGE);    this.listCursor.removeCurrentObject();    refreshData();  }  public boolean doSave() {    if (!checkBeforeSave()) {      return false;    }    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return true;    }    ZcEbPurchaseDepartReview purDep = this.listCursor.getCurrentObject();    ArrayList detail = new ArrayList();    purDep.setDetail(detail);    int tabNum = 0;    for (Iterator iterator = auditResultTables.iterator(); iterator.hasNext();) {      JTable t = (JTable) iterator.next();      DefaultTableModel model = (DefaultTableModel) t.getModel();      Vector datav = model.getDataVector();      int rowNum = 0;      for (Iterator iterator2 = datav.iterator(); iterator2.hasNext();) {        Vector row = (Vector) iterator2.next();        JCheckBox checkbox = (JCheckBox) row.get(2);        if (checkbox.isSelected()) {          ZcEbPurchaseDepRevDetail de = new ZcEbPurchaseDepRevDetail();          de.setProvisionContent((String) row.get(1));          de.setFraction(BigDecimal.ONE);          de.setProvisionId(tabNum + "," + rowNum);          detail.add(de);        }        rowNum++;      }      tabNum++;    }    ZcEbPurchaseDepartReview afterbill = null;    if (purDep.getReviewId() == null || "".equals(purDep.getReviewId().trim())) {      afterbill = this.listPanel.getZcEbPurchaseDepartReviewDelegate().insertZcEbPurchaseDepartReview(purDep, requestMeta);    } else {      this.listPanel.getZcEbPurchaseDepartReviewDelegate().updateZcEbPurchaseDepartReview(purDep, requestMeta);      afterbill = purDep;    }    this.listCursor.setCurrentObject(afterbill);    JOptionPane.showMessageDialog(this, "保存成功.", "提示", JOptionPane.INFORMATION_MESSAGE);    refreshData();    boolean success = true;    return success;  }  private Object auditResultTables() {    // TODO Auto-generated method stub    return null;  }  private boolean checkBeforeSave() {    return true;  }  private void doPrevious() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {    }    listCursor.previous();    refreshData();  }  private void doNext() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      listCursor.setCurrentObject(oldSupplierIntegrityManage);    }    listCursor.next();    refreshData();  }  private void doExit() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      this.parent.dispose();    }  }  private void doHelp() {  }  private void stopEditing() {  }  @SuppressWarnings("unchecked")  private void refreshData() {    ZcEbPurchaseDepartReview integrityManage = this.listCursor.getCurrentObject();    if (integrityManage == null) {      integrityManage = new ZcEbPurchaseDepartReview();      List lst = new ArrayList();      lst.add(integrityManage);      this.listCursor.setDataList(lst, -1);      listCursor.setCurrentObject(integrityManage);    } else {      integrityManage = this.listPanel.getZcEbPurchaseDepartReviewDelegate().getZcEbPurchaseDepartReviewById(integrityManage.getReviewId(),      requestMeta);    }    setCheckBoxsSelect(integrityManage.getDetail());    this.setEditingObject(integrityManage);    this.listCursor.setCurrentObject(integrityManage);    setOldObject();    panel1.repaint();    repaint();  }  private void setCheckBoxsSelect(List detail) {    // TODO Auto-generated method stub    if (detail == null)      return;    for (Iterator iterator = detail.iterator(); iterator.hasNext();) {      ZcEbPurchaseDepRevDetail d = (ZcEbPurchaseDepRevDetail) iterator.next();      String temp = d.getProvisionId();      String[] tabAndRowNums = temp.split("\\,");      int tabNum = Integer.valueOf(tabAndRowNums[0]);      int rowNum = Integer.valueOf(tabAndRowNums[1]);      JTable table = auditResultTables.get(tabNum);      DefaultTableModel model = (DefaultTableModel) table.getModel();      Vector datav = model.getDataVector();      Vector row = (Vector) datav.get(rowNum);      if (row.get(2) instanceof JCheckBox) {        JCheckBox box = (JCheckBox) row.get(2);        box.setSelected(true);      }    }  }  private void setOldObject() {    oldSupplierIntegrityManage = (ZcEbPurchaseDepartReview) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldSupplierIntegrityManage).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  /**   * 项目外部选择   *    * @author Administrator   *    */  private class ZcEbProjFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbProjFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbProj proj = (ZcEbProj) object;        ZcEbPurchaseDepartReview pur = listCursor.getCurrentObject();        pur.setProjCode(proj.getProjCode());        pur.setProjName(proj.getProjName());        pur.setProjLeader(proj.getManager());        Company comp = baseDataServiceDelegate.getCompanyByCoCode(requestMeta.getSvNd(), proj.getAgency(), requestMeta);        if (comp != null) {          pur.setProxyDepartName(comp.getName());          pur.setProxyDepartPerson("");          pur.setProxyDepartPhone(proj.getPhone());        }        setEditingObject(pur);        projCodeChange();      }    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjName();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE", rowData.getPurType());        data[i][col++] = rowData.getManager();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }    public boolean beforeSelect(ElementConditionDto dto) {      //      ZcEbPurchaseDepartReview integrityManage = listCursor.getCurrentObject();      //      if (integrityManage.getSupplier().getName() == null || integrityManage.getSupplier().getLinkMan() == null) {      //        JOptionPane.showMessageDialog(parent, "请先选择供应商", "提示", JOptionPane.INFORMATION_MESSAGE);      //        return false;      //      }      //      dto.setCoCode(integrityManage.getSupplier().getCode());      return true;    }  }  private void projCodeChange() {  }  /**   * 供应商外部选择   *    * @author Administrator   *    */  public class ZcEbPurchaseDepFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbPurchaseDepFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        Company zcco = (Company) object;        ZcEbPurchaseDepartReview integrityManage = listCursor.getCurrentObject();        integrityManage.setZcCoCode((String) zcco.getCode());        integrityManage.setZcCoName((String) zcco.getName());        setEditingObject(integrityManage);        projCodeChange();      }    }    @Override    public TableModel createTableModel(List showDatas) {      System.out.println("ssssddddP:" + showDatas);      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        Company zcco = (Company) showDatas.get(i);        int col = 0;        data[i][col++] = zcco.getName();        data[i][col++] = "";        data[i][col++] = "";      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }  }}
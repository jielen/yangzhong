/** * ZcEbOpenBidEditPanel.java * com.ufgov.gk.client.zc.openbid * Administrator * 2010-5-22 */package com.ufgov.zc.client.zc.openbid;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.math.BigDecimal;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Random;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.SwingUtilities;import javax.swing.border.TitledBorder;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.FileUploader;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.OpenBidButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.activeztb.TbDocService;import com.ufgov.zc.client.zc.ztb.component.ProgressGlassPane;import com.ufgov.zc.client.zc.ztb.util.GV;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.MimeMapping;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.ZcEbOpenBid;import com.ufgov.zc.common.zc.publish.IZcEbEcbjServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbOpenBidServiceDelegate;/** * @author Administrator * */public class ZcEbOpenBidEditPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = -7096834819505641043L;  private static final Logger logger = Logger.getLogger(ZcEbOpenBidEditPanel.class);  private IZcEbOpenBidServiceDelegate zcEbOpenBidServiceDelegate = (IZcEbOpenBidServiceDelegate) ServiceFactory.create(  IZcEbOpenBidServiceDelegate.class, "zcEbOpenBidServiceDelegate");  public IZcEbEcbjServiceDelegate zcEbEcbjServiceDelegate = (IZcEbEcbjServiceDelegate) ServiceFactory.create(IZcEbEcbjServiceDelegate.class,  "zcEbEcbjServiceDelegate");  IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class,  "baseDataServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_OPENBID";  private FuncButton saveButton = new SaveButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private FuncButton openBidButton = new OpenBidButton();  private final ListCursor listCursor;  private ZcEbOpenBid oldOpenBid;  private ZcEbOpenBidListPanel listPanel;  private ZcEbOpenBidEditPanel self = this;  private GkBaseDialog parent;  private volatile boolean downLoadSuccess = true;;  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  JTabbedPane tabPane = new JTabbedPane();  JPanel summaryPanel;  TextFieldEditor remarkEditor;  private final String tabTitle = "投标一览表";  private String tbylbFilePath;  /**   * 招投标文件下载及解压处理类。   */  TbDocService tbs = null;  private static String progressInfoStatus = null;  HashMap<String, JPanel> sumarryPanelCach = new HashMap<String, JPanel>();  //开标的一些  private List<String> paramList = new ArrayList<String>();  public ZcEbOpenBidEditPanel(ZcEbOpenBidDialog parent, ListCursor listCursor, String tabStatus, ZcEbOpenBidListPanel listPanel) {    this.listCursor = listCursor;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("开标管理"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 2;    init();    requestMeta.setCompoId(compoId);    refreshData();    setButtonStatus();    updateFieldEditorsEditable();  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    TextFieldEditor editor0 = new TextFieldEditor("项目代码", "projCode");    editorList.add(editor0);    editor0 = new TextFieldEditor("项目名称", "projName");    editorList.add(editor0);    editor0 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE), "packCode");    editorList.add(editor0);    editor0 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME), "packName");    editorList.add(editor0);    editor0 = new TextFieldEditor("投标人", "providerName");    editorList.add(editor0);    editor0 = new TextFieldEditor("投标金额", "bidSumMask");    editorList.add(editor0);    DateFieldEditor editor11 = new DateFieldEditor("开标日期", "openBidDate");    editorList.add(editor11);    AsValFieldEditor editor8 = new AsValFieldEditor("开标状态", "openBidStatus", "ZC_VS_OPEN_BID_STATUS");    editorList.add(editor8);    this.remarkEditor = new TextFieldEditor("开标备注", "openBidRemark");    editorList.add(this.remarkEditor);    return editorList;  }  @Override  public JComponent createSubBillPanel() {    this.tabPane = new JTabbedPane();    ZcEbOpenBid openBid = (ZcEbOpenBid) listCursor.getCurrentObject();    this.tabPane.addTab(this.tabTitle, new JPanel());    return this.tabPane;  }  private JPanel getSummaryPn(ZcEbOpenBid openBid) {    if (openBid.getOpenBidStatus() != null && (openBid.getOpenBidStatus().equals("1") || openBid.getOpenBidStatus().equals("2"))) {      final String key = openBid.getBidDocId() + "_" + openBid.getPackCode();      if (this.sumarryPanelCach.containsKey(key)) {        return this.sumarryPanelCach.get(key);      }      if (openBid.getTbylbFileId() == null) {        createSummaryPn(openBid, true);      } else {        createSummaryByTbylb(openBid);      }    } else {      this.summaryPanel = new JPanel();      this.summaryPanel.setPreferredSize(new Dimension(600, 300));    }    return this.summaryPanel;  }  private JPanel createSummaryPn(final ZcEbOpenBid ob, final boolean flag) {    tbs = new TbDocService();    tbs.addPathPrex(ob.getProjCode() + File.separator + ob.getPackCode() + File.separator + ob.getProviderCode() + File.separator);    String filePath = ZcUtil.getZcFileTempDir();    File file = new File(filePath);    if (file.exists()) {      deleteFile(file);    }    final ProgressGlassPane glassPane = new ProgressGlassPane() {      private static final long serialVersionUID = 3680909427917677992L;      public int getProgressBarValue() {        while (getTimer().isRunning()) {          return new Random().nextInt(100);        }        return 100;      }      public String getProgressBarString() {        return progressInfoStatus;      }    };    glassPane.setVisible(true);    parent.getRootPane().getRootPane().setGlassPane(glassPane);    Thread downLoaderFile = new Thread(new Runnable() {      public void run() {        synchronized (this) {          glassPane.getTimer().start();          glassPane.setVisible(true);          progressInfoStatus = "正在解密投标文件";          System.out.println("开始解密投标文件");          try {            downLoadSuccess = false;            /**             * 下载整个投标文件，然后从下载投标文件中抽取投标一栏 表            //             */            //            tbs.downloadFile(ob.getProjCode(), ob.getBidDocId(), "FILE");            //            summaryPanel = tbs.getTbSummaryTable(ob.getProjName(), ob.getPackName(), ob.getPackCode());            //            ob.setBidSum(tbs.getTbSum(ob.getPackCode()).toString());            //            tbylbFilePath=tbs.getFileDownloadPath() + File.separator + tbs.kbylbFilePath;            /**             *不下载投标文件， 从服务器的招标文件中抽取投标一栏表             */            File tbylbFile = tbs.downloadTbylbFromZbFile(tbs.getDownloadFilePath() + File.separator + "TBYLB", ob.getBidDocId(), ob.getPackCode());            summaryPanel = tbs.getEcbjSummaryTable(tbylbFile, paramList);            tbylbFilePath = tbylbFile.toString();            ob.setBidSum(tbs.getEcbjSum(tbylbFile).toString());            ob.setPromiseWorkDate(tbs.getWorkDate(tbylbFile));            ob.setBidSumMask(ob.getBidSum());            downLoadSuccess = true;          } catch (Exception e) {            downLoadSuccess = true;            ob.setOpenBidStatus("2");            e.printStackTrace();            File file = new File(tbs.getDownloadFilePath());            System.out.println("开始删除目录文件" + tbs.getDownloadFilePath());            deleteFile(file);            JOptionPane.showMessageDialog(self, "开标失败，详细：\n" + e.getMessage(), "提示", JOptionPane.INFORMATION_MESSAGE);          } finally {            if (flag) {              openBidButton.setEnabled(true);              saveButton.setEnabled(true);            }          }          progressInfoStatus = "解密投标文件完成";          glassPane.getTimer().stop();          glassPane.getProgressBar().setValue(100);          glassPane.getProgressInfo().setHorizontalAlignment(SwingUtilities.CENTER);          glassPane.getProgressInfo().setText("");          glassPane.setVisible(false);          String key = ob.getBidDocId() + "_" + ob.getPackCode();          setEditingObject(ob);          sumarryPanelCach.put(key, summaryPanel);          tabPane.removeAll();          tabPane.addTab(tabTitle, summaryPanel);        }      }    });    downLoaderFile.start();    //    }    return summaryPanel;  }  /**   *   * @Description:  * @return void 返回类型  * @since 1.0   */  private void upLoadeBjFile(String filePath, ZcEbOpenBid ob) {    File file = new File(filePath);    System.out.println("file.length() === " + file.length());    FileInputStream in = null;    try {      in = new FileInputStream(file);      BigDecimal available = new BigDecimal(in.available());      BigDecimal mByte = new BigDecimal(1024 * 1024);      BigDecimal resultSize = available.divide(mByte, 2, BigDecimal.ROUND_HALF_UP);      BigDecimal masSizeM = new BigDecimal(500);      if (resultSize.compareTo(masSizeM) > 0) {        JOptionPane.showMessageDialog(this, "文件限制在" + masSizeM + "m以内,此文件大于这个数不能上传！", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      byte[] content = new byte[available.intValue()];      long startTime = System.currentTimeMillis();      in.read(content);      System.out.println("client read file time === " + ((System.currentTimeMillis() - startTime) / 1000f));      AsFile asFile = new AsFile();      asFile.setFileContent(content);      asFile.setFileName(file.getName());      asFile.setMimeType(MimeMapping.getMimeType(FileUploader.getExtension(file)));      String fileId = baseDataServiceDelegate.uploadFile(asFile, requestMeta);      System.out.println("upload file to server time === " + ((System.currentTimeMillis() - startTime) / 1000f));      asFile.setFileId(fileId);      ob.setTbylbFileId(fileId);      ob.setTbylbFileName(asFile.getFileName());    } catch (Exception e) {      e.printStackTrace();      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "上传文件失败！\n" + e.getMessage(), "错误", JOptionPane.ERROR_MESSAGE);    } finally {      if (in != null) {        try {          in.close();        } catch (IOException e) {          logger.error(e.getMessage(), e);          e.printStackTrace();        }      }    }  }  private JPanel createSummaryByTbylb(ZcEbOpenBid openBid) {    TbDocService tb = new TbDocService();    tb.setFileDownloadPath(tb.getDownloadFilePath() + File.separator + openBid.getProjCode() + File.separator + openBid.getPackCode()    + File.separator + openBid.getProviderCode() + File.separator);    File file = new File(tb.getFileDownloadPath() + File.separator + openBid.getTbylbFileId());    if (!file.exists()) {      File asFile = tb.downLoadEcBjFile(openBid.getTbylbFileId());      if (asFile == null) {        JPanel panel = new JPanel();        String info = "因为数据库中缺少对应的再次报价表文件数据，此次无法显示具体报价情况...";        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), info, TitledBorder.CENTER, TitledBorder.TOP, new Font(        "宋体", Font.BOLD, 15), Color.RED));        panel.setPreferredSize(new Dimension(600, 300));        return panel;      }      summaryPanel = tb.getEcbjSummaryTable(file, paramList);    } else {      summaryPanel = tb.getEcbjSummaryTable(file, paramList);    }    sumarryPanelCach.put(openBid.getTbylbFileId() + "_" + openBid.getPackCode(), summaryPanel);    return summaryPanel;  }  public void deleteFile(File file) {    if (null != file) {      if (file.isDirectory()) {        File files[] = file.listFiles();        for (File f : files) {          System.out.println(f.getAbsolutePath());          deleteFile(f);        }        file.delete();      } else {        file.delete();      }    }  }  /**   * 设置工具条上按钮的可用性   *    * Administrator   * 2010-5-15   */  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("1");      bs.addBillStatus("2");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addBillStatus("1");      bs.addBillStatus("2");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.openBidButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.exitButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.helpButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbOpenBid obj = (ZcEbOpenBid) (this.listCursor.getCurrentObject());    String billStatus = obj.getOpenBidStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, obj.getProcessInstId());  }  private void refreshData() {    ZcEbOpenBid openBid = (ZcEbOpenBid) listCursor.getCurrentObject();    paramList.add(openBid.getProjName());    paramList.add(openBid.getPackName());    paramList.add(GV.NODE_NAME_TBYLB);    paramList.add("Y");    this.setEditingObject(openBid);    refreshSubTableData(openBid);    setOldObject();  }  private void setOldObject() {    this.oldOpenBid = (ZcEbOpenBid) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  private void refreshSubTableData(ZcEbOpenBid openBid) {    if (openBid.getOpenBidStatus() == null)      return;    if (openBid.getOpenBidStatus().equals("1") && openBid.getTbylbFileId() != null) {      this.tabPane.removeAll();      this.tabPane.addTab(this.tabTitle, createSummaryByTbylb(openBid));      this.tabPane.repaint();    }    return;  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null && (fd.getFieldName().equals("openBidStatus") || fd.getFieldName().equals("openBidRemark"))) {          fd.setEnabled(true);        } else {          fd.setEnabled(false);        }      }    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }    }  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(openBidButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doSave();      }    });    openBidButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doOpenBid();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  private void doOpenBid() {    ZcEbOpenBid openBid = (ZcEbOpenBid) this.listCursor.getCurrentObject();    openBid.setOpenBidStatus("1");    saveButton.setEnabled(false);    openBidButton.setEnabled(false);    openBid.setOpenBidDate(requestMeta.getSysDate());    openBid.setBidSumMask(openBid.getBidSumMask());    openBid.setOrgCode(requestMeta.getSvOrgCode());    openBid.setAgency(requestMeta.getSvCoCode());    openBid.setNd(requestMeta.getSvNd());    openBid.setExecutor(requestMeta.getSvUserID());    openBid.setExecuteDate(requestMeta.getSysDate());    this.tabPane.removeAll();    this.tabPane.addTab(this.tabTitle, getSummaryPn(openBid));    this.tabPane.repaint();    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  private void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldOpenBid);      }    }    listCursor.previous();    refreshData();    setButtonStatus();  }  private void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldOpenBid);      }    }    listCursor.next();    refreshData();    setButtonStatus();  }  public void doExit() {    if (!downLoadSuccess) {      int exitNum = JOptionPane.showConfirmDialog(this, "正在下载投标文件,是否退出?", "退出确认", 0);      if (exitNum == JOptionPane.YES_OPTION) {        this.parent.dispose();        if (tbs != null) {          String filePath = tbs.getDownloadFilePath();          File file = new File(filePath);          System.out.println("开始删除目录文件" + tbs.getDownloadFilePath());          deleteFile(file);        }        return;      } else {        return;      }    }    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存?", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    this.parent.dispose();    if (tbs != null) {      String filePath = tbs.getDownloadFilePath();      File file = new File(filePath);      System.out.println("开始删除目录文件" + tbs.getDownloadFilePath());      deleteFile(file);    }  }  public boolean doSave() {    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    ZcEbOpenBid openBid = (ZcEbOpenBid) this.listCursor.getCurrentObject();    if (!checkBeforeSave())      return false;    boolean success = true;    String errorInfo = "";    try {      if (!"".equals(tbylbFilePath) && tbylbFilePath != null) {        upLoadeBjFile(tbylbFilePath, openBid);        zcEbEcbjServiceDelegate.insertZcEbEcbjItemFN(openBid, requestMeta);      }      //上传投标文件到数据库。      openBid = this.zcEbOpenBidServiceDelegate.saveFN(openBid, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(openBid);      this.oldOpenBid = (ZcEbOpenBid) ObjectUtil.deepCopy(openBid);      this.listPanel.refreshCurrentTabData();      //删除下载的投标文件      File file = new File(tbs.getDownloadFilePath());      System.out.println("开始删除目录文件" + tbs.getDownloadFilePath());      deleteFile(file);      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      setButtonStatus();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  private boolean checkBeforeSave() {    ZcEbOpenBid openBid = (ZcEbOpenBid) this.listCursor.getCurrentObject();    if (openBid.getOpenBidStatus() != null && openBid.getOpenBidStatus().equals(ZcSettingConstants.FIELD_TRANS_ZC_BJ_NO_OPEN)) {      JOptionPane.showMessageDialog(this.parent, "已经唱价不能将开标状态修改成等待开标", "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    if (openBid.getOpenBidStatus() != null && openBid.getOpenBidStatus().equals("2")) {      if (openBid.getOpenBidRemark() == null || openBid.getOpenBidRemark().trim().length() == 0) {        JOptionPane.showMessageDialog(this.parent, "请填写开标失败原因", "提示", JOptionPane.WARNING_MESSAGE);        this.remarkEditor.setFocusable(true);        return false;      }    }    return true;  }  public void doHelp() {    setButtonStatus();  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldOpenBid).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }}
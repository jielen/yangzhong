package com.ufgov.zc.client.zc.dljgAndjczw;import java.awt.BorderLayout;import java.awt.Container;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.io.File;import java.util.ArrayList;import java.util.Date;import java.util.Iterator;import java.util.List;import javax.swing.JButton;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTextField;import javax.swing.SwingUtilities;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.zc.dataexchange.DelegDepAndJCNetWorkDataExchangeListPanel;import com.ufgov.zc.client.component.zc.dataexchange.model.CommonDataExchangeOperator;import com.ufgov.zc.client.zc.dljgAndjczw.expimp.ExportAuditSheetDataBusiness;import com.ufgov.zc.client.zc.dljgAndjczw.expimp.ExportBidBulletinDataBusiness;import com.ufgov.zc.client.zc.dljgAndjczw.expimp.ExportEntrustCancelDataBusiness;import com.ufgov.zc.client.zc.dljgAndjczw.expimp.ExportEntrustDataBusiness;import com.ufgov.zc.client.zc.dljgAndjczw.expimp.ExportEvalReportDataBusiness;import com.ufgov.zc.client.zc.dljgAndjczw.expimp.ExportHtDataBusiness;import com.ufgov.zc.client.zc.dljgAndjczw.expimp.ExportProjChgDataBusiness;import com.ufgov.zc.client.zc.dljgAndjczw.expimp.ExportProjectDataBusiness;import com.ufgov.zc.client.zc.dljgAndjczw.expimp.ExportProtocolDataBusiness;import com.ufgov.zc.client.zc.dljgAndjczw.expimp.ExportRequirementDataBusiness;import com.ufgov.zc.client.zc.dljgAndjczw.expimp.ExportWidBulletinDataBusiness;import com.ufgov.zc.client.zc.dljgAndjczw.server.ExchangeDataExportService;import com.ufgov.zc.client.zc.intranetandbidnet.IntrantAndBidnetAbstractDialog;import com.ufgov.zc.client.zc.ztb.component.ProgressGlassPane;import com.ufgov.zc.client.zc.ztb.util.PubFunction;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DateUtil;import com.ufgov.zc.common.zc.model.ZcDelegJczwDataExchange;import com.ufgov.zc.common.zc.publish.IDljgJczwDataExpDelegate;import com.ufgov.zc.common.zc.publish.IZcDelegJczwDataExchangeDelegate;/** * 代理机构与内网数据导出 * @author wangwei * @date 2011-10-31 */public class DljgJczwDataExpDialog extends IntrantAndBidnetAbstractDialog {  private static final long serialVersionUID = 89076768790980L;  private IDljgJczwDataExpDelegate dljgJczwDataExpDelegate = (IDljgJczwDataExpDelegate) ServiceFactory.create(IDljgJczwDataExpDelegate.class,  "dljgJczwDataExpDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private JTextField businessCodeField;  private JButton jButtonExec;  private JButton jButtonExit;  private DljgJczwDataExpDialog self = this;  private DelegDepAndJCNetWorkDataExchangeListPanel listPanel;  private List<ZcDelegJczwDataExchange> beanList;  private String opType = null;  public IZcDelegJczwDataExchangeDelegate zcDelegJczwDataExchangeDelegate;  public DljgJczwDataExpDialog(DelegDepAndJCNetWorkDataExchangeListPanel listPanel, List<ZcDelegJczwDataExchange> checkedList, String opType) {    Container container = self.getContentPane();    this.listPanel = listPanel;    this.beanList = checkedList;    this.opType = opType;    this.zcDelegJczwDataExchangeDelegate = listPanel.zcDelegJczwDataExchangeDelegate;    container.setLayout(new BorderLayout(6, 6));    container.removeAll();    JPanel panel3 = new JPanel(new BorderLayout(1, 2));    panel3.add(new JLabel("业务编号:"), BorderLayout.WEST);    ElementConditionDto entrustDto = new ElementConditionDto();    entrustDto.setNd(requestMeta.getSvNd());    businessCodeField = new JTextField();    initBusinessCodeFieldTxt();    panel3.add(businessCodeField, BorderLayout.CENTER);    container.add(panel3, BorderLayout.NORTH);    JPanel middle = new JPanel(new BorderLayout());    JPanel inner = new JPanel(new BorderLayout(4, 4));    JPanel panel2 = new JPanel(new BorderLayout(4, 4));    panel2.add(new JLabel("导出位置:"), BorderLayout.WEST);    final JTextField savePathTF = new JTextField();    savePathTF.setName("pathTextField");    panel2.add(savePathTF, BorderLayout.CENTER);    JButton jButton = makeBrowerButton(savePathTF, true);    panel2.add(jButton, BorderLayout.EAST);    inner.add(panel2, BorderLayout.NORTH);    middle.add(inner, BorderLayout.CENTER);    JScrollPane scrollPane = this.makeTextAreaScrollPanel();    inner.add(scrollPane, BorderLayout.CENTER);    container.add(middle, BorderLayout.CENTER);    JPanel panel4 = new JPanel();    jButtonExec = new JButton("执行导出");    jButtonExit = new JButton("关闭");    jButtonExit.setVisible(false);    jButtonExec.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        if (savePathTF.getText() == null || "".equals(savePathTF.getText())) {          JOptionPane.showMessageDialog(self, "请指定导出文件的存放位置...", "提示", JOptionPane.OK_OPTION);          return;        }        if (!CommonDataExchangeOperator.checkFilePath(savePathTF.getText())) {          JOptionPane.showMessageDialog(self, "路径中存在非法字符，请检查...", "提示", JOptionPane.OK_OPTION);          return;        }        self.progressText.setLength(0);        //savePathTF.setText(self.saveHistoryDir(savePathTF.getText(), "export_dir"));        savePathTF.setText(savePathTF.getText().trim() + File.separator);        makeProgressGlassPane(savePathTF.getText().trim(), null, true);      }    });    jButtonExit.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    panel4.add(jButtonExec);    panel4.add(jButtonExit);    container.add(panel4, BorderLayout.SOUTH);  }  private void initBusinessCodeFieldTxt() {    StringBuffer sb = new StringBuffer();    for (Iterator iterator = beanList.iterator(); iterator.hasNext();) {      ZcDelegJczwDataExchange model = (ZcDelegJczwDataExchange) iterator.next();      sb.append(model.getMemo()).append(",");    }    businessCodeField.setText(sb.toString());  }  public void expExecute(String path, String sn, ProgressGlassPane glassPane) {    try {      glassPane.getTimer().start();      isJobRunning = true;      jButtonExec.setEnabled(false);      if (ZcDelegJczwDataExchange.OP_TYPE_DLJG_OUT.equals(this.opType)) {        path += File.separator + "采购中心系统导出数据(" + DateUtil.dateToChinaString(new Date()) + ")";      } else {        path += File.separator + "财政内网导出数据(" + DateUtil.dateToChinaString(new Date()) + ")";      }      setFlagFile(path, opType);      List<Class> expBusinessList = new ArrayList<Class>();      if (beanList.size() > 0) {        if(ZcDelegJczwDataExchange.DATA_TYPE_ZC_XMCG_HT.equals(beanList.get(0).getDataType())){          expBusinessList.add(ExportHtDataBusiness.class);        }else{          expBusinessList.add(ExportEntrustDataBusiness.class);          expBusinessList.add(ExportEvalReportDataBusiness.class);          expBusinessList.add(ExportWidBulletinDataBusiness.class);          expBusinessList.add(ExportBidBulletinDataBusiness.class);          expBusinessList.add(ExportProjectDataBusiness.class);          expBusinessList.add(ExportProtocolDataBusiness.class);          expBusinessList.add(ExportRequirementDataBusiness.class);          expBusinessList.add(ExportAuditSheetDataBusiness.class);          expBusinessList.add(ExportProjChgDataBusiness.class);          expBusinessList.add(ExportEntrustCancelDataBusiness.class);        }      }      ExchangeDataExportService exd = new ExchangeDataExportService(expBusinessList, beanList, path);      exd.exportBusinessData(progressText);      addExpLog();      progressText.append("开始对数据打包\n");      saveAsZip(path);      progressText.append("打包结束\n");      PubFunction.deleteFile(path, false);      progressText.append("清除临时数据完毕\n本次导出完毕!\n");      publishProgressText();      glassPane.getTimer().stop();      glassPane.getProgressBar().setValue(100);      glassPane.getProgressInfo().setHorizontalAlignment(SwingUtilities.CENTER);      glassPane.setVisible(false);      isJobRunning = false;      jButtonExec.setEnabled(true);      jButtonExec.setVisible(false);      jButtonExit.setVisible(true);      listPanel.refreshCurrentTabData();    } catch (Exception e) {      e.printStackTrace();      progressText.append(e.getMessage() + "\n导出终止！");      publishProgressText();      glassPane.getTimer().stop();      glassPane.setVisible(false);      isJobRunning = false;      jButtonExec.setEnabled(true);    }  }  private void addExpLog() {    String logType = null;    if (ZcDelegJczwDataExchange.OP_TYPE_DLJG_OUT.equals(this.opType)) {      logType = ZcDelegJczwDataExchange.OP_TYPE_DLJG_OUT_LOG;    } else {      logType = ZcDelegJczwDataExchange.OP_TYPE_JCZW_OUT_LOG;    }    for (Iterator iterator = beanList.iterator(); iterator.hasNext();) {      ZcDelegJczwDataExchange record = (ZcDelegJczwDataExchange) iterator.next();      record.setOpType(logType);    }    zcDelegJczwDataExchangeDelegate.addDataExchangeLog(beanList, requestMeta);  }  public void doExit() {    this.dispose();  }}
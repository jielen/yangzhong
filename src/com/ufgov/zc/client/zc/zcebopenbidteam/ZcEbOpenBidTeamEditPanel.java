/** * ZcEbOpenBidTeamEditPanel.java * com.ufgov.gk.client.zc.zcebopenbidteam * Administrator * 2010-5-26 */package com.ufgov.zc.client.zc.zcebopenbidteam;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.ZcEbOpenBidTeamToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AuditButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldCellEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcEbOpenBidTeam;import com.ufgov.zc.common.zc.model.ZcEbOpenBidTeamMember;import com.ufgov.zc.common.zc.model.ZcEbOpenBidTeamPack;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.publish.IZcEbOpenBidTeamServiceDelegate;/** * @author Administrator * */public class ZcEbOpenBidTeamEditPanel extends AbstractMainSubEditPanel {  private static final Logger logger = Logger.getLogger(ZcEbOpenBidTeamEditPanel.class);  private IZcEbOpenBidTeamServiceDelegate zcEbOpenBidTeamServiceDelegate = (IZcEbOpenBidTeamServiceDelegate) ServiceFactory.create(  IZcEbOpenBidTeamServiceDelegate.class, "zcEbOpenBidTeamServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_OPENBIDTEAM";  private FuncButton addButton = new AddButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton printButton = new PrintButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private FuncButton auditButton = new AuditButton();  private FuncButton unAuditButton = new UnauditButton();  private final ListCursor listCursor;  private ZcEbOpenBidTeam oldOpenBidTeam;  private String tabStatus;  private ZcEbOpenBidTeamListPanel listPanel;  private JTablePanel memberTablePanel = new JTablePanel("member");  private JTablePanel packTablePanel = new JTablePanel("pack");  private ZcEbOpenBidTeamEditPanel self = this;  private GkBaseDialog parent;  private String projSqlMapSelectedId = "ZcEbProj.getZcEbProjForOpenTeam";  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private JFuncToolBar subMemberTableToolbar;  private JFuncToolBar subPackTableToolbar;  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  ElementConditionDto packDto = new ElementConditionDto();  TextFieldEditor projNameEditor = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJ_NAME), "projName");  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId);  //  private BillElementMeta packBillElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId + "_PACK");  private BillElementMeta memberBillElementMeta = BillElementMeta.getBillElementMetaWithoutNd(this.compoId + "_MEMBER");  public ZcEbOpenBidTeamEditPanel(ZcEbOpenBidTeamDialog parent, ListCursor listCursor, String tabStatus, ZcEbOpenBidTeamListPanel listPanel) {    // TODO Auto-generated constructor stub    super(ZcEbOpenBidTeam.class, BillElementMeta.getBillElementMetaWithoutNd("ZC_EB_OPENBIDTEAM"));    this.listCursor = listCursor;    this.tabStatus = tabStatus;    this.listPanel = listPanel;    this.parent = parent;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("开标小组管理"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();    setButtonStatus();    updateFieldEditorsEditable();  }  /**   * 设置工具条上按钮的可用性   *    * Administrator   * 2010-5-15   */  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs.setButton(this.addButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.deleteButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.auditButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.unAuditButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.exitButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.helpButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_ALL);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbOpenBidTeam obj = (ZcEbOpenBidTeam) (this.listCursor.getCurrentObject());    ZcUtil.setButtonEnable(this.btnStatusList, ZcSettingConstants.BILL_STATUS_ALL, this.pageStatus, this.compoId, obj.getProcessInstId());    setSubTableButton();  }  /**   * 设置字表下面的按钮状态   *    * Administrator   * 2010-5-15   */  private void setSubTableButton() {    if (this.subMemberTableToolbar != null) {      if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {        this.subMemberTableToolbar.setEnabled(true);      } else {        this.subMemberTableToolbar.setEnabled(false);      }    }    if (this.subPackTableToolbar != null) {      if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {        this.subPackTableToolbar.setEnabled(true);      } else {        this.subPackTableToolbar.setEnabled(false);      }    }  }  private void refreshData() {    // TODO Auto-generated method stub    ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) listCursor.getCurrentObject();    if (team == null) {//新增页面      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      team = new ZcEbOpenBidTeam();      //      signup.setOpenBidTeamId(Guid.genID());      setDefualtValue(team, ZcSettingConstants.PAGE_STATUS_NEW);      List lst = new ArrayList();      lst.add(team);      this.listCursor.setDataList(lst, -1);    } else {      List memberList = zcEbOpenBidTeamServiceDelegate.getZcEbOpenBidTeamMembers(team.getTeamCode(), requestMeta);      team.setTeamMembers(memberList);      List packrList = zcEbOpenBidTeamServiceDelegate.getZcEbOpenBidTeamPack(team.getTeamCode(), requestMeta);      if (packrList != null && packrList.size() > 0) {        team.setPackCode(((ZcEbOpenBidTeamPack) packrList.get(0)).getPackName());      }    }    listCursor.setCurrentObject(team);    this.setEditingObject(team);    refreshMemberTableData(team.getTeamMembers());    //    refreshPackTableData(team.getPacks());    setOldObject();  }  private void setDefualtValue(ZcEbOpenBidTeam team, String pageStatus) {    if (pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW)) {      team.setCreator(this.requestMeta.getSvUserName());      team.setCreatDate(this.requestMeta.getSysDate());      team.setNd(this.requestMeta.getSvNd());      team.setAgency(this.requestMeta.getSvCoCode());      team.setOrgCode(this.requestMeta.getSvOrgCode());    }  }  private void refreshMemberTableData(List deList) {    ZcEbOpenBidTeamToTableModelConverter mc = new ZcEbOpenBidTeamToTableModelConverter();    memberTablePanel.setTableModel(mc.convertMembersToTableModel(deList));    setMemberTableProperty(memberTablePanel.getTable());  }  private void refreshPackTableData(List deList) {    ZcEbOpenBidTeamToTableModelConverter mc = new ZcEbOpenBidTeamToTableModelConverter();    packTablePanel.setTableModel(mc.convertPacksToTableModel(deList));    setPackTableProperty(packTablePanel.getTable());  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null        && (fd.getFieldName().equals("operator") || fd.getFieldName().equals("signupDate") || fd.getFieldName().equals("status") || fd        .getFieldName().equals("projName"))) {          fd.setEnabled(false);        } else {          fd.setEnabled(true);        }      }      this.memberTablePanel.getTable().setEnabled(true);      this.packTablePanel.getTable().setEnabled(true);    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      this.memberTablePanel.getTable().setEnabled(false);      this.packTablePanel.getTable().setEnabled(false);    }  }  /**   * 标段外部部件选择处理类   * @author Administrator   *   */  private class ZcEbPackHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbPackHandler(String columNames[]) {      this.columNames = columNames;    }    public boolean beforeSelect(ElementConditionDto dto) {      ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) listCursor.getCurrentObject();      if (team.getProjCode() == null || "".equals(team.getProjCode())) {        JOptionPane.showMessageDialog(self, "请先选择一个采购项目 ！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      dto.setDattr1(team.getProjCode());      return true;    }    public void excute(List selectedDatas) {      ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) listCursor.getCurrentObject();      if (selectedDatas.size() > 0) {        ZcEbPack selectedPack = (ZcEbPack) selectedDatas.get(0);        List list = null;        if (team.getPacks() != null) {          list = team.getPacks();        } else {          list = new ArrayList();        }        ZcEbOpenBidTeamPack pack = null;        if (list.size() > 0) {          pack = (ZcEbOpenBidTeamPack) list.get(0);        } else {          pack = new ZcEbOpenBidTeamPack();        }        pack.setPackCode(selectedPack.getPackCode());        pack.setTeamCode(team.getTeamCode());        list.clear();        list.add(pack);        team.setPacks(list);        team.setPackCode(selectedPack.getPackName());      }      setEditingObject(team);    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbPack rowData = (ZcEbPack) showDatas.get(i);        int col = 0;        //data[i][col++] = rowData.getPackCode();        //data[i][col++] = rowData.getPackName();        data[i][col++] = rowData.getPackName();        data[i][col++] = rowData.getPackDesc();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }  }  private void setMemberTableProperty(JTable table) {    ZcUtil.translateColName(table, "ZC_EB_");    SwingUtil.setTableCellEditor(table, "MEMBER_TYPE", new AsValComboBoxCellEditor("VS_ZC_EB_MEMBER_TYPE"));    SwingUtil.setTableCellRenderer(table, "MEMBER_TYPE", new AsValCellRenderer("VS_ZC_EB_MEMBER_TYPE"));  }  private void setPackTableProperty(JTable table) {    ZcUtil.translateColName(table, "ZC_EB_");    String columNames[] = { LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE),      LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME) };    ZcEbPackHandler handler = new ZcEbPackHandler(columNames);    this.packDto = new ElementConditionDto();    ZcEbOpenBidTeam signup = (ZcEbOpenBidTeam) listCursor.getCurrentObject();    this.packDto.setDattr1(signup.getProjCode());    ForeignEntityFieldCellEditor packEditor = new ForeignEntityFieldCellEditor("ZcEbOpenBidTeam.getZcEbPackForTeam", this.packDto, 20, handler,      columNames, LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PAKE_NAME), "packName");    SwingUtil.setTableCellEditor(table, "PACK_NAME", packEditor);  }  private void setOldObject() {    oldOpenBidTeam = (ZcEbOpenBidTeam) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    String columNames[] = { "项目编号", "项目名称", "预算", "采购方式", "文件经办人", "立项时间" };//, /*"是否划分标段",*/"电话", "邮件", "传真"/*, "是否发布采购//公告", "是否发布采购结果" */};    ZcEbProjFnHandler projHandler = new ZcEbProjFnHandler(columNames);    ElementConditionDto dto = new ElementConditionDto();    dto.setNd(WorkEnv.getInstance().getSysNd());    dto.setManageCode(requestMeta.getSvUserID());    ForeignEntityFieldEditor editor0 = new ForeignEntityFieldEditor(this.projSqlMapSelectedId, dto, 20, projHandler, columNames, "项目编号", "projCode");    editorList.add(editor0);    editor0.addValueChangeListener(new ValueChangeListener() {      @Override      public void valueChanged(ValueChangeEvent e) {        projCodeChange();      }    });    editorList.add(projNameEditor);    String packColumNames[] = { LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE),      LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME) };    ZcEbPackHandler handler = new ZcEbPackHandler(packColumNames);    if (packDto == null) {      this.packDto = new ElementConditionDto();    }    ForeignEntityFieldEditor editor1 = new ForeignEntityFieldEditor("ZcEbOpenBidTeam.getZcEbPackForTeam", packDto, 20, handler, packColumNames,      "分包编号", "packCode");    editorList.add(editor1);    TextFieldEditor editor5 = new TextFieldEditor("开标组", "teamName");    editorList.add(editor5);    TextFieldEditor editor12 = new TextFieldEditor("备注", "remark");    editorList.add(editor12);    TextFieldEditor editor10 = new TextFieldEditor("创建人", "creator");    //    editorList.add(editor10);    DateFieldEditor editor6a = new DateFieldEditor("创建日期", "creatDate");    editorList.add(editor6a);    return editorList;  }  private void projCodeChange() {    ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) this.listCursor.getCurrentObject();    for (AbstractFieldEditor editor : this.fieldEditors) {      if (editor.getFieldName().equals("projCode")) {        Object obj = editor.getValue();        if (obj == null || obj.toString().trim().length() == 0) {          team.setProjCode(null);          team.setProjName(null);          team.setTeamName(null);          this.projNameEditor.setEditObject(team);          break;        }      }    }    //清空报名标段表,获取当前项目没有开标组的标段，默认全取过来，作为当前开标组的标段    //    List packList = zcEbOpenBidTeamServiceDelegate.getPackWithoutBidTeam(team.getProjCode(), requestMeta);    //    //    team.setPacks(packList);    //    //    refreshPackTableData(team.getPacks());  }  /**   * 项目选择部件   * @author Administrator   *   */  private class ZcEbProjFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbProjFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbProj proj = (ZcEbProj) object;        ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) listCursor.getCurrentObject();        team.setProjCode(proj.getProjCode());        team.setProjName(proj.getProjName());        team.setTeamName(proj.getProjName() + "开标组");        setEditingObject(team);        projCodeChange();      }    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = rowData.getProjSum();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE", rowData.getPurType());        data[i][col++] = rowData.getManager();        if (rowData.getProjDate() != null) {          SimpleDateFormat sdf = new SimpleDateFormat(ZcSettingConstants.SIMPLE_DATE_FORMAT_DATE_ONLY);          data[i][col++] = sdf.format(rowData.getProjDate());        } else {          col++;        }        //data[i][col++] = rowData.getIsSplitPack();        //data[i][col++] = rowData.getPhone();        //data[i][col++] = rowData.getEmail();        //data[i][col++] = rowData.getFax();        //data[i][col++] = rowData.getIsPubPurBulletin();        //data[i][col++] = rowData.getIsPubPurResult();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }  }  @Override  public JComponent createSubBillPanel() {    JTabbedPane tabPane = new JTabbedPane();    memberTablePanel.init();    memberTablePanel.setTablePreferencesKey(this.getClass().getName() + "member_table");    memberTablePanel.getTable().setShowCheckedColumn(false);    memberTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 0));    setTableCell(memberTablePanel.getTable());    tabPane.addTab("小组成员", memberTablePanel);    //    packTablePanel.init();    //    //    packTablePanel.setTablePreferencesKey(this.getClass().getName() + "pack_table");    //    //    packTablePanel.getTable().setShowCheckedColumn(false);    //    //    packTablePanel.getTable().getTableRowHeader().setPreferredSize(new Dimension(50, 0));    //    //    setTableCell(packTablePanel.getTable());    //    //    tabPane.addTab(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PAKE_NAME), packTablePanel);    this.subMemberTableToolbar = new JFuncToolBar();    JButton addMemberBtn = new JButton("添加");    JButton insertMemberBtn = new JButton("插入");    JButton delMemberBtn = new JButton("删除");    this.subMemberTableToolbar.add(addMemberBtn);    this.subMemberTableToolbar.add(insertMemberBtn);    this.subMemberTableToolbar.add(delMemberBtn);    memberTablePanel.add(this.subMemberTableToolbar, BorderLayout.SOUTH);    //    this.subPackTableToolbar = new JFuncToolBar();    //    //    JButton addPackBtn = new JButton("添加");    //    //    JButton insertPackBtn = new JButton("插入");    //    //    JButton delPackBtn = new JButton("删除");    //    //    this.subPackTableToolbar.add(addPackBtn);    //    //    this.subPackTableToolbar.add(insertPackBtn);    //    //    this.subPackTableToolbar.add(delPackBtn);    //    //    packTablePanel.add(this.subPackTableToolbar, BorderLayout.SOUTH);    //    //    addPackBtn.addActionListener(new ActionListener() {    //    //      public void actionPerformed(ActionEvent e) {    //    //        addPackSub(packTablePanel);    //    //      }    //    //    });    //    //    insertPackBtn.addActionListener(new ActionListener() {    //    //      public void actionPerformed(ActionEvent e) {    //    //        insertPackSub(packTablePanel);    //    //      }    //    //    });    //    //    delPackBtn.addActionListener(new ActionListener() {    //    //      public void actionPerformed(ActionEvent e) {    //    //        deleteSub(packTablePanel);    //    //      }    //    //    });    addMemberBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        addMember(memberTablePanel);      }    });    insertMemberBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        insertMember(memberTablePanel);      }    });    delMemberBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        deleteMember(memberTablePanel);      }    });    return tabPane;  }  protected void addMember(JTablePanel tablePanel) {    tablePanel.getTable().clearSelection();    stopTableEditing(tablePanel);    BeanTableModel editTableModel = (BeanTableModel) tablePanel.getTable().getModel();    ZcEbOpenBidTeamMember bean = new ZcEbOpenBidTeamMember();    ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) listCursor.getCurrentObject();    bean.setTeamCode(team.getTeamCode());    bean.setTempGuid(Guid.genID());    editTableModel.insertRow(editTableModel.getRowCount(), bean);  }  private void insertMember(JTablePanel tablePanel) {    stopTableEditing(tablePanel);    ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) listCursor.getCurrentObject();    BeanTableModel editTableModel = (BeanTableModel) tablePanel.getTable().getModel();    ZcEbOpenBidTeamMember bean = new ZcEbOpenBidTeamMember();    bean.setTeamCode(team.getTeamCode());    bean.setTempGuid(Guid.genID());    int selectedRow = tablePanel.getTable().getSelectedRow();    if (selectedRow != -1) {      editTableModel.insertRow(selectedRow + 1, bean);    } else {      editTableModel.insertRow(editTableModel.getRowCount(), bean);    }  }  protected void deleteMember(JTablePanel tablePanel) {    deleteTableRow(tablePanel);  }  protected Integer[] deleteSub(JTablePanel tablePanel) {    deleteTableRow(tablePanel);    return null;  }  protected void deleteTableRow(JTablePanel tablePanel) {    JPageableFixedTable table = tablePanel.getTable();    stopTableEditing(tablePanel);    int[] selectedRows = table.getSelectedRows();    if (selectedRows.length == 0) {      JOptionPane.showMessageDialog(self, "没有选择数据！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    BeanTableModel tableModel = ((BeanTableModel) table.getModel());    int[] selRows = new int[selectedRows.length];    for (int i = 0; i < selRows.length; i++) {      selRows[i] = table.convertRowIndexToModel(selectedRows[i]);    }    Arrays.sort(selRows);    for (int i = selRows.length - 1; i >= 0; i--) {      tableModel.deleteRow(selRows[i]);    }  }  private void insertPackSub(JTablePanel tablePanel) {    if (!checkProj()) {      JOptionPane.showMessageDialog(self, "请先选择一个采购项目 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    stopTableEditing(tablePanel);    ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) listCursor.getCurrentObject();    ForeignEntityFieldCellEditor cellEditor = (ForeignEntityFieldCellEditor) tablePanel.getTable().getColumn("PACK_CODE").getCellEditor();    this.packDto = new ElementConditionDto();    this.packDto.setDattr1(team.getProjCode());    cellEditor.updateDto(packDto);    BeanTableModel editTableModel = (BeanTableModel) tablePanel.getTable().getModel();    ZcEbOpenBidTeamPack bean = new ZcEbOpenBidTeamPack();    bean.setTeamCode(team.getTeamCode());    bean.setTempGuid(Guid.genID());    int selectedRow = tablePanel.getTable().getSelectedRow();    if (selectedRow != -1) {      editTableModel.insertRow(selectedRow + 1, bean);    } else {      editTableModel.insertRow(editTableModel.getRowCount(), bean);    }  }  private boolean checkProj() {    ZcEbOpenBidTeam s = (ZcEbOpenBidTeam) listCursor.getCurrentObject();    if (s.getProjCode() == null || s.getProjCode().trim().equals(""))      return false;    return true;  }  private void addPackSub(JTablePanel tablePanel) {    if (!checkProj()) {      JOptionPane.showMessageDialog(self, "请先选择一个采购项目 ！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    tablePanel.getTable().clearSelection();    stopTableEditing(tablePanel);    BeanTableModel editTableModel = (BeanTableModel) tablePanel.getTable().getModel();    ZcEbOpenBidTeamPack bean = new ZcEbOpenBidTeamPack();    ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) listCursor.getCurrentObject();    ForeignEntityFieldCellEditor cellEditor = (ForeignEntityFieldCellEditor) tablePanel.getTable().getColumn("PACK_NAME").getCellEditor();    this.packDto = new ElementConditionDto();    this.packDto.setDattr1(team.getProjCode());    cellEditor.updateDto(packDto);    bean.setTeamCode(team.getTeamCode());    bean.setTempGuid(Guid.genID());    editTableModel.insertRow(editTableModel.getRowCount(), bean);  }  private void setTableCell(JPageableFixedTable table) {    //    SwingUtil.setTableCellEditor(table,columnIdentifier, cellEditor)  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    //    toolBar.add(addButton);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    //    toolBar.add(auditButton);    //    toolBar.add(unAuditButton);    toolBar.add(previousButton);    toolBar.add(printButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    deleteButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        // TODO Auto-generated method stub        doDelete();      }    });    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        // TODO Auto-generated method stub        doSave();      }    });    printButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        // TODO Auto-generated method stub        doPrint();      }    });    //    auditButton.addActionListener(new ActionListener() {    //      @Override    //      public void actionPerformed(ActionEvent e) {    //        // TODO Auto-generated method stub    //        doAudit();    //      }    //    });    //    unAuditButton.addActionListener(new ActionListener() {    //      @Override    //      public void actionPerformed(ActionEvent e) {    //        // TODO Auto-generated method stub    //        doUnAudit();    //      }    //    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });  }  private void doAdd() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;    ZcEbOpenBidTeam team = new ZcEbOpenBidTeam();    setDefualtValue(team, ZcSettingConstants.PAGE_STATUS_NEW);    listCursor.setCurrentObject(team);    setEditingObject(team);    refreshData();    updateFieldEditorsEditable();    setDefualtValue(team, this.pageStatus);    setButtonStatus();  }  private void doPrint() {    ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) this.listCursor.getCurrentObject();    this.requestMeta.setFuncId(this.printButton.getFuncId());    this.requestMeta.setPageType(this.compoId + "_L");    try {      String projCode = team.getProjCode();      String condition = " t.PROJ_CODE='" + projCode + "'";    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印预览出错！\n" + e.getMessage(), "错误", 0);    }  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  private void doDelete() {    ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) this.listCursor.getCurrentObject();    int num = JOptionPane.showConfirmDialog(this, "确认删除当前数据？", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      String errorInfo = "";      try {        success = this.zcEbOpenBidTeamServiceDelegate.deleteOpenBidTeam(team, this.requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        JOptionPane.showMessageDialog(self, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;        this.listCursor.removeCurrentObject();        //          this.doNext();        refreshData();        this.listPanel.refreshCurrentTabData();        updateFieldEditorsEditable();        setButtonStatus();      } else {        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  //  private void doAudit(){  //    ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) this.listCursor.getCurrentObject();  //    team.setStatus("1");  //    boolean success = true;  //    String errorInfo = "";  //    try {  //      this.zcEbOpenBidTeamServiceDelegate.updateZcEbOpenBidTeam(team,this.requestMeta);  //    } catch (Exception e) {  //      logger.error(e.getMessage(), e);  //      success = false;  //      errorInfo += e.getMessage();  //    }  //    if(success){  //    this.listPanel.refreshCurrentTabData();  //    this.oldOpenBidTeam = (ZcEbOpenBidTeam) ObjectUtil.deepCopy(team);  //    JOptionPane.showMessageDialog(self, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);  //    updateFieldEditorsEditable();  //    setButtonStatus();  //    }else{  //      JOptionPane.showMessageDialog(this, "审核失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);  //    }  //  }  //  private void doUnAudit(){  //    ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) this.listCursor.getCurrentObject();  //    team.setStatus("0");  //    boolean success = true;  //    String errorInfo = "";  //    try {  //      this.zcEbOpenBidTeamServiceDelegate.updateZcEbOpenBidTeam(team,this.requestMeta);  //    } catch (Exception e) {  //      logger.error(e.getMessage(), e);  //      success = false;  //      errorInfo += e.getMessage();  //    }  //    if(success){  //    this.listPanel.refreshCurrentTabData();  //    this.oldOpenBidTeam = (ZcEbOpenBidTeam) ObjectUtil.deepCopy(team);  //    JOptionPane.showMessageDialog(self, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);  //    updateFieldEditorsEditable();  //    setButtonStatus();  //    }else{  //      JOptionPane.showMessageDialog(this, "审核失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);  //    }  //  }  private void doPrevious() {    stopTableEditing(this.memberTablePanel);    stopTableEditing(this.packTablePanel);    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldOpenBidTeam);      }    }    listCursor.previous();    refreshData();    setButtonStatus();  }  private void doNext() {    stopTableEditing(this.memberTablePanel);    stopTableEditing(this.packTablePanel);    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldOpenBidTeam);      }    }    listCursor.next();    refreshData();    setButtonStatus();  }  public void doExit() {    stopTableEditing(this.memberTablePanel);    stopTableEditing(this.packTablePanel);    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      }    }    this.parent.dispose();  }  public boolean doSave() {    stopTableEditing(this.memberTablePanel);    //    stopTableEditing(this.packTablePanel);    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) this.listCursor.getCurrentObject();    //    if (!validateData(team, this.compoId))    //      return false;    if (!checkBeforeSave()) {      return false;    }    boolean success = true;    String errorInfo = "";    try {      team = this.zcEbOpenBidTeamServiceDelegate.save(team, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(team);      this.oldOpenBidTeam = (ZcEbOpenBidTeam) ObjectUtil.deepCopy(team);      this.listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      setButtonStatus();      refreshData();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  private boolean checkBeforeSave() {    ZcEbOpenBidTeam curObj = (ZcEbOpenBidTeam) this.listCursor.getCurrentObject();    if (curObj.getTeamMembers() == null || curObj.getTeamMembers().size() == 0) {      JOptionPane.showMessageDialog(this.parent, "请添加小组成员。", "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    List notNullBillElementList = this.billElementMeta.getNotNullBillElement();    //    List notNullPackBillElementList = this.packBillElementMeta.getNotNullBillElement();    List notNullMemberBillElementList = this.memberBillElementMeta.getNotNullBillElement();    ZcEbOpenBidTeam team = (ZcEbOpenBidTeam) this.listCursor.getCurrentObject();    StringBuilder errorInfo = new StringBuilder();    String validateInfo = ZcUtil.validateBillElementNull(team, notNullBillElementList);    //    String validatePacksInfo = ZcUtil.validateDetailBillElementNull(team.getPacks(), notNullPackBillElementList, true);    String validateMembersInfo = ZcUtil.validateDetailBillElementNull(team.getTeamMembers(), notNullMemberBillElementList, true);    if (validateInfo.length() != 0) {      errorInfo.append("").append(validateInfo.toString()).append("\n");    }    //    if (validatePacksInfo.length() != 0) {    //    //      errorInfo.append("").append(validatePacksInfo.toString()).append("\n");    //    //    }    if (validateMembersInfo.length() != 0) {      errorInfo.append("").append(validateMembersInfo.toString()).append("\n");    }    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  private String checkExitPack(ZcEbOpenBidTeam curObj, List<ZcEbOpenBidTeamPack> existPacks) {    // TODO Auto-generated method stub    if (existPacks == null || existPacks.size() == 0)      return null;    StringBuffer rtn = new StringBuffer("");    List<ZcEbOpenBidTeamPack> packs = curObj.getPacks();    for (ZcEbOpenBidTeamPack pk : packs) {      for (ZcEbOpenBidTeamPack oldPk : existPacks) {        if (pk.getPackCode().equals(oldPk.getPackCode())) {          rtn.append(oldPk.getPackName()).append("\t");          continue;        }      }    }    if (rtn.toString().trim().length() > 0) {      return rtn.toString();    } else {      return null;    }  }  public void doHelp() {  }  private void stopTableEditing(JTablePanel panel) {    JPageableFixedTable table = panel.getTable();    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldOpenBidTeam).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }}
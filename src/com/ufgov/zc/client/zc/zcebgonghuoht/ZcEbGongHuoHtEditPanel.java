/** *  */package com.ufgov.zc.client.zc.zcebgonghuoht;import java.awt.Color;import java.awt.DefaultKeyboardFocusManager;import java.awt.Dialog.ModalityType;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.math.BigDecimal;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.DateField;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.GkCommentDialog;import com.ufgov.zc.client.component.GkCommentUntreadDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.WorkflowTrace;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.AuditPassButton;import com.ufgov.zc.client.component.button.CallbackButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.LoadMoldButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SendButton;import com.ufgov.zc.client.component.button.SuggestAuditPassButton;import com.ufgov.zc.client.component.button.TraceButton;import com.ufgov.zc.client.component.button.UnauditButton;import com.ufgov.zc.client.component.button.UntreadButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.ZcEbProjectMakeHandler;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.AutoNumFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.CompanyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.zc.ButtonStatus;import com.ufgov.zc.client.zc.WordFileUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.ztb.activex.WordPane;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DateUtil;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcBaseBill;import com.ufgov.zc.common.zc.model.ZcEbBulletin;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMold;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMoldParam;import com.ufgov.zc.common.zc.model.ZcEbEvalReport;import com.ufgov.zc.common.zc.model.ZcEbGongHuoHt;import com.ufgov.zc.common.zc.model.ZcPProMake;import com.ufgov.zc.common.zc.publish.IZcEbBulletinWordMoldServiceDelegate;/** * @author Administrator * */public class ZcEbGongHuoHtEditPanel extends AbstractMainSubEditPanel {  private static final long serialVersionUID = -2779110682087878491L;  private static final Logger logger = Logger.getLogger(ZcEbGongHuoHtEditPanel.class);  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_GONGHUO_HT";  private ArrayList<ButtonStatus> btnStatusList = new ArrayList<ButtonStatus>();  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private FuncButton addButton = new AddButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton nextButton = new NextButton();  private FuncButton editButton = new EditButton();  private FuncButton exitButton = new ExitButton();  // 工作流送审  private FuncButton sendButton = new SendButton();  // 工作流收回  private FuncButton callbackButton = new CallbackButton();  // 工作流填写意见审核通过  private FuncButton suggestPassButton = new SuggestAuditPassButton();  // 工作流审核通过  private FuncButton auditPassButton = new AuditPassButton();  // 工作流销审  private FuncButton unAuditButton = new UnauditButton();  // 工作流退回  private FuncButton unTreadButton = new UntreadButton();  // 工作流流程跟踪  private FuncButton traceButton = new TraceButton();  private LoadMoldButton loadMoldButton = new LoadMoldButton();  protected ListCursor listCursor;  private ZcEbGongHuoHt oldZcEbGongHuoHt;  private ZcEbGongHuoHtListPanel listPanel;  private ZcEbGongHuoHtEditPanel self = this;  private GkBaseDialog parent;  private WordPane wordPane = new WordPane();  private String fileName;  private String replaceValue = "";  private JTabbedPane tabPane = new JTabbedPane();  private boolean ifLoadMold = false;  private boolean ifRePalceBookMark = true;  private IZcEbBulletinWordMoldServiceDelegate zcEbBulletinWordMoldServiceDelegate = (IZcEbBulletinWordMoldServiceDelegate) ServiceFactory.create(  IZcEbBulletinWordMoldServiceDelegate.class, "zcEbBulletinWordMoldServiceDelegate");  public ZcEbGongHuoHtEditPanel(GkBaseDialog parent, ListCursor listCursor, String tabStatus, ZcEbGongHuoHtListPanel listPanel) {    super(ZcEbGongHuoHt.class, listPanel.getBillElementMeta());    this.listCursor = listCursor;    this.listPanel = listPanel;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "供货合同", TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.parent = parent;    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    addSubPane();    refreshMainData();  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    AutoNumFieldEditor HtCode = new AutoNumFieldEditor("供货合同编号", "htCode");    editorList.add(HtCode);    TextFieldEditor HtName = new TextFieldEditor("合同名称", "htName");    editorList.add(HtName);    ElementConditionDto projDto = new ElementConditionDto();    final ElementConditionDto packDto = new ElementConditionDto();    projDto.setNd(requestMeta.getSvNd());    packDto.setNd(requestMeta.getSvNd());    ZcEbProjectMakeHandler projHandler = new ZcEbProjectMakeHandler(false) {      public void excute(List selectedDatas) {        ZcEbGongHuoHt bill = (ZcEbGongHuoHt) listCursor.getCurrentObject();        for (Object object : selectedDatas) {          ZcPProMake make = (ZcPProMake) object;          bill.setZcPProMake(make);          bill.setProjCode(make.getZcMakeCode());          bill.setProjName(make.getZcMakeName());          bill.setZcCoCode(make.getCoCode());          bill.setZcCoName(make.getCoName());          bill.setPurType(make.getZcPifuCgfs());          packDto.setProjCode(make.getZcMakeCode());          refreshData();        }      }    };    ForeignEntityFieldEditor projCode = new ForeignEntityFieldEditor(projHandler.getSqlId(), projDto, 10, projHandler, projHandler.getColumNames(),    "项目", "projCode");    editorList.add(projCode);    //采购的方式    AsValFieldEditor purType = new AsValFieldEditor("采购方式", "purType", "ZC_VS_PITEM_OPIWAY");    editorList.add(purType);    String columNames[] = { LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE),      LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME), "中标供应商编号", "中标供应商", "供应商联系人", "评审时间", "评审地点", "年度" };    ZcEbEvalReportHandler packHandler = new ZcEbEvalReportHandler(columNames);    ForeignEntityFieldEditor packCode = new ForeignEntityFieldEditor("ZcEbYanShou.getZcEbEvalReportList", packDto, 10, packHandler, columNames,    "验收标段", "packCode");    editorList.add(packCode);    CompanyFieldEditor zcCoCode = new CompanyFieldEditor("甲方：（采购单位名称)", "zcCoCode");    editorList.add(zcCoCode);    TextFieldEditor providerName = new TextFieldEditor("乙方：（供应商名称）", "providerName");    editorList.add(providerName);    TextFieldEditor agentName = new TextFieldEditor("鉴证方", "agentName");    editorList.add(agentName);    //    AsValFieldEditor htModelType = new AsValFieldEditor("合同模板类型", "htModelType", "VS_ZC_GONGHUO_HT_MODEL_TYPE");    //    editorList.add(htModelType);    String moldColumNames[] = { "模板编号", "模板名称", "公告模板类型", "状态", "备注" };    ZcEbBulletinWordMoldFnHandler handlera = new ZcEbBulletinWordMoldFnHandler(moldColumNames);    ForeignEntityFieldEditor htModelType = new ForeignEntityFieldEditor("ZcEbBulletinWordMold.getZcGongHuoHtWordMold", 20, handlera, moldColumNames,    "载入模板", "htModelType");    editorList.add(htModelType);    MoneyFieldEditor htTotalMoney = new MoneyFieldEditor(false, "合同总金额", "htTotalMoney");    editorList.add(htTotalMoney);    DateFieldEditor createDate = new DateFieldEditor("合同起草时间", "createDate", DateField.TimeTypeH24);    editorList.add(createDate);    TextFieldEditor createor = new TextFieldEditor("合同起草人", "createor");    editorList.add(createor);    AsValFieldEditor status = new AsValFieldEditor("合同签订状态", "status", "VS_ZC_GONGHUO_HT_STATUS");    editorList.add(status);    DateFieldEditor zcCosignedDate = new DateFieldEditor("采购单位签订日期", "zcCosignedDate", DateField.TimeTypeH24);    editorList.add(zcCosignedDate);    DateFieldEditor providersignedDate = new DateFieldEditor("供应商签订日期", "zcCosignedDate", DateField.TimeTypeH24);    editorList.add(providersignedDate);    DateFieldEditor AgentsignedDate = new DateFieldEditor("采购中心签订日期", "zcCosignedDate", DateField.TimeTypeH24);    editorList.add(AgentsignedDate);    return editorList;  }  public JComponent createSubBillPanel() {    return this.tabPane;  }  private void refreshMainData() {    ZcEbGongHuoHt zcEbGongHuoHt = (ZcEbGongHuoHt) listCursor.getCurrentObject();    boolean isNew;    if (zcEbGongHuoHt == null) {      isNew = true;      zcEbGongHuoHt = new ZcEbGongHuoHt();      zcEbGongHuoHt.setCreateDate(requestMeta.getSysDate());      zcEbGongHuoHt.setCreateor(requestMeta.getSvUserName());      zcEbGongHuoHt.setStatus("0");      zcEbGongHuoHt.setNd(requestMeta.getSvNd());      listCursor.setCurrentObject(zcEbGongHuoHt);      listCursor.getDataList().add(zcEbGongHuoHt);    }    this.setEditingObject(zcEbGongHuoHt);    setOldObject();    // 根据工作流模版设置字段是否可编辑    updateWFEditorEditable(zcEbGongHuoHt, requestMeta);    // 根据工作流模版设置功能按钮是否可用    setButtonStatus(zcEbGongHuoHt, requestMeta, this.listCursor);    this.fitTable();  }  private void refreshSubTableData() {    ZcEbGongHuoHt zcEbGongHuoHt = (ZcEbGongHuoHt) listCursor.getCurrentObject();    String fileID = zcEbGongHuoHt.getFileId();    WordFileUtil.setDir("gongHuoHt");    if (wordPane != null) {      wordPane.close();    }    if (fileID != null && !fileID.equals("")) {      this.fileName = WordFileUtil.loadMold(fileID);      wordPane.open(this.fileName);    } else {      this.fileName = WordFileUtil.loadDefaultMold();      wordPane.open(this.fileName);    }  }  private void addSubPane() {    //下面一句是为了打开word后刷新窗口    self.setSize(self.getSize().width + 1, self.getSize().height + 1);    wordPane.addPropertyChangeListener(WordPane.EVENT_NAME_OPEN_CALLBACK, new PropertyChangeListener() {      public void propertyChange(PropertyChangeEvent evt) {        //打开文件完成之后的回调函数        boolean isSuccess = (Boolean) evt.getNewValue();        if (isSuccess) {          //下面一句是为了打开word后刷新窗口          self.setSize(self.getSize().width - 1, self.getSize().height - 1);        }      }    });    tabPane.addTab("供货合同", wordPane);  }  private void setOldObject() {    oldZcEbGongHuoHt = (ZcEbGongHuoHt) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(saveButton);    toolBar.add(editButton);    toolBar.add(loadMoldButton);    toolBar.add(sendButton);    toolBar.add(suggestPassButton);    toolBar.add(auditPassButton);    toolBar.add(callbackButton);    toolBar.add(unAuditButton);    toolBar.add(unTreadButton);    toolBar.add(traceButton);    toolBar.add(deleteButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    toolBar.add(exitButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 新增        doAdd();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 保存        doSave();      }    });    loadMoldButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doReplaceBookMarks();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 删除        doDelete();      }    });    sendButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 送审        doSend();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 修改        doEdit();      }    });    callbackButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 收回        doCallback();      }    });    suggestPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent arg0) {        // 填写意见审核        doSuggestPass();      }    });    auditPassButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 审核        doAudit();      }    });    unAuditButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 销审        doUnaudit();      }    });    unTreadButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退回        doUntread();      }    });    traceButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 流程跟踪        doTrace();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 上一页        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 下一页        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 退出        doExit();      }    });  }  public void refreshData() {    refreshMainData();    refreshSubTableData();  }  private void refreshAll(ZcEbGongHuoHt afterSaveBill, boolean isRefreshButton) {    this.listCursor.setCurrentObject(afterSaveBill);    refreshData();    if (isRefreshButton) {      setButtonStatus(afterSaveBill, requestMeta, this.listCursor);    }  }  /*   * 新增   */  private void doAdd() {    if (this.doExit()) {      this.listPanel.doAdd();    }  }  public void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    setButtonStatus();  }  /*   * 流程跟踪   */  private void doTrace() {    ZcBaseBill bean = (ZcBaseBill) this.listCursor.getCurrentObject();    if (bean == null) {      return;    }    ZcUtil.showTraceDialog(bean, compoId);  }  /*   * 送审   */  private void doSend() {    boolean success = true;    ZcEbGongHuoHt afterSaveBill = null;    String errorInfo = "";    if (checkBeforeSave()) {      return;    }    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    try {      requestMeta.setFuncId(this.sendButton.getFuncId());      ZcEbGongHuoHt bill = (ZcEbGongHuoHt) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      bill.setComment(commentDialog.getComment());      afterSaveBill = this.listPanel.getZcEbGongHuoHtServiceDelegate().newCommitFN(bill, requestMeta);    } catch (Exception ex) {      errorInfo += ex.getMessage();      logger.error(ex.getMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "送审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    }  }  /*   * 收回   */  private void doCallback() {    boolean success = true;    ZcEbGongHuoHt afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.callbackButton.getFuncId());      ZcEbGongHuoHt bill = (ZcEbGongHuoHt) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      listPanel.getZcEbGongHuoHtServiceDelegate().callbackFN(bill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "收回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "收回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 填写意见审核   */  private void doSuggestPass() {    if (checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentDialog commentDialog = new GkCommentDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcEbGongHuoHt afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.suggestPassButton.getFuncId());      ZcEbGongHuoHt bill = (ZcEbGongHuoHt) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setComment(commentDialog.getComment());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getZcEbGongHuoHtServiceDelegate().auditFN(bill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 审核   */  private void doAudit() {    if (checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    boolean success = true;    ZcEbGongHuoHt afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(this.auditPassButton.getFuncId());      ZcEbGongHuoHt bill = (ZcEbGongHuoHt) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getZcEbGongHuoHtServiceDelegate().auditFN(bill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "审核成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "审核失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 销审   */  private void doUnaudit() {    boolean success = true;    ZcEbGongHuoHt afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unAuditButton.getFuncId());      ZcEbGongHuoHt bill = (ZcEbGongHuoHt) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      afterSaveBill = listPanel.getZcEbGongHuoHtServiceDelegate().unAuditFN(bill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "销审成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "销审失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  /*   * 退回   */  private void doUntread() {    if (checkBeforeSave()) {      return;    }    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    GkCommentUntreadDialog commentDialog = new GkCommentUntreadDialog(DefaultKeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow(),    ModalityType.APPLICATION_MODAL);    if (commentDialog.cancel) {      return;    }    boolean success = true;    ZcEbGongHuoHt afterSaveBill = null;    String errorInfo = "";    try {      requestMeta.setFuncId(unTreadButton.getFuncId());      ZcEbGongHuoHt bill = (ZcEbGongHuoHt) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      bill.setAuditorId(WorkEnv.getInstance().getCurrUserId());      bill.setComment(commentDialog.getComment());      afterSaveBill = listPanel.getZcEbGongHuoHtServiceDelegate().untreadFN(bill, requestMeta);    } catch (Exception e) {      success = false;      logger.error(e.getMessage(), e);      errorInfo += e.getMessage();    }    if (success) {      this.refreshAll(afterSaveBill, true);      JOptionPane.showMessageDialog(this, "退回成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "退回失败 ！" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  private void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldZcEbGongHuoHt);      }    }    listCursor.previous();    refreshData();  }  private void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(oldZcEbGongHuoHt);      }    }    listCursor.next();    refreshData();  }  public boolean doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return false;        }      }    }    wordPane.close();    this.parent.dispose();    return true;  }  /**   * 保存前校验   * @param cpApply   * @return   */  private boolean checkBeforeSave() {    return true;  }  public boolean doSave() {    if (!checkBeforeSave()) {      return false;    }    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示", JOptionPane.INFORMATION_MESSAGE);      return true;    }    boolean success = true;    String errorInfo = "";    try {      requestMeta.setFuncId(saveButton.getFuncId());      ZcEbGongHuoHt inData = (ZcEbGongHuoHt) ObjectUtil.deepCopy(this.listCursor.getCurrentObject());      ZcEbGongHuoHt ZcEbGongHuoHt = this.listPanel.getZcEbGongHuoHtServiceDelegate().saveZcEbGongHuoHtFN(inData, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      refreshData();      this.listPanel.refreshCurrentTabData();    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }    return true;  }  protected void doDelete() {    int num = JOptionPane.showConfirmDialog(this, "是否删除当前单据", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      boolean success = true;      ZcEbGongHuoHt ZcEbGongHuoHt = null;      String errorInfo = "";      try {        requestMeta.setFuncId(deleteButton.getFuncId());        ZcEbGongHuoHt = (ZcEbGongHuoHt) this.listCursor.getCurrentObject();        if (!"0".equals(ZcEbGongHuoHt.getStatus()))          JOptionPane.showMessageDialog(this, "非编辑状态单据，不可以删除！", "提示", JOptionPane.ERROR_MESSAGE);        this.listPanel.getZcEbGongHuoHtServiceDelegate().deleteZcEbGongHuoHtFN(ZcEbGongHuoHt, requestMeta);      } catch (Exception e) {        logger.error(e.getMessage(), e);        success = false;        errorInfo += e.getMessage();      }      if (success) {        this.listCursor.removeCurrentObject();        JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.refreshData();        this.listPanel.refreshCurrentTabData();      } else {        JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void setButtonStatus() {    if (this.btnStatusList.size() == 0) {      ButtonStatus bs = new ButtonStatus();      bs = new ButtonStatus();      bs.setButton(this.editButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.saveButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_EDIT);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_NEW);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.sendButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus("0");      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.previousButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);      bs = new ButtonStatus();      bs.setButton(this.nextButton);      bs.addPageStatus(ZcSettingConstants.PAGE_STATUS_BROWSE);      bs.addBillStatus(ZcSettingConstants.BILL_STATUS_ALL);      btnStatusList.add(bs);    }    ZcEbGongHuoHt obj = (ZcEbGongHuoHt) (this.listCursor.getCurrentObject());    String billStatus = obj.getStatus();    ZcUtil.setButtonEnable(this.btnStatusList, billStatus, this.pageStatus, this.compoId, obj.getProcessInstId());  }  public void doReplaceBookMarks() {    if (!ifLoadMold) {      JOptionPane.showMessageDialog(self, "没有成功载入模板，不能进行填充模板操作！", "提示", JOptionPane.ERROR_MESSAGE);      return;    }    if (replaceValue != null && !replaceValue.equals("")) {      wordPane.replaceBookMarks(this.replaceValue);    }    WordFileUtil.delete(this.fileName);    wordPane.save(this.fileName);    ifRePalceBookMark = true;    ifLoadMold = false;  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldZcEbGongHuoHt).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  //根据采购项目的采购方式确定供货合同模板  private class ZcEbBulletinWordMoldFnHandler implements IForeignEntityHandler {    private String columNames[];    private List bulletinMoldParamList = null;    private Map valueMap;    private IZcEbBulletinWordMoldServiceDelegate zcEbBulletinWordMoldServiceDelegate = (IZcEbBulletinWordMoldServiceDelegate) ServiceFactory.create(    IZcEbBulletinWordMoldServiceDelegate.class, "zcEbBulletinWordMoldServiceDelegate");    protected IZcEbBulletinWordMoldServiceDelegate getIZcEbBulletinWordMoldServiceDelegate() {      return this.zcEbBulletinWordMoldServiceDelegate;    }    public List getParamList() {      return this.bulletinMoldParamList;    }    public void setParamList(List paramList) {      this.bulletinMoldParamList = paramList;    }    public ZcEbBulletinWordMoldFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      ZcEbBulletin bulletin = (ZcEbBulletin) listCursor.getCurrentObject();      replaceValue = "";      for (Object object : selectedDatas) {        ZcEbBulletinWordMold bulletinMold = (ZcEbBulletinWordMold) object;        bulletin.setMoldName(bulletinMold.getBulletinMoldName());        List bulletinMoldParamList = zcEbBulletinWordMoldServiceDelegate        .getZcEbBulletinWordMoldParam(requestMeta, bulletinMold.getBulletinMoldCode());        for (Iterator it = bulletinMoldParamList.iterator(); it.hasNext();) {          ZcEbBulletinWordMoldParam bulletinMoldParam = (ZcEbBulletinWordMoldParam) it.next();          if (bulletinMoldParam.getParamType() == null) {            continue;          }          Map paramMap = new HashMap();          paramMap.put("fieldName", bulletinMoldParam.getFieldName());          paramMap.put("tableName", bulletinMold.getDataView());          paramMap.put("projCode", bulletin.getProjCode());          try {            String paramValue = getParamValue(paramMap, bulletin.getProjCode(), bulletinMoldParam.getParamType(), bulletinMoldParam.getFieldName());            bulletinMoldParam.setParamValue(paramValue);          } catch (Exception ex) {            JOptionPane.showMessageDialog(self, "没有找到模板“" + bulletinMold.getBulletinMoldName() + "”（模板代码:" + bulletinMold.getBulletinMoldCode()            + "）参数【" + bulletinMoldParam.getParamName() + "】的信息，请检查模板参数是否正确！", "提示", JOptionPane.ERROR_MESSAGE);            return;          }        }        this.setParamList(bulletinMoldParamList);        setEditingObject(bulletin);        replaceValue = doOpenMold(bulletinMoldParamList, bulletinMold);      }      if (replaceValue != null && replaceValue.length() > 0) {        ifLoadMold = true;        ifRePalceBookMark = false;        wordPane.setEnabled(false);      }    }    public String getParamValue(Map paramMap, String projCode, String paramType, String tableName) {      String strParamValue = "";      if (paramType.equals(ZcSettingConstants.MOLD_PARAM_TYPE_FIELD)) {        if (valueMap == null) {          valueMap = this.getIZcEbBulletinWordMoldServiceDelegate().getZcEbBulletinWordMoldParamValue(requestMeta, paramMap);        } else {          Object obj = valueMap.get(paramMap.get("fieldName"));          if (obj instanceof String) {            return obj.toString();          }          if (obj instanceof BigDecimal) {            BigDecimal b1 = (BigDecimal) obj;            return b1.toString();          }          if (obj instanceof Date) {            return DateUtil.dateToDdString((Date) obj);          }        }      } else {        String subParamValue = getSubParamValue(tableName, projCode, paramType);        if (subParamValue != null && subParamValue.length() != 0) {          strParamValue = subParamValue;        }      }      return strParamValue;    }    public String getSubParamValue(String tableName, String projCode, String loopType) {      Map subParamMap = new HashMap();      subParamMap.put("tableName", tableName);      subParamMap.put("projCode", projCode);      List subParamValueList = getValueList(subParamMap);      if (subParamValueList == null || subParamValueList.size() == 0)        return null;      StringBuffer sb = new StringBuffer();      for (Iterator item = subParamValueList.iterator(); item.hasNext();) {        Map valueMap = (Map) item.next();        for (Iterator valueItem = valueMap.entrySet().iterator(); valueItem.hasNext();) {          Map.Entry entry = (Map.Entry) valueItem.next();          if (entry.getKey().toString().equalsIgnoreCase("PROJECT_CODE"))            continue;          Object value = entry.getValue();          if (value == null)            value = "";          if (loopType.equalsIgnoreCase(ZcSettingConstants.MOLD_PARAM_TYPE_TABLE)) {            sb.append("      " + value + "\n");          } else if (loopType.equalsIgnoreCase(ZcSettingConstants.MOLD_PARAM_TYPE_LONG_STRING)) {            sb.append("、" + value);          }        }      }      if (loopType.equalsIgnoreCase(ZcSettingConstants.MOLD_PARAM_TYPE_LONG_STRING)) {        return sb.substring(1, sb.length()).toString();      } else {        return sb.toString();      }    }    public List getValueList(Map paramMap) {      List valueList = null;      valueList = this.getIZcEbBulletinWordMoldServiceDelegate().getZcEbBulletinMoldTableParamValue(requestMeta, paramMap);      return valueList;    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbBulletinWordMold rowData = (ZcEbBulletinWordMold) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getBulletinMoldCode();        data[i][col++] = rowData.getBulletinMoldName();        data[i][col++] = AsValDataCache.getName("VS_ZC_EB_BULLETIN_MOLD_TYPE", rowData.getBulletinMoldType());        data[i][col++] = rowData.getInputDate();        data[i][col++] = rowData.getInputorName();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }  }  public String doOpenMold(List valueList, ZcEbBulletinWordMold bulletinMold) {    if (wordPane != null) {      wordPane.close();    }    String moldFileName = WordFileUtil.loadMold(bulletinMold.getFileID());    if (moldFileName == null || moldFileName.length() == 0) {      //没有成功载入模板，关闭wordPane        if (wordPane != null)        wordPane.close();      return "";    }    wordPane.open(moldFileName);    fileName = moldFileName;//zcEbWordPanel.getFileName();    StringBuffer sb = new StringBuffer();    for (Iterator it = valueList.iterator(); it.hasNext();) {      ZcEbBulletinWordMoldParam zcEbBulletinWordMoldParam = (ZcEbBulletinWordMoldParam) it.next();      sb.append(zcEbBulletinWordMoldParam.getParamName());      sb.append("$$$$$");      sb.append(zcEbBulletinWordMoldParam.getParamValue());      sb.append("@@@@@");    }    return sb.toString();  }  private class ZcEbEvalReportHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbEvalReportHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      ZcEbGongHuoHt bill = (ZcEbGongHuoHt) listCursor.getCurrentObject();      for (Object object : selectedDatas) {        ZcEbEvalReport report = (ZcEbEvalReport) object;        bill.setPackCode(report.getPackCode());        bill.setPackName(report.getPackName());        bill.setProviderCode(report.getProviderCode());        bill.setProviderName(report.getProviderName());        refreshData();      }    }    public TableModel createTableModel(List showDatas) {      ZcEbGongHuoHt bill = (ZcEbGongHuoHt) listCursor.getCurrentObject();      if (null == bill.getProjCode()) {        JOptionPane.showMessageDialog(self, "请先选择一个采购项目 ！", "提示", JOptionPane.INFORMATION_MESSAGE);        return new MyTableModel(null, columNames);      }      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbEvalReport rowData = (ZcEbEvalReport) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getPackCode();        data[i][col++] = rowData.getPackName();        data[i][col++] = rowData.getProviderCode();        data[i][col++] = rowData.getProviderName();        data[i][col++] = rowData.getZcSuLinkMan();        data[i][col++] = rowData.getBidDate();        data[i][col++] = rowData.getBidLocation();        data[i][col++] = rowData.getNd();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }}
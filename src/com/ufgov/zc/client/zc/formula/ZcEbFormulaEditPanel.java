/**   * @(#) project:GK* @(#) file: ZcEbFormulaEditPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.formula;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.JToolBar;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.TreePath;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbFormulaComplicationItemToTableModelConverter;import com.ufgov.zc.client.common.converter.zc.ZcEbFormulaScoreItemToTableModelConverter;import com.ufgov.zc.client.component.AsValComboBox;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.zc.CommonButton;import com.ufgov.zc.client.component.event.ValueChangeEvent;import com.ufgov.zc.client.component.event.ValueChangeListener;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.IntFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.NumUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.client.zc.expertEval.Constants;import com.ufgov.zc.client.zc.project.integration.zbbook.services.ResponsePointServices;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BaseException;import com.ufgov.zc.common.system.exception.OtherException;import com.ufgov.zc.common.system.model.AsVal;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.system.util.UUID;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.FormulaRootCode;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbFormulaItem;import com.ufgov.zc.common.zc.model.ZcEbFormulaParam;import com.ufgov.zc.common.zc.model.ZcEbFormulaTemplate;import com.ufgov.zc.common.zc.model.ZcEbFormulaTemplateItem;import com.ufgov.zc.common.zc.model.ZcEbFormulaTemplateParam;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.publish.IZcEbFormulaServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbFormulaTemplateServiceDelegate;/*** @ClassName: ZcEbFormulaEditPanel* @Description: 指标集编辑面板* @date: 2010-4-29 上午11:01:34* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbFormulaEditPanel extends AbstractMainSubEditPanel implements ParentWindowAware {  private Window parentWindow;  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  private static final Logger logger = Logger.getLogger(ZcEbFormulaEditPanel.class);  private ZcEbFormula zcEbFormula;  private ZcEbFormula oldZcEbFormula;  //检测按钮，检测评分分值的设置：所有子指标之合要等于其父指标的分值。  private FuncButton confirmButton;  public FuncButton saveButton = new SaveButton(){	  	  public void setToolTipText(String text) {		  String tipText = "保存全部评标方法，比较费时";		    super.setToolTipText(tipText);		  }  };  public FuncButton exitButton = new ExitButton();  public FuncButton saveTemplateButton;  private ZcEbFormulaListPanel zcEbFormulaListPanel;  private FormulaSetMainPanel formulaSetMainPanel;  private JTablePanel tablePanel1 = new JTablePanel();  private JTablePanel tablePanel2 = new JTablePanel();  private JTabbedPane tabbedPane = new JTabbedPane();  private List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();  private IntFieldEditor scoreFieldEdit;  private ParamPanel paramPanel;  //选择分包的web实体  public ForeignEntityFieldEditor packSelectEdit;  private ForeignEntityFieldEditor templateSelectEdit;  private ElementConditionDto elementCondtiontDto = new ElementConditionDto();  //过滤分包的dto  private ElementConditionDto packDto = new ElementConditionDto();  //过滤项目的dto  private ElementConditionDto projDto = new ElementConditionDto();  public FormulaSetMainPanel getFormulaSetMainPanel() {    return formulaSetMainPanel;  }  public void setFormulaSetMainPanel(FormulaSetMainPanel formulaSetMainPanel) {    this.formulaSetMainPanel = formulaSetMainPanel;  }  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_FORMULA";  private String sqlMapSelectedId = "ZcEbFormula.getZcEbProj";  private IZcEbFormulaServiceDelegate zcEbFormulaServiceDelegate = (IZcEbFormulaServiceDelegate) ServiceFactory.create(  IZcEbFormulaServiceDelegate.class, "zcEbFormulaServiceDelegate");  private IZcEbFormulaTemplateServiceDelegate zcEbFormulaTemplateServiceDelegate = (IZcEbFormulaTemplateServiceDelegate) ServiceFactory.create(  IZcEbFormulaTemplateServiceDelegate.class, "zcEbFormulaTemplateServiceDelegate");  static {    LangTransMeta.init("ZC%");  }  public void setZcEbFormulaListPanel(ZcEbFormulaListPanel zcEbFormulaListPanel) {    this.zcEbFormulaListPanel = zcEbFormulaListPanel;  }  public ZcEbFormulaEditPanel() {  }  public ZcEbFormulaEditPanel(ZcEbFormula zcEbFormula, FormulaSetMainPanel formulaSetMainPanel) {    this.zcEbFormula = zcEbFormula;    this.formulaSetMainPanel = formulaSetMainPanel;    requestMeta.setCompoId(compoId);    workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "评标规则明细", TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    getFieldEditors();    init();    this.setEditingObject(zcEbFormula);    refreshData(zcEbFormula);    setOldObject();  }    @Override  protected void init() {	    this.initToolBar(toolBar);	    this.setLayout(new BorderLayout());//	    this.add(toolBar, BorderLayout.NORTH);	    this.add(workPanel, BorderLayout.CENTER);	    if (this.billClass != null && this.eleMeta != null) {	      initFieldEditorPanel(this.billClass, this.eleMeta);	    } else {	      initFieldEditorPanel();	    }	    workPanel.setLayout(new BorderLayout());	    workPanel.add(fieldEditorPanel, BorderLayout.NORTH);	    JComponent tabTable = createSubBillPanel();	    if (tabTable != null) {	      workPanel.add(tabTable, BorderLayout.CENTER);	    }	  }    @Override  public JComponent createSubBillPanel() {    tablePanel1.init();    tablePanel1.getSearchBar().setVisible(false);    tablePanel1.getTable().setShowCheckedColumn(false);    tablePanel1.setPanelId("1");    tablePanel2.init();    tablePanel2.getSearchBar().setVisible(false);    tablePanel2.getTable().setShowCheckedColumn(false);    tablePanel2.setPanelId("2");    paramPanel = new ParamPanel(zcEbFormula);    tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_COMPLIANCE"), tablePanel1);    tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_SCORE"), tablePanel2);    tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_PARAM"), paramPanel);    return tabbedPane;  }  public void setOldObject() {    this.oldZcEbFormula = (ZcEbFormula) ObjectUtil.deepCopy(zcEbFormula);  }  public void refreshData(ZcEbFormula zcEbFormula) {    this.zcEbFormula = zcEbFormula;    this.setEditingObject(zcEbFormula);    if (zcEbFormula.getProjectCode() != null) {      if (formulaSetMainPanel.isFilterByPack) {        packSelectEdit.setEnabled(true);      }      packDto.setProjCode(zcEbFormula.getProjectCode());    }    if (zcEbFormula.getProjectCode() != null && (!formulaSetMainPanel.isFilterByPack || zcEbFormula.getPackCode() != null)) {      templateSelectEdit.setEnabled(true);    }    refreshComplianceItemData();    refreshScoreItemData();    paramPanel.refreshData();        setbuttonStatus();  }  private void setbuttonStatus() {	/*// TODO Auto-generated method stub	if(formulaSetMainPanel!=null && formulaSetMainPanel.getZcEbProj()!=null){		if(requestMeta.getSvUserID().equals(formulaSetMainPanel.getZcEbProj().getManagerCode()) && formulaSetMainPanel.getZcEbProj().getStatus().equals(ZcSettingConstants.WF_STATUS_DRAFT)){			saveButton.setEnabled(true);			saveTemplateButton.setEnabled(true);		}else{			saveButton.setEnabled(false);			saveTemplateButton.setEnabled(false);		}	}*/	  }public void refreshComplianceItemData() {    tablePanel1    .setTableModel(ZcEbFormulaComplicationItemToTableModelConverter.convertComplItemTableData(zcEbFormula.getComplicationItemList(), true));    ZcUtil.translateColName(tablePanel1.getTable(), ZcEbFormulaComplicationItemToTableModelConverter.getComplFormulaItemInfo());  }  public void refreshScoreItemData() {    tablePanel2.setTableModel(ZcEbFormulaScoreItemToTableModelConverter.convertScoreItemTableData(zcEbFormula.getScoreItemList(), false));    ZcUtil.translateColName(tablePanel2.getTable(), ZcEbFormulaScoreItemToTableModelConverter.getScoreFormulaItemInfo());  }  public List<AbstractFieldEditor> getFieldEditors() {    //    if (zcEbFormula.getFormulaCode() != null) {    //      TextFieldEditor editor0 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_CODE), "formulaCode");    //      editor0.setEnabled(false);    //      editorList.add(editor0);    //    }    String columNames[] = { "项目编号", "项目名称", "预算", "采购类型", "负责人", "立项时间" };    ZcEbProjFnHandler handler = new ZcEbProjFnHandler(columNames);    projDto.setNd(requestMeta.getSvNd());    projDto.setExecutor(requestMeta.getSvUserID());    ForeignEntityFieldEditor projectEditor = new ForeignEntityFieldEditor(this.sqlMapSelectedId, projDto, 20, handler, columNames, "项目名称", "projectName");    projectEditor.getField().setEnabled(false);    projectEditor.addValueChangeListener(new ValueChangeListener() {      @Override      public void valueChanged(ValueChangeEvent e) {        // TODO Auto-generated method stub        zcEbFormula.setProjectCode(null);        zcEbFormula.setProjectName(null);        zcEbFormula.setPackCode(null);        zcEbFormula.setPackName(null);      }    });//        projectEditor.setEnabled(formulaSetMainPanel.isFilterByPack);    if (formulaSetMainPanel.isFilterByPack) {      String pakeColumNames[] = { "分包编号", "分包名称" };      ZcEbPackHandler handler1 = new ZcEbPackHandler(pakeColumNames);      packSelectEdit = new ForeignEntityFieldEditor("ZcEbFormula.getZcEbPack", packDto, 20, handler1, pakeColumNames, LangTransMeta      .translate(ZcElementConstants.FIELD_TRANS_PAKE_NAME), "packName");      packSelectEdit.getField().setEnabled(false);      packSelectEdit.addValueChangeListener(new ValueChangeListener() {        @Override        public void valueChanged(ValueChangeEvent e) {          // TODO Auto-generated method stub          zcEbFormula.setPackCode(null);          zcEbFormula.setPackName(null);        }      });      packSelectEdit.setEnabled(false);         }    elementCondtiontDto.setStatus("Y");    elementCondtiontDto.setDattr1("是");    if (zcEbFormula != null && zcEbFormula.getFactorType() != null) {      elementCondtiontDto.setType(zcEbFormula.getFactorType());    }    String templateColumNames[] = { "模板编号", "模板名称", "符合性通过比例", "符合性描述", "评分指标满分值", "创建者", "创建时间", "备注" };    ZcEbFormulaTemplateFnHandler handler2 = new ZcEbFormulaTemplateFnHandler(templateColumNames);    templateSelectEdit = new ForeignEntityFieldEditor("ZcEbFormulaTemplate.getZcEbFormulaTemplateList", elementCondtiontDto, 20, handler2,    templateColumNames, "选择指标集模板", "templateName");    templateSelectEdit.setEnabled(false);       scoreFieldEdit = new IntFieldEditor("评分性指标满分值", "factorFullScore");    AsValFieldEditor typeEditor = new AsValFieldEditor("评标方法类型", "factorType", "ZC_VS_FORMULA_FACTORTYPE") {      @Override      protected void afterChange(AsValComboBox field) {        if (field.getSelectedItem() != null) {          String factorType = ((AsVal) field.getSelectedItem()).getValId();          factoryTypeChanged(factorType);        }        super.afterChange(field);      }    };    if (zcEbFormula != null && zcEbFormula.getFactorType() != null) {      typeEditor.setEnabled(false);    }       DateFieldEditor inputDateEditor = new DateFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_CREATEDATE), "executeDate");    inputDateEditor.setEnabled(false);        editorList.add(templateSelectEdit);    editorList.add(typeEditor);    editorList.add(scoreFieldEdit);    editorList.add(inputDateEditor);    editorList.add(projectEditor);//    editorList.add(packSelectEdit);        return editorList;  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    colCount = 2;    return editorList;  }  public void setSaveBtn(Boolean flag) {    saveButton.setEnabled(flag);    saveTemplateButton.setEnabled(flag);  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(saveButton);        saveButton.setToolTipText("保存全部评标方法，比较费时");    saveTemplateButton = new CommonButton("zc_fsaveTemplate", "保存为模板", "save.jpg");    confirmButton = new CommonButton("fconfirmFormula", "检测", "default.gif");    toolBar.add(confirmButton);    toolBar.add(saveTemplateButton);//    toolBar.add(exitButton);    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    saveTemplateButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSaveTemplate();      }    });/*    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });*/    confirmButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doConfirm();      }    });  }  public void doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        doSave();      }    }    if (null != this.getFormulaSetMainPanel()) {      this.getFormulaSetMainPanel().getParentWindow().dispose();    } else {      this.getParentWindow().dispose();    }  }  public void doSave() {    if (!checkBeforeSave()) {      return;    }    if (doConfirm()) {      boolean success = true;      boolean writeWordSuccess = false;      try {        if (this.formulaSetMainPanel.isSamePBFF()) {          saveButton.setEnabled(false);          String currPackCode = zcEbFormula.getPackCode();          String[] codes = this.formulaSetMainPanel.getPackesNodeCode().split("@");          String[] names = this.formulaSetMainPanel.getPackesNodeName().split("@;@");          zcEbFormula.setExecutor(requestMeta.getSvUserName());  		zcEbFormula.setNd(new Integer(requestMeta.getSvNd()));  		zcEbFormula.setAgency(requestMeta.getSvCoCode());  		zcEbFormula.setExecuteDate(requestMeta.getSysDate());  		          String formulaCode=getFormulaCode(zcEbFormula);                    zcEbFormula.setFormulaCode(formulaCode);                              //对评审明细进行重新编号          reNO(zcEbFormula);                    List zcEbFormulaLst=new ArrayList();          List packLst=new ArrayList();                   for (int i = 0; i < codes.length; i++) {/*            zcEbFormula.setPackCode(codes[i]);            zcEbFormula.setPackName(names[i]);                        zcEbFormula.setExecutor(requestMeta.getSvUserName());    		zcEbFormula.setNd(new Integer(requestMeta.getSvNd()));    		zcEbFormula.setAgency(requestMeta.getSvCoCode());    		zcEbFormula.setExecuteDate(requestMeta.getSysDate());            zcEbFormulaLst.add(zcEbFormula);*/                        packLst.add(codes[i]);          }          zcEbFormulaServiceDelegate.saveZcEbFormula(zcEbFormula,packLst,formulaSetMainPanel.getZcEbProj().getProjCode(),requestMeta);                    zcEbFormula.setPackCode(currPackCode);        } else {          zcEbFormula = zcEbFormulaServiceDelegate.saveZcEbFormula(zcEbFormula, requestMeta);        }        if (this.formulaSetMainPanel.isFromZBFrame()) {          writeWordSuccess = doCreateEvalElementsWord();        }      } catch (BaseException ex) {        success = false;        logger.error(ex.getStackTraceMessage(), ex);        ex.printStackTrace();      } catch (OtherException ex) {        success = false;        logger.error(ex.getStackTraceMessage(), ex);        ex.printStackTrace();      } catch (Exception ex) {        success = false;        logger.error(ex.getMessage(), ex);        ex.printStackTrace();      }      if (success) {        if (this.formulaSetMainPanel.isFromZBFrame()) {          if (writeWordSuccess) {            JOptionPane.showMessageDialog(this, "评标要素成功保存到数据库，同时成功在本地对应标段下创建Word文档！", "提示", JOptionPane.INFORMATION_MESSAGE);            saveButton.setEnabled(true);          }        } else {          JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);          saveButton.setEnabled(true);        }        this.setEditingObject(zcEbFormula);        //更新指标项编辑树panel的编辑对象        if (null != this.getFormulaSetMainPanel()) {          this.getFormulaSetMainPanel().setZcEbFormula(zcEbFormula);          if (this.getFormulaSetMainPanel() != null) {            this.getFormulaSetMainPanel().refreshData();          }        }      }      if (null != zcEbFormulaListPanel) {        zcEbFormulaListPanel.refreshCurrentTabData();      }    }    setOldObject(); //更新编辑页面编辑对象  }  /**   * 要对指标集重新编码,因为一个指标集模板可能被多个项目引用。每个项目的指标项的编码要不一样。   */  private void reNO(ZcEbFormula zcEbFormula) {    /**     * 对评审指标项目进行编号     */    for (int i = 0; i < zcEbFormula.getItemList().size(); i++) {      ZcEbFormulaItem item = (ZcEbFormulaItem) zcEbFormula.getItemList().get(i);      if (item.getParentItemCode().equals("CP")) {        setFormulaItemCode(item, item.getChildItemList(), zcEbFormula.getFormulaCode());      }      if (item.getParentItemCode().equals("SC")) {        setFormulaItemCode(item, item.getChildItemList(), zcEbFormula.getFormulaCode());      }    }    /**     * 对评审参数进行重新编号     */    if (zcEbFormula.getParamList() != null && zcEbFormula.getParamList().size() > 0) {      for (int j = 0; j < zcEbFormula.getParamList().size(); j++) {        String code =ZcUtil.getSequenceNextVal(ZcSettingConstants.SEQUENCE_ZC_EB_FORMULA_PRRAM);        ZcEbFormulaParam param = (ZcEbFormulaParam) zcEbFormula.getParamList().get(j);        param.setParamCode(code);        param.setFormulaCode(zcEbFormula.getFormulaCode());      }    }  }  private String getFormulaCode(ZcEbFormula zcEbFormula) {	// TODO Auto-generated method stub	return NumUtil.getNum(requestMeta.getCompoId(),  "FORMULA_CODE", zcEbFormula, requestMeta);}  private void setFormulaItemCode(ZcEbFormulaItem zcEbFormulaitem, List list, String formulaCode) {	    String itemCode = zcEbFormulaitem.getItemCode();	    String newItemCode = UUID.randomUUID().toString();	    zcEbFormulaitem.setItemCode(newItemCode);	    zcEbFormulaitem.setFormulaCode(formulaCode);	    for (int i = 0; i < zcEbFormulaitem.getChildItemList().size(); i++) {	      ZcEbFormulaItem item = (ZcEbFormulaItem) zcEbFormulaitem.getChildItemList().get(i);	      if (itemCode.equals(item.getParentItemCode())) {	        item.setParentItemCode(newItemCode);	        setFormulaItemCode(item, item.getChildItemList(), formulaCode);	      }	    }	  }/**   * 创建标书导读清单   * @return   */  private boolean doCreateEvalElementsWord() {    if (zcEbFormula == null) {      return false;    }    if (zcEbFormula.getFactorType().equals(Constants.FORMULA_FACTOR_ZONGHE_TYPE)) {      ResponsePointServices.toCreateResponsePointList();    }    return true;  }  public boolean checkBeforeSave() {    zcEbFormula.setIsConform("N");    StringBuffer errStr = new StringBuffer();    if (zcEbFormula.getProjectCode() == null || "".equals(zcEbFormula.getProjectCode())) {      errStr.append("<html><b><font size='3' color='red'>项目名称没有选择</font></b></html>\n");    }    if (formulaSetMainPanel.isFilterByPack) {      if (zcEbFormula.getPackCode() == null || "".equals(zcEbFormula.getPackCode())) {        errStr.append("<html><b><font size='3' color='red'>分包没有选择</font></b></html>\n");      }    }    if (zcEbFormula.getFactorType() == null || "".equals(zcEbFormula.getFactorType())) {      errStr.append("<html><b><font size='3' color='red'>评标方法类型没有选择</font></b></html>\n");    }    //校验符合性指标是否已经填写    if (formulaSetMainPanel.getTreePanel().getComplianceFuomualRootNode().getChildCount() == 0) {      errStr.append("<html><b><font size='3' color='red'>符合性指标还没有填写</font></b></html>\n");    }    if (!"2".equals(zcEbFormula.getFactorType())) {      Integer fullScore = zcEbFormula.getFactorFullScore();      if (null == fullScore) {        errStr.append("<html><b><font size='3' color='red'>评审指标满分值没有填写</font></b></html>\n");      } else {      }      //检验评审参数的设置      for (int j = 0; j < zcEbFormula.getParamList().size(); j++) {        ZcEbFormulaParam param = (ZcEbFormulaParam) zcEbFormula.getParamList().get(j);        if (param.getIsManSet() == null || "".equals(param.getIsManSet())) {          errStr.append("<html><b><font size='3' color='red'>评审参数: " + " [ " + param.getParamName() + " ] " + "没有设置是否需要人工设置参数值属性！</font></b></html>\n");        }      }    }    if (errStr.toString().length() > 0) {      errStr.append("");      JOptionPane.showMessageDialog(this, errStr.toString(), "提示", JOptionPane.ERROR_MESSAGE);      return false;    }    return true;  }  /**   *   * @Description: 保存为模板  * @return void 返回类型  * @since 1.0   */  public void doSaveTemplate() {    ZcEbFormulaTemplate zcEbFormulaTemplate = new ZcEbFormulaTemplate();    BeanUtil.commonFieldsCopy(zcEbFormula, zcEbFormulaTemplate);    zcEbFormulaTemplate.setTemplateName(zcEbFormula.getProjectName());    boolean success = true;    try {      zcEbFormulaTemplate = zcEbFormulaTemplateServiceDelegate.insertZcEbFormulaTemplate(zcEbFormulaTemplate, requestMeta);      String templateCode = zcEbFormulaTemplate.getTemplateCode();      List zcEbFormulaItemList = new ArrayList();      Map map = new HashMap();      map.put("formulaCode", zcEbFormula.getFormulaCode());      zcEbFormulaItemList = zcEbFormulaServiceDelegate.getZcEbFormulaItemList(map, requestMeta);      List<ZcEbFormulaTemplateItem> zcEbTemplateItemList = new ArrayList<ZcEbFormulaTemplateItem>();      for (int i = 0; i < zcEbFormulaItemList.size(); i++) {        ZcEbFormulaItem item = (ZcEbFormulaItem) zcEbFormulaItemList.get(i);        ZcEbFormulaTemplateItem templateItem = new ZcEbFormulaTemplateItem();        templateItem.setTemplateCode(templateCode);        BeanUtil.commonFieldsCopy(item, templateItem);        zcEbTemplateItemList.add(templateItem);      }      List<ZcEbFormulaTemplateParam> zcEbFormulaTemplateParamList = new ArrayList<ZcEbFormulaTemplateParam>();      List zcEbFormulaParamList = zcEbFormulaServiceDelegate.getZcEbFormulaParamList(zcEbFormula.getFormulaCode(), requestMeta);      for (int i = 0; i < zcEbFormulaParamList.size(); i++) {        ZcEbFormulaParam item = (ZcEbFormulaParam) zcEbFormulaParamList.get(i);        ZcEbFormulaTemplateParam templateParam = new ZcEbFormulaTemplateParam();        templateParam.setTemplateCode(templateCode);        BeanUtil.commonFieldsCopy(item, templateParam);        zcEbFormulaTemplateParamList.add(templateParam);      }      //对模板指标重新编号      for (int i = 0; i < zcEbTemplateItemList.size(); i++) {        if (zcEbTemplateItemList.get(i).getParentItemCode().equals("CP") || zcEbTemplateItemList.get(i).getParentItemCode().equals("SC")) {          setTemplateItemCode(zcEbTemplateItemList.get(i), zcEbTemplateItemList);        }      }      //保存模板指标到数据库      for (int i = 0; i < zcEbTemplateItemList.size(); i++) {        zcEbFormulaTemplateServiceDelegate.insertZcEbFormulaTemplateItem(zcEbTemplateItemList.get(i), requestMeta);      }      //保存模板通用参数到数据库      zcEbFormulaTemplateServiceDelegate.saveZcEbFormulaTemplateParam(zcEbFormulaTemplateParamList, templateCode, requestMeta);    } catch (BaseException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "保存模板成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    }  }  /**   *   * @Description: 设置模板指标的编码，父编码，通过平台进行编码  * @return void 返回类型  * @since 1.0   */  private void setTemplateItemCode(ZcEbFormulaTemplateItem zcEbFormulaTemplateItem, List<ZcEbFormulaTemplateItem> list) {    String itemCode = zcEbFormulaTemplateItem.getItemCode();    String newItemCode;    if (formulaSetMainPanel.isOffLine()) {      newItemCode = java.util.UUID.randomUUID().toString();    } else {      newItemCode = NumUtil.getNum("ZC_EB_TEMPLATE_ITEM", "ITEM_CODE", zcEbFormulaTemplateItem, requestMeta);    }    zcEbFormulaTemplateItem.setItemCode(newItemCode);    for (ZcEbFormulaTemplateItem item : list) {      if (itemCode.equals(item.getParentItemCode())) {        item.setParentItemCode(newItemCode);        setTemplateItemCode(item, list);      }    }  }  public boolean doConfirm() {    if ("2".equals(zcEbFormula.getFactorType())) {      return true;    }    boolean isConfirmed;    //获得指标数的model对象    DefaultTreeModel model = formulaSetMainPanel.getModel();    //获得评分指标的根节点    FormulaJTreeNode scoreRoot = null;    try {      scoreRoot = formulaSetMainPanel.getNodeByCode(FormulaRootCode.SCORE, (FormulaJTreeNode) model.getChild(model.getRoot(), 1));    } catch (ArrayIndexOutOfBoundsException e) {      JOptionPane.showMessageDialog(this, "评分指标还未增加！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    String result = formulaSetMainPanel.confim(scoreRoot);    if ("noChild".equals(result)) {      JOptionPane.showMessageDialog(this, "评分指标还未增加！", "提示", JOptionPane.INFORMATION_MESSAGE);      isConfirmed = false;    } else {      if (!"conform".equals(result)) {        JOptionPane.showMessageDialog(this, result + "的所有子指标的标准分值之和不等于其标准分值！", "提示", JOptionPane.INFORMATION_MESSAGE);        isConfirmed = false;      } else {        zcEbFormula.setIsConform("Y");        isConfirmed = true;      }    }    return isConfirmed;  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldZcEbFormula).equals(DigestUtil.digest(getEditingObject()));  }  //设置选择项目的外部实体  private class ZcEbProjFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbProjFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbProj proj = (ZcEbProj) object;        zcEbFormula.setProjectCode(proj.getProjCode());        zcEbFormula.setProjectName(proj.getProjName());        zcEbFormula.setPackCode(null);        zcEbFormula.setPackName(null);        if (formulaSetMainPanel.isFilterByPack) {          packSelectEdit.setEnabled(true);        }        packDto.setProjCode(proj.getProjCode());        setEditingObject(zcEbFormula);      }    }    /*     * 清空外部实体对应的数据     */    public void afterClear() {      zcEbFormula.setProjectCode(null);      zcEbFormula.setProjectName(null);      zcEbFormula.setPackCode(null);      zcEbFormula.setPackName(null);      if (formulaSetMainPanel.isFilterByPack) {        packSelectEdit.setEnabled(false);      }      packDto.setProjCode(null);      setEditingObject(zcEbFormula);    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjCode();        data[i][col++] = rowData.getProjName();        data[i][col++] = rowData.getProjSum();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE", rowData.getPurType());        data[i][col++] = rowData.getManager();        SimpleDateFormat sdf = new SimpleDateFormat(ZcSettingConstants.SIMPLE_DATE_FORMAT_FULL);        data[i][col++] = sdf.format(rowData.getProjDate());      }      MyTableModel model = new MyTableModel(data, columNames) {        @Override        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  //设置选择分包的外部实体  private class ZcEbPackHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbPackHandler(String columNames[]) {      this.columNames = columNames;    }    /*     * 设置外部实体数据条件     */    public Boolean beforeSelect(ElementConditionDto dto) {      if (null == zcEbFormula.getProjectCode()) {        JOptionPane.showMessageDialog(parentWindow, "请先选择一个采购项目 ！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      return true;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbPack pack = (ZcEbPack) object;        zcEbFormula.setPackCode(pack.getPackCode());        zcEbFormula.setPackName(pack.getPackDesc());        templateSelectEdit.setEnabled(true);        setEditingObject(zcEbFormula);      }    }    /*     * 清空外部实体对应的数据     */    public void afterClear() {      zcEbFormula.setPackCode(null);      zcEbFormula.setPackName(null);      templateSelectEdit.setEnabled(false);      setEditingObject(zcEbFormula);    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbPack rowData = (ZcEbPack) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getPackName();        data[i][col++] = rowData.getPackDesc();      }      MyTableModel model = new MyTableModel(data, columNames) {        @Override        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  private class ZcEbFormulaTemplateFnHandler implements IForeignEntityHandler {    private String columNames[];    //设置选择指标集模板的web实体    public ZcEbFormulaTemplateFnHandler(String columNames[]) {      this.columNames = columNames;    }    /*     * 设置外部实体数据条件     */    public Boolean beforeSelect(ElementConditionDto dto) {      if (null == zcEbFormula.getPackCode() && formulaSetMainPanel.isFilterByPack) {        JOptionPane.showMessageDialog(parentWindow, "请先选择一个标段 ！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      return true;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        if (selectedDatas == null) {          return;        }        ZcEbFormulaTemplate template = (ZcEbFormulaTemplate) object;        String templateCode = template.getTemplateCode();        zcEbFormula.setTemplateCode(templateCode);        zcEbFormula.setTemplateName(template.getTemplateName());        zcEbFormula.setFactorFullScore(template.getFactorFullScore());        zcEbFormula.setComplianceRate(template.getComplianceRate());        zcEbFormula.setFormulaDescription(template.getFormulaDescription());        zcEbFormula.setFactorType(template.getFactorType());        //从模板中导入评审指标        Map<String, String> map = new HashMap<String, String>();        map.put("templateCode", templateCode);        List<ZcEbFormulaTemplateItem> templateComItemList = zcEbFormulaTemplateServiceDelegate.getZcEbFormulaTemplateItemList(map, null, requestMeta);        List<ZcEbFormulaItem> itemList = new ArrayList<ZcEbFormulaItem>();        for (int i = 0; i < templateComItemList.size(); i++) {          ZcEbFormulaTemplateItem zcEbFormulaTemplateItem = templateComItemList.get(i);          ZcEbFormulaItem zcEbFormulaItem = new ZcEbFormulaItem();          BeanUtil.commonFieldsCopy(zcEbFormulaTemplateItem, zcEbFormulaItem);          itemList.add(zcEbFormulaItem);        }        zcEbFormula.setItemList(itemList);        //从模板中导入评审参数        List templateParamList = zcEbFormulaTemplateServiceDelegate.getTemplateParamList(templateCode, requestMeta);        List<ZcEbFormulaParam> paramList = new ArrayList<ZcEbFormulaParam>();        for (int i = 0; i < templateParamList.size(); i++) {          ZcEbFormulaParam zcEbFormulaParam = new ZcEbFormulaParam();          BeanUtil.commonFieldsCopy(templateParamList.get(i), zcEbFormulaParam);          paramList.add(zcEbFormulaParam);        }        zcEbFormula.setParamList(paramList);        refreshData(zcEbFormula);        if (null != formulaSetMainPanel) {          //刷新编辑指标集设置主面板          formulaSetMainPanel.getTreePanel().removeFoumula();          formulaSetMainPanel.getTreePanel().loadTreeNodes();          //刷新下面的tablePanel,从模块中取数据填充指标。          formulaSetMainPanel.getParamPanel().refreshData();        }      }    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbFormulaTemplate rowData = (ZcEbFormulaTemplate) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getTemplateCode();        data[i][col++] = rowData.getTemplateName();        data[i][col++] = rowData.getComplianceRate();        data[i][col++] = rowData.getComplianceDesc();        data[i][col++] = rowData.getFactorFullScore();        data[i][col++] = rowData.getCreator();        data[i][col++] = rowData.getExecuteDate();        data[i][col++] = rowData.getRemark();      }      MyTableModel model = new MyTableModel(data, columNames) {        @Override        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public void afterClear() {      zcEbFormula.setTemplateCode(null);      zcEbFormula.setTemplateName(null);      zcEbFormula.setFactorFullScore(null);      zcEbFormula.setComplianceRate(null);      zcEbFormula.setFormulaDescription(null);      zcEbFormula.setItemList(new ArrayList());      zcEbFormula.setParamList(new ArrayList());      zcEbFormula.setScoreItemList(new ArrayList());      zcEbFormula.setComplicationItemList(new ArrayList());      setEditingObject(zcEbFormula);      if (null != formulaSetMainPanel) {        //刷新编辑指标集设置主面板        formulaSetMainPanel.getTreePanel().removeFoumula();        formulaSetMainPanel.getTreePanel().loadTreeNodes();        //刷新下面的tablePanel,从模块中取数据填充指标。        formulaSetMainPanel.getParamPanel().refreshData();      }    }    public boolean isMultipleSelect() {      return false;    }  }  private void factoryTypeChanged(String factorType) {    if (factorType.equals("2")) {      scoreFieldEdit.setVisible(false);      fieldEditorPanel.removeAll();      initFieldEditorPanel();      tabbedPane.removeAll();      tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_COMPLIANCE"), tablePanel1);      if (formulaSetMainPanel != null) {        if (formulaSetMainPanel.getTreePanel().rootNode.getChildCount() == 3) {          formulaSetMainPanel.getTreePanel().scoreFormulalRootNode.removeAllChildren();          formulaSetMainPanel.getModel().removeNodeFromParent(formulaSetMainPanel.getTreePanel().scoreFormulalRootNode);          formulaSetMainPanel.getTreePanel().commonParamRootNode.removeAllChildren();          formulaSetMainPanel.getModel().removeNodeFromParent(formulaSetMainPanel.getTreePanel().commonParamRootNode);          formulaSetMainPanel.refreshData();          formulaSetMainPanel.getTreePanel().repaint();        }      }    } else {      scoreFieldEdit.setVisible(true);      fieldEditorPanel.removeAll();      initFieldEditorPanel();      tabbedPane.removeAll();      tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_COMPLIANCE"), tablePanel1);      tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_SCORE"), tablePanel2);      tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_PARAM"), paramPanel);      if (formulaSetMainPanel != null) {        if (formulaSetMainPanel.getTreePanel().rootNode.getChildCount() < 3) {          formulaSetMainPanel.getModel().insertNodeInto(formulaSetMainPanel.getTreePanel().scoreFormulalRootNode,          formulaSetMainPanel.getTreePanel().rootNode, formulaSetMainPanel.getTreePanel().rootNode.getChildCount());          System.out.println("---------------------");          formulaSetMainPanel.getModel().insertNodeInto(formulaSetMainPanel.getTreePanel().commonParamRootNode,          formulaSetMainPanel.getTreePanel().rootNode, formulaSetMainPanel.getTreePanel().rootNode.getChildCount());          formulaSetMainPanel.refreshData();          formulaSetMainPanel.getTreePanel().expandAll(formulaSetMainPanel.getTreePanel().getTree(),          new TreePath(formulaSetMainPanel.getTreePanel().getTree().getModel().getRoot()), true);        }      }    }  }  //导出评标方法:拼HTML字符串。以HTML表格的形式展示。（存在问题：生成的表格导入word中样式控制不住）  public void exportFormula(ZcEbFormula zcEbFormula) {    ExportFormulaDescribe exportFormulaDescribe = new ExportFormulaDescribe(zcEbFormula);    String str = exportFormulaDescribe.exportFormula();    zcEbFormula.setFormulaDescription(str.toString().getBytes());  }  public void doEidt(boolean isVisiable){    templateSelectEdit.setEnabled(isVisiable);    saveButton.setVisible(isVisiable);    if(paramPanel != null){      paramPanel.doEidt(isVisiable);    }  }    public JToolBar getToolBar(){	  return toolBar;  }}
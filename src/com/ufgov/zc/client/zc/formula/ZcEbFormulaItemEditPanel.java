/**   * @(#) project: GK* @(#) file: ZcEbFormulaItemEditPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.formula;import java.awt.BorderLayout;import java.awt.Dialog;import java.awt.Dimension;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.beans.PropertyChangeEvent;import java.beans.PropertyChangeListener;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import javax.swing.JComponent;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.JToolBar;import javax.swing.tree.DefaultTreeModel;import com.ufgov.smartclient.component.table.cellrenderer.NumberCellRenderer;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbFormulaComplicationItemToTableModelConverter;import com.ufgov.zc.client.common.converter.zc.ZcEbFormulaScoreItemToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.zc.CommonButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.celleditor.MoneyCellEditor;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.TextAreaFieldEditor;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcEvalFiled;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.FormulaRootCode;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbFormulaItem;/*** @ClassName: ZcEbFormulaItemEditPanel* @Description: 评审指标集项编辑面板* @date: 2010-4-26 下午03:35:56* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public abstract class ZcEbFormulaItemEditPanel extends AbstractMainSubEditPanel implements ParentWindowAware {  private ZcEbFormulaItem zcEbFormulaItem;  private ZcEbFormulaItemEditPanel self = this;  private ZcEbFormula zcEbFormula;  private Window parentWindow;  private DefaultTreeModel model;  //定义FormulaSetMainPanel的引用 目的是为了保存操作完成后，增加FormulaSetMainPanel树的结点  private FormulaSetMainPanel formulaSetMainPanel;  private FuncButton saveButton = new SaveButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton nextButton = new NextButton();  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_FORMULA";  //  private Map<String, BigDecimal> valueMap = new HashMap<String, BigDecimal>();  //当前编辑的节点  private FormulaJTreeNode editNode;  private CommonButton editButton;  private JTabbedPane tabbedPane = new JTabbedPane();  private JTablePanel tablePanel = new JTablePanel();  private String itemType;  public FormulaJTreeNode getEditNode() {    return formulaSetMainPanel.getSelectedNode();  }  //formulaPanel计算公式编辑面板  private FormulaPanel formulaPanel;  public void setEditNode(FormulaJTreeNode editNode) {    this.editNode = editNode;    setButtonStatus();  }  private boolean isInsert = false;  public ZcEbFormulaItem getZcEbFormulaItem() {    return zcEbFormulaItem;  }  public void setZcEbFormulaItem(ZcEbFormulaItem zcEbFormulaItem) {    this.zcEbFormulaItem = zcEbFormulaItem;    setButtonStatus();  }  public FormulaSetMainPanel getFormulaSetMainPanel() {    return formulaSetMainPanel;  }  public void setFormulaSetMainPanel(FormulaSetMainPanel formulaSetMainPanel) {    this.formulaSetMainPanel = formulaSetMainPanel;  }  public FuncButton getSaveButton() {    return saveButton;  }  public FuncButton getEditButton() {    return editButton;  }  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  static {    LangTransMeta.init("ZC%");  }  public ZcEbFormulaItemEditPanel(ZcEbFormula zcEbFormula, String itemType) {    this.zcEbFormula = zcEbFormula;    this.itemType = itemType;    requestMeta.setCompoId(compoId);    init();        setButtonStatus();  }  public void refreshData(FormulaJTreeNode node) {    this.zcEbFormulaItem = node.getUserObject();    this.editNode = node;    this.setEditingObject(zcEbFormulaItem);    if (zcEbFormulaItem.getChildItemList() != null && zcEbFormulaItem.getChildItemList().size() > 0) {      if (zcEbFormulaItem.getItemType().equals(EvalItemType.COMPLIANICE)) {        tablePanel        .setTableModel(ZcEbFormulaComplicationItemToTableModelConverter.convertComplItemTableData(zcEbFormulaItem.getChildItemList(), true));        ZcUtil.translateColName(tablePanel.getTable(), ZcEbFormulaComplicationItemToTableModelConverter.getComplFormulaItemInfo());        tablePanel.fitTable();      } else {        tablePanel.setTableModel(ZcEbFormulaScoreItemToTableModelConverter.convertScoreItemTableData(zcEbFormulaItem.getChildItemList(), true));        ZcUtil.translateColName(tablePanel.getTable(), ZcEbFormulaScoreItemToTableModelConverter.getScoreFormulaItemInfo());        setScoreTabledetailEditor(tablePanel.getTable());        tablePanel.fitTable();      }      tabbedPane.setVisible(true);    } else {      tabbedPane.setVisible(false);    }    tabbedPane.removeAll();    tabbedPane.add(zcEbFormulaItem.getName(), tablePanel);        setButtonStatus();  }  private void setButtonStatus() {	// TCJLODO Auto-generated method stub	  if(this.formulaSetMainPanel!=null){		saveButton.setEnabled(formulaSetMainPanel.isEditing());		editButton.setEnabled(formulaSetMainPanel.isEditing());	  }}public ZcEbFormulaItemEditPanel() {  }  @Override  protected void initFieldEditorPanel() {    fieldEditors = createFieldEditors();    int row = 0;    int col = 0;    fieldEditorPanel.setLayout(new GridBagLayout());    for (int i = 0; i < fieldEditors.size() - 1; i++) {      AbstractFieldEditor comp = fieldEditors.get(i);      JLabel label = new JLabel(comp.getName());      comp.setPreferredSize(new Dimension(150, 23));      fieldEditorPanel.add(label, new GridBagConstraints(col, row, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 0,      5, 5), 0, 0));      fieldEditorPanel.add(comp, new GridBagConstraints(col + 1, row, 1, 1, 1.0, 1.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL,      new Insets(5, 0, 5, 5), 0, 0));      if (col == colCount * 2 - 2) {        row++;        col = 0;      } else {        col += 2;      }    }    row++;    col = 0;    TextAreaFieldEditor areaComp = (TextAreaFieldEditor) fieldEditors.get(fieldEditors.size() - 1);    JLabel label = new JLabel(areaComp.getName());    fieldEditorPanel.add(label, new GridBagConstraints(col, row, 1, 2, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 0,    5, 5), 0, 0));    fieldEditorPanel.add(areaComp, new GridBagConstraints(col + 1, row, 3, 3, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL,    new Insets(5, 0, 5, 5), 0, 0));    fieldEditorPanel.repaint();  }  @Override  public JComponent createSubBillPanel() {    tablePanel.init();    tablePanel.getSearchBar().setVisible(false);    tablePanel.getTable().setShowCheckedColumn(false);    return tabbedPane;  }  private void setScoreTabledetailEditor(JPageableFixedTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());    NumberCellRenderer numberCellRenderer = new NumberCellRenderer();    SwingUtil.setTableCellRenderer(table, ZcEvalFiled.FIELD_NAME_EVAL_EXPERT_CODE, numberCellRenderer);    SwingUtil.setTableCellEditor(table, "STANDARD_SCORE", new MoneyCellEditor(true));    SwingUtil.setTableCellRenderer(table, "STANDARD_SCORE", numberCellRenderer);    SwingUtil.setTableCellRenderer(table, "IS_ADD_SCORE", new AsValCellRenderer("VS_ISADDSCORE"));  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    return null;  }  public List<AbstractFieldEditor> createFieldEditors(String itemType) {    return null;  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(saveButton);        saveButton.setToolTipText("保存当前设置的评分项");    toolBar.add(previousButton);    toolBar.add(nextButton);    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    editButton = new CommonButton("fedit", "编辑计算公式", "edit.jpg");    toolBar.add(editButton);    editButton.setModuleCode(null);    if (itemType.equals(EvalItemType.SCORE)) {      editButton.setVisible(true);    } else {      editButton.setVisible(false);    }    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEditFormula();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 上一页        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 下一页        doNext();      }    });  }  private void doPrevious() {    FormulaJTreeNode previousNode = (FormulaJTreeNode) editNode.getPreviousNode();    FormulaJTreeNode parentNode = (FormulaJTreeNode) previousNode.getParent();    if (parentNode.getCode().equals(FormulaRootCode.TOP_ROOT)) {      return;    }    refreshData(previousNode);  }  private void doNext() {    FormulaJTreeNode nextNode = (FormulaJTreeNode) editNode.getNextNode();    FormulaJTreeNode parentNode = (FormulaJTreeNode) nextNode.getParent();    if (parentNode.getCode().equals(FormulaRootCode.TOP_ROOT)) {      return;    }    refreshData(nextNode);  }  //弹出计算公式编辑对话框。  public void doEditFormula() {    if (tablePanel.getTable().getSelectedRow() != -1) {      ZcEbFormulaItem item = (ZcEbFormulaItem) ((BeanTableModel) tablePanel.getTable().getModel()).getBean(tablePanel.getTable()      .convertRowIndexToView(tablePanel.getTable().getSelectedRow()));      formulaPanel = new FormulaPanel(zcEbFormula, item, this);    } else {      formulaPanel = new FormulaPanel(zcEbFormula, zcEbFormulaItem, this);    }    //    JDialog dialog =new JDialog(this.parentWindow);    //    dialog.addWindowListener(new WindowAdapter() {    //      public void windowClosing(WindowEvent e) {    //        formulaPanel.doExit();    //      }    //    });    GkBaseDialog dialog = new GkBaseDialog(this.parentWindow, Dialog.ModalityType.APPLICATION_MODAL) {      @Override      public void closeDialog() {        formulaPanel.doExit();      }    };    formulaPanel.addPropertyChangeListener(new PropertyChangeListener() {      @Override      public void propertyChange(PropertyChangeEvent arg0) {        // TCJLODO Auto-generated method stub        setEditingObject(zcEbFormulaItem);      }    });    dialog.setLayout(new BorderLayout());    dialog.add(formulaPanel);    formulaPanel.setParentWindow(dialog);    dialog.setTitle("编辑计算公式");    dialog.setSize(UIConstants.DIALOG_2_LEVEL_WIDTH, UIConstants.DIALOG_2_LEVEL_HEIGHT);    dialog.moveToScreenCenter();    dialog.setVisible(true);  }  public void doSave() {    boolean isCorrect = beforeSave(zcEbFormulaItem);    if (isCorrect) {      if (zcEbFormulaItem.getItemCode() == null || "".equals(zcEbFormulaItem.getItemCode())) {        String itemCode = java.util.UUID.randomUUID().toString();        zcEbFormulaItem.setItemCode(itemCode);        isInsert = true;      } else {        isInsert = false;      }    } else {      //      zcEbFormulaItem.setStandardScore(valueMap.get(zcEbFormulaItem.getItemCode()));      setEditingObject(zcEbFormulaItem);      return;    }    afterSave();    JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);  }  /**   *   * @Description:保存成功后，要更新树，只有新增才添加结点。  * @return void 返回类型  * @since 1.0   */  private void afterSave() {    model = formulaSetMainPanel.getModel();    //新增    if (isInsert) {      FormulaJTreeNode newChild = new FormulaJTreeNode();      newChild.setUserObject(zcEbFormulaItem);      FormulaJTreeNode parent = formulaSetMainPanel.getSelectedNode();      //树model、树节点的编辑对象、指标集。添加上新增的对象。      parent.getUserObject().getChildItemList().add(zcEbFormulaItem);      model.insertNodeInto(newChild, parent, parent.getChildCount());      //保存父类编码      zcEbFormulaItem.setParentItemCode(parent.getUserObject().getItemCode());      zcEbFormulaItem.setParentItemName(parent.getUserObject().getName());      zcEbFormula.getItemList().add(zcEbFormulaItem);      formulaSetMainPanel.setSelectedNode(newChild);    } else {      FormulaJTreeNode oldChild = formulaSetMainPanel.getSelectedNode();      oldChild.setUserObject(zcEbFormulaItem);      model.reload(oldChild);    }    setEditingObject(zcEbFormulaItem);    formulaSetMainPanel.repaintTree();  }  /**   *   * @Description: 保存之前要做一些校验  * @return boolean 返回类型  * @since 1.0   */  protected boolean beforeSave(ZcEbFormulaItem zcEbFormulaItem) {    //设置指标集的编号，设置父类的编号    String itemType = zcEbFormulaItem.getItemType();    String itemCode = zcEbFormulaItem.getItemCode();    String description = zcEbFormulaItem.getDescription();    String complianceValue = zcEbFormulaItem.getComplianceValue();    String itemName = zcEbFormulaItem.getName();    String formulaCode = zcEbFormulaItem.getFormulaCode();    if (itemName == null || "".equals(itemName)) {      JOptionPane.showMessageDialog(this, "指标名称必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    //    if (itemName.length() > 20) {    //      JOptionPane.showMessageDialog(this, "指标项的名称应该限制在20个汉字以内！", "提示", JOptionPane.INFORMATION_MESSAGE);    //      return false;    //    }    //验证是否已经存在同名的指标,指标项的名称要保证在一个指标集内唯一    if (nameIsExists(zcEbFormula.getItemList(), zcEbFormulaItem)) {      JOptionPane.showMessageDialog(null, "已经存在指标名称为 " + itemName + " 的指标,请修改为其它指标名称!");      return false;    }    if (EvalItemType.SCORE.equals(itemType)) {      String isAddScore = zcEbFormulaItem.getIsAddScore();      BigDecimal standardScore = zcEbFormulaItem.getStandardScore();      BigDecimal baseScore = zcEbFormulaItem.getBaseScore();      BigDecimal maxAddScore = zcEbFormulaItem.getMaxAddScore();      BigDecimal maxMinusScore = zcEbFormulaItem.getMaxMinusScore();      BigDecimal leastScore = zcEbFormulaItem.getLeastScore();      BigDecimal weight = zcEbFormulaItem.getWeight();      if (null == weight) {        weight = new BigDecimal(100);        zcEbFormulaItem.setWeight(weight);      }      if (weight.intValue() > 100) {        JOptionPane.showMessageDialog(this, "权重不能大于100%！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      if (standardScore == null) {        JOptionPane.showMessageDialog(this, "标准分值必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      if (leastScore != null && standardScore != null && leastScore.compareTo(standardScore) == 1) {        JOptionPane.showMessageDialog(this, "至少得分不能大于标准分值！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      if (description == null || "".equals(description)) {        JOptionPane.showMessageDialog(this, "评审标准描述必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      if (isAddScore != null && "1".equals(isAddScore) && maxAddScore == null) {        JOptionPane.showMessageDialog(this, "加分指标的最大加分值必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }    } else {      if (description == null || "".equals(description)) {        JOptionPane.showMessageDialog(this, "评审标准描述必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }    }    return true;  }  private boolean nameIsExists(List<ZcEbFormulaItem> list, ZcEbFormulaItem zcEbFormulaItem) {    List<ZcEbFormulaItem> itemList = new ArrayList<ZcEbFormulaItem>();    itemList.addAll(list);    //验证是否有同名的指标名称时：集合中要把自己排除掉。    itemList.remove(zcEbFormulaItem);    for (ZcEbFormulaItem item : itemList) {      if (item.getName().equals(zcEbFormulaItem.getName())) {        itemList.clear();        return true;      }    }    return false;  }  public void delete() {    zcEbFormula.getItemList().remove(zcEbFormulaItem);    ((FormulaJTreeNode) editNode.getParent()).getUserObject().getChildItemList().remove(zcEbFormulaItem);  }    public JToolBar getToolBar(){	  return toolBar;  }}
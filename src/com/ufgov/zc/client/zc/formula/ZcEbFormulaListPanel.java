package com.ufgov.zc.client.zc.formula;import java.awt.Color;import java.awt.Container;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbFormulaToTableModelConverter;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.ui.AbstractDataDisplay;import com.ufgov.zc.client.component.ui.AbstractEditListBill;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SaveableSearchConditionArea;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.component.ui.conditionitem.SearchConditionUtil;import com.ufgov.zc.client.util.BalanceUtil;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.exception.BaseException;import com.ufgov.zc.common.system.exception.DataAlreadyDeletedException;import com.ufgov.zc.common.system.exception.OtherException;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbFormulaServiceDelegate;/** * * @ClassName: ZcEbFormulaListPanel* @Description: 评审指标集列表面板* @date: 2010-4-23 下午03:29:13* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbFormulaListPanel extends AbstractEditListBill implements ParentWindowAware {  private static final Logger logger = Logger.getLogger(ZcEbFormulaListPanel.class);  private Window parentWindow;  /**   * 顶部工具栏   */  protected JFuncToolBar toolBar = new JFuncToolBar();  private String compoId = "ZC_EB_FORMULA";  /**   * 顶部按钮   */  private AddButton addButton = new AddButton();  private EditButton editButton = new EditButton();  private DeleteButton deleteButton = new DeleteButton();  private ZcEbFormulaListPanel self = this;  private ZcEbFormulaToTableModelConverter modelConverter = new ZcEbFormulaToTableModelConverter();  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private ElementConditionDto elementConditionDto = new ElementConditionDto();  private FormulaSetMainPanel panel;  public FormulaSetMainPanel getPanel() {    return panel;  }  public IZcEbFormulaServiceDelegate zcEbFormulaServiceDelegate = (IZcEbFormulaServiceDelegate) ServiceFactory.create(  IZcEbFormulaServiceDelegate.class, "zcEbFormulaServiceDelegate");  public IZcEbBaseServiceDelegate zcEbBaseServiceDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class,  "zcEbBaseServiceDelegate");  private final class DataDisplay extends MultiDataDisplay {    private DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays, AbstractSearchConditionArea conditionArea,    boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, ZcSettingConstants.TAB_ID_ZC_EB_YANSHOU);      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("ZC_FIELD_FORMUAL"),      TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    }    @Override    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          @Override          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {              String tabStatus = d.getStatus();              JGroupableTable table = d.getTable();              MyTableModel model = (MyTableModel) table.getModel();              int selectRows = table.getSelectedRow();              List dataList = ((MyTableModel) table.getModel()).getList();              int accordDataRow = table.convertRowIndexToModel(selectRows);              ZcEbFormula zcEbFormula = (ZcEbFormula) dataList.get(accordDataRow);              new ZcEbFormulaDialog(self, zcEbFormula);            }          }        });      }    }    @Override    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems, final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(compoId);      elementConditionDto.setExecutor(WorkEnv.getInstance().getCurrUserId());      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setStatus(tableDisplay.getStatus());      elementConditionDto.setMonth(BalanceUtil.getMonthIdBySysOption());      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        @Override        public void before() {          assert c != null;          installLoadingComponent(c);        }        @Override        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        @Override        public TableModel execute() throws Exception {          return modelConverter.convertToTableModel(zcEbFormulaServiceDelegate.getZcEbFormulaList(elementConditionDto, requestMeta));        }        @Override        public void success(TableModel model) {          tableDisplay.setTableModel(model);        }      });    }  }  static {    LangTransMeta.init("ZC%");  }  /**   * 构造函数   */  public ZcEbFormulaListPanel() {    UIUtilities.asyncInvoke(new DefaultInvokeHandler<List<SearchCondition>>() {      @Override      public List<SearchCondition> execute() throws Exception {        List<SearchCondition> needDisplaySearchConditonList = SearchConditionUtil.getNeedDisplaySearchConditonList(WorkEnv.getInstance()        .getCurrUserId(), ZcSettingConstants.TAB_ID_ZC_EB_FORMULA);        return needDisplaySearchConditonList;      }      @Override      public void success(List<SearchCondition> needDisplaySearchConditonList) {        List<TableDisplay> showingDisplays = SearchConditionUtil.getNeedDisplayTableDisplay(needDisplaySearchConditonList);        init(createDataDisplay(showingDisplays), null);//调用父类方法        revalidate();        repaint();      }    });    requestMeta.setCompoId(compoId);  }  private AbstractSearchConditionArea topSearchConditionArea;  private AbstractSearchConditionArea createTopConditionArea() {    Map defaultValueMap = new HashMap();    topSearchConditionArea = new SaveableSearchConditionArea(ZcSettingConstants.CONDITION_ID_TAB_ID_ZC_EB_FORMULA, null, true, defaultValueMap, null);    return topSearchConditionArea;  }  private AbstractDataDisplay createDataDisplay(List<TableDisplay> showingDisplays) {    return new DataDisplay(SearchConditionUtil.getAllTableDisplay(ZcSettingConstants.TAB_ID_ZC_EB_FORMULA), showingDisplays,    createTopConditionArea(), true);//true:显示收索条件区 false：不显示收索条件区  }  public void refreshCurrentTabData() {    topSearchConditionArea.doSearch();  }  @Override  protected void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(editButton);    toolBar.add(deleteButton);    // 初始化按钮的action事件    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();        refreshCurrentTabData();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();        refreshCurrentTabData();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDelete();        refreshCurrentTabData();      }    });  }  private void doAdd() {    ZcEbFormula zcEbFormula = new ZcEbFormula();    new ZcEbFormulaDialog(self, zcEbFormula);  }  private void doEdit() {    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    Integer[] selectedRows = table.getCheckedRows();    List dataList = ((MyTableModel) table.getModel()).getList();    List chechedList = new ArrayList();    for (Integer checkedRow : selectedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      chechedList.add(dataList.get(accordDataRow));    }    if (chechedList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要修改的数据!", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    if (chechedList.size() > 1) {      JOptionPane.showMessageDialog(this, "只能选择一条数据!", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    ZcEbFormula zcEbFormula = (ZcEbFormula) chechedList.get(0);    new ZcEbFormulaDialog(self, zcEbFormula);  }  private void doDelete() {    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    Integer[] selectedRows = table.getCheckedRows();    List dataList = ((MyTableModel) table.getModel()).getList();    List chechedList = new ArrayList();    for (Integer checkedRow : selectedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      ZcEbFormula formula = (ZcEbFormula) dataList.get(accordDataRow);      Map<String, String> para = new HashMap<String, String>();      para.put("packCode", formula.getPackCode());      para.put("projCode", formula.getProjectCode());      ZcEbPack pack = (ZcEbPack) zcEbBaseServiceDelegate.queryObject("ZcEbProj.getZcEbPackByPackCode", para, requestMeta);      if (pack != null) {        if (!pack.getStatus().equals(ZcSettingConstants.PACK_STATUS_DRAFT)) {          if (JOptionPane.OK_OPTION == JOptionPane.showConfirmDialog(this, "项目编号为：【" + pack.getProjCode() + "】" + "的标段:【" + pack.getPackName()            + "】已开标是否选择删除!", "提示", JOptionPane.INFORMATION_MESSAGE)) {            chechedList.add(dataList.get(accordDataRow));          } else {            continue;          }        } else {          chechedList.add(dataList.get(accordDataRow));        }      }    }    if (chechedList.size() == 0) {      JOptionPane.showMessageDialog(this, "请选择需要删除的数据!", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int result = JOptionPane.showConfirmDialog(self, "是否要删除选中的数据?", "删除确认", JOptionPane.YES_NO_OPTION);    if (result != JOptionPane.YES_OPTION) {      return;    }    StringBuffer errorInfo = new StringBuffer("");    boolean success = true;    requestMeta.setFuncId(deleteButton.getFuncId());    try {      zcEbFormulaServiceDelegate.deleteListForZcEbFormula(chechedList, requestMeta);    } catch (DataAlreadyDeletedException ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getStackTraceMessage(), ex);      success = false;    } catch (BaseException ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getStackTraceMessage(), ex);      success = false;    } catch (OtherException ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getStackTraceMessage(), ex);      success = false;    } catch (Exception ex) {      errorInfo.append(ex.getMessage() + "\n");      logger.error(ex.getMessage(), ex);      success = false;    }    if (success) {      JOptionPane.showMessageDialog(this, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      JOptionPane.showMessageDialog(this, "删除错误!\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);    }  }  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  public void refreshCurrentTabData(List dataList) {    topDataDisplay.getActiveTableDisplay().getTable().setModel(modelConverter.convertToTableModel(dataList));  }  public static void main(String[] args) {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        ZcEbFormulaListPanel bill = new ZcEbFormulaListPanel();        JFrame frame = new JFrame("frame");        bill.setParentWindow(frame);        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(UIConstants.DIALOG_2_LEVEL_WIDTH, UIConstants.DIALOG_2_LEVEL_HEIGHT);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }}
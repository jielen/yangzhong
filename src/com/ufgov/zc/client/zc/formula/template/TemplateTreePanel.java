/**   * @(#) project: GK* @(#) file: FormulaTreePanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.formula.template;import java.awt.BorderLayout;import java.util.ArrayList;import java.util.Enumeration;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.JFrame;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTree;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.UnsupportedLookAndFeelException;import javax.swing.tree.TreePath;import javax.swing.tree.TreeSelectionModel;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.zc.tree.JTreeNode;import com.ufgov.zc.client.component.zc.tree.TreeNodeSelectionListener;import com.ufgov.zc.client.zc.formula.JTreeCellRenderer;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.FormulaRootCode;import com.ufgov.zc.common.zc.model.ZcEbFormulaTemplateItem;import com.ufgov.zc.common.zc.publish.IZcEbFormulaTemplateServiceDelegate;/*** @ClassName: FormulaTreePanel* @Description: 指标集树对象面板。* @date: 2010-4-26 下午04:55:51* @version: V1.0 * @since: 1.0* @author: tianly* @modify: */public class TemplateTreePanel extends JPanel {  private static final long serialVersionUID = 9069793707744356420L;  //private static final String TREE_SQL = "SELECT T.ITEM_CODE CODE,T.NAME NAME,(CASE WHEN T.PARENT_ITEM_CODE IS NULL THEN '' ELSE T.PARENT_ITEM_CODE END) P_CODE  FROM ZC_EB_FORMULA_ITEM T JOIN ZC_EB_FORMULA M ON M.FORMULA_CODE=?  WHERE T.ITEM_TYPE=? order by t.item_code";  private JScrollPane panel;  private JTree tree;  private Object[] params;  public JTreeNode rootNode;  public JTreeNode complianceFuomualRootNode;  public JTreeNode scoreFuomualRootNode;  public JTreeNode commonParamRootNode;  private List<ZcEbFormulaTemplateItem> list;  private String templateCode;  private String TOP_ROOT_CODE = FormulaRootCode.TOP_ROOT;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private IZcEbFormulaTemplateServiceDelegate zcEbFormulaTemplateServiceDelegate = (IZcEbFormulaTemplateServiceDelegate) ServiceFactory.create(  IZcEbFormulaTemplateServiceDelegate.class, "zcEbFormulaTemplateServiceDelegate");  public TemplateTreePanel() {    init();  }  public String getTemplateCode() {    return templateCode;  }  public void setTemplateCode(String templateCode) {    this.templateCode = templateCode;  }  private void createTree() {    initRootNodes();    //treeModel = new ZcEbFormulaItemTreeModel(rootNode, itemList);    tree = new JTree(rootNode, true);    //tree.setModel(treeModel);    tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);    this.tree.setCellRenderer(new JTreeCellRenderer());    this.repaint();  }  /**  * @Description:加载树节点对象。  * @return void 返回类型  * @since 1.0   */  public void loadTreeNodes() {    getZcEbFormulaTemplateItemList(templateCode);    loadChildNodes(EvalItemType.COMPLIANICE);    loadChildNodes(EvalItemType.SCORE);    expandAll(tree, new TreePath(tree.getModel().getRoot()), true);    //    loadParamChildNodes();  }  //展现树结点  public void expandAll(JTree tree, TreePath parent, boolean expand) {    JTreeNode node = (JTreeNode) parent.getLastPathComponent();    if (node.getChildCount() >= 0) {      for (Enumeration e = node.children(); e.hasMoreElements();) {        JTreeNode n = (JTreeNode) e.nextElement();        TreePath path = parent.pathByAddingChild(n);        expandAll(tree, path, expand);      }    }    if (expand) {      tree.expandPath(parent);    } else {      tree.collapsePath(parent);    }  }  /**  * @Description:按照类型分别加载对应子节点。  * @param itemType 指标项类别：1，符合性指标；2，评分性指标。  * @return void   * @since 1.0   */  private void loadChildNodes(String itemType) {    String pCode = "";    if (EvalItemType.COMPLIANICE.equals(itemType)) {      this.complianceFuomualRootNode = createChild(complianceFuomualRootNode);    } else {      this.scoreFuomualRootNode = createChild(scoreFuomualRootNode);    }  }  //递归创建树形结点  private JTreeNode createChild(JTreeNode pnode) {    List<ZcEbFormulaTemplateItem> list = getChild(pnode.getCode());    if (null == list || list.isEmpty()) {      pnode.setLeaf(true);      return pnode;    }    for (ZcEbFormulaTemplateItem item : list) {      JTreeNode node = new JTreeNode();      node.setCode(item.getItemCode());      node.setParentCode(item.getParentItemCode());      node.setUserObject(item);      node.setName(item.getName());      JTreeNode treeNode = createChild(node);      pnode.add(treeNode);    }    return pnode;  }  private void getZcEbFormulaTemplateItemList(String templateCode) {    Map<String, String> map = new HashMap<String, String>();    map.put("templateCode", templateCode);    list = zcEbFormulaTemplateServiceDelegate.getZcEbFormulaTemplateItemList(map, null, requestMeta);  }  private List<ZcEbFormulaTemplateItem> getChild(String pcode) {    List<ZcEbFormulaTemplateItem> childList = new ArrayList<ZcEbFormulaTemplateItem>();    for (ZcEbFormulaTemplateItem item : list) {      if (item.getParentItemCode().equals(pcode)) {        childList.add(item);      }    }    return childList;  }  /**  * 通用参数设置  * @return void 返回类型  * @since 1.0   */  private void loadParamChildNodes() {  }  /**  * @Description: 创建固定节点。包含一个顶级根节点、符合性指标根节点、评分性指标根节点和通用参数根节点。  * @return void 返回类型  * @since 1.0   */  private void initRootNodes() {    rootNode = new JTreeNode();    rootNode.setCode(FormulaRootCode.TOP_ROOT);    rootNode.setName(LangTransMeta.translate("ZC_FIELD_FORMUAL"));    rootNode.setName("评审指标集");    rootNode.setAllowsChildren(true);    /*ZcEbFormulaItem item = new ZcEbFormulaItem();    item.setItemCode(FormulaRootCode.COMPLIANCE);    item.setName("符合性指标");    item.setParentItemCode(FormulaRootCode.TOP_ROOT);    itemList.add(item);
    ZcEbFormulaItem item1 = new ZcEbFormulaItem();    item1.setItemCode(FormulaRootCode.SCORE);    item1.setName("评分性指标");    item1.setParentItemCode(FormulaRootCode.TOP_ROOT);    itemList.add(item1);
    ZcEbFormulaItem item2 = new ZcEbFormulaItem();    item2.setItemCode(FormulaRootCode.PARAM);    item2.setName("通用参数");    item2.setParentItemCode(FormulaRootCode.TOP_ROOT);    itemList.add(item2);*/    complianceFuomualRootNode = new JTreeNode();    complianceFuomualRootNode.setCode(FormulaRootCode.COMPLIANCE);    complianceFuomualRootNode.setParentCode(FormulaRootCode.TOP_ROOT);    complianceFuomualRootNode.setName(LangTransMeta.translate("ZC_FIELD_FORMUAL_COMPLIANCE"));    complianceFuomualRootNode.setName("符合性指标");    complianceFuomualRootNode.setAllowsChildren(true);    rootNode.add(complianceFuomualRootNode);    scoreFuomualRootNode = new JTreeNode();    scoreFuomualRootNode.setCode(FormulaRootCode.SCORE);    scoreFuomualRootNode.setParentCode(FormulaRootCode.TOP_ROOT);    scoreFuomualRootNode.setName(LangTransMeta.translate("ZC_FIELD_FORMUAL_COMPLIANCE"));    scoreFuomualRootNode.setName("评分性指标");    scoreFuomualRootNode.setAllowsChildren(true);    rootNode.add(scoreFuomualRootNode);    commonParamRootNode = new JTreeNode();    commonParamRootNode.setCode(FormulaRootCode.PARAM);    commonParamRootNode.setParentCode(FormulaRootCode.TOP_ROOT);    commonParamRootNode.setName(LangTransMeta.translate("ZC_FIELD_FORMUAL_PARAM"));    commonParamRootNode.setName("通用参数");    commonParamRootNode.setAllowsChildren(true);    rootNode.add(commonParamRootNode);  }  public String getTOP_ROOT_CODE() {    return TOP_ROOT_CODE;  }  public JTree getTree() {    return tree;  }  public void addListener() {    tree.addMouseListener(new TreeNodeSelectionListener(tree));  }  public Object[] getParams() {    return params;  }  public void setParams(Object[] params) {    this.params = params;  }  public void setTree(JTree tree) {    this.tree = tree;  }  private void init() {    // LangTransMeta.init("ZC%");    this.setLayout(new BorderLayout());    createTree();    panel = new JScrollPane(tree);    this.add(panel, BorderLayout.CENTER);    this.tree.setCellRenderer(new JTreeCellRenderer());  }  public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException,  UnsupportedLookAndFeelException {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        TemplateTreePanel p = new TemplateTreePanel();        JFrame frame = new JFrame("frame");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(p);        frame.setVisible(true);      }    });  }}
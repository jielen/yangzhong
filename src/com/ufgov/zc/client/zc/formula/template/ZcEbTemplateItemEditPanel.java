/**   * @(#) project: GK* @(#) file: ZcEbFormulaItemEditPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.formula.template;import java.awt.BorderLayout;import java.awt.Dialog;import java.awt.Dimension;import java.awt.GridBagConstraints;import java.awt.GridBagLayout;import java.awt.Insets;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import javax.swing.JComponent;import javax.swing.JLabel;import javax.swing.JOptionPane;import javax.swing.JScrollPane;import javax.swing.JTabbedPane;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.TreePath;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbTemplateComplicationItemToTableModelConverter;import com.ufgov.zc.client.common.converter.zc.ZcEbTemplateScoreItemToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.zc.CommonButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.TextAreaFieldEditor;import com.ufgov.zc.client.component.zc.tree.JTreeNode;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.exception.BaseException;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.FormulaRootCode;import com.ufgov.zc.common.zc.model.ZcEbFormulaTemplateItem;import com.ufgov.zc.common.zc.publish.IZcEbFormulaTemplateServiceDelegate;/*** @ClassName: ZcEbFormulaItemEditPanel* @Description: 评审指标集项编辑面板* @date: 2010-4-26 下午03:35:56* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbTemplateItemEditPanel extends AbstractMainSubEditPanel implements ParentWindowAware {  private ZcEbFormulaTemplateItem zcEbFormulaTemplateItem = new ZcEbFormulaTemplateItem();  private ZcEbFormulaTemplateItem oldzcEbFormulaTemplateItem;  private Window parentWindow;  private DefaultTreeModel model;  //定义FormulaSetMainPanel的引用 目的是为了保存操作完成后，增加FormulaSetMainPanel树的结点  private TemplateSetMainPanel templateSetMainPanel;  private FuncButton saveButton = new SaveButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton nextButton = new NextButton();  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_FORMULA_TEMPLATE";  private String itemCode;  private String itemType;  private String templateCode;  private List<ZcEbFormulaTemplateItem> childItemList = new ArrayList<ZcEbFormulaTemplateItem>();  ZcEbTemplateComplicationItemToTableModelConverter complConverter = new ZcEbTemplateComplicationItemToTableModelConverter();  ZcEbTemplateScoreItemToTableModelConverter scoreConverter = new ZcEbTemplateScoreItemToTableModelConverter();  JTabbedPane tabbedPane = new JTabbedPane();  JTablePanel tablePanel = new JTablePanel();  //当前编辑的节点  private JTreeNode editNode;  public JTreeNode getEditNode() {    return editNode;  }  //formulaPanel计算公式编辑面板  private TemplateFormulaPanel templateFormulaPanel;  public void setEditNode(JTreeNode editNode) {    this.editNode = editNode;  }  private boolean isInsert = false;  private boolean isSave;  private IZcEbFormulaTemplateServiceDelegate zcEbFormulaTemplateServiceDelegate = (IZcEbFormulaTemplateServiceDelegate) ServiceFactory.create(  IZcEbFormulaTemplateServiceDelegate.class, "zcEbFormulaTemplateServiceDelegate");  public ZcEbFormulaTemplateItem getZcEbTemplateItem() {    return zcEbFormulaTemplateItem;  }  public void setZcEbFormulaTemplateItem(ZcEbFormulaTemplateItem zcEbFormulaTemplateItem) {    this.zcEbFormulaTemplateItem = zcEbFormulaTemplateItem;  }  public TemplateSetMainPanel getTemplateSetMainPanel() {    return templateSetMainPanel;  }  public void setTemplateSetMainPanel(TemplateSetMainPanel templateSetMainPanel) {    this.templateSetMainPanel = templateSetMainPanel;  }  public FuncButton getSaveButton() {    return saveButton;  }  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  static {    LangTransMeta.init("ZC%");  }  public ZcEbTemplateItemEditPanel(JTreeNode node) {    this.zcEbFormulaTemplateItem = (ZcEbFormulaTemplateItem) node.getUserObject();    this.oldzcEbFormulaTemplateItem = zcEbFormulaTemplateItem;    itemType = zcEbFormulaTemplateItem.getItemType();    init();    requestMeta.setCompoId(compoId);    refreshData(node);  }  public ZcEbTemplateItemEditPanel(String evalItemType) {    itemType = evalItemType;    init();    requestMeta.setCompoId(compoId);  }  public void refreshData(JTreeNode node) {    this.zcEbFormulaTemplateItem = (ZcEbFormulaTemplateItem) node.getUserObject();    this.oldzcEbFormulaTemplateItem = zcEbFormulaTemplateItem;    if (node.getChildCount() > 0) {      childItemList = zcEbFormulaTemplateServiceDelegate.getZcEbFormulaTemplateItemByPcode(zcEbFormulaTemplateItem.getTemplateCode(),      zcEbFormulaTemplateItem.getItemCode(), requestMeta);      tabbedPane.setVisible(true);    } else {      tabbedPane.setVisible(false);    }    if (zcEbFormulaTemplateItem.getItemType().equals(EvalItemType.COMPLIANICE)) {      tablePanel.setTableModel(complConverter.convertToTableModel(childItemList));    } else {      tablePanel.setTableModel(scoreConverter.convertToTableModel(childItemList));    }    tabbedPane.add(zcEbFormulaTemplateItem.getName(), tablePanel);    this.setEditNode(node);    this.setEditingObject(this.zcEbFormulaTemplateItem);    templateSetMainPanel.setSelectedNode(node);    templateSetMainPanel.getTreePanel().getTree().setSelectionPath(new TreePath(node.getPath()));  }  @Override  protected void initFieldEditorPanel() {    fieldEditors = createFieldEditors();    int row = 0;    int col = 0;    fieldEditorPanel.setLayout(new GridBagLayout());    for (int i = 0; i < fieldEditors.size() - 1; i++) {      AbstractFieldEditor comp = fieldEditors.get(i);      JLabel label = new JLabel(comp.getName());      comp.setPreferredSize(new Dimension(150, 23));      fieldEditorPanel.add(label, new GridBagConstraints(col, row, 1, 1, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 0,      5, 5), 0, 0));      fieldEditorPanel.add(comp, new GridBagConstraints(col + 1, row, 1, 1, 1.0, 1.0, GridBagConstraints.WEST, GridBagConstraints.HORIZONTAL,      new Insets(5, 0, 5, 5), 0, 0));      if (col == colCount * 2 - 2) {        row++;        col = 0;      } else {        col += 2;      }    }    row++;    col = 0;    TextAreaFieldEditor areaComp = (TextAreaFieldEditor) fieldEditors.get(fieldEditors.size() - 1);    JLabel label = new JLabel(areaComp.getName());    fieldEditorPanel.add(label, new GridBagConstraints(col, row, 1, 2, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(5, 0,    5, 5), 0, 0));    JScrollPane js = new JScrollPane(areaComp);    fieldEditorPanel.add(areaComp, new GridBagConstraints(col + 1, row, 3, 3, 1.0, 1.0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL,    new Insets(5, 0, 5, 5), 0, 0));    fieldEditorPanel.repaint();  }  @Override  public JComponent createSubBillPanel() {    tablePanel.init();    return tabbedPane;  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    return null;  }  public List<AbstractFieldEditor> createFieldEditors(String itemType) {    return null;  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(saveButton);    toolBar.add(previousButton);    toolBar.add(nextButton);    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 上一页        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        // 下一页        doNext();      }    });    if (EvalItemType.SCORE.equals(itemType)) {      CommonButton editButton = new CommonButton("feditFormula", "检测", "edit.jpg");      toolBar.add(editButton);      editButton.addActionListener(new ActionListener() {        public void actionPerformed(ActionEvent e) {          doEditFormula();        }      });    }  }  //弹出计算公式编辑对话框。  public void doEditFormula() {    templateFormulaPanel = new TemplateFormulaPanel(zcEbFormulaTemplateItem, this);    //    JDialog dialog =new JDialog(this.parentWindow);    //    dialog.addWindowListener(new WindowAdapter() {    //      public void windowClosing(WindowEvent e) {    //        formulaPanel.doExit();    //      }    //    });    GkBaseDialog dialog = new GkBaseDialog(this.parentWindow, Dialog.ModalityType.APPLICATION_MODAL) {      @Override      public void closeDialog() {        templateFormulaPanel.doExit();      }    };    dialog.setLayout(new BorderLayout());    dialog.add(templateFormulaPanel);    templateFormulaPanel.setParentWindow(dialog);    dialog.setTitle("编辑计算公式");    dialog.setSize(UIConstants.DIALOG_2_LEVEL_WIDTH, UIConstants.DIALOG_2_LEVEL_HEIGHT);    dialog.moveToScreenCenter();    dialog.setVisible(true);  }  public boolean doSave() {    if (zcEbFormulaTemplateItem.getItemCode() == null) {      isInsert = true;    } else {      isInsert = false;    }    boolean isCorrect = beforeSave();    if (isCorrect) {      boolean success = true;      try {        if (isInsert) {          zcEbFormulaTemplateItem = zcEbFormulaTemplateServiceDelegate.insertZcEbFormulaTemplateItem(zcEbFormulaTemplateItem, requestMeta);        } else {          zcEbFormulaTemplateItem = zcEbFormulaTemplateServiceDelegate.updateZcEbFormulaTemplateItem(zcEbFormulaTemplateItem, requestMeta);        }        isSave = true;      } catch (BaseException ex) {        success = false;        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      }      if (success) {        JOptionPane.showMessageDialog(this, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        afterSave();        return true;      }    }    return false;  }  private void doPrevious() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (doSave()) {          return;        }      } else {      }    }    JTreeNode previousNode = (JTreeNode) editNode.getPreviousNode();    JTreeNode parentNode = (JTreeNode) previousNode.getParent();    if (parentNode.getCode().equals(FormulaRootCode.TOP_ROOT)) {      return;    }    refreshData(previousNode);  }  private void doNext() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {      }    }    JTreeNode nextNode = (JTreeNode) editNode.getNextNode();    JTreeNode parentNode = (JTreeNode) nextNode.getParent();    if (parentNode.getCode().equals(FormulaRootCode.TOP_ROOT)) {      return;    }    refreshData(nextNode);  }  /**   *   * @Description:保存成功后，要更新树，只有新增才添加结点。  * @return void 返回类型  * @since 1.0   */  private void afterSave() {    model = templateSetMainPanel.getModel();    //新增    if (isInsert) {      JTreeNode newChild = new JTreeNode();      newChild.setCode(zcEbFormulaTemplateItem.getItemCode());      newChild.setName(zcEbFormulaTemplateItem.getName());      String parentCode = zcEbFormulaTemplateItem.getParentItemCode();      newChild.setParentCode(parentCode);      //保存完之后，要重置一下节点的编辑对象，新的对象是从数据库中取出的。      itemCode = zcEbFormulaTemplateItem.getItemCode();      templateCode = zcEbFormulaTemplateItem.getTemplateCode();      zcEbFormulaTemplateItem = zcEbFormulaTemplateServiceDelegate.getZcEbFormulaTemplateItem(itemCode, requestMeta);      newChild.setUserObject(zcEbFormulaTemplateItem);      JTreeNode parent = templateSetMainPanel.getSelectedNode();      model.insertNodeInto(newChild, parent, parent.getChildCount());      setEditingObject(zcEbFormulaTemplateItem);      //重置面板的节点对象      setEditNode(newChild);      templateSetMainPanel.setSelectedNode(newChild);    } else {      //更新成功之后要重置编辑对象,新的对象是从数据库从取出的。      JTreeNode oldChild = templateSetMainPanel.getSelectedNode();      oldChild.setName(zcEbFormulaTemplateItem.getName());      itemCode = zcEbFormulaTemplateItem.getItemCode();      templateCode = zcEbFormulaTemplateItem.getTemplateCode();      zcEbFormulaTemplateItem = zcEbFormulaTemplateServiceDelegate.getZcEbFormulaTemplateItem(itemCode, requestMeta);      //      ZcEbFormulaItem old = (ZcEbFormulaItem) oldChild.getUserObject();      //      BeanUtil.commonFieldsCopy(zcEbFormulaItem, old);      oldChild.setUserObject(zcEbFormulaTemplateItem);      model.reload(oldChild);      setEditingObject(zcEbFormulaTemplateItem);    }    templateSetMainPanel.repaintTree();    //保存成功的话，指标集明细面板要刷新数据    if (EvalItemType.COMPLIANICE.equals(zcEbFormulaTemplateItem.getItemType())) {      templateSetMainPanel.getZcEbTemplateComplianceItemListPanel().refreshData();      //      templateSetMainPanel.getZcEbTemplateItemDetailPanel().refreshComplianceItemData();    } else {      templateSetMainPanel.getZcEbTemplateScoreItemListPanel().refreshData();      //      templateSetMainPanel.getZcEbTemplateItemDetailPanel().refreshScoreItemData();    }  }  /**   *   * @Description: 保存之前要做一些校验  * @return boolean 返回类型  * @since 1.0   */  private boolean beforeSave() {    //设置指标集的编号，设置父类的编号    String itemType = zcEbFormulaTemplateItem.getItemType();    String itemCode = zcEbFormulaTemplateItem.getItemCode();    String description = zcEbFormulaTemplateItem.getDescription();    String complianceValue = zcEbFormulaTemplateItem.getComplianceValue();    String itemName = zcEbFormulaTemplateItem.getName();    String templateCode = zcEbFormulaTemplateItem.getTemplateCode();    if (itemName == null || "".equals(itemName)) {      JOptionPane.showMessageDialog(this, "指标名称必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    //    if (itemName.length() > 20) {    //      JOptionPane.showMessageDialog(this, "指标项的名称应该限制在20个汉字以内！", "提示", JOptionPane.INFORMATION_MESSAGE);    //      return false;    //    }    //验证是否已经存在同名的指标,指标项的名称要保证在一个指标集内唯一    if (nameIsExists(templateCode, itemName, itemCode) == 1) {      JOptionPane.showMessageDialog(null, "已经存在指标名称为 " + itemName + " 的指标,请修改为其它指标名称!");      return false;    }    if (EvalItemType.SCORE.equals(itemType)) {      String isAddScore = zcEbFormulaTemplateItem.getIsAddScore();      BigDecimal standardScore = zcEbFormulaTemplateItem.getStandardScore();      BigDecimal baseScore = zcEbFormulaTemplateItem.getBaseScore();      BigDecimal maxAddScore = zcEbFormulaTemplateItem.getMaxAddScore();      BigDecimal maxMinusScore = zcEbFormulaTemplateItem.getMaxMinusScore();      BigDecimal leastScore = zcEbFormulaTemplateItem.getLeastScore();      BigDecimal weight = zcEbFormulaTemplateItem.getWeight();      if (null == weight) {        weight = new BigDecimal(100);        zcEbFormulaTemplateItem.setWeight(weight);      }      if (weight.intValue() > 100) {        JOptionPane.showMessageDialog(this, "权重不能大于100%！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      if (standardScore == null) {        JOptionPane.showMessageDialog(this, "标准分值必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      //        BigDecimal b1;      //        if (FormulaRootCode.SCORE.equals(editNode.getCode())) {      //          b1 = null;      //        } else {      //          b1 = templateSetMainPanel.getParentSubtract(editNode);      //        }      //        DecimalFormat df = new DecimalFormat("0.00");      //        BigDecimal currentScore = standardScore.multiply(weight).divide(new BigDecimal(100));      //        //当新增的时候只需要验证新增节点的标准分值是否大于其父节点还未分配的分值。      //        if (itemCode == null) {      //          BigDecimal b2 = templateSetMainPanel.getChildSubtract(editNode);      //          if (b2 != null && b2.doubleValue() == 0) {      //            JOptionPane.showMessageDialog(this, "上级指标的标准分值已经分配完毕！", "提示", JOptionPane.INFORMATION_MESSAGE);      //            return false;      //          }      //          if (b2 != null && currentScore.compareTo(b2) == 1) {      //            JOptionPane.showMessageDialog(this, "该指标的标准分值不能大于" + df.format(b2.doubleValue()) + "！", "提示", JOptionPane.INFORMATION_MESSAGE);      //            return false;      //          }      //        }      //        //修改      //        if (itemCode != null) {      //          //判断当前节点的标准分值是否大于其所有子节点的标准分值之和。      //          BigDecimal b2 = currentScore.subtract(templateSetMainPanel.getChildScore(editNode));      //          if (b2 != null && b2.doubleValue() < 0) {      //            JOptionPane.showMessageDialog(this, "该指标的标准分值不能小于其所有子节点标准分值之和！", "提示", JOptionPane.INFORMATION_MESSAGE);      //            return false;      //          }      //          //判断与其同级的所有标准分值之和不能大于他们的父指标的标准分值。      //          BigDecimal oldScore = ((ZcEbFormulaTemplateItem) editNode.getUserObject()).getStandardScore().setScale(2, BigDecimal.ROUND_HALF_UP);      //          if (currentScore.subtract(oldScore).compareTo(b1) == 1) {      //            JOptionPane.showMessageDialog(this, "该指标的标准分值不能大于" + df.format(oldScore.doubleValue() + b1.doubleValue()) + "！", "提示",      //              JOptionPane.INFORMATION_MESSAGE);      //            return false;      //          }      //        }      if (leastScore != null && standardScore != null && leastScore.compareTo(standardScore) == 1) {        JOptionPane.showMessageDialog(this, "至少得分不能大于标准分值！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      if (description == null || "".equals(description)) {        JOptionPane.showMessageDialog(this, "评审标准描述必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }      if (isAddScore != null && "1".equals(isAddScore) && maxAddScore == null) {        JOptionPane.showMessageDialog(this, "加分指标的最大加分值必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }    } else {      if (description == null || "".equals(description)) {        JOptionPane.showMessageDialog(this, "评审标准描述必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);        return false;      }    }    return true;  }  /**   *   * @Description: 判断是否有同名的指标项  * @return boolean 返回类型  * @since 1.0   */  private int nameIsExists(String formulaCode, String itemName, String itemCode) {    return zcEbFormulaTemplateServiceDelegate.isExistsByItemName(formulaCode, itemName, itemCode, requestMeta);  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldzcEbFormulaTemplateItem).equals(DigestUtil.digest(zcEbFormulaTemplateItem));  }  public void delete() {    zcEbFormulaTemplateServiceDelegate.deleteForZcEbFormulaTemplateItem(zcEbFormulaTemplateItem.getItemCode(), requestMeta);  }}
/**   * @(#) project: GK* @(#) file: ParamPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.formula.template;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JButton;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JTabbedPane;import javax.swing.border.TitledBorder;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.SubaddButton;import com.ufgov.zc.client.component.button.SubdelButton;import com.ufgov.zc.client.component.button.SubinsertButton;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.client.component.table.codecelleditor.AsValComboBoxCellEditor;import com.ufgov.zc.client.component.table.codecellrenderer.AsValCellRenderer;import com.ufgov.zc.client.util.SwingUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.exception.BaseException;import com.ufgov.zc.common.system.exception.OtherException;import com.ufgov.zc.common.zc.model.ZcEbFormulaParam;import com.ufgov.zc.common.zc.model.ZcEbFormulaTemplateParam;import com.ufgov.zc.common.zc.publish.IZcEbFormulaTemplateServiceDelegate;/*** @ClassName: ParamPanel* @Description: 通用参数设置面板* @date: 2010-5-7 上午09:54:10* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */@SuppressWarnings("unchecked")public class TemplateParamPanel extends JPanel {  private static final Logger logger = Logger.getLogger(TemplateParamPanel.class);  protected JFuncToolBar topToolBar = new JFuncToolBar();  protected JFuncToolBar bottomToolBar = new JFuncToolBar();  private JTablePanel tablePanel = new JTablePanel();  private JTabbedPane tabbedPane = new JTabbedPane();  private String compoId = "ZC_EB_FORMULA_TEMPLATE";  private FuncButton saveButton = new SaveButton();  private FuncButton addBtn = new SubaddButton(false);  private JButton insertBtn = new SubinsertButton(false);  private JButton delBtn = new SubdelButton(false);  private String templateCode;  public String getTemplateCode() {    return templateCode;  }  public void setTemplateCode(String templateCode) {    this.templateCode = templateCode;  }  private TemplateSetMainPanel templateSetMainPanel;  public TemplateSetMainPanel getTemplateSetMainPanel() {    return templateSetMainPanel;  }  public void setTemplateSetMainPanel(TemplateSetMainPanel templateSetMainPanel) {    this.templateSetMainPanel = templateSetMainPanel;  }  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private BeanTableModel<ZcEbFormulaTemplateParam> model;  List<ZcEbFormulaTemplateParam> mydataList;  List<ColumnBeanPropertyPair> columnList;  private IZcEbFormulaTemplateServiceDelegate zcEbFormulaTemplateServiceDelegate = (IZcEbFormulaTemplateServiceDelegate) ServiceFactory.create(  IZcEbFormulaTemplateServiceDelegate.class, "zcEbFormulaTemplateServiceDelegate");  static {    LangTransMeta.init("ZC%");  }  public TemplateParamPanel(String templateCode) {    this.templateCode = templateCode;    init();  }  public void init() {    this.setLayout(new BorderLayout());    tablePanel.init();    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_table");    tablePanel.getTable().setShowCheckedColumn(false);    addToolBarComponent(bottomToolBar, topToolBar);    columnList = getPair();    model = new BeanTableModel<ZcEbFormulaTemplateParam>();    model.setEditable(true);    model.setOidFieldName("paramCode");    refreshData();    tabbedPane.add("通用参数", tablePanel);    JPanel workPanel = new JPanel();    workPanel.setLayout(new BorderLayout());    workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "通用参数设置", TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    workPanel.add(bottomToolBar, BorderLayout.SOUTH);    workPanel.add(tabbedPane, BorderLayout.CENTER);    this.add(topToolBar, BorderLayout.NORTH);    this.add(workPanel, BorderLayout.CENTER);  }  public void refreshData() {    List list = zcEbFormulaTemplateServiceDelegate.getTemplateParamList(templateCode, requestMeta);    mydataList = new ArrayList<ZcEbFormulaTemplateParam>();    mydataList.addAll(list);    model.setDataBean(mydataList, columnList);    tablePanel.setTableModel(model);    setTableEditor(tablePanel.getTable());  }  public static List<ColumnBeanPropertyPair> getPair() {    List<ColumnBeanPropertyPair> pairList = new ArrayList<ColumnBeanPropertyPair>();    ColumnBeanPropertyPair parir0 = new ColumnBeanPropertyPair();    parir0.setBeanPropertyName("paramName");    parir0.setColumnIdentifier(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_PARAM_NAME));    pairList.add(parir0);    ColumnBeanPropertyPair parir1 = new ColumnBeanPropertyPair();    parir1.setBeanPropertyName("description");    parir1.setColumnIdentifier(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_PARAM_DESCRIPTION));    pairList.add(parir1);    ColumnBeanPropertyPair parir2 = new ColumnBeanPropertyPair();    parir2.setBeanPropertyName("defaultValue");    parir2.setColumnIdentifier(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_PARAM_DEFAULTVALUE));    pairList.add(parir2);    //是否需要人工设置参数值    ColumnBeanPropertyPair parir3 = new ColumnBeanPropertyPair();    parir3.setBeanPropertyName("isManSet");    parir3.setColumnIdentifier(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_PARAM_ISMANSET));    pairList.add(parir3);    return pairList;  }  private void setTableEditor(final JPageableFixedTable table) {    AsValComboBoxCellEditor asValComboBoxCellEditor = new AsValComboBoxCellEditor("ZC_VS_YN");    //    table.setDefaultEditor(String.class, asValComboBoxCellEditor);    SwingUtil    .setTableCellEditor(table, LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_PARAM_ISMANSET), asValComboBoxCellEditor);    SwingUtil.setTableCellRenderer(table, LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_PARAM_ISMANSET),    new AsValCellRenderer("ZC_VS_YN"));  }  protected void addToolBarComponent(JFuncToolBar bottomToolBar, JFuncToolBar topToolBar) {    topToolBar.setModuleCode("ZC");    topToolBar.setCompoId(compoId);    bottomToolBar.add(addBtn);    bottomToolBar.add(insertBtn);    bottomToolBar.add(delBtn);    topToolBar.add(saveButton);    addBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        add();      }    });    insertBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        insert();      }    });    delBtn.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        delete();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        save();      }    });  }  private void add() {    tablePanel.getTable().clearSelection();    if (tablePanel.getTable().isEditing()) {      tablePanel.getTable().getCellEditor().stopCellEditing();    }    ZcEbFormulaTemplateParam bean = new ZcEbFormulaTemplateParam();    bean.setTemplateCode(templateCode);    model.insertRow(model.getRowCount(), bean);  }  private void insert() {    if (tablePanel.getTable().isEditing()) {      tablePanel.getTable().getCellEditor().stopCellEditing();    }    ZcEbFormulaTemplateParam bean = new ZcEbFormulaTemplateParam();    int selectedRow = tablePanel.getTable().getSelectedRow();    if (selectedRow != -1) {      model.insertRow(selectedRow + 1, bean);    } else {      model.insertRow(model.getRowCount(), bean);    }  }  private void delete() {    JPageableFixedTable table = tablePanel.getTable();    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }    int[] selectedRows = table.getSelectedRows();    if (selectedRows.length == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    int[] selRows = new int[selectedRows.length];    for (int i = 0; i < selRows.length; i++) {      selRows[i] = table.convertRowIndexToModel(selectedRows[i]);    }    Arrays.sort(selRows);    for (int i = selRows.length - 1; i >= 0; i--) {      model.deleteRow(selRows[i]);    }  }  private void save() {    if (!beforeSave()) {      return;    }    JPageableFixedTable table = tablePanel.getTable();    List dataList = ((BeanTableModel<ZcEbFormulaParam>) table.getModel()).getDataBeanList();    List<ZcEbFormulaTemplateParam> zcEbTemplateParamList = new ArrayList<ZcEbFormulaTemplateParam>();    for (int i = 0; i < dataList.size(); i++) {      zcEbTemplateParamList.add((ZcEbFormulaTemplateParam) dataList.get(i));    }    boolean success = true;    try {      zcEbFormulaTemplateServiceDelegate.saveZcEbFormulaTemplateParam(zcEbTemplateParamList, templateCode, requestMeta);    } catch (BaseException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (OtherException ex) {      success = false;      logger.error(ex.getStackTraceMessage(), ex);      success = false;      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    } catch (Exception ex) {      success = false;      logger.error(ex.getMessage(), ex);      UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());    }    if (success) {      JOptionPane.showMessageDialog(this, "处理成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.templateSetMainPanel.getTemplateEditPanel().refreshParamItemData();    }  }  protected boolean beforeSave() {    if (null == model.getDataBeanList() || model.getDataBeanList().isEmpty()) {      return false;    }    stopEdit();    return true;  }  public void stopEdit() {    if (null != tablePanel.getTable().getCellEditor()) {      tablePanel.getTable().getCellEditor().stopCellEditing();    }  }}
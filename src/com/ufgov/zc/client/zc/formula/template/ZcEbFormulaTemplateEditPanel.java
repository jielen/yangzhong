/**   * @(#) project:GK* @(#) file: ZcEbFormulaEditPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.formula.template;import java.awt.Color;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.math.BigDecimal;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.TreePath;import org.apache.log4j.Logger;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.zc.ZcEbTemplateComplicationItemToTableModelConverter;import com.ufgov.zc.client.common.converter.zc.ZcEbTemplateParamToTableModelConverter;import com.ufgov.zc.client.common.converter.zc.ZcEbTemplateScoreItemToTableModelConverter;import com.ufgov.zc.client.component.AsValComboBox;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.button.zc.CommonButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.IntFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.component.zc.tree.JTreeNode;import com.ufgov.zc.client.zc.formula.ZcEbFormulaEditPanel;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.exception.BaseException;import com.ufgov.zc.common.system.exception.OtherException;import com.ufgov.zc.common.system.model.AsVal;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.FormulaRootCode;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbFormulaTemplate;import com.ufgov.zc.common.zc.publish.IZcEbFormulaServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcEbFormulaTemplateServiceDelegate;/*** @ClassName: ZcEbFormulaEditPanel* @Description: 指标集编辑面板* @date: 2010-4-29 上午11:01:34* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class ZcEbFormulaTemplateEditPanel extends AbstractMainSubEditPanel implements ParentWindowAware {  private Window parentWindow;  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  private static final Logger logger = Logger.getLogger(ZcEbFormulaEditPanel.class);  private ZcEbFormulaTemplate zcEbFormulaTemplate;  private ZcEbFormulaTemplate oldZcEbFormulaTemplate;  private FuncButton confirmButton;  private FuncButton saveButton = new SaveButton();  private FuncButton exitButton = new ExitButton();  private FuncButton saveTemplateButton;  private ZcEbTemplateListPanel zcEbTemplateListPanel;  private TemplateSetMainPanel templateSetMainPanel;  private IntFieldEditor scoreFieldEdit;  private JTabbedPane tabbedPane = new JTabbedPane();  private List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();  private ZcEbTemplateComplicationItemToTableModelConverter modelConverter1 = new ZcEbTemplateComplicationItemToTableModelConverter();  private ZcEbTemplateScoreItemToTableModelConverter modelConverter2 = new ZcEbTemplateScoreItemToTableModelConverter();  private ZcEbTemplateParamToTableModelConverter paramModelConerter = new ZcEbTemplateParamToTableModelConverter();  private JTablePanel tablePanel1 = new JTablePanel();  private JTablePanel tablePanel2 = new JTablePanel();  private JTablePanel tablePanel3 = new JTablePanel();  public TemplateSetMainPanel getTemplateSetMainPanel() {    return templateSetMainPanel;  }  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_FORMULA_TEMPLATE";  private String templateCode;  private IZcEbFormulaTemplateServiceDelegate zcEbFormulaTemplateServiceDelegate = (IZcEbFormulaTemplateServiceDelegate) ServiceFactory.create(  IZcEbFormulaTemplateServiceDelegate.class, "zcEbFormulaTemplateServiceDelegate");  static {    LangTransMeta.init("ZC%");  }  public void setZcEbTemplateListPanel(ZcEbTemplateListPanel zcEbTemplateListPanel) {    this.zcEbTemplateListPanel = zcEbTemplateListPanel;  }  public ZcEbFormulaTemplateEditPanel(ZcEbFormulaTemplate zcEbFormulaTemplate, TemplateSetMainPanel templateSetMainPanel) {    this.zcEbFormulaTemplate = zcEbFormulaTemplate;    this.templateSetMainPanel = templateSetMainPanel;    requestMeta.setCompoId(compoId);    workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "评标模板明细", TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));    getFieldEditors();    init();    refreshData(zcEbFormulaTemplate);    this.setEditingObject(zcEbFormulaTemplate);    setOldObject();  }  @Override  public JComponent createSubBillPanel() {    tablePanel1.init();    tablePanel1.setPanelId("1");    tablePanel1.getTable().setShowCheckedColumn(false);    tablePanel2.init();    tablePanel2.setPanelId("2");    tablePanel2.getTable().setShowCheckedColumn(false);    tablePanel3.init();    tablePanel3.setPanelId("3");    tablePanel3.getTable().setShowCheckedColumn(false);    tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_COMPLIANCE"), tablePanel1);    tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_SCORE"), tablePanel2);    tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_PARAM"), tablePanel3);    return tabbedPane;  }  public void refreshData(ZcEbFormulaTemplate zcEbFormulaTemplate) {    this.zcEbFormulaTemplate = zcEbFormulaTemplate;    if (zcEbFormulaTemplate.getTemplateCode() != null) {      refreshComplianceItemData();      refreshScoreItemData();      refreshParamItemData();    }    if (zcEbFormulaTemplate.getFactorType() != null) {      factoryTypeChanged(zcEbFormulaTemplate.getFactorType());    }  }  public void refreshComplianceItemData() {    Map<String, String> map1 = new HashMap<String, String>();    map1.put("templateCode", zcEbFormulaTemplate.getTemplateCode());    map1.put("itemCode", FormulaRootCode.COMPLIANCE);    List list1 = zcEbFormulaTemplateServiceDelegate.getZcEbFormulaTemplateItemList(map1, null, requestMeta);    tablePanel1.setTableModel(modelConverter1.convertToTableModel(list1));  }  public void refreshScoreItemData() {    Map<String, String> map2 = new HashMap<String, String>();    map2.put("templateCode", zcEbFormulaTemplate.getTemplateCode());    map2.put("itemCode", FormulaRootCode.SCORE);    List list2 = zcEbFormulaTemplateServiceDelegate.getZcEbFormulaTemplateItemList(map2, null, requestMeta);    tablePanel2.setTableModel(modelConverter2.convertToTableModel(list2));  }  public void refreshParamItemData() {    List list3 = zcEbFormulaTemplateServiceDelegate.getTemplateParamList(zcEbFormulaTemplate.getTemplateCode(), requestMeta);    tablePanel3.setTableModel(paramModelConerter.convertToTableModel(list3));  }  private void setOldObject() {    this.oldZcEbFormulaTemplate = (ZcEbFormulaTemplate) ObjectUtil.deepCopy(zcEbFormulaTemplate);  }  public List<AbstractFieldEditor> getFieldEditors() {    TextFieldEditor nameEditor = new TextFieldEditor("模板名称", "templateName");    nameEditor.setEnabled(true);    scoreFieldEdit = new IntFieldEditor("评分性指标满分值", "factorFullScore");    AsValFieldEditor typeEditor = new AsValFieldEditor("评标方法类型", "factorType", "ZC_VS_FORMULA_FACTORTYPE") {      @Override      protected void afterChange(AsValComboBox field) {        if (field.getSelectedItem() != null) {          String factorType = ((AsVal) field.getSelectedItem()).getValId();          factoryTypeChanged(factorType);        }        super.afterChange(field);      }    };    if (zcEbFormulaTemplate.getTemplateCode() == null) {      editorList.add(nameEditor);      editorList.add(typeEditor);      editorList.add(scoreFieldEdit);    } else {      editorList.add(nameEditor);      TextFieldEditor editor2 = new TextFieldEditor("模板代码", "templateCode");      editor2.setEnabled(false);      editorList.add(editor2);      editorList.add(typeEditor);      DateFieldEditor editor5 = new DateFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_CREATEDATE), "executeDate");      editor5.setEnabled(false);      editorList.add(editor5);      AsValFieldEditor editor6 = new AsValFieldEditor("状态", "isUsed", "ZC_VS_FORMULA_TEMPLATE_STATUS");      editorList.add(editor6);      editorList.add(scoreFieldEdit);    }    return editorList;  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    colCount = 2;    return editorList;  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(saveButton);    saveTemplateButton = new CommonButton("zc_fsaveTemplate", "保存为模板", "save.jpg");    confirmButton = new CommonButton("fconfirmFormula", "检测", "default.gif");    if (null != zcEbFormulaTemplate.getTemplateCode()) {      toolBar.add(confirmButton);      toolBar.add(saveTemplateButton);    }    toolBar.add(exitButton);    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doSave();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    confirmButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doConfirm();      }    });  }  public void doExit() {    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        doSave();      }    }    if (null != this.getTemplateSetMainPanel()) {      this.getTemplateSetMainPanel().getParentWindow().dispose();    } else {      this.getParentWindow().dispose();    }  }  public void doSave() {    boolean isCorrect = true;    BigDecimal rate = zcEbFormulaTemplate.getComplianceRate();    String templateName = zcEbFormulaTemplate.getTemplateName();    Integer fullScore = zcEbFormulaTemplate.getFactorFullScore();    String factorType = zcEbFormulaTemplate.getFactorType();    if (templateName == null || "".equals(templateName)) {      isCorrect = false;      JOptionPane.showMessageDialog(this, "评审模块名称必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    if (factorType == null || "".equals(factorType)) {      isCorrect = false;      JOptionPane.showMessageDialog(this, "评标方法类别必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    //    if (null == rate) {    //      isCorrect = false;    //      JOptionPane.showMessageDialog(this, "符合性指标比例必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);    //    } else {    //      if (zcEbFormulaTemplate.getComplianceRate().intValue() > 100) {    //        isCorrect = false;    //        JOptionPane.showMessageDialog(this, "符合性指标比例不能大于100%！", "提示", JOptionPane.INFORMATION_MESSAGE);    //      }    //    }    if (!zcEbFormulaTemplate.getFactorType().equals("2")) {      if (null == fullScore) {        isCorrect = false;        JOptionPane.showMessageDialog(this, "评审指标满分值必须填写！", "提示", JOptionPane.INFORMATION_MESSAGE);      } else {        if (zcEbFormulaTemplate.getFactorFullScore() > 100) {          isCorrect = false;          JOptionPane.showMessageDialog(this, "评审指标满分值不能大于100！", "提示", JOptionPane.INFORMATION_MESSAGE);        }      }      if ((zcEbFormulaTemplate.getIsConform() == null || "N".equals(zcEbFormulaTemplate.getIsConform()) || "否".equals(zcEbFormulaTemplate      .getIsConform()))      && "Y".equals(zcEbFormulaTemplate.getIsUsed())) {        isCorrect = false;        JOptionPane.showMessageDialog(this, "状态未检测成功,不能启用！", "提示", JOptionPane.INFORMATION_MESSAGE);      }    }    if (isCorrect) {      boolean success = true;      try {        if (null == zcEbFormulaTemplate.getTemplateCode()) {          zcEbFormulaTemplate.setFormulaDescription("".getBytes());          templateCode = zcEbFormulaTemplateServiceDelegate.insertZcEbFormulaTemplate(zcEbFormulaTemplate, requestMeta).getTemplateCode();        } else {          zcEbFormulaTemplateServiceDelegate.updateZcEbFormulaTemplate(zcEbFormulaTemplate, requestMeta);          templateCode = zcEbFormulaTemplate.getTemplateCode();        }      } catch (BaseException ex) {        success = false;        logger.error(ex.getStackTraceMessage(), ex);        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      } catch (OtherException ex) {        success = false;        logger.error(ex.getStackTraceMessage(), ex);        success = false;        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      } catch (Exception ex) {        success = false;        logger.error(ex.getMessage(), ex);        UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());      }      if (success) {        JOptionPane.showMessageDialog(this, "处理成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        //处理成功之后，要从数据库中取出该指标集显示在页面上。        zcEbFormulaTemplate = zcEbFormulaTemplateServiceDelegate.getZcEbFormulaTemplate(templateCode, requestMeta);        setOldObject();        //更新编辑页面编辑对象        this.setEditingObject(zcEbFormulaTemplate);        System.out.println("保存完更新页面编辑对象" + templateCode);        //更新指标项编辑树panel的编辑对象        if (null != this.getTemplateSetMainPanel()) {          this.getTemplateSetMainPanel().setZcEbFormulaTemplate(zcEbFormulaTemplate);          if (this.getTemplateSetMainPanel().getTemplateCode() == null) {            this.getTemplateSetMainPanel().refreshData();          }        }      }      if (null != zcEbTemplateListPanel) {        zcEbTemplateListPanel.refreshData();      }    }  }  public void doConfirm() {    ZcEbFormulaTemplate template = (ZcEbFormulaTemplate) this.getEditingObject();    /**     * 只有综合评分法和性价比法才校验评分性的指标设置的合不合理。     *      */    if ("2".equals(template.getFactorType())) {      JOptionPane.showMessageDialog(this, "确认成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    DefaultTreeModel model = templateSetMainPanel.getModel();    //获得评分指标的根节点    JTreeNode scoreRoot = templateSetMainPanel.getNodeByCode(FormulaRootCode.SCORE, (JTreeNode) model.getChild(model.getRoot(), 1));    String result = templateSetMainPanel.confim(scoreRoot);    if ("noChild".equals(result)) {      JOptionPane.showMessageDialog(this, "评分指标还未增加！", "提示", JOptionPane.INFORMATION_MESSAGE);    } else {      if (!"conform".equals(result)) {        JOptionPane.showMessageDialog(this, result + "的所有子指标的标准分值之和不等于其标准分值！", "提示", JOptionPane.INFORMATION_MESSAGE);      } else {        zcEbFormulaTemplate.setIsConform("是");        boolean success = true;        try {          zcEbFormulaTemplateServiceDelegate.updateZcEbFormulaTemplate(zcEbFormulaTemplate, requestMeta);        } catch (BaseException ex) {          success = false;          logger.error(ex.getStackTraceMessage(), ex);          UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());        } catch (OtherException ex) {          success = false;          logger.error(ex.getStackTraceMessage(), ex);          success = false;          UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());        } catch (Exception ex) {          success = false;          logger.error(ex.getMessage(), ex);          UIUtilities.showStaickTraceDialog(ex, this, "错误", ex.getMessage());        }        if (success) {          JOptionPane.showMessageDialog(this, "确认成功！", "提示", JOptionPane.INFORMATION_MESSAGE);          setOldObject();          setEditingObject(zcEbFormulaTemplate);        }        if (null != zcEbTemplateListPanel) {          zcEbTemplateListPanel.refreshData();        }      }    }  }  private void factoryTypeChanged(String factorType) {    if (factorType.equals("2")) {      scoreFieldEdit.setVisible(false);      fieldEditorPanel.removeAll();      initFieldEditorPanel();      tabbedPane.removeAll();      tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_COMPLIANCE"), tablePanel1);      if (templateSetMainPanel != null) {        if (templateSetMainPanel.getTreePanel().rootNode.getChildCount() == 3) {          templateSetMainPanel.getModel().removeNodeFromParent(templateSetMainPanel.getTreePanel().scoreFuomualRootNode);          templateSetMainPanel.getModel().removeNodeFromParent(templateSetMainPanel.getTreePanel().commonParamRootNode);          templateSetMainPanel.getTreePanel().repaint();        }      }    } else {      scoreFieldEdit.setVisible(true);      fieldEditorPanel.removeAll();      initFieldEditorPanel();      tabbedPane.removeAll();      tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_COMPLIANCE"), tablePanel1);      tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_SCORE"), tablePanel2);      tabbedPane.addTab(LangTransMeta.translate("ZC_TRANS_FORMUAL_PARAM"), tablePanel3);      if (templateSetMainPanel != null) {        if (templateSetMainPanel.getTreePanel().rootNode.getChildCount() < 3) {          templateSetMainPanel.getModel().insertNodeInto(templateSetMainPanel.getTreePanel().scoreFuomualRootNode,          templateSetMainPanel.getTreePanel().rootNode, templateSetMainPanel.getTreePanel().rootNode.getChildCount());          templateSetMainPanel.getModel().insertNodeInto(templateSetMainPanel.getTreePanel().commonParamRootNode,          templateSetMainPanel.getTreePanel().rootNode, templateSetMainPanel.getTreePanel().rootNode.getChildCount());          templateSetMainPanel.getTreePanel().expandAll(templateSetMainPanel.getTreePanel().getTree(),          new TreePath(templateSetMainPanel.getTreePanel().getTree().getModel().getRoot()), true);        }      }    }  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldZcEbFormulaTemplate).equals(DigestUtil.digest(getEditingObject()));  }  public static void main(String[] args) {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();        IZcEbFormulaServiceDelegate zcEbFormulaServiceDelegate = (IZcEbFormulaServiceDelegate) ServiceFactory.create(        IZcEbFormulaServiceDelegate.class, "zcEbFormulaServiceDelegate");        ZcEbFormula oldEbFormula = zcEbFormulaServiceDelegate.getZcEbFormula("test", requestMeta);        oldEbFormula.setDbDigest(oldEbFormula.digest());        //        ZcEbFormulaItem oldEbFormulaItem = new ZcEbFormulaItem();        //        ZcEbFormulaEditPanel bill = new ZcEbFormulaEditPanel(oldEbFormula);        JFrame frame = new JFrame("frame");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        //        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }}
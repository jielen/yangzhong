package com.ufgov.zc.client.zc.formula;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Toolkit;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.KeyAdapter;import java.awt.event.KeyEvent;import java.awt.event.MouseEvent;import java.math.BigDecimal;import java.util.Enumeration;import java.util.List;import java.util.Map;import javax.swing.AbstractAction;import javax.swing.Action;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JPopupMenu;import javax.swing.JSplitPane;import javax.swing.JTree;import javax.swing.event.TreeModelEvent;import javax.swing.event.TreeModelListener;import javax.swing.tree.DefaultMutableTreeNode;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.TreePath;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.zc.tree.EventPropertyName;import com.ufgov.zc.client.component.zc.tree.TreeNodeSelectionListener;import com.ufgov.zc.client.zc.project.integration_dt.ZcEbProjectEditPanel_dt;import com.ufgov.zc.client.zc.ztb.activex.WordPane;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.FormulaRootCode;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbFormulaItem;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.publish.IZcEbFormulaServiceDelegate;/*** @ClassName: FormulaSetMainPanel* @Description: 指标集设置主面板。左边包含指标集一级虚拟节点树，右边为详细设置面板。* @date: 2010-4-26 下午07:26:59* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class FormulaSetMainPanel extends JPanel implements ParentWindowAware {  private Window parentWindow;  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  private static final long serialVersionUID = 872257188162840308L;  private JSplitPane mainPanel;  public FormulaTreePanel treePanel;  public FormulaTreePanel getTreePanel() {    return treePanel;  }  public void setTreePanel(FormulaTreePanel treePanel) {    this.treePanel = treePanel;  }  private DefaultTreeModel model;  private FormulaJTreeNode selectedNode;  public void setSelectedNode(FormulaJTreeNode selectedNode) {    this.selectedNode = selectedNode;  }  public FormulaJTreeNode getSelectedNode() {    return selectedNode;  }  private TreePath selectedTreePath;  //创建两个个ZcEbFormulaItem对象   private ZcEbFormulaItem newZcEbFormulaItem;  private ZcEbFormulaItemEditPanel scorePanel;  private ZcEbFormulaItemEditPanel itemPanel;  private ZcEbFormulaItemEditPanel compliancePanel;  private ZcEbFormulaListPanel zcEbFormulaListPanel;//list页面  private ZcEbFormulaItemListPanel itemListPanel;  private ParamPanel paramPanel;  //是否安装分包进行划分  public boolean isFilterByPack = true;  private NodeSelectionListener lisener;  private boolean isEnable = true;  private boolean isSave = true;  public ParamPanel getParamPanel() {    return paramPanel;  }  public void setParamPanel(ParamPanel paramPanel) {    this.paramPanel = paramPanel;  }  private ZcEbFormulaEditPanel zcEbFormulaEditPanel;  public ZcEbFormulaEditPanel getZcEbFormulaEditPanel() {    return zcEbFormulaEditPanel;  }  public void setZcEbFormula(ZcEbFormula zcEbFormula) {    this.zcEbFormula = zcEbFormula;  }  private ZcEbFormula zcEbFormula;//当前编辑对象  private ZcEbFormula oldZcEbFormula = new ZcEbFormula();  //  private String formulaCode;  //判断结点是否可以删除  boolean canDel;  //是否离线，默认是false  private boolean isOffLine = false;  private boolean isFromZBFrame = false;  private boolean isSamePBFF = false;  private String evalBidElementsWordPath = null;  private WordPane wordPane = null;  public IZcEbFormulaServiceDelegate zcEbFormulaServiceDelegate = (IZcEbFormulaServiceDelegate) ServiceFactory.create(  IZcEbFormulaServiceDelegate.class, "zcEbFormulaServiceDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String packesNodeCode = null;  private String packesNodeName = null;private ZcEbProj zcEbProj=null;private ZcEbProjectEditPanel_dt projectEditPanel=null;  public boolean isOffLine() {    return isOffLine;  }  public void setOffLine(boolean isOffLine) {    this.isOffLine = isOffLine;  }  public DefaultTreeModel getModel() {    return model;  }  public void setModel(DefaultTreeModel model) {    this.model = model;  }  public FormulaSetMainPanel(ZcEbFormula zcEbFormula, boolean isFilterByPack) {    this.zcEbFormula = zcEbFormula;    this.isFilterByPack = isFilterByPack;    refreshZcEbFormula(zcEbFormula.getPackCode());    this.oldZcEbFormula = (ZcEbFormula) ObjectUtil.deepCopy(zcEbFormula);    init();  }  public void setSaveBtn(Boolean flag) {    zcEbFormulaEditPanel.setSaveBtn(flag);  }  public FormulaSetMainPanel(ZcEbFormula zcEbFormula, Map<String, Object> parasMap) {    this.zcEbFormula = zcEbFormula;    this.oldZcEbFormula = (ZcEbFormula) ObjectUtil.deepCopy(zcEbFormula);    this.isFromZBFrame =parasMap.get("isFromZBFrame")==null?false:Boolean.parseBoolean(parasMap.get("isFromZBFrame").toString());    this.isSamePBFF = parasMap.get("isSamePBFF")==null?false: Boolean.parseBoolean(parasMap.get("isSamePBFF").toString());    this.packesNodeCode =parasMap.get("packesNodeCode")==null?"":parasMap.get("packesNodeCode").toString();    this.packesNodeName =  parasMap.get("packesNodeName")==null?"":parasMap.get("packesNodeName").toString();    this.evalBidElementsWordPath =parasMap.get("filePath")==null?"": parasMap.get("filePath").toString();        this.zcEbProj=(ZcEbProj) parasMap.get("proj");        this.projectEditPanel=parasMap.get("projEditPanel")==null?null:(ZcEbProjectEditPanel_dt) parasMap.get("projEditPanel");    init();  }  public FormulaSetMainPanel(ZcEbFormula zcEbFormula, GkBaseDialog parent) {    this.parentWindow = parent;    this.zcEbFormula = zcEbFormula;    refreshZcEbFormula(zcEbFormula.getFormulaCode());    this.oldZcEbFormula = (ZcEbFormula) ObjectUtil.deepCopy(zcEbFormula);    init();  }  public FormulaSetMainPanel(ZcEbFormula zcEbFormula, ZcEbFormulaListPanel zcEbFormulaListPanel) {    this.zcEbFormula = zcEbFormula;    refreshZcEbFormula(zcEbFormula.getFormulaCode());    this.oldZcEbFormula = (ZcEbFormula) ObjectUtil.deepCopy(zcEbFormula);    this.zcEbFormulaListPanel = zcEbFormulaListPanel;    init();  }  public void refreshZcEbFormula(String packCode) {    if (packCode != null && !"".equals(packCode)) {      this.zcEbFormula = zcEbFormulaServiceDelegate.getZcEbFormula(packCode, requestMeta);    }  }  public void refreshData() {    this.oldZcEbFormula = (ZcEbFormula) ObjectUtil.deepCopy(zcEbFormula);    //    this.formulaCode = zcEbFormula.getFormulaCode();    //对右侧树进行刷新，先移除所有节点，又重新添加了一次所有节点。    treePanel.removeFoumula();    treePanel.loadTreeNodes();    paramPanel.refreshData();  }  private void init() {    //初始化树形Panel    treePanel = new FormulaTreePanel(zcEbFormula);    //加载结点    treePanel.loadTreeNodes();    mainPanel = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);    mainPanel.setMinimumSize(new Dimension(0, 0));    mainPanel.setDividerSize(5);    int width = (int) ((Toolkit.getDefaultToolkit().getScreenSize().width - mainPanel.getDividerSize()) * 0.25);    mainPanel.setDividerLocation(width);    mainPanel.setMinimumSize(new Dimension(0, 0));    addListener();    mainPanel.setLeftComponent(treePanel);    /*     * 初始化几种类型的面板     */    //评分性指标编辑panel    scorePanel = new ScoreItemPanel(zcEbFormula, EvalItemType.SCORE);    scorePanel.setFormulaSetMainPanel(this);    //符合性指标编辑panel    compliancePanel = new ComplianceItemPanel(zcEbFormula, EvalItemType.COMPLIANICE);    compliancePanel.setFormulaSetMainPanel(this);    //通用参数编辑panel    paramPanel = new ParamPanel(zcEbFormula);    paramPanel.setFormulaSetMainPanel(this);    //指标集明细编辑panel    zcEbFormulaEditPanel = new ZcEbFormulaEditPanel(zcEbFormula, this);    zcEbFormulaEditPanel.setZcEbFormulaListPanel(zcEbFormulaListPanel);    itemListPanel = new ZcEbFormulaItemListPanel(zcEbFormula);    //初始化为指标集明细panel    mainPanel.setRightComponent(zcEbFormulaEditPanel);    setLayout(new BorderLayout());    add(mainPanel, BorderLayout.CENTER);        add(zcEbFormulaEditPanel.getToolBar(),BorderLayout.NORTH);  }  private class NodeSelectionListener extends TreeNodeSelectionListener {    public NodeSelectionListener(JTree tree) {      super(tree);    }    /**     * 如果是根节点则只能修改和新增，如果是叶子节点只能删除和修改     */    @Override    protected void doRightMouseClick(MouseEvent e) {      if (zcEbFormula.getFactorFullScore() == null && !"2".equals(zcEbFormula.getFactorType())) {        JOptionPane.showMessageDialog(parentWindow, "请先设置评审满分值！", "提示", JOptionPane.INFORMATION_MESSAGE);        return;      }      JPopupMenu popupMenu = new JPopupMenu();      popupMenu.setForeground(Color.blue);      if (canAddChild(e)) {        popupMenu.add(addChildAction);      }      if (canDel && isLeaf(e)) {        popupMenu.addSeparator();        popupMenu.add(deleteAction);      }      setSelectedNode(e);      popupMenu.show(e.getComponent(), e.getX(), e.getY());    }    /**     *     * @Description: 判断结点能否新增。    * @return boolean 返回类型    * @since 1.0     */    private boolean canAddChild(MouseEvent e) {      int x = e.getX();      int y = e.getY();      int row = tree.getRowForLocation(x, y);      TreePath path = tree.getPathForRow(row);      if (path != null) {        FormulaJTreeNode node = (FormulaJTreeNode) path.getLastPathComponent();        /**         * 通用参数右边直接显示编辑表格进行操作，不允许在树上操作。         */        if (FormulaRootCode.PARAM.equals(node.getCode())) {          return false;        }        if (null != node && !node.getCode().equals(treePanel.getTOP_ROOT_CODE())) {          return true;        }      }      return false;    }    private boolean isLeaf(MouseEvent e) {      int x = e.getX();      int y = e.getY();      int row = tree.getRowForLocation(x, y);      TreePath path = tree.getPathForRow(row);      if (path != null) {        FormulaJTreeNode node = (FormulaJTreeNode) path.getLastPathComponent();        if (null != node && node.isLeaf()) {          return true;        }      }      return false;    }    @Override    protected void doLeftMouseClick(MouseEvent e) {      int x = e.getX();      int y = e.getY();      int row = tree.getRowForLocation(x, y);      TreePath path = tree.getPathForRow(row);      if (path != null) {        //        //校验上一个节点指标集分值的设置情况。        //        if (selectedNode != null && !selectedNode.getCode().equals(FormulaRootCode.SCORE) && selectedNode.getUserObject().getItemType() != null        //          && selectedNode.getUserObject().getItemType().equals(EvalItemType.SCORE)) {        //          if (!scorePanel.beforeSave(selectedNode.getUserObject())) {        //            return;        //          }        //        }        setSelectedNode(e);      }      firePropertyChange(EventPropertyName.MOUSECLICK_PROPERTY_NAME, false, true);    }  }  private void addKeyListener() {    treePanel.getTree().addKeyListener(new KeyAdapter() {      @Override      public void keyReleased(KeyEvent e) {        if (e.getKeyCode() == KeyEvent.VK_UP || e.getKeyCode() == KeyEvent.VK_DOWN) {          //        treePanel.getTree().getSelectionRows();          TreePath path = treePanel.getTree().getSelectionPath();          FormulaJTreeNode node = (FormulaJTreeNode) path.getLastPathComponent();          doNodeSelected(node);        }      }    });  }  /**   *   * @Description: 选中结点后，设置该结点的面板类型  * @return void 返回类型  * @since 1.0   */  private void doNodeSelected(FormulaJTreeNode node) {    if (FormulaRootCode.PARAM.equals(node.getCode())) {      canDel = false;      mainPanel.setRightComponent(paramPanel);      paramPanel.refreshData();    } else if (FormulaRootCode.TOP_ROOT.equals(node.getCode())) {      canDel = false;      //每次都要刷新数据      if (isDataChanged()) {        zcEbFormulaEditPanel.refreshData(zcEbFormula);      }      mainPanel.setRightComponent(zcEbFormulaEditPanel);    } else if (node.getCode().equals(FormulaRootCode.COMPLIANCE)) {      itemListPanel.refreshData(node.getUserObject().getItemType());      mainPanel.setRightComponent(itemListPanel);      itemPanel = compliancePanel;    } else if (node.getCode().equals(FormulaRootCode.SCORE)) {      itemListPanel.refreshData(node.getUserObject().getItemType());      mainPanel.setRightComponent(itemListPanel);      itemPanel = scorePanel;    } else {      if (EvalItemType.COMPLIANICE.equals(node.getUserObject().getItemType())) {        compliancePanel.refreshData(node);        itemPanel = compliancePanel;      }      if (EvalItemType.SCORE.equals(node.getUserObject().getItemType())) {        scorePanel.refreshData(node);        itemPanel = scorePanel;      }      isEnable = itemPanel.getEditButton().isVisible();      if(!isSave){        scorePanel.getEditButton().setEnabled(isSave);      }      itemPanel.getSaveButton().setEnabled(this.projectEditPanel.isEditing());      itemPanel.getEditButton().setEnabled(this.projectEditPanel.isEditing());      itemPanel.setParentWindow(parentWindow);      mainPanel.setRightComponent(itemPanel);      canDel = isSave;    }    mainPanel.setDividerLocation(mainPanel.getDividerLocation());    //设置右边面板编辑的节点对象  }  private void setSelectedNode(MouseEvent e) {    int x = e.getX();    int y = e.getY();    int row = treePanel.getTree().getRowForLocation(x, y);    selectedTreePath = treePanel.getTree().getPathForRow(row);    if (null != selectedTreePath) {      selectedNode = (FormulaJTreeNode) selectedTreePath.getLastPathComponent();    }    doNodeSelected(selectedNode);  }  private class JTreeModelListener implements TreeModelListener {    public void treeNodesChanged(TreeModelEvent e) {      repaintTree();    }    public void treeNodesInserted(TreeModelEvent e) {      repaintTree();    }    public void treeNodesRemoved(TreeModelEvent e) {      repaintTree();    }    public void treeStructureChanged(TreeModelEvent e) {      // repaintTree();    }  }  private Action addChildAction = new AbstractAction("新增") {    private static final long serialVersionUID = 4632421338751212272L;    public void actionPerformed(ActionEvent e) {      //新增的话设置指标项的指标集代码      newZcEbFormulaItem = new ZcEbFormulaItem();      newZcEbFormulaItem.setParentItemCode(selectedNode.getCode());      //      newZcEbFormulaItem.setFormulaCode(formulaCode);      if (FormulaRootCode.COMPLIANCE.equals(selectedNode.getCode())) {        newZcEbFormulaItem.setItemType(EvalItemType.COMPLIANICE);      } else if (FormulaRootCode.SCORE.equals(selectedNode.getCode())) {        newZcEbFormulaItem.setItemType(EvalItemType.SCORE);      } else {        newZcEbFormulaItem.setItemType(selectedNode.getUserObject().getItemType());      }      initItemValue(newZcEbFormulaItem);      itemPanel.setZcEbFormulaItem(newZcEbFormulaItem);      itemPanel.getSaveButton().setEnabled(true);      mainPanel.setRightComponent(itemPanel);      itemPanel.setEditingObject(newZcEbFormulaItem);      mainPanel.setDividerLocation(mainPanel.getDividerLocation());    }  };  //新增指标时初始化一些参数。  private void initItemValue(ZcEbFormulaItem newZcEbFormulaItem) {    if (EvalItemType.SCORE.equals(newZcEbFormulaItem.getItemType())) {      //默认不是加减法指标      newZcEbFormulaItem.setIsAddScore("0");      //至少得分默认为"0"      newZcEbFormulaItem.setLeastScore(new BigDecimal("0"));    } else {    }  }  private Action deleteAction = new AbstractAction("删除") {    private static final long serialVersionUID = 5130153599721084866L;    public void actionPerformed(ActionEvent e) {      itemPanel.delete();      //父节点移除该节点。      model.removeNodeFromParent(selectedNode);      //父节点的编辑对象，移除该对象。      mainPanel.setRightComponent(new JPanel());      mainPanel.setDividerLocation(mainPanel.getDividerLocation());      repaintTree();    }  };  public void repaintTree() {    treePanel.getTree().revalidate();    treePanel.getTree().repaint();  }  private void addListener() {    lisener = new NodeSelectionListener(treePanel.getTree());    lisener.setNeedDoRightMouseClick(true);    treePanel.getTree().addMouseListener(lisener);    addKeyListener();    JTreeModelListener modelListener = new JTreeModelListener();    treePanel.getTree().getModel().addTreeModelListener(modelListener);    model = (DefaultTreeModel) treePanel.getTree().getModel();  }  /**   *   * @Description: 该指标的分值加上与其同级的指标的 标准分值之和与其父指标标准分值的差值。  * @return BigDecimal 返回类型  * @since 1.0   */  public BigDecimal getParentSubtract(ZcEbFormulaItem zcEbFormulaItem) {    ZcEbFormulaItem parentItem = getParentItem(zcEbFormula.getScoreItemList(), zcEbFormulaItem);    BigDecimal childScoreSum = getChildScore(parentItem);    if (FormulaRootCode.SCORE.equals(parentItem.getItemCode())) {      return new BigDecimal(zcEbFormula.getFactorFullScore()).subtract(childScoreSum);    } else {      return parentItem.getStandardScore().subtract(childScoreSum);    }  }  private ZcEbFormulaItem getParentItem(List list, ZcEbFormulaItem zcEbFormulaItem) {    if (zcEbFormulaItem.getParentItemCode().equals(FormulaRootCode.SCORE)) {      return treePanel.getScoreFormulalRootNode().getUserObject();    }    for (int i = 0; i < list.size(); i++) {      if (((ZcEbFormulaItem) list.get(i)).getItemCode().equals(zcEbFormulaItem.getParentItemCode())) {        return (ZcEbFormulaItem) list.get(i);      }    }    return null;  }  /**   *   * @Description:该评分指标节点标准分值与所有下级节点标准分值之和的差值。  * @return BigDecimal 返回类型  * @since 1.0   */  public BigDecimal getChildSubtract(ZcEbFormulaItem zcEbFormulaItem) {    BigDecimal childScoreSum = getChildScore(zcEbFormulaItem);    if (FormulaRootCode.SCORE.equals(zcEbFormulaItem.getItemCode())) {      return new BigDecimal(zcEbFormula.getFactorFullScore()).subtract(childScoreSum);    } else {      return zcEbFormulaItem.getStandardScore().subtract(childScoreSum);    }  }  /**   *   * @Description: 获得该节点的所有子节点的标准分值之和。  * @return BigDecimal 返回类型  * @since 1.0   */  public BigDecimal getChildScore(ZcEbFormulaItem zcEbFormlaItem) {    BigDecimal sum = new BigDecimal(0);    for (int i = 0; i < zcEbFormlaItem.getChildItemList().size(); i++) {      BigDecimal weight;      ZcEbFormulaItem item = (ZcEbFormulaItem) zcEbFormlaItem.getChildItemList().get(i);      BigDecimal standScore = item.getStandardScore();      if (null == item.getWeight()) {        weight = new BigDecimal(100);      } else {        weight = item.getWeight();      }      //加减分指标不计入标准分值之和。      if (item.getIsAddScore() == null || item.getIsAddScore().equals("0")) {        if (standScore != null) {          sum = sum.add(standScore.multiply(weight).divide(new BigDecimal(100)));        }      }    }    return sum;  }  public String confim(FormulaJTreeNode node) {    BigDecimal sum = new BigDecimal(0);    sum.setScale(2);    Enumeration<?> enumeration = node.children();    //评分指标根节点没有子节点，返回“noChild”    if (DefaultMutableTreeNode.EMPTY_ENUMERATION == enumeration && FormulaRootCode.SCORE.equals(node.getCode())) {      return "noChild";    }    //叶子节点不用验证，直接返回 "comform"    if (DefaultMutableTreeNode.EMPTY_ENUMERATION == enumeration) {      return "conform";    }    if (!enumeration.hasMoreElements()) {      return "conform";    }    //获得子节点评分值的总和    while (enumeration.hasMoreElements()) {      FormulaJTreeNode childNode = (FormulaJTreeNode) enumeration.nextElement();      ZcEbFormulaItem zcEbFormulaItem = childNode.getUserObject();      BigDecimal standScore = zcEbFormulaItem.getStandardScore();      if (standScore != null) {        sum = sum.add(standScore.multiply(zcEbFormulaItem.getWeight()).divide(new BigDecimal(100)));      }      if (confim(childNode).equals("conform")) {        continue;      } else {        return confim(childNode);      }    }    if (FormulaRootCode.SCORE.equals(node.getCode())) {      if (zcEbFormula.getFactorFullScore() == sum.intValue()) {        return "conform";      }    } else {      ZcEbFormulaItem zcEbFormulaItem = node.getUserObject();      if (zcEbFormulaItem.getStandardScore().compareTo(sum) == 0) {        return "conform";      }    }    return node.getName();  }  /**   *   * @Description: 从评分性指标根节点开始查找编码为code的节点  * @return JTreeNode 返回类型  * @since 1.0   */  public FormulaJTreeNode getNodeByCode(String code, FormulaJTreeNode root) {    if ("SC".equals(code) || "".equals(code)) {      return root;    }    Enumeration<?> enumeration = root.children();    while (enumeration.hasMoreElements()) {      FormulaJTreeNode node = (FormulaJTreeNode) enumeration.nextElement();      if (node.getCode().equals(code)) {        return node;      } else {        if (null == getNodeByCode(code, node)) {          continue;        }      }    }    return null;  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldZcEbFormula).equals(DigestUtil.digest(zcEbFormula));  }  public ZcEbFormula getZcEbFormula() {    return zcEbFormula;  }  public boolean isFromZBFrame() {    return isFromZBFrame;  }  public void setFromZBFrame(boolean isFromZBFrame) {    this.isFromZBFrame = isFromZBFrame;  }  public String getEvalBidElementsWordPath() {    return evalBidElementsWordPath;  }  public void setEvalBidElementsWordPath(String evalBidElementsWordPath) {    this.evalBidElementsWordPath = evalBidElementsWordPath;  }  public WordPane getWordPane() {    return wordPane;  }  public void setWordPane(WordPane wordPane) {    this.wordPane = wordPane;  }  public boolean isSamePBFF() {    return isSamePBFF;  }  public void setSamePBFF(boolean isSamePBFF) {    this.isSamePBFF = isSamePBFF;  }  public String getPackesNodeCode() {    return packesNodeCode;  }  public void setPackesNodeCode(String packesNodeCode) {    this.packesNodeCode = packesNodeCode;  }  public String getPackesNodeName() {    return packesNodeName;  }  public void setPackesNodeName(String packesNodeName) {    this.packesNodeName = packesNodeName;  }  public void doEidt(boolean isVisiable){    if(zcEbFormulaEditPanel != null){      zcEbFormulaEditPanel.doEidt(isVisiable);    }    if(lisener != null){      lisener.setNeedDoRightMouseClick(isVisiable);    }    if(paramPanel != null){      paramPanel.doEidt(isVisiable);    }    isSave = isVisiable;    if(itemPanel != null && itemPanel.getSaveButton() != null){      itemPanel.getSaveButton().setEnabled(isVisiable);    }    if(itemPanel != null && itemPanel.getEditButton() != null){      if(isVisiable){        itemPanel.getEditButton().setEnabled(isEnable);      }else{        itemPanel.getEditButton().setEnabled(isVisiable);      }    }    canDel = isVisiable;  }public ZcEbProj getZcEbProj() {	return zcEbProj;}public boolean isEditing(){	if(this.projectEditPanel!=null){		return this.projectEditPanel.isEditing();	}else{		return true;	}		}}
/**   * @(#) project: ZFCG* @(#) file: FormulaItemShowPanel.java* * Copyright 2011 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.formula;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Component;import java.awt.Font;import java.util.ArrayList;import java.util.Enumeration;import java.util.List;import java.util.Vector;import javax.swing.BorderFactory;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.JTextArea;import javax.swing.border.TitledBorder;import javax.swing.table.JTableHeader;import javax.swing.table.TableCellRenderer;import javax.swing.table.TableColumn;import com.ufgov.zc.client.common.converter.zc.BaseEntryToTableModelConverter;import com.ufgov.zc.client.common.converter.zc.EvalPackToTableModelConverter;import com.ufgov.zc.client.zc.eval.EvalFormulaTreePanel;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbFormulaItem;import com.ufgov.zc.common.zc.model.ZcEbFormulaParam;/*** @ClassName: FormulaItemShowPanel* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2011-1-13 下午05:53:30* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class FormulaItemShowPanel extends JPanel {  private FormulaItemShowPanel self = this;  private boolean tableEditable = true;  public boolean isTableEditable() {    return tableEditable;  }  public void setTableEditable(boolean tableEditable) {    this.tableEditable = tableEditable;  }  public JTable getTable() {    return table;  }  public void setTable(JTable table) {    this.table = table;  }  protected JTable table = new JTable();  private JTabbedPane tabbedPane = new JTabbedPane();  private ZcEbFormulaItem zcEbFormulaItem;  private ZcEbFormula zcEbFormula;  private FormulaJTreeNode formulaJTreeNode;  protected EvalPackToTableModelConverter modelConverter = new EvalPackToTableModelConverter();  private EvalFormulaTreePanel treePanel;  private String formulaType;  public FormulaItemShowPanel(ZcEbFormula zcEbFormula) {    this.formulaJTreeNode = formulaJTreeNode;    this.zcEbFormula = zcEbFormula;    initComponent();    //    initTable();  }  private void initTable() {    List itemList = new ArrayList();    if (formulaType == null) {      return;    }    if (formulaType.equals(EvalItemType.COMPLIANICE)) {      if (itemList.size() > 0) {        itemList.clear();      }      JTable complTable = new JTable();      //      complTable.setDefaultRenderer(Object.class, new TableCellTextAreaRenderer());      if (zcEbFormulaItem.getChildItemList().size() > 0) {        itemList.addAll(zcEbFormulaItem.getChildItemList());        complTable.setModel(new complItemToTableModelConverter().convertToTableModel(itemList));      } else {        itemList.add(zcEbFormulaItem);        complTable.setModel(new complItemToTableModelConverter().convertToTableModel(itemList));      }      complTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);      fitTableColumns(complTable);      JScrollPane j1 = new JScrollPane(complTable);      tabbedPane.removeAll();      tabbedPane.add(zcEbFormulaItem.getName(), j1);    } else if (formulaType.equals(EvalItemType.SCORE)) {      JTable scoreTable = new JTable();      //      scoreTable.setDefaultRenderer(Object.class, new TableCellTextAreaRenderer());      if (zcEbFormulaItem.getChildItemList().size() > 0) {        itemList.addAll(zcEbFormulaItem.getChildItemList());        scoreTable.setModel(new scoreItemToTableModelConverter().convertToTableModel(itemList));      } else {        itemList.add(zcEbFormulaItem);        scoreTable.setModel(new scoreItemToTableModelConverter().convertToTableModel(itemList));      }      scoreTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);      fitTableColumns(scoreTable);      JScrollPane j2 = new JScrollPane(scoreTable);      tabbedPane.removeAll();      tabbedPane.add(zcEbFormulaItem.getName(), j2);    } else {      JTable paramTable = new JTable();      //      paramTable.setDefaultRenderer(Object.class, new TableCellTextAreaRenderer());      paramTable.setModel(new paramItemToTableModelConverter().convertToTableModel(zcEbFormula.getParamList()));      paramTable.setAutoResizeMode(JTable.AUTO_RESIZE_LAST_COLUMN);      fitTableColumns(paramTable);      JScrollPane j3 = new JScrollPane(paramTable);      tabbedPane.removeAll();      tabbedPane.add("评审参数", j3);    }  }  //自动设置列宽     public static void fitTableColumns(JTable table) {    JTableHeader header = table.getTableHeader();    int rowCount = table.getRowCount();    Enumeration columns = table.getColumnModel().getColumns();    while (columns.hasMoreElements()) {      TableColumn column = (TableColumn) columns.nextElement();      int col = header.getColumnModel().getColumnIndex(column.getIdentifier());      int width = (int) table.getTableHeader().getDefaultRenderer().getTableCellRendererComponent(table, column.getIdentifier(), false, false, -1,      col).getPreferredSize().getWidth();      for (int row = 0; row < rowCount; row++) {        int preferedWidth = (int) table.getCellRenderer(row, col).getTableCellRendererComponent(table, table.getValueAt(row, col), false, false, row,        col).getPreferredSize().getWidth();        width = Math.max(width, preferedWidth);      }      header.setResizingColumn(column); // 此行很重要         column.setWidth(width + table.getIntercellSpacing().width);    }  }  private class complItemToTableModelConverter extends BaseEntryToTableModelConverter {    @SuppressWarnings("unchecked")    protected Vector<Object> getValue(List list) {      Vector<Object> values = new Vector<Object>();      if (null != list) {        for (int i = 0; i < list.size(); i++) {          values.add(toRowData((ZcEbFormulaItem) list.get(i)));        }      }      return values;    }    private Vector<Object> toRowData(ZcEbFormulaItem zcEbFormulaItem) {      Vector<Object> rowData = new Vector<Object>();      rowData.add(zcEbFormulaItem.getName());      rowData.add(zcEbFormulaItem.getParentItemName());      rowData.add(zcEbFormulaItem.getDescription());      rowData.add(zcEbFormulaItem.getRemark());      return rowData;    }    protected Vector<String> getColumnName() {      Vector<String> names = new Vector<String>();      names.add("指标名称");      names.add("上级指标");      //      names.add("指标描述");      names.add("备注");      return names;    }  }  private class paramItemToTableModelConverter extends BaseEntryToTableModelConverter {    @SuppressWarnings("unchecked")    protected Vector<Object> getValue(List list) {      Vector<Object> values = new Vector<Object>();      if (null != list) {        for (int i = 0; i < list.size(); i++) {          values.add(toRowData((ZcEbFormulaParam) list.get(i)));        }      }      return values;    }    private Vector<Object> toRowData(ZcEbFormulaParam param) {      Vector<Object> rowData = new Vector<Object>();      //      rowData.add(param.getParamName());      rowData.add(param.getDescription());      rowData.add(param.getDefaultValue());      if (param.getIsManSet() != null && param.getIsManSet().toUpperCase().equals("Y")) {        rowData.add("是");      } else {        rowData.add("否");      }      return rowData;    }    protected Vector<String> getColumnName() {      Vector<String> names = new Vector<String>();      names.add("参数名称");      names.add("描述");      names.add("默认分值");      names.add("是否需要人工设置");      return names;    }  }  private class scoreItemToTableModelConverter extends BaseEntryToTableModelConverter {    @SuppressWarnings("unchecked")    protected Vector<Object> getValue(List list) {      Vector<Object> values = new Vector<Object>();      if (null != list) {        for (int i = 0; i < list.size(); i++) {          values.add(toRowData((ZcEbFormulaItem) list.get(i)));        }      }      return values;    }    private Vector<Object> toRowData(ZcEbFormulaItem zcEbFormulaItem) {      Vector<Object> rowData = new Vector<Object>();      rowData.add(zcEbFormulaItem.getName());      //      rowData.add(zcEbFormulaItem.getParentItemName());      rowData.add(zcEbFormulaItem.getStandardScore());      rowData.add(zcEbFormulaItem.getFormula());      rowData.add(zcEbFormulaItem.getRemark());      rowData.add(zcEbFormulaItem.getDescription());      return rowData;    }    protected Vector<String> getColumnName() {      Vector<String> names = new Vector<String>();      names.add("指标名称");      //      names.add("上级指标");      names.add("标准分值");      names.add("计算公式");      names.add("备注");      names.add("指标描述");      return names;    }  }  private class TableCellTextAreaRenderer extends JTextArea implements TableCellRenderer {    public TableCellTextAreaRenderer() {      setLineWrap(true);      setWrapStyleWord(true);    }    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {      // 计算当下行的最佳高度      int maxPreferredHeight = 0;      for (int i = 0; i < table.getColumnCount(); i++) {        setText("" + table.getValueAt(row, i));        setSize(table.getColumnModel().getColumn(column).getWidth(), 0);        //        maxPreferredHeight = Math.max(maxPreferredHeight, getPreferredSize().height);      }      if (table.getRowHeight(row) != maxPreferredHeight) // 少了这行则处理器瞎忙        table.setRowHeight(row, maxPreferredHeight);      setText(value == null ? "" : value.toString());      return this;    }  }  private void initComponent() {    setLayout(new BorderLayout());    this.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "评审指标描述", TitledBorder.CENTER, TitledBorder.TOP, new Font(    "宋体", Font.BOLD, 15), Color.BLUE));    this.add(tabbedPane, BorderLayout.CENTER);  }  public void refreshData(FormulaJTreeNode formulaJTreeNode) {    this.formulaJTreeNode = formulaJTreeNode;    this.zcEbFormulaItem = (ZcEbFormulaItem) formulaJTreeNode.getUserObject();    formulaType = zcEbFormulaItem.getItemType();    initTable();  }  public EvalFormulaTreePanel getTreePanel() {    return treePanel;  }  public void setTreePanel(EvalFormulaTreePanel treePanel) {    this.treePanel = treePanel;  }}
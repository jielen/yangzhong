/**   * @(#) project: GK* @(#) file: FormulaTreePanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.formula;import java.awt.BorderLayout;import java.util.ArrayList;import java.util.Enumeration;import java.util.List;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTree;import javax.swing.tree.DefaultTreeModel;import javax.swing.tree.TreePath;import javax.swing.tree.TreeSelectionModel;import com.ufgov.zc.client.component.zc.tree.TreeNodeSelectionListener;import com.ufgov.zc.common.zc.model.EvalItemType;import com.ufgov.zc.common.zc.model.FormulaRootCode;import com.ufgov.zc.common.zc.model.ZcEbFormula;import com.ufgov.zc.common.zc.model.ZcEbFormulaItem;/*** @ClassName: FormulaTreePanel* @Description: 指标集树对象面板。* @date: 2010-4-26 下午04:55:51* @version: V1.0 * @since: 1.0* @author: tianly* @modify: */public class FormulaTreePanel extends JPanel {  private static final long serialVersionUID = 9069793707744356420L;  private JScrollPane panel;  private JTree tree;  private Object[] params;  public FormulaJTreeNode rootNode;  public FormulaJTreeNode complianceFuomualRootNode;  public FormulaJTreeNode scoreFormulalRootNode;  public FormulaJTreeNode commonParamRootNode;  private ZcEbFormula zcEbFormula;  private String TOP_ROOT_CODE = FormulaRootCode.TOP_ROOT;  public FormulaTreePanel(ZcEbFormula zcEbFormula) {    this.zcEbFormula = zcEbFormula;    init();  }  private void init() {    this.setLayout(new BorderLayout());    createTree();    panel = new JScrollPane(tree);    this.add(panel, BorderLayout.CENTER);    this.tree.setCellRenderer(new JTreeCellRenderer());  }  private void createTree() {    initRootNodes();    tree = new JTree(rootNode, true);    tree.setRootVisible(true);    tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);    this.repaint();  }  //展现树结点  public void expandAll(JTree tree, TreePath parent, boolean expand) {    FormulaJTreeNode node = (FormulaJTreeNode) parent.getLastPathComponent();    if (node.getChildCount() >= 0) {      for (Enumeration e = node.children(); e.hasMoreElements();) {        FormulaJTreeNode n = (FormulaJTreeNode) e.nextElement();        TreePath path = parent.pathByAddingChild(n);        expandAll(tree, path, expand);      }    }    if (expand) {      tree.expandPath(parent);    } else {      tree.collapsePath(parent);    }  }  /**  * @Description:加载树节点对象。  * @return void 返回类型  * @since 1.0   */  public void loadTreeNodes() {    loadChildNodes(EvalItemType.COMPLIANICE);    loadChildNodes(EvalItemType.SCORE);    expandAll(tree, new TreePath(tree.getModel().getRoot()), true);  }  /**  * @Description:按照类型分别加载对应子节点。  * @param itemType 指标项类别：1，符合性指标；2，评分性指标。  * @return void   * @since 1.0   */  private void loadChildNodes(String itemType) {    if (EvalItemType.COMPLIANICE.equals(itemType)) {      this.complianceFuomualRootNode = createChild(complianceFuomualRootNode, zcEbFormula.getComplicationItemList());    } else {      this.scoreFormulalRootNode = createChild(scoreFormulalRootNode, zcEbFormula.getScoreItemList());    }  }  //递归创建树形结点  private FormulaJTreeNode createChild(FormulaJTreeNode pnode, List<ZcEbFormulaItem> itemList) {    List<ZcEbFormulaItem> list = getChild(pnode.getCode(), itemList);    if (null == list || list.isEmpty()) {      pnode.setLeaf(true);      return pnode;    }    pnode.getUserObject().setChildItemList(list);    for (ZcEbFormulaItem item : list) {      FormulaJTreeNode node = new FormulaJTreeNode();      node.setUserObject(item);      FormulaJTreeNode treeNode = createChild(node, itemList);      pnode.add(treeNode);    }    return pnode;  }  private List<ZcEbFormulaItem> getChild(String pcode, List<ZcEbFormulaItem> itemList) {    List<ZcEbFormulaItem> childList = new ArrayList<ZcEbFormulaItem>();    for (ZcEbFormulaItem item : itemList) {      if (item.getParentItemCode().equals(pcode)) {        childList.add(item);      }    }    return childList;  }  /**  * @Description: 创建固定节点。包含一个顶级根节点、符合性指标根节点、评分性指标根节点和通用参数根节点。  * @return void 返回类型  * @since 1.0   */  private void initRootNodes() {    ZcEbFormulaItem rootItem = new ZcEbFormulaItem();    rootItem.setName("评审指标集");    rootItem.setItemCode(FormulaRootCode.TOP_ROOT);    rootNode = new FormulaJTreeNode();    rootNode.setUserObject(rootItem);    rootNode.setAllowsChildren(true);    ZcEbFormulaItem complItem = new ZcEbFormulaItem();    complItem.setParentItemCode(rootItem.getItemCode());    complItem.setItemCode(FormulaRootCode.COMPLIANCE);    complItem.setName("符合性指标");    complItem.setItemType(EvalItemType.COMPLIANICE);    complianceFuomualRootNode = new FormulaJTreeNode();    complianceFuomualRootNode.setUserObject(complItem);    complianceFuomualRootNode.setAllowsChildren(true);    rootNode.add(complianceFuomualRootNode);    ZcEbFormulaItem scoreItem = new ZcEbFormulaItem();    scoreItem.setItemCode(FormulaRootCode.SCORE);    scoreItem.setParentItemCode(rootItem.getItemCode());    scoreItem.setName("评分性指标");    scoreItem.setItemType(EvalItemType.SCORE);    scoreFormulalRootNode = new FormulaJTreeNode();    scoreFormulalRootNode.setUserObject(scoreItem);    scoreFormulalRootNode.setAllowsChildren(true);    rootNode.add(scoreFormulalRootNode);    ZcEbFormulaItem paramItem = new ZcEbFormulaItem();    paramItem.setItemCode(FormulaRootCode.PARAM);    paramItem.setParentItemCode(rootItem.getItemCode());    paramItem.setItemType(EvalItemType.PARAM);    paramItem.setName("评审参数");    commonParamRootNode = new FormulaJTreeNode();    commonParamRootNode.setUserObject(paramItem);    commonParamRootNode.setAllowsChildren(true);    rootNode.add(commonParamRootNode);  }  public String getTOP_ROOT_CODE() {    return TOP_ROOT_CODE;  }  public JTree getTree() {    return tree;  }  public void addListener() {    tree.addMouseListener(new TreeNodeSelectionListener(tree));  }  public Object[] getParams() {    return params;  }  public void setParams(Object[] params) {    this.params = params;  }  public void setTree(JTree tree) {    this.tree = tree;  }  public void removeFoumula() {    DefaultTreeModel model = (DefaultTreeModel) tree.getModel();    FormulaJTreeNode root = (FormulaJTreeNode) model.getRoot();    Enumeration<?> enumeration = root.children();    while (enumeration.hasMoreElements()) {      FormulaJTreeNode childNode = (FormulaJTreeNode) enumeration.nextElement();      childNode.getUserObject().getChildItemList().clear();      childNode.removeAllChildren();    }    model.reload();  }  public FormulaJTreeNode getRootNode() {    return rootNode;  }  public void setRootNode(FormulaJTreeNode rootNode) {    this.rootNode = rootNode;  }  public FormulaJTreeNode getComplianceFuomualRootNode() {    return complianceFuomualRootNode;  }  public void setComplianceFuomualRootNode(FormulaJTreeNode complianceFuomualRootNode) {    this.complianceFuomualRootNode = complianceFuomualRootNode;  }  public FormulaJTreeNode getScoreFormulalRootNode() {    return scoreFormulalRootNode;  }  public void setScoreFormulalRootNode(FormulaJTreeNode scoreFormulalRootNode) {    this.scoreFormulalRootNode = scoreFormulalRootNode;  }}
/**   * @(#) project: Gk* @(#) file: ScoreItemPanel.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.zc.formula;import java.awt.Color;import java.awt.Font;import java.util.ArrayList;import java.util.List;import javax.swing.BorderFactory;import javax.swing.border.TitledBorder;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.component.AsValComboBox;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.AsValFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.MoneyFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextAreaFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.model.AsVal;import com.ufgov.zc.common.zc.model.ZcEbFormula;/*** @ClassName: ScoreItemPanel* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2010-4-30 下午04:05:02* @version: V1.0 * @since: 1.0* @author: Administrator* @modify: */public class ScoreItemPanel extends ZcEbFormulaItemEditPanel {  private MoneyFieldEditor maxAddScoreEditor;  private MoneyFieldEditor maxMinusScoreEditor;  private MoneyFieldEditor standardScoreEditor;  private MoneyFieldEditor leastScoreEditor;  public ScoreItemPanel(ZcEbFormula zcEbFormula, String itemType) {    super(zcEbFormula, itemType);    workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "评分性指标设置", TitledBorder.CENTER, TitledBorder.TOP,    new Font("宋体", Font.BOLD, 15), Color.BLUE));  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    //判断指标项的类型    TextFieldEditor editor0 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_NAME), "name");    editorList.add(editor0);    editor0.setEnabled(true);    standardScoreEditor = new MoneyFieldEditor(false, LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_STANDARD_SCORE),    "standardScore");    editorList.add(standardScoreEditor);    //    //    MoneyFieldEditor editor2 = new MoneyFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_BASE_SCORE),    //      "baseScore");    //    editorList.add(editor2);    AsValFieldEditor editor4 = new AsValFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_IS_ADD_SCORE),    "isAddScore", "VS_ISADDSCORE") {      @Override      protected void afterChange(AsValComboBox field) {        AsVal val = field.getSelectedAsVal();        if (val != null) {          if (val.getValId().equals("0")) {            maxAddScoreEditor.setEnabled(false);            maxMinusScoreEditor.setEnabled(false);            standardScoreEditor.setEnabled(true);            leastScoreEditor.setEnabled(true);          } else if (val.getValId().equals("1")) {            maxAddScoreEditor.setEnabled(true);            maxMinusScoreEditor.setEnabled(false);            standardScoreEditor.setEnabled(false);            leastScoreEditor.setEnabled(false);          } else if (val.getValId().equals("2")) {            maxAddScoreEditor.setEnabled(false);            maxMinusScoreEditor.setEnabled(true);            standardScoreEditor.setEnabled(false);            leastScoreEditor.setEnabled(false);          } else {            maxAddScoreEditor.setEnabled(false);            maxMinusScoreEditor.setEnabled(false);            standardScoreEditor.setEnabled(true);            leastScoreEditor.setEnabled(true);          }        } else {          maxAddScoreEditor.setEnabled(false);          maxMinusScoreEditor.setEnabled(false);          standardScoreEditor.setEnabled(true);          leastScoreEditor.setEnabled(true);        }      }    };    editorList.add(editor4);    maxAddScoreEditor = new MoneyFieldEditor(false, LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_MAXADD_SCORE),      "maxAddScore");    editorList.add(maxAddScoreEditor);    maxMinusScoreEditor = new MoneyFieldEditor(false, LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_MAXMINUS_SCORE),    "maxMinusScore");    editorList.add(maxMinusScoreEditor);    leastScoreEditor = new MoneyFieldEditor(false, LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_LEAST_SCORE),      "leastScore");    editorList.add(leastScoreEditor);    TextFieldEditor editor9 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_FORMULA), "formula");    editor9.setEnabled(false);    editorList.add(editor9);    //    //      AsValFieldEditor editor8 = new AsValFieldEditor(LangTransMeta    //        .translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_IS_PRICE_TARGET), "isPriceTarget",    //        "VS_Y/N");    //      editorList.add(editor8);    //      AsValFieldEditor editor12 = new AsValFieldEditor(LangTransMeta    //        .translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_SCORE_SUM_WAY), "scoreSumWay",    //        "VS_ZC_EB_FORMULA_SCORE_SUM_WAY");    //      editorList.add(editor12);    //    MoneyFieldEditor editor10 = new MoneyFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_WEIGHT) + "%",    //      "weight");    //    editorList.add(editor10);    //    TextFieldEditor editor4 = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_REMARK), "remark");    //    editorList.add(editor4);    //    editor4.setEnabled(true);    TextAreaFieldEditor editor11 = new TextAreaFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FORMULA_ITEM_DESCRIPTION),    "description", 2000, 5, 30);    editorList.add(editor11);    return editorList;  }}
package com.ufgov.zc.client.zc.supplierIntegrityManage;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.ItemEvent;import java.awt.event.ItemListener;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.List;import java.util.Vector;import javax.swing.BorderFactory;import javax.swing.JCheckBox;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import javax.swing.JTabbedPane;import javax.swing.JTable;import javax.swing.border.TitledBorder;import javax.swing.event.TableModelEvent;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableColumn;import javax.swing.table.TableColumnModel;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.JTextAreaLabel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.NextButton;import com.ufgov.zc.client.component.button.PreviousButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.table.celleditor.TextCellEditor;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.zc.emfundpay.EmFundReportEditPanel;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.SupplierIntegrityManage;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbSupplier;public class SupplierIntegrityManageEditPanel extends AbstractMainSubEditPanel {  /**   *    */  private static final long serialVersionUID = 1L;  private static final Logger logger = Logger  .getLogger(EmFundReportEditPanel.class);  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private String compoId = "ZC_EB_SUPPLIER_CREDIT";  private String suppid;  ElementConditionDto packDto = new ElementConditionDto();  private JTablePanel tablePanel = new JTablePanel();  protected ListCursor<SupplierIntegrityManage> listCursor;  protected SupplierIntegrityManage oldSupplierIntegrityManage;  private SupplierIntegrityManageListPanel listPanel;  private String tabStatus;  private GkBaseDialog parent;  private List<String> blSelect = new ArrayList<String>();  private List<String> bdSelect = new ArrayList<String>();  private List<String> mydSelect = new ArrayList<String>();  // 按钮  private FuncButton addButton = new AddButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton previousButton = new PreviousButton();  private FuncButton editButton = new EditButton();  private FuncButton nextButton = new NextButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  private JPanel panel1;  public SupplierIntegrityManageEditPanel(  SupplierIntegrityManageDialog parent, ListCursor listCursor,  String tabStatus, SupplierIntegrityManageListPanel listPanel) {    super(SupplierIntegrityManage.class, BillElementMeta    .getBillElementMetaWithoutNd("SUPPLIER_INTEGRITY_MANAGE"));    this.listCursor = listCursor;    this.listPanel = listPanel;    this.parent = parent;    this.tabStatus = tabStatus;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory    .createEtchedBorder(), "诚信审核", TitledBorder.CENTER,    TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();  }  public List<AbstractFieldEditor> createFieldEditors() {    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    ElementConditionDto dto = new ElementConditionDto();    String columNamesSupplier[] = { "供应商名称", "负责人", "电话" };    ZcEbSupplierFnHandler supplierFnHandler = new ZcEbSupplierFnHandler(    columNamesSupplier);    dto.setNd(WorkEnv.getInstance().getTransNd());    ForeignEntityFieldEditor editor1 = new ForeignEntityFieldEditor(    "ZcEbSupplier.getZcEbSupplier", dto, 20, supplierFnHandler,    columNamesSupplier, "供应商名称", "supplier.name") {      @Override      public void setValue(Object value) {        SupplierIntegrityManage supplier = (SupplierIntegrityManage) value;        if (value != null) {          field.setText(supplier.getSupplier().getName());        } else {          field.setText(null);        }      }    };    editorList.add(editor1);    TextFieldEditor supplierLinkMan = new TextFieldEditor("供应商联系人",    "supplier.linkMan");    editorList.add(supplierLinkMan);    TextFieldEditor supplierLinkManTel = new TextFieldEditor("供应商联系人电话",    "supplier.linkManPhone");    editorList.add(supplierLinkManTel);    String columNames[] = { "项目名称", "采购类型", "负责人" };    ZcEbProjFnHandler projHandler = new ZcEbProjFnHandler(columNames);    dto.setCoCode("");    dto.setNd(WorkEnv.getInstance().getTransNd());    ForeignEntityFieldEditor editor0 = new ForeignEntityFieldEditor(    "IntegrityManage.getProjList", dto, 20, projHandler,    columNames, "采购项目名称", "proj.projName") {      public void setValue(Object value) {        SupplierIntegrityManage proj = (SupplierIntegrityManage) value;        if (value != null && proj.getProj() != null) {          field.setText(proj.getProj().getProjName());        } else {          field.setText(null);        }      }    };    editorList.add(editor0);    TextFieldEditor projLinkMan = new TextFieldEditor("项目负责人",    "proj.manager");    editorList.add(projLinkMan);    TextFieldEditor projLinkManTel = new TextFieldEditor("项目联系人电话",    "proj.phone");    editorList.add(projLinkManTel);    String columNamesDelgOrg[] = { "代理机构名称", "代理机构负责人", "负责人电话" };    ZcEbDelgOrgFnHandler delgOrgFnHandler = new ZcEbDelgOrgFnHandler(    columNamesDelgOrg);    dto.setCoCode(requestMeta.getSvCoCode());    dto.setNd(WorkEnv.getInstance().getTransNd());    ForeignEntityFieldEditor editor2 = new ForeignEntityFieldEditor("",    dto, 20, delgOrgFnHandler, columNamesSupplier, "代理机构名称", "");    editorList.add(editor2);    TextFieldEditor delgOrgLinkMan = new TextFieldEditor("代理机构联系人",    "delgeteTel");    editorList.add(delgOrgLinkMan);    TextFieldEditor delgOrgLinkManTel = new TextFieldEditor("代理机构联系人电话",    "delgeteTel");    editorList.add(delgOrgLinkManTel);    return editorList;  }  public JComponent createSubBillPanel() {    JTabbedPane pane = new JTabbedPane();    pane.add("政府采购协议供货活动的不良行为", createPanel1());    pane.add("政府采购协议供货活动的不当行为", createPanel2());    pane.add("供货商履行协议供货合同情况", createPanel3());    // pane.add("采购监管部门奖惩情况", createPanel4());    return pane;  }  JPanel createPanel1() {    panel1 = new JPanel();    JPanel messagePanel = new JPanel(new BorderLayout());    JTextAreaLabel message = new JTextAreaLabel();    message.setFont(new Font("宋体", Font.BOLD, 16));    message.setText("请按照客观事实、认真核对信息后选择、如果违反在相应的选择框");    message.setForeground(Color.RED);    messagePanel.add(message, BorderLayout.CENTER);    BorderLayout borderLayout = new BorderLayout();    panel1.setLayout(borderLayout);    List showData = new ArrayList();    showData.add("提供虚假材料谋取成交的");    showData.add("采取不正当手段诋毁、排挤其他供货商的");    showData.add("与采购单位、其他供货商或者采购代理机构恶意串通的");    showData.add("向采购单位、采购代理机构行贿或提供其他不正当利益，或因此被其他国家机关立案查实的");    showData.add("在采购过程中与采购单位进行协商谈判的");    showData.add("拒绝财政部门、集中采购机构等部门监督检查或者提供虚假情况的");    showData.add("法律、法规认定的其他不良行为");    List selectList = new ArrayList();    SupplierIntegrityManage integrityManage = this.listCursor    .getCurrentObject();    if (integrityManage != null) {      selectList.add(integrityManage.getBlindex1());      selectList.add(integrityManage.getBlindex2());      selectList.add(integrityManage.getBlindex3());      selectList.add(integrityManage.getBlindex4());      selectList.add(integrityManage.getBlindex5());      selectList.add(integrityManage.getBlindex6());      selectList.add(integrityManage.getBlindex7());    } else {      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");    }    // selectList = blSelect;    List reasonList = new ArrayList();    panel1.add(messagePanel, BorderLayout.NORTH);    panel1.add(createSelectPane(showData, selectList, reasonList),    BorderLayout.CENTER);    return panel1;  }  JPanel createSelectPane(List showData, List selectList, List reasonList) {    JTable table = getJtable(showData, selectList, reasonList);    JPanel panel = new JPanel(new BorderLayout());    JScrollPane scrollPane = new JScrollPane(table);    table.setPreferredScrollableViewportSize(new Dimension(500, 70));    panel.add(scrollPane);    return panel;  }  JPanel createPanel2() {    JPanel messagePanel = new JPanel(new BorderLayout());    JTextAreaLabel message = new JTextAreaLabel();    message.setFont(new Font("宋体", Font.BOLD, 16));    message.setText("请按照客观事实、认真核对信息后选择、如果违反在相应的选择框");    message.setForeground(Color.RED);    messagePanel.add(message, BorderLayout.CENTER);    List showData = new ArrayList();    showData.add("报价后无故撤销、放弃报价投标的");    showData.add("拱抬、操纵协议供货报价，或所报价格明显高于市场平均价的");    showData.add("控制货源，扰乱协议供货采购市场正常秩序的");    showData.add("成交后无正当理由拒绝签订政府采购合同，或者与采购单位另立背离原采购内容协议的");    showData.add("无正当理由拒绝履行合同义务和有关承诺，或擅自变更、中止（终止）政府采购合同的");    showData.add("成交后将政府采购合同擅自转包或分包的");    showData.add("提供假冒伪劣产品的");    showData.add("降低产品质量和售后服务标准，或以次充好、偷工减料的");    showData.add("不按规定或恶意质疑，给采购人或采购代理机构造成损害的");    showData.add("其他有关违反诚实信用原则的不当行为");    List selectList = new ArrayList();    SupplierIntegrityManage integrityManage = this.listCursor    .getCurrentObject();    if (integrityManage != null) {      selectList.add(integrityManage.getBdindex1());      selectList.add(integrityManage.getBdindex2());      selectList.add(integrityManage.getBdindex3());      selectList.add(integrityManage.getBdindex4());      selectList.add(integrityManage.getBdindex5());      selectList.add(integrityManage.getBdindex6());      selectList.add(integrityManage.getBdindex7());      selectList.add(integrityManage.getBdindex8());      selectList.add(integrityManage.getBdindex9());      selectList.add(integrityManage.getBdindex10());    } else {      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");      selectList.add("");    }    List reasonList = new ArrayList();    JTable table = getJtable(showData, selectList, reasonList);    JPanel panel = new JPanel(new BorderLayout());    JScrollPane scrollPane = new JScrollPane(table);    table.setPreferredScrollableViewportSize(new Dimension(500, 70));    panel.add(messagePanel, BorderLayout.NORTH);    panel.add(scrollPane, BorderLayout.CENTER);    return panel;  }  public JTable getMYDJtable(List showData, List selectList) {    DefaultTableModel dm = new DefaultTableModel();// .getModel();    Vector vectorP = new Vector();    vectorP.add("行号");    vectorP.add("评审标准");    vectorP.add("");    vectorP.add("满意度");    vectorP.add(" ");    Vector vectorData = new Vector();    for (int i = 0; i < showData.size(); i++) {      Vector rowData = new Vector();      rowData.add(i);      rowData.add(showData.get(i));      final JCheckBox checkMY = new JCheckBox("满意");      final JCheckBox checkBMY = new JCheckBox("不满意");      final JCheckBox checkYB = new JCheckBox("一般");      rowData.add(checkMY);      rowData.add(checkYB);      rowData.add(checkBMY);      vectorData.add(rowData);      String myd = (String) selectList.get(i);      if ("0".equals(myd)) {        checkBMY.setSelected(true);      } else if ("2".equals(myd)) {        checkMY.setSelected(true);      } else {        checkYB.setSelected(true);      }      final int j = i + 1;      checkMY.addItemListener(new ItemListener() {        public void itemStateChanged(ItemEvent e) {          if (e.getStateChange() == e.SELECTED) {            checkBMY.setSelected(false);            checkYB.setSelected(false);            try {              setValue(j, "2");            } catch (Exception e1) {              e1.printStackTrace();            }          } else {          }        }      });      checkBMY.addItemListener(new ItemListener() {        public void itemStateChanged(ItemEvent e) {          if (e.getStateChange() == e.SELECTED) {            checkMY.setSelected(false);            checkYB.setSelected(false);            try {              setValue(j, "0");            } catch (Exception e1) {              e1.printStackTrace();            }          }        }      });      checkYB.addItemListener(new ItemListener() {        public void itemStateChanged(ItemEvent e) {          if (e.getStateChange() == e.SELECTED) {            checkBMY.setSelected(false);            checkMY.setSelected(false);            try {              setValue(j, "1");            } catch (Exception e1) {              e1.printStackTrace();            }          }        }      });    }    dm.setDataVector(vectorData, vectorP);    JTable table = new JTable(dm) {      public void tableChanged(TableModelEvent e) {        super.tableChanged(e);        repaint();      }    };    table.getColumn("满意度").setCellEditor(    new JCheckBoxCellEditor(new JCheckBox()));    table.getColumn("").setCellEditor(    new JCheckBoxCellEditor(new JCheckBox()));    table.getColumn(" ").setCellEditor(    new JCheckBoxCellEditor(new JCheckBox()));    table.getColumn("满意度").setCellRenderer(new JCheckBoxRenderer());    table.getColumn("").setCellRenderer(new JCheckBoxRenderer());    table.getColumn(" ").setCellRenderer(new JCheckBoxRenderer());    table.setRowHeight(30);    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);    TableColumnModel tm = table.getColumnModel();    TableColumn tc = tm.getColumn(1);    tc.setMinWidth(200);    tc = tm.getColumn(0);    tc.setMaxWidth(40);    return table;  }  private void setValue(int j, String str) throws Exception {    Class cls = SupplierIntegrityManage.class;    Method[] method = cls.getMethods();    for (int i = 0; i < method.length; i++) {      Method me = method.clone()[i];      if (me.getName().startsWith("setMydindex")      && me.getName().endsWith(j + "")) {        System.out.println(me.getName());        SupplierIntegrityManage integrityManage = this.listCursor        .getCurrentObject();        me.invoke(integrityManage, str);        this.listCursor.setCurrentObject(integrityManage);      }    }  }  @SuppressWarnings("unchecked")  public JTable getJtable(List showData, List selectList, List reasonList) {    final List list = selectList;    DefaultTableModel dm = new DefaultTableModel();// .getModel();    Vector vectorP = new Vector();    vectorP.add("行号");    vectorP.add("评审标准");    vectorP.add("是否违反");    vectorP.add("说明");    Vector vectorData = new Vector();    for (int i = 0; i < showData.size(); i++) {      JCheckBox yesorno = new JCheckBox();      Vector rowData = new Vector();      rowData.add(i + 1);      rowData.add(showData.get(i));      rowData.add(yesorno);      rowData.add("");      vectorData.add(rowData);      if ("y".equals(selectList.get(i))) {        yesorno.setSelected(true);      }      final int m = showData.size();      final int j = i;      yesorno.addItemListener(new ItemListener() {        public void itemStateChanged(ItemEvent e) {          if (e.getStateChange() == e.SELECTED) {            try {              getMethodIndex(m, j + 1, "y");            } catch (Exception e1) {              e1.printStackTrace();            }          } else if (e.getStateChange() == e.DESELECTED) {            try {              getMethodIndex(m, j + 1, "n");            } catch (Exception e1) {              e1.printStackTrace();            }          }        }      });    }    if (selectList.size() == bdSelect.size()) {      bdSelect = selectList;    } else {      blSelect = selectList;    }    dm.setDataVector(vectorData, vectorP);    JTable table = new JTable(dm) {      public void tableChanged(TableModelEvent e) {        super.tableChanged(e);        repaint();      }    };    table.getColumn("是否违反").setCellEditor(    new JCheckBoxCellEditor(new JCheckBox()));    table.getColumn("说明").setCellEditor(new TextCellEditor());    table.getColumn("是否违反").setCellRenderer(new JCheckBoxRenderer());    table.setRowHeight(30);    table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);    TableColumnModel tm = table.getColumnModel();    TableColumn tc = tm.getColumn(0);    tc.setMaxWidth(40);    tc = tm.getColumn(1);    tc.setMinWidth(600);    tc = tm.getColumn(2);    tc.setMinWidth(20);    tc = tm.getColumn(3);    tc.setMinWidth(200);    return table;  }  private void setTableItemEditor(JTable table) {    table.setDefaultEditor(String.class, new TextCellEditor());  }  private void getMethodIndex(int c, int index, String str)  throws IllegalArgumentException, IllegalAccessException,  InvocationTargetException {    Class cls = SupplierIntegrityManage.class;    Method[] method = cls.getMethods();    for (int i = 0; i < method.length; i++) {      Method me = method.clone()[i];      if (c == 7) {        if (me.getName().startsWith("setBlindex")        && me.getName().endsWith(index + "")) {          System.out.println(me.getName());          SupplierIntegrityManage integrityManage = this.listCursor          .getCurrentObject();          me.invoke(integrityManage, str);          this.listCursor.setCurrentObject(integrityManage);        }      } else if (c == 10) {        if (me.getName().startsWith("setBdindex")        && me.getName().endsWith(index + "")) {          System.out.println(me.getName());          SupplierIntegrityManage integrityManage = this.listCursor          .getCurrentObject();          me.invoke(integrityManage, str);          this.listCursor.setCurrentObject(integrityManage);        }      }    }  }  JPanel createPanel3() {    JPanel messagePanel = new JPanel(new BorderLayout());    JTextAreaLabel message = new JTextAreaLabel();    message.setFont(new Font("宋体", Font.BOLD, 16));    message.setText("请按照客观事实、认真核对信息后选择、如果违反在相应的选择框");    message.setForeground(Color.RED);    messagePanel.add(message, BorderLayout.CENTER);    List showData = new ArrayList();    showData.add("成交价格");    showData.add("按时交货");    showData.add("产品质量");    showData.add("售后服务");    List selectList = new ArrayList();    SupplierIntegrityManage integrityManage = this.listCursor    .getCurrentObject();    if (integrityManage != null) {      selectList.add(integrityManage.getMydindex1());      selectList.add(integrityManage.getMydindex2());      selectList.add(integrityManage.getMydindex3());      selectList.add(integrityManage.getMydindex4());    } else {      selectList.add("1");      selectList.add("1");      selectList.add("1");      selectList.add("1");    }    JTable table = getMYDJtable(showData, selectList);    JPanel panel = new JPanel(new BorderLayout());    JScrollPane scrollPane = new JScrollPane(table);    table.setPreferredScrollableViewportSize(new Dimension(500, 70));    panel.add(messagePanel, BorderLayout.NORTH);    panel.add(scrollPane, BorderLayout.CENTER);    return panel;  }  @SuppressWarnings("unchecked")  JPanel createPanel4() {    tablePanel.init();    tablePanel.setTablePreferencesKey(this.getClass().getName() + "_table");    tablePanel.getTable().setShowCheckedColumn(true);    tablePanel.getTable().getTableRowHeader().setPreferredSize(    new Dimension(50, 0));    return tablePanel;  }  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    toolBar.add(addButton);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    // toolBar.add(previousButton);    // toolBar.add(nextButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopEditing();        doAdd();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    deleteButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopEditing();        doDelete();      }    });    saveButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        stopEditing();        doSave();      }    });    previousButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrevious();      }    });    nextButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doNext();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });  }  private void doEdit() {  }  @SuppressWarnings("unchecked")  private void doAdd() {    SupplierIntegrityManage integrityManage = new SupplierIntegrityManage();    this.listCursor = new ListCursor(new ArrayList(1), -1);    listCursor.setCurrentObject(integrityManage);    setEditingObject(integrityManage);    refreshData();    updateFieldEditorsEditable();  }  private void doDelete() {    SupplierIntegrityManage integrityManage = this.listCursor    .getCurrentObject();    SupplierIntegrityManage afterbill = null;    this.listPanel.getDelegate().delSupplierIntegrityManageList(    integrityManage, requestMeta);// (integrityManage, requestMeta);    this.listCursor.setCurrentObject(afterbill);    JOptionPane.showMessageDialog(this, "删除成功.", "提示",    JOptionPane.INFORMATION_MESSAGE);    this.listCursor.removeCurrentObject();    refreshData();  }  private boolean doSave() {    if (!checkBeforeSave()) {      return false;    }    if (!isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据没有发生改变，不用保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);      return true;    }    SupplierIntegrityManage integrityManage = this.listCursor    .getCurrentObject();    SupplierIntegrityManage afterbill = null;    if (integrityManage.getProj() == null || integrityManage.getProj().getProjCode() == null) {      JOptionPane.showMessageDialog(this, "没有选择项目.", "提示",      JOptionPane.INFORMATION_MESSAGE);      return true;    }    afterbill = this.listPanel.getDelegate().saveSupplierIntegrityManage(    integrityManage, requestMeta);    this.listCursor.setCurrentObject(afterbill);    JOptionPane.showMessageDialog(this, "保存成功.", "提示",    JOptionPane.INFORMATION_MESSAGE);    System.out.println(afterbill.getSn() + "  sn.............");    refreshData();    boolean success = true;    return success;  }  private boolean checkBeforeSave() {    return true;  }  private void doPrevious() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {    }    listCursor.previous();    refreshData();  }  private void doNext() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {      listCursor.setCurrentObject(oldSupplierIntegrityManage);    }    listCursor.next();    refreshData();  }  private void doExit() {    if (isDataChanged()) {      JOptionPane.showMessageDialog(this, "数据发生改变，请先保存.", "提示",      JOptionPane.INFORMATION_MESSAGE);    } else {      this.parent.dispose();    }  }  private void doHelp() {  }  private void stopEditing() {  }  @SuppressWarnings("unchecked")  private void refreshData() {    SupplierIntegrityManage integrityManage = this.listCursor    .getCurrentObject();    if (integrityManage == null) {      integrityManage = new SupplierIntegrityManage();      integrityManage.setBdindex1("n");      ZcEbProj proj = new ZcEbProj();      proj.setProjSrcCode("");      List lst = new ArrayList();      integrityManage.setProj(proj);      lst.add(integrityManage);      this.listCursor.setDataList(lst, -1);      listCursor.setCurrentObject(integrityManage);    } else {    }    this.setEditingObject(integrityManage);    this.listCursor.setCurrentObject(integrityManage);    setOldObject();    panel1.repaint();    repaint();  }  private void setOldObject() {    oldSupplierIntegrityManage = (SupplierIntegrityManage) ObjectUtil    .deepCopy(this.listCursor.getCurrentObject());  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldSupplierIntegrityManage).equals(    DigestUtil.digest(listCursor.getCurrentObject()));  }  /**   * 项目外部选择   *    * @author Administrator   *    */  private class ZcEbProjFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbProjFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbProj proj = (ZcEbProj) object;        SupplierIntegrityManage integrityManage = (SupplierIntegrityManage) listCursor        .getCurrentObject();        integrityManage.setProj(proj);        setEditingObject(integrityManage);        projCodeChange();      }    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      System.out.println(showDatas.size() + "..................");      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjName();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE",        rowData.getPurType());        data[i][col++] = rowData.getManager();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }    public boolean beforeSelect(ElementConditionDto dto) {      SupplierIntegrityManage integrityManage = listCursor      .getCurrentObject();      if (integrityManage.getSupplier().getName() == null      || integrityManage.getSupplier().getLinkMan() == null) {        JOptionPane.showMessageDialog(parent, "请先选择供应商", "提示",        JOptionPane.INFORMATION_MESSAGE);        return false;      }      dto.setCoCode(integrityManage.getSupplier().getCode());      return true;    }  }  private void projCodeChange() {  }  /**   * 供应商外部选择   *    * @author Administrator   *    */  public class ZcEbSupplierFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbSupplierFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbSupplier supplier = (ZcEbSupplier) object;        SupplierIntegrityManage integrityManage = (SupplierIntegrityManage) listCursor        .getCurrentObject();        integrityManage.setSupplier(supplier);        setEditingObject(integrityManage);        projCodeChange();      }    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      System.out.println(showDatas.size() + "..................");      for (int i = 0; i < showDatas.size(); i++) {        ZcEbSupplier rowData = (ZcEbSupplier) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getLinkMan();        data[i][col++] = rowData.getName();        data[i][col++] = rowData.getAddress();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }  }  /**   * 代理机构   */  private class ZcEbDelgOrgFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbDelgOrgFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      for (Object object : selectedDatas) {        ZcEbSupplier supplier = (ZcEbSupplier) object;        SupplierIntegrityManage integrityManage = (SupplierIntegrityManage) listCursor        .getCurrentObject();        integrityManage.setSupplier(supplier);        setEditingObject(supplier);        projCodeChange();      }    }    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      System.out.println(showDatas.size() + "..................");      for (int i = 0; i < showDatas.size(); i++) {        ZcEbProj rowData = (ZcEbProj) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getProjName();        data[i][col++] = AsValDataCache.getName("ZC_EB_PUR_TYPE",        rowData.getPurType());        data[i][col++] = rowData.getManager();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }      };      return model;    }    public boolean isMultipleSelect() {      return false;    }    public boolean beforeSelect(ElementConditionDto dto) {      SupplierIntegrityManage integrityManage = listCursor      .getCurrentObject();      if (integrityManage.getSupplier().getName() == null      || integrityManage.getSupplier().getLinkMan() == null) {        JOptionPane.showMessageDialog(parent, "请先选择供应商", "提示",        JOptionPane.INFORMATION_MESSAGE);        return false;      }      suppid = integrityManage.getSupplier().getCode();      return true;    }  }}
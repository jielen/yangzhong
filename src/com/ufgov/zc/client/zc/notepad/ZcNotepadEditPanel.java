package com.ufgov.zc.client.zc.notepad;import java.awt.Color;import java.awt.Font;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.Date;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JComponent;import javax.swing.JOptionPane;import javax.swing.JTabbedPane;import javax.swing.SwingUtilities;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import org.apache.log4j.Logger;import com.ufgov.smartclient.component.table.fixedtable.JPageableFixedTable;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.ZcEbProArgueDetailToTableModelConverter;import com.ufgov.zc.client.common.converter.zc.ZcNotepadToTableModelConverter;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.JTablePanel;import com.ufgov.zc.client.component.button.AddButton;import com.ufgov.zc.client.component.button.DeleteButton;import com.ufgov.zc.client.component.button.EditButton;import com.ufgov.zc.client.component.button.ExitButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.PrintButton;import com.ufgov.zc.client.component.button.SaveButton;import com.ufgov.zc.client.component.ui.fieldeditor.AbstractFieldEditor;import com.ufgov.zc.client.component.zc.AbstractMainSubEditPanel;import com.ufgov.zc.client.component.zc.fieldeditor.DateFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.ForeignEntityFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextAreaFieldEditor;import com.ufgov.zc.client.component.zc.fieldeditor.TextFieldEditor;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.datacache.CompanyDataCache;import com.ufgov.zc.client.util.ListUtil;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.util.DigestUtil;import com.ufgov.zc.common.system.util.ObjectUtil;import com.ufgov.zc.common.system.util.StringTools;import com.ufgov.zc.common.zc.foreignentity.IForeignEntityHandler;import com.ufgov.zc.common.zc.model.ZcBaseBill;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.model.ZcEbProArgue;import com.ufgov.zc.common.zc.model.ZcNotepad;import com.ufgov.zc.common.zc.publish.IZcNotepadDelegate;public class ZcNotepadEditPanel extends AbstractMainSubEditPanel {  private static final Logger logger = Logger.getLogger(ZcNotepadEditPanel.class);  private static final String compoId = "ZC_NOTEPAD";  private final ListCursor listCursor;  private IZcNotepadDelegate zcNotepadDelegate = (IZcNotepadDelegate) ServiceFactory.create(IZcNotepadDelegate.class,  "zcNotepadDelegate");  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private FuncButton addButton = new AddButton();  private FuncButton saveButton = new SaveButton();  private FuncButton deleteButton = new DeleteButton();  private FuncButton editButton = new EditButton();  private FuncButton exitButton = new ExitButton();  private FuncButton helpButton = new HelpButton();  public FuncButton printButton = new PrintButton();  private ZcNotepad oldSupplier;  private ZcNotepadListPanel listPanel;  private JTablePanel tablePanel = new JTablePanel();  private ZcNotepadEditPanel self = this;  private GkBaseDialog parent;  private String pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;  private BillElementMeta billElementMeta = BillElementMeta.getBillElementMetaWithoutNd(compoId);  private JTabbedPane tabPane;  private JTablePanel tablePanelNotes = new JTablePanel("tablePanelNotes");  public ZcNotepadEditPanel(ZcNotepadDialog dialog, ListCursor listCursor, String tabStatus, ZcNotepadListPanel listPanel) {    super(new ZcNotepad(), compoId);    this.listCursor = listCursor;    this.listPanel = listPanel;    this.parent = dialog;    this.workPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), LangTransMeta.translate("ZC_NOTEPADE_TITLE"),    TitledBorder.CENTER, TitledBorder.TOP, new Font("宋体", Font.BOLD, 15), Color.BLUE));    this.colCount = 3;    init();    requestMeta.setCompoId(compoId);    refreshData();    updateFieldEditorsEditable();  }  private void refreshData() {    refreshTopData();    refreshSubTableData();  }  public void refreshTopData() {    ZcNotepad zcNotepad = (ZcNotepad) listCursor.getCurrentObject();    if (zcNotepad == null) {// 新增页面selectBrandSqlPart      this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;      zcNotepad = new ZcNotepad();      zcNotepad.setEditDate(new Date());      zcNotepad.setYear(this.requestMeta.getSvNd() + "");      zcNotepad.setCoCode(requestMeta.getSvCoCode());      zcNotepad.setEditUserId(requestMeta.getSvUserID());      zcNotepad.setEditUserName(requestMeta.getSvUserName());      listCursor.getDataList().add(zcNotepad);    } else if (zcNotepad.getContent() == null) {      this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    }    this.setEditingObject(zcNotepad);    // updateWFEditorEditable(zcNotepad, requestMeta);    setOldObject();  }  @Override  public List<AbstractFieldEditor> createFieldEditors() {    String columNames[] = { "任务编号", "任务名称", "预算", "采购类型", "单位代码", "采购人", "备注", "联系人" };    ZcEbEntrustFnHandler handler = new ZcEbEntrustFnHandler(columNames);    ElementConditionDto dto = new ElementConditionDto();    dto.setUserId(requestMeta.getSvUserID());    ForeignEntityFieldEditor snFiled = new ForeignEntityFieldEditor("ZcEbEntrust.getEntrustForNotepad", dto, 20, handler, columNames, "任务编号",      "snCode");    snFiled.setEnabled(false);    List<AbstractFieldEditor> editorList = new ArrayList<AbstractFieldEditor>();    editorList.add(snFiled);    TextFieldEditor leader = new TextFieldEditor("编制人", "editUserName");    leader.setEnabled(false);    editorList.add(leader);    DateFieldEditor argueTime = new DateFieldEditor("编制时间", "editDate");    argueTime.setEnabled(false);    editorList.add(argueTime);    TextFieldEditor proNameEditor = new TextFieldEditor(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJECT_NAME), "entrustName");    proNameEditor.setEnabled(false);    editorList.add(proNameEditor);    //    TextFieldEditor argueAddress = new TextFieldEditor("标    题", "title");    //    //    editorList.add(argueAddress);    TextAreaFieldEditor argueOpinions = new TextAreaFieldEditor("内     容", "content", 1000, 7, 6);    editorList.add(argueOpinions);    return editorList;  }  @Override  protected void updateFieldEditorsEditable() {    super.updateFieldEditors();    if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_NEW) || this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_EDIT)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        if (fd.getFieldName() != null          && (fd.getFieldName().equals("editUserName") || fd.getFieldName().equals("entrustName") || fd.getFieldName().equals("snCode"))) {          fd.setEnabled(false);        } else {          fd.setEnabled(true);        }      }      this.updateEditable(true);      this.saveButton.setEnabled(true);      this.editButton.setEnabled(false);    } else if (this.pageStatus.equals(ZcSettingConstants.PAGE_STATUS_BROWSE)) {      for (AbstractFieldEditor fd : this.fieldEditors) {        fd.setEnabled(false);      }      this.updateEditable(false);      this.saveButton.setEnabled(false);      this.editButton.setEnabled(true);    }  }  private void updateEditable(boolean flag) {    this.tablePanel.getTable().setEnabled(flag);    if (!flag) {      ZcEbProArgueDetailToTableModelConverter.setPageStatus("NOT_EDITABLE");    } else {      ZcEbProArgueDetailToTableModelConverter.setPageStatus("EDITABLE");    }  }  private void setOldObject() {    this.oldSupplier = (ZcNotepad) ObjectUtil.deepCopy(listCursor.getCurrentObject());  }  @Override  public void initToolBar(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(compoId);    // toolBar.add(addButton);    toolBar.add(editButton);    toolBar.add(saveButton);    toolBar.add(deleteButton);    toolBar.add(printButton);    toolBar.add(exitButton);    toolBar.add(helpButton);    addButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doAdd();      }    });    editButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doEdit();      }    });    deleteButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doDelete();      }    });    saveButton.addActionListener(new ActionListener() {      @Override      public void actionPerformed(ActionEvent e) {        doSave();      }    });    exitButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doExit();      }    });    helpButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doHelp();      }    });    printButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doPrint();      }    });  }  private void refreshAll(ZcEbProArgue afterSaveBill, boolean isRefreshButton) {    this.listCursor.setCurrentObject(afterSaveBill);    refreshData();    //    if (isRefreshButton) {    //      setButtonStatus(afterSaveBill, requestMeta, this.listCursor);    //    }  }  /*   * 流程跟踪   */  private void doTrace() {    ZcBaseBill bean = (ZcBaseBill) this.listCursor.getCurrentObject();    if (bean == null) {      return;    }    ZcUtil.showTraceDialog(bean, compoId);  }  private void doAdd() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_NEW;    ZcNotepad zcNotepad = new ZcNotepad();    listCursor.setCurrentObject(zcNotepad);    // setEditingObject(zcEbProArgue);    refreshData();    updateFieldEditorsEditable();    //setButtonStatus();  }  private void doEdit() {    this.pageStatus = ZcSettingConstants.PAGE_STATUS_EDIT;    updateFieldEditorsEditable();    //setButtonStatus();  }  private void doDelete() {    ZcNotepad zcNotepad = (ZcNotepad) this.listCursor.getCurrentObject();    int num = JOptionPane.showConfirmDialog(this, "确认删除当前数据？", "删除确认", 0);    if (num == JOptionPane.YES_OPTION) {      String errorInfo = "";      try {        this.zcNotepadDelegate.doDelete(zcNotepad.getNotepadId(), requestMeta);        JOptionPane.showMessageDialog(self, "删除成功！", "提示", JOptionPane.INFORMATION_MESSAGE);        this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;        this.listCursor.removeCurrentObject();        refreshData();        updateFieldEditorsEditable();      } catch (Exception e) {        logger.error(e.getMessage(), e);        errorInfo += e.getMessage();        JOptionPane.showMessageDialog(this, "删除失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      }    }  }  private void doPrint() {    ZcNotepad zcNotepad = (ZcNotepad) this.listCursor.getCurrentObject();    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText0(zcNotepad.getEntrustCode());    List list = zcNotepadDelegate.getZcNotepads(dto, requestMeta);    if (list == null || list.size() == 0) {      JOptionPane.showMessageDialog(this, "没有工作日志，不需要打印！", "提示", 0);      return;    }    this.requestMeta.setFuncId(this.printButton.getFuncId());    this.requestMeta.setPageType(this.compoId + "_L");    try {      String snCode = zcNotepad.getEntrustCode();      String condition = " T.ENTRUST_CODE='" + snCode + "' order by EDIT_DATE";    } catch (Exception e) {      logger.error(e.getMessage(), e);      JOptionPane.showMessageDialog(this, "打印出错！\n" + e.getMessage(), "错误", 0);    }  }  private void doPrevious() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(this.oldSupplier);      }    }    listCursor.previous();    refreshData();    //setButtonStatus();    this.updateFieldEditorsEditable();  }  private void doNext() {    stopTableEditing();    if (isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        if (!doSave()) {          return;        }      } else {        listCursor.setCurrentObject(this.oldSupplier);      }    }    listCursor.next();    refreshData();    //setButtonStatus();    this.updateFieldEditorsEditable();  }  public void doExit() {    stopTableEditing();    //    if (isDataChanged()) {    //    //      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);    //    //      if (num == JOptionPane.YES_OPTION) {    //    //        if (!doSave()) {    //    //          return;    //    //        }    //    //      }    //    //    }    this.parent.dispose();  }  public boolean doSave() {    stopTableEditing();    if (!isDataChanged()) {      JOptionPane.showMessageDialog(self, "数据未发生变化，不需要保存！", "提示", JOptionPane.INFORMATION_MESSAGE);      return false;    }    ZcNotepad zcNotepad = (ZcNotepad) this.listCursor.getCurrentObject();    if (!checkBeforeSave())      return false;    boolean success = true;    String errorInfo = "";    zcNotepad.setContent(StringTools.replaceBlank(zcNotepad.getContent()));    try {      zcNotepad = zcNotepadDelegate.doSave(zcNotepad, requestMeta);    } catch (Exception e) {      logger.error(e.getMessage(), e);      success = false;      errorInfo += e.getMessage();    }    if (success) {      this.listCursor.setCurrentObject(zcNotepad);      if (this.listPanel != null)        this.listPanel.refreshCurrentTabData();      JOptionPane.showMessageDialog(self, "保存成功！", "提示", JOptionPane.INFORMATION_MESSAGE);      this.pageStatus = ZcSettingConstants.PAGE_STATUS_BROWSE;      updateFieldEditorsEditable();      this.refreshData();      setOldObject();      return true;    } else {      JOptionPane.showMessageDialog(this, "保存失败 ！\n" + errorInfo, "错误", JOptionPane.ERROR_MESSAGE);      return false;    }  }  private boolean checkBeforeSave() {    List notNullBillElementList = this.billElementMeta.getNotNullBillElement();    ZcNotepad zcNotepad = (ZcNotepad) this.listCursor.getCurrentObject();    StringBuilder errorInfo = new StringBuilder();    String validateInfo = ZcUtil.validateBillElementNull(zcNotepad, notNullBillElementList);    if (errorInfo.length() != 0) {      JOptionPane.showMessageDialog(this.parent, errorInfo.toString(), "提示", JOptionPane.WARNING_MESSAGE);      return false;    }    return true;  }  public JComponent createSubBillPanel() {    tabPane = new JTabbedPane();    tablePanelNotes.init();    tablePanelNotes.getSearchBar().setVisible(false);    tablePanelNotes.setTablePreferencesKey(this.getClass().getName() + "_dt");    tabPane.addTab("日志记录", tablePanelNotes);    tablePanelNotes.getTable().addMouseListener(new MouseAdapter() {      public void mouseClicked(MouseEvent e) {        if (SwingUtilities.isLeftMouseButton(e)) {          MyTableModel model = (MyTableModel) tablePanelNotes.getTable().getModel();          int row = tablePanelNotes.getTable().getSelectedRow();          List viewList = (List) ObjectUtil.deepCopy(ListUtil.convertToTableViewOrderList(model.getList(), tablePanelNotes.getTable()));          self.listCursor.setCurrentObject(viewList.get(row));          self.refreshTopData();          resetButtonsEnabled();        }      }    });    return tabPane;  }  private void resetButtonsEnabled() {    ZcNotepad zcNotepad = (ZcNotepad) this.listCursor.getCurrentObject();    if (requestMeta.getSvUserID().equals(zcNotepad.getEditUserId())) {      self.saveButton.setEnabled(false);      self.editButton.setEnabled(true);    } else {      self.saveButton.setEnabled(false);      self.editButton.setEnabled(false);    }  }  protected JTablePanel[] getSubTables() {    return new JTablePanel[] { tablePanelNotes };  }  private void refreshSubTableData() {    ZcNotepad zcNotepad = (ZcNotepad) listCursor.getCurrentObject();    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText0(zcNotepad.getEntrustCode());    tablePanelNotes.setTableModel(ZcNotepadToTableModelConverter.convertToTableModel(zcNotepadDelegate.getZcNotepads(dto, requestMeta)));  }  public void doHelp() {    //setButtonStatus();  }  private void stopTableEditing() {    JPageableFixedTable table = this.tablePanel.getTable();    if (table.isEditing()) {      table.getCellEditor().stopCellEditing();    }  }  public boolean isDataChanged() {    return !DigestUtil.digest(oldSupplier).equals(DigestUtil.digest(listCursor.getCurrentObject()));  }  public String getPageStatus() {    return pageStatus;  }  public void setPageStatus(String pageStatus) {    this.pageStatus = pageStatus;  }  public boolean isCurrentUser() {    ZcNotepad zcNotepad = (ZcNotepad) this.listCursor.getCurrentObject();    if (zcNotepad.getEditUserId() == null || requestMeta.getSvUserID().equals(zcNotepad.getEditUserId())) {      return true;    } else {      return false;    }  }  public boolean isCanSave() {    if (saveButton.isVisible() && saveButton.isEnabled()) {      return true;    } else {      return false;    }  }  public class ZcEbEntrustFnHandler implements IForeignEntityHandler {    private String columNames[];    public ZcEbEntrustFnHandler(String columNames[]) {      this.columNames = columNames;    }    public void excute(List selectedDatas) {      ZcNotepad zcNotepad = (ZcNotepad) listCursor.getCurrentObject();      for (Object object : selectedDatas) {        ZcEbEntrust entrust = (ZcEbEntrust) object;        zcNotepad.setEntrustCode(entrust.getSn());        zcNotepad.setSnCode(entrust.getSnCode());        zcNotepad.setEntrustName(entrust.getZcMakeName());        setEditingObject(zcNotepad);      }    }    @Override    public TableModel createTableModel(List showDatas) {      Object data[][] = new Object[showDatas.size()][columNames.length];      for (int i = 0; i < showDatas.size(); i++) {        ZcEbEntrust rowData = (ZcEbEntrust) showDatas.get(i);        int col = 0;        data[i][col++] = rowData.getZcMakeCode();        data[i][col++] = rowData.getZcMakeName();        data[i][col++] = rowData.getZcMoneyBiSum();        data[i][col++] = AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", rowData.getZcPifuCgfs());        data[i][col++] = rowData.getCoCode();        data[i][col++] = CompanyDataCache.getName(rowData.getCoCode());        data[i][col++] = rowData.getRemark();        data[i][col++] = rowData.getZcMakeLinkman();      }      MyTableModel model = new MyTableModel(data, columNames) {        public boolean isCellEditable(int row, int colum) {          return false;        }        public Class getColumnClass(int column) {          if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {            for (int row = 0; row < this.getRowCount(); row++) {              if (getValueAt(row, column) != null) {                return getValueAt(row, column).getClass();              }            }          }          return Object.class;        }      };      return model;    }    @Override    public boolean isMultipleSelect() {      return false;    }  }}
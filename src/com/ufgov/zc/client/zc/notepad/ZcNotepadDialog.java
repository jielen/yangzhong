package com.ufgov.zc.client.zc.notepad;import java.awt.BorderLayout;import java.awt.Dialog;import java.awt.Dimension;import java.awt.Window;import java.awt.event.WindowAdapter;import java.util.ArrayList;import java.util.List;import javax.swing.JDialog;import javax.swing.JOptionPane;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.ListCursor;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.UIConstants;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.GkBaseDialog;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.model.ZcNotepad;import com.ufgov.zc.common.zc.publish.IZcEbBaseServiceDelegate;import com.ufgov.zc.common.zc.publish.IZcNotepadDelegate;public class ZcNotepadDialog extends GkBaseDialog {  private static final long serialVersionUID = -9120246494342698007L;  private ZcNotepadDialog self = this;  private ZcNotepadListPanel listPanel;  private ZcNotepadEditPanel editPanel;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  public ZcNotepadDialog(ZcNotepadListPanel parent, List viewList, int row) {    super(parent.getParentWindow(), Dialog.ModalityType.APPLICATION_MODAL);    this.listPanel = parent;    editPanel = new ZcNotepadEditPanel(this.self, new ListCursor(viewList, row), "0", new ZcNotepadListPanel());    init();  }  public ZcNotepadDialog(String sn, Window owner) {    super(owner, Dialog.ModalityType.APPLICATION_MODAL);    List viewList = new ArrayList();//    viewList.addAll(initNotepadByNotepad(sn));    if (viewList.size() == 0) {      viewList = initNotepadByEntrust(sn);    }    int row = 0;    editPanel = new ZcNotepadEditPanel(this.self, new ListCursor(viewList, row), "0", this.listPanel);    init();  }  private void init() {    setLayout(new BorderLayout());    add(editPanel);    this.setTitle(LangTransMeta.translate("ZC_NOTEPADE_TITLE"));    // this.setMaxSizeWindow();    this.setSize(UIConstants.DIALOG_0_LEVEL_WIDTH, UIConstants.DIALOG_0_LEVEL_HEIGHT);    this.setMinimumSize(new Dimension(800, 600));    setVisible(true);    setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);    this.addWindowListener(new WindowAdapter() {    });  }  private List initNotepadByNotepad(String sn) {    IZcNotepadDelegate zcNotepadDelegate = (IZcNotepadDelegate) ServiceFactory.create(IZcNotepadDelegate.class, "zcNotepadDelegate");    ElementConditionDto dto = new ElementConditionDto();    dto.setUserId(requestMeta.getSvUserID());    dto.setZcText0(sn);    List viewList = zcNotepadDelegate.getZcNotepads(dto, requestMeta);    return viewList;  }  private ArrayList initNotepadByEntrust(String sn) {    ArrayList viewList = new ArrayList();    IZcEbBaseServiceDelegate zcEbBaseServiceDelegate = (IZcEbBaseServiceDelegate) ServiceFactory.create(IZcEbBaseServiceDelegate.class,      "zcEbBaseServiceDelegate");    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText0(sn);    ZcEbEntrust en = (ZcEbEntrust) zcEbBaseServiceDelegate.queryObject("ZcEbEntrust.getEntrustForNotepad", dto, requestMeta);    if (en != null) {      ZcNotepad padt = new ZcNotepad();      padt.setEntrustCode(en.getSn());      padt.setSnCode(en.getSnCode());      padt.setEntrustName(en.getZcMakeName());      viewList.add(padt);    }    return viewList;  }  protected boolean dialogIsClosing() {	  	  if(!editPanel.isCanSave()) return true;    if (editPanel.isDataChanged()) {      int num = JOptionPane.showConfirmDialog(this, "当前页面数据已修改，是否要保存", "保存确认", 0);      if (num == JOptionPane.YES_OPTION) {        return editPanel.doSave();      }    }    if (this.listPanel != null) {      this.listPanel.refreshCurrentTabData();    }    return true;  }}
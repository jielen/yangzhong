/** * ZcEbOpenBidTeamToTableModelConverter.java * com.ufgov.gk.client.zc.zcebsignup * Administrator * 2010-5-26 */package com.ufgov.zc.client.common.converter;import java.util.ArrayList;import java.util.List;import java.util.Vector;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.zc.model.ZcEbOpenBidTeam;import com.ufgov.zc.common.zc.model.ZcEbOpenBidTeamMember;import com.ufgov.zc.common.zc.model.ZcEbOpenBidTeamPack;/** * @author Administrator * */public class ZcEbOpenBidTeamToTableModelConverter {  public TableModel convertToTableModel(List zcEbOpenBidTeamLst) {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJ_CODE));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PROJ_NAME));    names.add("开标组名称");    names.add("创建人");    names.add("日期");    if (zcEbOpenBidTeamLst != null && zcEbOpenBidTeamLst.size() > 0) {      for (int i = 0; i < zcEbOpenBidTeamLst.size(); i++) {        Vector rowData = new Vector();        ZcEbOpenBidTeam bt = (ZcEbOpenBidTeam) zcEbOpenBidTeamLst.get(i);        rowData.add(bt.getProjCode());        rowData.add(bt.getProjName());        rowData.add(bt.getTeamName());        rowData.add(bt.getCreator());        rowData.add(bt.getCreatDate());        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(zcEbOpenBidTeamLst);    return tableModel;  }  public TableModel convertMembersToTableModel(List deList) {    int i = 0;    for (Object object : deList) {      i++;      ZcEbOpenBidTeamMember member = (ZcEbOpenBidTeamMember) object;      member.setTempGuid(Guid.genID() + i);    }    BeanTableModel tm = new BeanTableModel() {      public boolean isCellEditable(int row, int column) {        String identifier = this.getColumnIdentifier(column);        return super.isCellEditable(row, column);      }    };    tm.setOidFieldName("tempGuid");    String[] colums = new String[] { "MEMBER_TYPE", "MEMBER_NAME", "REMARK", "DUTY", "DEPARTMENT", "TEL" };    String[] names = new String[] { "memberType", "memberName", "remark", "duty", "department", "tel"};    tm.setDataBean(deList, createColumnBeanPropertyPairs(colums, names));    return tm;  }  public TableModel convertPacksToTableModel(List deList) {    int i = 0;    for (Object object : deList) {      i++;      ZcEbOpenBidTeamPack pack = (ZcEbOpenBidTeamPack) object;      pack.setTempGuid(Guid.genID() + i);    }    BeanTableModel tm = new BeanTableModel() {      public boolean isCellEditable(int row, int column) {        String identifier = this.getColumnIdentifier(column);        if (identifier.equals("PACK_NAME")) {          return true;        }        return false;      }    };    tm.setOidFieldName("tempGuid");    String[] colums = new String[] { "PACK_NAME", "PACK_DESC" };    String[] names = new String[] { "packName", "packDesc" };    tm.setDataBean(deList, createColumnBeanPropertyPairs(colums, names));    return tm;  }  private List<ColumnBeanPropertyPair> createColumnBeanPropertyPairs(String[] colums, String[] names) {    List<ColumnBeanPropertyPair> pairList = new ArrayList<ColumnBeanPropertyPair>();    for (int i = 0; i < colums.length; i++) {      ColumnBeanPropertyPair pair = new ColumnBeanPropertyPair();      pair.setColumnIdentifier(colums[i]);      pair.setBeanPropertyName(names[i]);      pairList.add(pair);    }    return pairList;  }}
package com.ufgov.zc.client.common.converter;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.util.CodeNameHandler;import com.ufgov.zc.common.bi.model.BiCdTrack;import com.ufgov.zc.common.system.constants.BiElementConstants;public class BiCdTrackToTableModelConverter {  public static DefaultTableModel convert(List biCdTrackList, BillElementMeta bem) {    CodeNameHandler.handleNames(biCdTrackList);    DefaultTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_ND));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_BI_CD_TRACK_ID));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_INPUT_GROUP_ID));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_ORIGIN_BALANCE_ID));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_ORG_MONEY));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_CUR_MONEY));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_CO_CODE));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_CO_NAME));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_B_ACC_CODE));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_B_ACC_NAME));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_FUND_NAME));    if (bem.isElementInclude(BiElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_INCEPTDOC_NAME));    }    if (bem.isElementInclude(BiElementConstants.FIELD_NAME_SENDDOC_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_SENDDOC_NAME));    }    if (bem.isElementInclude(BiElementConstants.FIELD_NAME_ORG_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_ORG_NAME));    }    if (bem.isElementInclude(BiElementConstants.FIELD_NAME_ORIGIN_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_ORIGIN_NAME));    }    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_PAYTYPE_NAME));    if (bem.isElementInclude(BiElementConstants.FIELD_NAME_MANAGE_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_MANAGE_NAME));    }    if (bem.isElementInclude(BiElementConstants.FIELD_NAME_PROJECT_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_PROJECT_NAME));    }    if (bem.isElementInclude(BiElementConstants.FIELD_NAME_PAYOUT_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_PAYOUT_NAME));    }    if (bem.isElementInclude(BiElementConstants.FIELD_NAME_OUTLAY_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_OUTLAY_CODE));      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_OUTLAY_NAME));    }    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_REMARK));    for (int i = 0; i < biCdTrackList.size(); i++) {      Vector eachRowData = new Vector();      BiCdTrack value = (BiCdTrack) biCdTrackList.get(i);      eachRowData.add(value.getNd());      eachRowData.add(value.getBiCdTrackId());      eachRowData.add(value.getInputGroupId());      eachRowData.add(value.getOriginBalanceId());      eachRowData.add(value.getOrgMoney());      eachRowData.add(value.getCurMoney());      eachRowData.add(value.getCoCode());      eachRowData.add(value.getCoName());      eachRowData.add(value.getBaccCode());      eachRowData.add(value.getBaccName());      eachRowData.add(value.getFundName());      if (bem.isElementInclude(BiElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {        eachRowData.add(value.getInceptDocName());      }      if (bem.isElementInclude(BiElementConstants.FIELD_NAME_SENDDOC_CODE)) {        eachRowData.add(value.getSendDocName());      }      if (bem.isElementInclude(BiElementConstants.FIELD_NAME_ORG_CODE)) {        eachRowData.add(value.getOrgName());      }      if (bem.isElementInclude(BiElementConstants.FIELD_NAME_ORIGIN_CODE)) {        eachRowData.add(value.getOriginName());      }      eachRowData.add(value.getPaytypeName());      if (bem.isElementInclude(BiElementConstants.FIELD_NAME_MANAGE_CODE)) {        eachRowData.add(value.getManageName());      }      if (bem.isElementInclude(BiElementConstants.FIELD_NAME_PROJECT_CODE)) {        eachRowData.add(value.getProjectName());      }      if (bem.isElementInclude(BiElementConstants.FIELD_NAME_PAYOUT_CODE)) {        eachRowData.add(value.getPayoutName());      }      if (bem.isElementInclude(BiElementConstants.FIELD_NAME_OUTLAY_CODE)) {        eachRowData.add(value.getOutlayCode());        eachRowData.add(value.getOutlayName());      }      eachRowData.add(value.getRemark());      values.add(eachRowData);    }    tableModel = new DefaultTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    return tableModel;  }}
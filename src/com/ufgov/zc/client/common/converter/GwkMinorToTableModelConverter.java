package com.ufgov.zc.client.common.converter;import java.util.List;import java.util.Vector;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.CodeNameHandler;import com.ufgov.zc.common.gwk.model.CpCcaccountInfo;import com.ufgov.zc.common.gwk.model.CpCcbankAcc;import com.ufgov.zc.common.gwk.model.CpCcgatherDetail;import com.ufgov.zc.common.gwk.model.CpCctradeInfo;import com.ufgov.zc.common.system.constants.CpElementConstants;import com.ufgov.zc.common.system.constants.GwkElementConstants;public class GwkMinorToTableModelConverter {  public static MyTableModel toTradeInfoTableModel(List cctradeInfoList) {    Vector names = new Vector();    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_TRADE_NUM));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CARD_SERIAL));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CARD_USER));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_TRADE_MONEY));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_REMARK));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_GWK_CONTENT));    Vector values = new Vector();    for (int i = 0; i < cctradeInfoList.size(); i++) {      Vector eachRowData = new Vector();      CpCctradeInfo cpCctradeInfo = (CpCctradeInfo) cctradeInfoList.get(i);      eachRowData.add(cpCctradeInfo.getTradeNum());      eachRowData.add(cpCctradeInfo.getCardSerial());      eachRowData.add(cpCctradeInfo.getCardUser());      eachRowData.add(cpCctradeInfo.getTradeMoney());      eachRowData.add(cpCctradeInfo.getRemark());      eachRowData.add(AsValDataCache.getName("VS_GWK_CONTENT", cpCctradeInfo.getContent()));      values.add(eachRowData);    }    MyTableModel cardInfoTableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    cardInfoTableModel.setList(cctradeInfoList);    return cardInfoTableModel;  }  public static MyTableModel toCardInfoTableModel(List ccaccountInfoList) {    Vector names = new Vector();    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CARD_SERIAL));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CARD_USER));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_NAME));    Vector values = new Vector();    for (int i = 0; i < ccaccountInfoList.size(); i++) {      Vector eachRowData = new Vector();      CpCcaccountInfo cpCcaccountInfo = (CpCcaccountInfo) ccaccountInfoList.get(i);      eachRowData.add(cpCcaccountInfo.getCardSerial());      eachRowData.add(cpCcaccountInfo.getCardUser());      eachRowData.add(cpCcaccountInfo.getCoCode());      eachRowData.add(cpCcaccountInfo.getCoName());      values.add(eachRowData);    }    MyTableModel cardInfoTableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    cardInfoTableModel.setList(ccaccountInfoList);    return cardInfoTableModel;  }  public static Vector getCpCcaccountInfoColumnsForListPage(BillElementMeta bem) {    Vector names = new Vector();    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_NAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_SRECE_BANK_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CARD_SERIAL));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CARD_USER));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_STATUS));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CREDIT_NUM));    return names;  }  public static Vector getCpCcaccountInfoForListPage(List cpGwkList, BillElementMeta bem) {    CodeNameHandler.handleNames(cpGwkList);    Vector values = new Vector();    for (int i = 0; i < cpGwkList.size(); i++) {      Vector eachRowData = new Vector();      CpCcaccountInfo cpCcaccountInfo = (CpCcaccountInfo) cpGwkList.get(i);      eachRowData.add(cpCcaccountInfo.getCoCode());      eachRowData.add(cpCcaccountInfo.getCoName());      eachRowData.add(cpCcaccountInfo.getReceBankName());      eachRowData.add(cpCcaccountInfo.getCardSerial());      eachRowData.add(cpCcaccountInfo.getCardUser());      eachRowData.add(cpCcaccountInfo.getStatus());      eachRowData.add(cpCcaccountInfo.getCreditNum());      values.add(eachRowData);    }    return values;  }  public static MyTableModel convertCpCcTradeInfoForQuery(List cpGwkList, BillElementMeta bem) {    CodeNameHandler.handleNames(cpGwkList);    MyTableModel cpGwkTableModel = null;    Vector names = getCpCcTradeInfoColumnsForListPage(bem);    Vector values = getCpCcTradeInfoForListPage(cpGwkList, bem);    cpGwkTableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    cpGwkTableModel.setList(cpGwkList);    return cpGwkTableModel;  }  public static Vector getCpCcTradeInfoColumnsForListPage(BillElementMeta bem) {    Vector names = new Vector();    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_NAME));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_CARD_SERIAL));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_CARD_USER));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_RECE_BANK_CODE));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_RECE_BANK_NAME));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_TRADE_SERIAL_CODE));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_TRADE_DATE));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_TRADE_MONEY));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_BANK_ACCOUNT));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_CONFIRM_TREADE_USER));    return names;  }  public static Vector getCpCcTradeInfoForListPage(List cpGwkList, BillElementMeta bem) {    CodeNameHandler.handleNames(cpGwkList);    Vector values = new Vector();    for (int i = 0; i < cpGwkList.size(); i++) {      Vector eachRowData = new Vector();      CpCctradeInfo cpCcTradeInfo = (CpCctradeInfo) cpGwkList.get(i);      eachRowData.add(cpCcTradeInfo.getCoCode());      eachRowData.add(cpCcTradeInfo.getCoName());      eachRowData.add(cpCcTradeInfo.getCardSerial());      eachRowData.add(cpCcTradeInfo.getCardUser());      eachRowData.add(cpCcTradeInfo.getReceAccCode());      eachRowData.add(cpCcTradeInfo.getReceAccName());      eachRowData.add(cpCcTradeInfo.getTradeSerialCode());      eachRowData.add(cpCcTradeInfo.getTradeDate());      eachRowData.add(cpCcTradeInfo.getTradeMoney());      eachRowData.add(cpCcTradeInfo.getBankAccount());      eachRowData.add(cpCcTradeInfo.getConfirmTreadeUser());      values.add(eachRowData);    }    return values;  }  public static MyTableModel convertCpCcaccountInfoForQuery(List cpGwkList, BillElementMeta bem) {    CodeNameHandler.handleNames(cpGwkList);    MyTableModel cpGwkTableModel = null;    Vector names = getCpCcaccountInfoColumnsForListPage(bem);    Vector values = getCpCcaccountInfoForListPage(cpGwkList, bem);    cpGwkTableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    cpGwkTableModel.setList(cpGwkList);    return cpGwkTableModel;  }  public static Vector getCpGwkBalAccountColumnsForListPage(BillElementMeta bem) {    Vector names = new Vector();    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_NAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_BANK_ACC_NAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_BANK_ACC_NO));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_BANKNODE_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_BANKNODE_NAME));    return names;  }  public static Vector getCpGwkBalAccountForListPage(List cpGwkList, BillElementMeta bem) {    CodeNameHandler.handleNames(cpGwkList);    Vector values = new Vector();    for (int i = 0; i < cpGwkList.size(); i++) {      Vector eachRowData = new Vector();      CpCcbankAcc cpCcBankAcc = (CpCcbankAcc) cpGwkList.get(i);      eachRowData.add(cpCcBankAcc.getCoName());      eachRowData.add(cpCcBankAcc.getBankAccName());      eachRowData.add(cpCcBankAcc.getBankAccNo());      eachRowData.add(cpCcBankAcc.getBanknodeCode());      eachRowData.add(cpCcBankAcc.getBanknodeName());      values.add(eachRowData);    }    return values;  }  public static MyTableModel convertCpGwkBalAccountForQuery(List cpGwkList, BillElementMeta bem) {    CodeNameHandler.handleNames(cpGwkList);    MyTableModel cpGwkTableModel = null;    Vector names = getCpGwkBalAccountColumnsForListPage(bem);    Vector values = getCpGwkBalAccountForListPage(cpGwkList, bem);    cpGwkTableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    cpGwkTableModel.setList(cpGwkList);    return cpGwkTableModel;  }  public static MyTableModel convertCpcoPayMentForQuery(List cpGwkList, BillElementMeta bem) {    CodeNameHandler.handleNames(cpGwkList);    MyTableModel cpGwkTableModel = null;    Vector names = getCpcoPayMentInfoColumnsForListPage(bem);    Vector values = getCpcoPayMentInfoForListPage(cpGwkList, bem);    cpGwkTableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    cpGwkTableModel.setList(cpGwkList);    return cpGwkTableModel;  }  public static Vector getCpcoPayMentInfoColumnsForListPage(BillElementMeta bem) {    Vector names = new Vector();    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_NAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CARD_SERIAL));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CARD_USER));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_VOU_NO));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_RECE_BANK_NAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_B_ACC_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_B_ACC_NAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_OUTLAY_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_OUTLAY_NAME));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_TRADE_MONEY));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_CONSUME_MONEY));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_PAY_BANKACCCODE));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_CONFIRM_TREADE_USER));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_DEAL_STATE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_BANK_DATE));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_CONTENT));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_TRADE_DIDIAN));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_REMARK));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_STATUS));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CREDIT_NUM));    return names;  }  public static Vector getCpcoPayMentInfoForListPage(List cpGwkList, BillElementMeta bem) {    CodeNameHandler.handleNames(cpGwkList);    Vector values = new Vector();    for (int i = 0; i < cpGwkList.size(); i++) {      Vector eachRowData = new Vector();      CpCctradeInfo cpCctradeInfo = (CpCctradeInfo) cpGwkList.get(i);      eachRowData.add(cpCctradeInfo.getCoCode());      eachRowData.add(cpCctradeInfo.getCoName());      eachRowData.add(cpCctradeInfo.getCardSerial());      eachRowData.add(cpCctradeInfo.getCardUser());      eachRowData.add(cpCctradeInfo.getVouNo());      eachRowData.add(cpCctradeInfo.getReceBankName());      eachRowData.add(cpCctradeInfo.getBaccCode());      eachRowData.add(cpCctradeInfo.getBaccName());      eachRowData.add(cpCctradeInfo.getOutlayCode());      eachRowData.add(cpCctradeInfo.getOutlayName());      eachRowData.add(cpCctradeInfo.getTradeMoney());      eachRowData.add(cpCctradeInfo.getConsumeMoney());      eachRowData.add(cpCctradeInfo.getPayBankAccCode());      eachRowData.add(cpCctradeInfo.getConfirmTreadeUser());      eachRowData.add(cpCctradeInfo.getDealState());      eachRowData.add(cpCctradeInfo.getBankDate());      eachRowData.add(cpCctradeInfo.getContent());      eachRowData.add(cpCctradeInfo.getTradeDidian());      eachRowData.add(cpCctradeInfo.getRemark());      values.add(eachRowData);    }    return values;  }  public static MyTableModel convertCpBankPayMentForQuery(List cpGwkList, BillElementMeta bem) {    CodeNameHandler.handleNames(cpGwkList);    MyTableModel cpGwkTableModel = null;    Vector names = getCpBankPayMentInfoColumnsForListPage(bem);    Vector values = getCpBankPayMentInfoForListPage(cpGwkList, bem);    cpGwkTableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    cpGwkTableModel.setList(cpGwkList);    return cpGwkTableModel;  }  public static Vector getCpBankPayMentInfoColumnsForListPage(BillElementMeta bem) {    Vector names = new Vector();    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_NAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_VOUCHER_NO));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_ZERO_BANK_NAME));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_DEAL_STATE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_BANK_DATE));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_RECE_BANK_NAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CARD_SERIAL));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CARD_USER));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_BANK_STATUS));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_PAY_DATE));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_CONSUME_MONEY));    names.add(LangTransMeta.translate(GwkElementConstants.FIELD_TRANS_CONTENT));    return names;  }  public static Vector getCpBankPayMentInfoForListPage(List cpGwkList, BillElementMeta bem) {    CodeNameHandler.handleNames(cpGwkList);    Vector values = new Vector();    for (int i = 0; i < cpGwkList.size(); i++) {      Vector eachRowData = new Vector();      CpCcgatherDetail cpCcgtherDetailInfo = (CpCcgatherDetail) cpGwkList.get(i);      eachRowData.add(cpCcgtherDetailInfo.getCoCode());      eachRowData.add(cpCcgtherDetailInfo.getCoName());      eachRowData.add(cpCcgtherDetailInfo.getVoucherNo());      eachRowData.add(cpCcgtherDetailInfo.getZeroBankName());      eachRowData.add(cpCcgtherDetailInfo.getDealState());      eachRowData.add(cpCcgtherDetailInfo.getBankDate());      eachRowData.add(cpCcgtherDetailInfo.getReceBankName());      eachRowData.add(cpCcgtherDetailInfo.getCardSerial());      eachRowData.add(cpCcgtherDetailInfo.getCardUser());      eachRowData.add(cpCcgtherDetailInfo.getBankStatus());      eachRowData.add(cpCcgtherDetailInfo.getPayDate());      eachRowData.add(cpCcgtherDetailInfo.getConsumeMoney());      eachRowData.add(cpCcgtherDetailInfo.getContent());      values.add(eachRowData);    }    return values;  }}
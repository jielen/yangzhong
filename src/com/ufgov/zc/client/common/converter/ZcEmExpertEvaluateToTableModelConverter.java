package com.ufgov.zc.client.common.converter;import java.util.ArrayList;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.zc.model.EmExpertEvaluation;import com.ufgov.zc.common.zc.model.EmExpertSelectionBill;public class ZcEmExpertEvaluateToTableModelConverter {  public static String EM_EXPERT_CODE = "EM_EXPERT_CODE";  public static String EM_EXPERT_NAME = "EM_EXPERT_NAME";  public static String EM_EXPERT_INDEX1 = "EM_EXPERT_INDEX1";  public static String EM_EXPERT_INDEX2 = "EM_EXPERT_INDEX2";  public static String EM_EXPERT_INDEX3 = "EM_EXPERT_INDEX3";  public static String EM_EXPERT_INDEX4 = "EM_EXPERT_INDEX4";  public static String EM_EXPERT_INDEX5 = "EM_EXPERT_INDEX5";  public static String EM_EXPERT_INDEX6 = "EM_EXPERT_INDEX6";  public static String EM_EXPERT_INDEX7 = "EM_EXPERT_INDEX7";  public static String EM_EXPERT_INDEX8 = "EM_EXPERT_INDEX8";  public static String EM_EXPERT_INDEX9 = "EM_EXPERT_INDEX9";  public static String EM_EXPERT_INDEX10 = "EM_EXPERT_INDEX10";  public static String EM_EXPERT_INDEX11 = "EM_EXPERT_INDEX11";  public static String EM_EXPERT_INDEX12 = "EM_EXPERT_INDEX12";  public static String EM_EXPERT_INDEX13 = "EM_EXPERT_INDEX13";  public static List<ColumnBeanPropertyPair> expertEvalColumns;  public DefaultTableModel convertToTableModel(List<Object> ol) {    MyTableModel tableModel = null;    Vector<String> names = new Vector<String>();    Vector<Object> values = new Vector<Object>();    names.add("抽取单编号");    names.add("项目编号");    names.add("项目名称");    if (ol != null && ol.size() > 0) {      for (int i = 0; i < ol.size(); i++) {        Vector<Object> rowData = new Vector<Object>();        EmExpertSelectionBill o = (EmExpertSelectionBill) ol.get(i);        rowData.add(o.getBillCode());        rowData.add(o.getMakeCode());        rowData.add(o.getMakeName());        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      private static final long serialVersionUID = -939387425559050066L;      @SuppressWarnings("unchecked")      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(ol);    return tableModel;  }  public static TableModel convertEmExpertEvaluationToTableMode(List<EmExpertEvaluation> ol) {    BeanTableModel<EmExpertEvaluation> tm = new BeanTableModel<EmExpertEvaluation>() {      private static final long serialVersionUID = 5844039329387565537L;      @Override      public boolean isCellEditable(int row, int column) {        return true;      }    };    tm.setOidFieldName("tempId");    if (ol != null) {      for (EmExpertEvaluation o : ol) {        o.setTempId(Guid.genID());      }    }    expertEvalColumns = new ArrayList<ColumnBeanPropertyPair>();    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_CODE, "emExpert.emExpertCode", "专家代码"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_NAME, "emExpert.emExpertName", "姓名"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_INDEX1, "emExpertIndex1", "综合评价"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_INDEX2, "emExpertIndex2", "政府采购法律法规认知程度"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_INDEX3, "emExpertIndex3", "业务水平和技能"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_INDEX4, "emExpertIndex4", "带有倾向性或歧视性意见"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_INDEX5, "emExpertIndex5", "有明示或暗示其他评委自己评定的中标结果"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_INDEX6, "emExpertIndex6", "是否加强采购文件以外的条件进行评审"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_INDEX7, "emExpertIndex7", "是否出现评审错误"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_INDEX8, "emExpertIndex8", "有迟到现象"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_INDEX9, "emExpertIndex9", "有早退现象"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_INDEX10, "emExpertIndex10", "是否违反对外通讯规定的行为"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_INDEX11, "emExpertIndex11", "是否擅自离开评标现场"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_INDEX12, "emExpertIndex12", "是否违反评标程序评审"));    expertEvalColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_INDEX13, "emExpertIndex13", "是否完成评标签字"));    tm.setDataBean(ol, expertEvalColumns);    return tm;  }}
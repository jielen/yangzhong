package com.ufgov.zc.client.common.converter;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.List;import java.util.Vector;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.datacache.OrgDataCache;import com.ufgov.zc.client.util.CodeNameHandler;import com.ufgov.zc.common.dp.model.DpDetail;import com.ufgov.zc.common.system.constants.DpElementConstants;public class DpDetailToTableModelConverter {  private static SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");  /**   * 用款计划列表明细数据model；   * @param dpDetailList   * @param billTypeCode   * @return 月度计划   */  public static MyTableModel ConvertDpDetailToTableModelForListPage(List dpDetailList, String billTypeCode) {    BillElementMeta bem = BillElementMeta.getBillElementMeta(billTypeCode);    return convertDpDetailToTableModelForListPage(dpDetailList, bem, false, false, false);  }  public static MyTableModel ConvertDpDetailToTableModelForListPage(List dpDetailList, String billTypeCode,  boolean hideBiBalance) {    BillElementMeta bem = BillElementMeta.getBillElementMeta(billTypeCode);    return convertDpDetailToTableModelForListPage(dpDetailList, bem, false, hideBiBalance, false);  }  public static MyTableModel ConvertDpDetailToTableModelForListPageWithBiReferMoney(List dpDetailList,  String billTypeCode) {    BillElementMeta bem = BillElementMeta.getBillElementMeta(billTypeCode);    return convertDpDetailToTableModelForListPage(dpDetailList, bem, false, false, true);  }  /**   * 用款计划列表明细数据model；   * @param dpDetailList   * @param billTypeCode   * @param isSeasonDpDetail 是否为季度编制计划   * @return   */  public static MyTableModel ConvertDpDetailToTableModelForListPage(List dpDetailList, BillElementMeta bem,  boolean isSeasonDpDetail) {    return convertDpDetailToTableModelForListPage(dpDetailList, bem, isSeasonDpDetail, false, false);  }  /**   * 用款计划查询model   * @param isBiMoneyShow 是否显示bi金额   */  public static MyTableModel ConvertDpDetailToTableModelForQueryListPage(List dpDetailList,  BillElementMeta bem, boolean isSeasonDpDetail, boolean isBiMoneyShow) {    return convertDpDetailToTableModelForListPage(dpDetailList, bem, isSeasonDpDetail, true, false);  }  public static Vector getDpDetailColumnForListPage(BillElementMeta bem, boolean isSeasonDpDetail,  boolean hideBiMoney, boolean showBiReferMoney) {    Vector names = new Vector();    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_DP_DETAIL_ID));    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_PROC_DATE));    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_PM_ADJUST_CODE));    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_ORG_MONEY));    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_CUR_MONEY));    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_ND));    if (isSeasonDpDetail) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_SEASON_NAME));//季度编计划    } else      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_MONTH));//月计划    if (!hideBiMoney) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_BI_MONEY));//指标金额      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_BI_BALANCE));//指标余额      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_BI_PAYSUM));//支付金额      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_USE_PERCENTAGE));    }    if (showBiReferMoney) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_BI_REFER_MONEY));//指标参考值    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_INCEPTDOC_NAME));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_BI_TARGET_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_BI_TARGET_CODE));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_SENDDOC_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_SENDDOC_NAME));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_ORG_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_ORG_NAME));    }    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_CO_CODE));    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_CO_NAME));    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_ORIGIN_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_ORIGIN_NAME));    }    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_PAYTYPE_NAME));    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_B_ACC_CODE));    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_B_ACC_NAME));    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_MANAGE_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_MANAGE_NAME));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_PROJECT_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_PROJECT_CODE));      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_PROJECT_NAME));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_FUND_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_FUND_NAME));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_PAYOUT_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_PAYOUT_NAME));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_OUTLAY_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_OUTLAY_CODE));      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_OUTLAY_NAME));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR1)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_D_ATTR1_NAME));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR2)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_D_ATTR2_NAME));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR3)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_D_ATTR3_NAME));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR4)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_D_ATTR4_NAME));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR5)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_D_ATTR5_NAME));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_COUNTERSIGNER)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_COUNTERSIGNER));    }    if (bem.isElementInclude(DpElementConstants.FIELD_NAME_IS_COUNTERSIGN)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_IS_COUNTERSIGN));    }    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_REMARK));    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_BATCH_INFO));    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_INPUT_GROUP_ID));    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_DEAL_STATE));    return names;  }  public static Vector getDpDetailRecordsForListPage(List dpDetailList, BillElementMeta bem,  boolean isSeasonDpDetail, boolean hideBiMoney, boolean showBiReferMoney) {    Vector values = new Vector();    for (int i = 0; i < dpDetailList.size(); i++) {      Vector eachRowData = new Vector();      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      eachRowData.add(dpDetail.getDpDetailId());      eachRowData.add(format.format(dpDetail.getProcdate()));      eachRowData.add(dpDetail.getPmAdjustName());      eachRowData.add(dpDetail.getOrgMoney());      eachRowData.add(dpDetail.getCurMoney());      eachRowData.add(dpDetail.getNd());      if (isSeasonDpDetail) {        eachRowData.add(dpDetail.getSeason());//季度      } else {        eachRowData.add(dpDetail.getMonth());//月份      }      if (!hideBiMoney) {        eachRowData.add(dpDetail.getBiMoney());        eachRowData.add(dpDetail.getBiBalance());        eachRowData.add(dpDetail.getBiPaySum());        String pencentage = "";        if (dpDetail.getBiMoney().compareTo(new BigDecimal("0")) > 0) {          BigDecimal temp = dpDetail.getBiPaySum().multiply(new BigDecimal(100)).divide(dpDetail.getBiMoney(),          2, BigDecimal.ROUND_HALF_UP);          pencentage = temp + "%";          if (pencentage.length() == 5) {            pencentage = "0" + pencentage;          }        }        eachRowData.add(pencentage);      }      if (showBiReferMoney) {        eachRowData.add(dpDetail.getBiReferMoney());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {        eachRowData.add(dpDetail.getInceptDocName());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_BI_TARGET_CODE)) {        eachRowData.add(dpDetail.getBiTargetCode());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_SENDDOC_CODE)) {        eachRowData.add(dpDetail.getSendDocName());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_ORG_CODE)) {        eachRowData.add(dpDetail.getOrgName());      }      eachRowData.add(dpDetail.getCoCode());      eachRowData.add(dpDetail.getCoName());      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_ORIGIN_CODE)) {        eachRowData.add(dpDetail.getOriginName());      }      eachRowData.add(dpDetail.getPaytypeName());      eachRowData.add(dpDetail.getBaccCode());      eachRowData.add(dpDetail.getBaccName());      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_MANAGE_CODE)) {        eachRowData.add(dpDetail.getManageName());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_PROJECT_CODE)) {        eachRowData.add(dpDetail.getProjectCode());        eachRowData.add(dpDetail.getProjectName());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_FUND_CODE)) {        eachRowData.add(dpDetail.getFundName());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_PAYOUT_CODE)) {        eachRowData.add(dpDetail.getPayoutName());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_OUTLAY_CODE)) {        eachRowData.add(dpDetail.getOutlayCode());        eachRowData.add(dpDetail.getOutlayName());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR1)) {        eachRowData.add(dpDetail.getDattr1Name());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR2)) {        eachRowData.add(dpDetail.getDattr2Name());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR3)) {        eachRowData.add(dpDetail.getDattr3Name());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR4)) {        eachRowData.add(dpDetail.getDattr4Name());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR5)) {        eachRowData.add(dpDetail.getDattr5Name());      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_COUNTERSIGNER)) {        eachRowData.add(OrgDataCache.getName(dpDetail.getCounterSigner()));      }      if (bem.isElementInclude(DpElementConstants.FIELD_NAME_IS_COUNTERSIGN)) {        String velue = "否";        if (dpDetail.getIsCounterSign().equals("1")) {          velue = "是";        }        eachRowData.add(velue);      }      eachRowData.add(dpDetail.getRemark());      eachRowData.add(dpDetail.getBatchInfo());      eachRowData.add(dpDetail.getInputGroupId());      eachRowData.add(dpDetail.getDealStateName());      values.add(eachRowData);    }    return values;  }  /**   * TODO:修改按照是否显示控制字段   * 用款计划列表明细数据model；   * @param dpDetailList   * @param bem   * @return   */  private static MyTableModel convertDpDetailToTableModelForListPage(List dpDetailList, BillElementMeta bem,  boolean isSeasonDpDetail, boolean hideBiMoney, boolean showBiReferMoney) {    CodeNameHandler.handleNames(dpDetailList);    MyTableModel dpDetailTableModel = null;    Vector names = getDpDetailColumnForListPage(bem, isSeasonDpDetail, hideBiMoney, showBiReferMoney);    Vector values = getDpDetailRecordsForListPage(dpDetailList, bem, isSeasonDpDetail, hideBiMoney,    showBiReferMoney);    dpDetailTableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    dpDetailTableModel.setList(dpDetailList);    return dpDetailTableModel;  }  /*   * 打开计划的编辑界面   */  public static MyTableModel ConvertDpDetailToTableModelForEditPage(List dpDetailList, String billTypeCode) {    BillElementMeta bem = BillElementMeta.getBillElementMeta(billTypeCode);    return convertDpDetailToTableModelForEditPage(dpDetailList, bem, false);  }  /**   *打开计划的编辑界面   * @param isSeasonDpDetail 是否为季度编制计划   * @return   */  public static MyTableModel ConvertDpDetailToTableModelForEditPage(List dpDetailList, BillElementMeta bem,  boolean isSeasonDpDetail) {    return convertDpDetailToTableModelForEditPage(dpDetailList, bem, isSeasonDpDetail);  }  private static MyTableModel convertDpDetailToTableModelForEditPage(List dpDetailList, BillElementMeta bem,  boolean isSeasonDpDetail) {    CodeNameHandler.handleNames(dpDetailList);    MyTableModel dpDetailTableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_DP_DETAIL_ID));    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_INCEPTDOC_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_TRANS_BI_TARGET_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_BI_TARGET_CODE));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_SENDDOC_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_SENDDOC_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_ORG_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_ORG_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_CO_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_CO_CODE));      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_CO_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_ORIGIN_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_ORIGIN_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_PAYTYPE_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_PAYTYPE_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_B_ACC_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_B_ACC_CODE));      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_B_ACC_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_MANAGE_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_MANAGE_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_PROJECT_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_PROJECT_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_FUND_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_FUND_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_PAYOUT_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_PAYOUT_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_OUTLAY_CODE)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_OUTLAY_CODE));      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_OUTLAY_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR1)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_D_ATTR1_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR2)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_D_ATTR2_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR3)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_D_ATTR3_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR4)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_D_ATTR4_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR5)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_D_ATTR5_NAME));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_COUNTERSIGNER)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_COUNTERSIGNER));    }    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_IS_COUNTERSIGN)) {      names.add(LangTransMeta.translate(DpElementConstants.FIELD_TRANS_IS_COUNTERSIGN));    }    for (int i = 0; i < dpDetailList.size(); i++) {      Vector eachRowData = new Vector();      DpDetail dpDetail = (DpDetail) dpDetailList.get(i);      eachRowData.add(dpDetail.getDpDetailId());      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {        eachRowData.add(dpDetail.getInceptDocName());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_BI_TARGET_CODE)) {        eachRowData.add(dpDetail.getBiTargetCode());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_SENDDOC_CODE)) {        eachRowData.add(dpDetail.getSendDocName());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_ORG_CODE)) {        eachRowData.add(dpDetail.getOrgName());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_CO_CODE)) {        eachRowData.add(dpDetail.getCoCode());        eachRowData.add(dpDetail.getCoName());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_ORIGIN_CODE)) {        eachRowData.add(dpDetail.getOriginName());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_PAYTYPE_CODE)) {        eachRowData.add(dpDetail.getPaytypeName());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_B_ACC_CODE)) {        eachRowData.add(dpDetail.getBaccCode());        eachRowData.add(dpDetail.getBaccName());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_MANAGE_CODE)) {        eachRowData.add(dpDetail.getManageName());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_PROJECT_CODE)) {        eachRowData.add(dpDetail.getProjectName());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_FUND_CODE)) {        eachRowData.add(dpDetail.getFundName());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_PAYOUT_CODE)) {        eachRowData.add(dpDetail.getPayoutName());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_OUTLAY_CODE)) {        eachRowData.add(dpDetail.getOutlayCode());        eachRowData.add(dpDetail.getOutlayName());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR1)) {        eachRowData.add(dpDetail.getDattr1Name());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR2)) {        eachRowData.add(dpDetail.getDattr2Name());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR3)) {        eachRowData.add(dpDetail.getDattr3Name());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR4)) {        eachRowData.add(dpDetail.getDattr4Name());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR5)) {        eachRowData.add(dpDetail.getDattr5Name());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_COUNTERSIGNER)) {        eachRowData.add(dpDetail.getCounterSigner());      }      if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_IS_COUNTERSIGN)) {        eachRowData.add(dpDetail.getCounterSign());      }      values.add(eachRowData);    }    dpDetailTableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    dpDetailTableModel.setList(dpDetailList);    return dpDetailTableModel;  }}
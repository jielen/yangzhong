package com.ufgov.zc.client.common.converter;import java.text.SimpleDateFormat;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.datacache.OrgDataCache;import com.ufgov.zc.client.util.CodeNameHandler;import com.ufgov.zc.common.cp.model.CpApply;import com.ufgov.zc.common.system.constants.CpElementConstants;import com.ufgov.zc.common.system.constants.DpElementConstants;public class CpApplyToTableModelConverter {  private static SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");  public static MyTableModel ConvertCpApplyToTableModelForListPage(List cpApplyList, String billTypeCode,  boolean notdisplayBalCol) {    BillElementMeta bem = BillElementMeta.getBillElementMeta(billTypeCode);    return ConvertCpApplyToTableModelForListPage(cpApplyList, bem, notdisplayBalCol);  }  public static MyTableModel ConvertCpApplyToTableModelForListPage(List cpApplyList, BillElementMeta bem,  boolean notdisplayBalCol) {    CodeNameHandler.handleNames(cpApplyList);    Vector<String> names = new Vector<String>();    Vector<Vector<Comparable>> values = new Vector<Vector<Comparable>>();    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CP_APPLY_ID));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_PROC_DATE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_ORG_MONEY));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CUR_MONEY));    if (!notdisplayBalCol) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_DP_BALANCE));      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_DP_PAY_MONEY));      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_DP_TOTAL_MONEY));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_INCEPTDOC_NAME));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_SENDDOC_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_SENDDOC_NAME));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_OPERATION_TYPE_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_OPERATION_TYPE_NAME));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_ORG_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_ORG_NAME));    }    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_NAME));    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_ORIGIN_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_ORIGIN_NAME));    }    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_PAYTYPE_NAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_B_ACC_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_B_ACC_NAME));    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_MANAGE_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_MANAGE_NAME));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_PROJECT_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_PROJECT_CODE));      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_PROJECT_NAME));    }    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_FUND_NAME));    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_PAYOUT_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_PAYOUT_NAME));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_OUTLAY_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_OUTLAY_CODE));      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_OUTLAY_NAME));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_D_ATTR1)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_D_ATTR1_NAME));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_D_ATTR2)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_D_ATTR2_NAME));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_D_ATTR3)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_D_ATTR3_NAME));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_D_ATTR4)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_D_ATTR4_NAME));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_D_ATTR5)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_D_ATTR5_NAME));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_BAL_MODE_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_BAL_MODE_NAME));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_CONTRACT_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CONTRACT_NAME));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_COUNTERSIGNER)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_COUNTERSIGNER));    }    if (bem.isElementInclude(CpElementConstants.FIELD_NAME_IS_COUNTERSIGN)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_IS_COUNTERSIGN));    }    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_REMARK));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_RECE_ACCNAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_RECE_BANKNODENAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_RECE_BANKACCCODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CLEAR_ACC_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CLEAR_ACC_NAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CLEAR_ACC_NO));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CLEAR_BANK_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CLEAR_BANK_NAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CLEAR_BANK_NO));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_SUM_CP_APPLY_ID));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_VOU_NO));    if (cpApplyList != null && cpApplyList.size() > 0) {      for (int i = 0; i < cpApplyList.size(); i++) {        Vector<Comparable> eachRowData = new Vector<Comparable>();        CpApply cpApply = (CpApply) cpApplyList.get(i);        eachRowData.add(cpApply.getCpApplyId());        eachRowData.add(cpApply.getProcDate());        eachRowData.add(cpApply.getOrgMoney());        eachRowData.add(cpApply.getCurMoney());        if (!notdisplayBalCol) {          eachRowData.add(cpApply.getDpBalance());          eachRowData.add(cpApply.getDpPaySum());          eachRowData.add(cpApply.getDpMoney());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {          eachRowData.add(cpApply.getInceptDocName());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_SENDDOC_CODE)) {          eachRowData.add(cpApply.getSendDocName());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_OPERATION_TYPE_CODE)) {          eachRowData.add(cpApply.getOperationTypeName());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_ORG_CODE)) {          eachRowData.add(cpApply.getOrgName());        }        eachRowData.add(cpApply.getCoCode());        eachRowData.add(cpApply.getCoName());        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_ORIGIN_CODE)) {          eachRowData.add(cpApply.getOriginName());        }        eachRowData.add(cpApply.getPaytypeName());        eachRowData.add(cpApply.getBaccCode());        eachRowData.add(cpApply.getBaccName());        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_MANAGE_CODE)) {          eachRowData.add(cpApply.getManageName());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_PROJECT_CODE)) {          eachRowData.add(cpApply.getProjectCode());          eachRowData.add(cpApply.getProjectName());        }        eachRowData.add(cpApply.getFundName());        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_PAYOUT_CODE)) {          eachRowData.add(cpApply.getPayoutName());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_OUTLAY_CODE)) {          eachRowData.add(cpApply.getOutlayCode());          eachRowData.add(cpApply.getOutlayName());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_D_ATTR1)) {          eachRowData.add(cpApply.getDattr1Name());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_D_ATTR2)) {          eachRowData.add(cpApply.getDattr2Name());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_D_ATTR3)) {          eachRowData.add(cpApply.getDattr3Name());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_D_ATTR4)) {          eachRowData.add(cpApply.getDattr4Name());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_D_ATTR5)) {          eachRowData.add(cpApply.getDattr5Name());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_BAL_MODE_CODE)) {          eachRowData.add(cpApply.getBalModeName());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_CONTRACT_CODE)) {          eachRowData.add(cpApply.getContractCode());        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_COUNTERSIGNER)) {          eachRowData.add(OrgDataCache.getName(cpApply.getCounterSigner()));        }        if (bem.isElementInclude(CpElementConstants.FIELD_NAME_IS_COUNTERSIGN)) {          String velue = "否";          if (cpApply.getIsCounterSign().equals("1")) {            velue = "是";          }          eachRowData.add(velue);        }        eachRowData.add(cpApply.getRemark());        eachRowData.add(cpApply.getReceAccName());        eachRowData.add(cpApply.getReceBankNodeName());        eachRowData.add(cpApply.getReceBankAccCode());        eachRowData.add(cpApply.getClearAccCode());        eachRowData.add(cpApply.getClearAccName());        eachRowData.add(cpApply.getClearAccNo());        eachRowData.add(cpApply.getClearBankCode());        eachRowData.add(cpApply.getClearBankName());        eachRowData.add(cpApply.getClearBankNo());        eachRowData.add(cpApply.getSumCpApplyId());        eachRowData.add(cpApply.getVouNo());        values.add(eachRowData);      }    }    MyTableModel cpApplyTableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    cpApplyTableModel.setList(cpApplyList);    return cpApplyTableModel;  }  public static MyTableModel ConvertCpApplyToTableModelForEditPage(List cpApplyList, BillElementMeta bem) {    CodeNameHandler.handleNames(cpApplyList);    Vector<String> names = new Vector<String>();    Vector<Vector<Comparable>> values = new Vector<Vector<Comparable>>();    DefaultTableModel busiBillTableModel = null;    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CP_APPLY_ID));    if (bem.isElementDisplayField(CpElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_INCEPTDOC_NAME));    }    if (bem.isElementDisplayField(CpElementConstants.FIELD_NAME_SENDDOC_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_SENDDOC_NAME));    }    if (bem.isElementDisplayField(CpElementConstants.FIELD_NAME_ORG_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_ORG_NAME));    }    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_CO_NAME));    if (bem.isElementDisplayField(CpElementConstants.FIELD_NAME_ORIGIN_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_ORIGIN_NAME));    }    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_PAYTYPE_NAME));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_B_ACC_CODE));    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_B_ACC_NAME));    if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_MANAGE_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_MANAGE_NAME));    }    if (bem.isElementDisplayField(CpElementConstants.FIELD_NAME_PROJECT_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_PROJECT_NAME));    }    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_FUND_NAME));    if (bem.isElementDisplayField(CpElementConstants.FIELD_NAME_PAYOUT_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_PAYOUT_NAME));    }    if (bem.isElementDisplayField(CpElementConstants.FIELD_NAME_OUTLAY_CODE)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_OUTLAY_CODE));      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_OUTLAY_NAME));    }    names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_REMARK));    if (bem.isElementDisplayField(CpElementConstants.FIELD_NAME_D_ATTR1)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_D_ATTR1_NAME));    }    if (bem.isElementDisplayField(CpElementConstants.FIELD_NAME_D_ATTR2)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_D_ATTR2_NAME));    }    if (bem.isElementDisplayField(CpElementConstants.FIELD_NAME_D_ATTR3)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_D_ATTR3_NAME));    }    if (bem.isElementDisplayField(CpElementConstants.FIELD_NAME_D_ATTR4)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_D_ATTR4_NAME));    }    if (bem.isElementDisplayField(CpElementConstants.FIELD_NAME_D_ATTR5)) {      names.add(LangTransMeta.translate(CpElementConstants.FIELD_TRANS_D_ATTR5_NAME));    }    if (cpApplyList != null && cpApplyList.size() > 0) {      for (int i = 0; i < cpApplyList.size(); i++) {        CpApply cpApply = (CpApply) cpApplyList.get(i);        Vector eachRowData = new Vector();        eachRowData.add(cpApply.getCpApplyId());        if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {          eachRowData.add(cpApply.getInceptDocName());        }        if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_SENDDOC_CODE)) {          eachRowData.add(cpApply.getSendDocCode());        }        if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_ORG_CODE)) {          eachRowData.add(cpApply.getOrgName());        }        eachRowData.add(cpApply.getCoCode());        eachRowData.add(cpApply.getCoName());        if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_ORIGIN_CODE)) {          eachRowData.add(cpApply.getOriginName());        }        eachRowData.add(cpApply.getPaytypeName());        eachRowData.add(cpApply.getBaccCode());        eachRowData.add(cpApply.getBaccName());        if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_MANAGE_CODE)) {          eachRowData.add(cpApply.getManageName());        }        if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_PROJECT_CODE)) {          eachRowData.add(cpApply.getProjectName());        }        eachRowData.add(cpApply.getFundName());        if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_PAYOUT_CODE)) {          eachRowData.add(cpApply.getPayoutName());        }        if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_OUTLAY_CODE)) {          eachRowData.add(cpApply.getOutlayCode());          eachRowData.add(cpApply.getOutlayName());        }        eachRowData.add(cpApply.getRemark());        if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR1)) {          eachRowData.add(cpApply.getDattr1Name());        }        if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR2)) {          eachRowData.add(cpApply.getDattr2Name());        }        if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR3)) {          eachRowData.add(cpApply.getDattr3Name());        }        if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR4)) {          eachRowData.add(cpApply.getDattr4Name());        }        if (bem.isElementDisplayField(DpElementConstants.FIELD_NAME_D_ATTR5)) {          eachRowData.add(cpApply.getDattr5Name());        }        values.add(eachRowData);      }    }    MyTableModel cpApplyTableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          if (getValueAt(0, column) != null) {            return getValueAt(0, column).getClass();          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    cpApplyTableModel.setList(cpApplyList);    return cpApplyTableModel;  }}
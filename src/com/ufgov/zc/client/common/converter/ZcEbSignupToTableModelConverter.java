package com.ufgov.zc.client.common.converter;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Vector;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.datacache.CompanyDataCache;import com.ufgov.zc.client.zc.ZcUtil;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbSignup;/** * @ClassName: ZcEbSignupToTableModelConverter * @Description: TODO(这里用一句话描述这个类的作用) * @date: Apr 21, 2010 5:04:26 PM * @version: V1.0 * @since: 1.0 * @author: xiaofei * @modify: */public class ZcEbSignupToTableModelConverter {  public DefaultTableModel convertToTableModel(List signupList) {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJ_CODE));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PROJ_NAME));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PROVIDER_NAME));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_SINGNUP_DATE));    names.add("采购单位");    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_SIGNUP_MANNER));    //names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_STATUS));    if (signupList != null && signupList.size() > 0) {      SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");      for (int i = 0; i < signupList.size(); i++) {        Vector rowData = new Vector();        ZcEbSignup zcEbSignup = (ZcEbSignup) signupList.get(i);        rowData.add(zcEbSignup.getProjCode());        rowData.add(zcEbSignup.getProjName());        rowData.add(zcEbSignup.getProviderName());        rowData.add(df.format(zcEbSignup.getSignupDate()));        rowData.add(CompanyDataCache.getName(zcEbSignup.getCoCode()));        //        rowData.add(AsValDataCache.getName("ZC_VS_SIGNUP_MANNER", zcEbSignup.getSignupManner()));        //rowData.add(AsValDataCache.getName("ZC_VS_SIGNUP_STATUS", zcEbSignup.getStatus()));        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {            return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(signupList);    return tableModel;  }  public DefaultTableModel convertBidToTableModel(List entrustList) {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJ_CODE));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PROJ_NAME));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PROVIDER_NAME));    names.add("是否已投标");    if (entrustList != null && entrustList.size() > 0) {      for (int i = 0; i < entrustList.size(); i++) {        Vector rowData = new Vector();        ZcEbSignup zcEbSignup = (ZcEbSignup) entrustList.get(i);        rowData.add(zcEbSignup.getProjCode());        rowData.add(zcEbSignup.getProjName());        rowData.add(zcEbSignup.getProviderName());        rowData.add(AsValDataCache.getName("ZC_VS_YN", zcEbSignup.getIsSubmitBidDoc()));        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {            return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(entrustList);    return tableModel;  }  public TableModel convertSignupPackDeToTableModel(List deList) {    // TCJLODO Auto-generated method stub    BeanTableModel tm = createModel(deList);    String[] colums = new String[] { "PACK_CODE", "PACK_NAME", "SP_STATUS", "BID_DEPOSIT", "IS_CHECK_QUALIFICATION", "CHECK_RESULT" };    String[] names = new String[] { "packName", "packDesc", "spStatus", "bidDeposit", "isCheckQualification", "checkResult" };    tm.setDataBean(deList, createColumnBeanPropertyPairs(colums, names));    return tm;  }  public TableModel convertSignupSupplierToTableModel(List<ZcEbSignup> deList) {    // TCJLODO Auto-generated method stub    BeanTableModel tm = createSuplierModel(deList);    String[] colums = new String[] { "供应商", "联系人", "联系电话" };    String[] names = new String[] { "providerName", "linkMan", "mobilePhone" };    tm.setDataBean(deList, createColumnBeanPropertyPairs(colums, names));    return tm;  }  private BeanTableModel createSuplierModel(List deList) {    BeanTableModel tm = new BeanTableModel() {      @Override      public boolean isCellEditable(int row, int column) {        return false;      }    };    tm.setOidFieldName("providerName");    return tm;  }  /**   * @param deList   * @return Administrator 2010-5-25   */  private BeanTableModel createModel(List deList) {    BeanTableModel tm = new BeanTableModel() {      /* (non-Javadoc)       * @see com.ufgov.gk.client.component.table.BeanTableModel#isCellEditable(int, int)       */      @Override      public boolean isCellEditable(int row, int column) {        String identifier = this.getColumnIdentifier(column);        if (identifier.equals("SP_STATUS") && ZcUtil.isGys()) {//供应商能报名          return true;        } else if (identifier.equals("CHECK_RESULT") && ZcUtil.isCgzx()) {//采购中心进行审核报名结果          return true;        }        return false;      }    };    tm.setOidFieldName("packCode");    return tm;  }  private List<ColumnBeanPropertyPair> createColumnBeanPropertyPairs(String[] colums, String[] names) {    List<ColumnBeanPropertyPair> pairList = new ArrayList<ColumnBeanPropertyPair>();    for (int i = 0; i < colums.length; i++) {      ColumnBeanPropertyPair pair = new ColumnBeanPropertyPair();      pair.setColumnIdentifier(colums[i]);      pair.setBeanPropertyName(names[i]);      pairList.add(pair);    }    return pairList;  }  public TableModel convertSignupPackDeToTableModel2(List deList) {    // TCJLODO Auto-generated method stub    BeanTableModel tm = createModel(deList);    String[] colums = new String[] { "PACK_NAME", "PACK_DESC", "IS_PAY_GUARANTEE", "IS_SUBMIT_BID_DOC" };    String[] names = new String[] { "packName", "packDesc", "isPayGuarantee", "isSubmitBidDoc" };    tm.setDataBean(deList, createColumnBeanPropertyPairs(colums, names));    return tm;  }  @SuppressWarnings("unchecked")  public DefaultTableModel convertPacksToTableModel(List packList) {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add("PACK_NAME");    names.add("PACK_DESC");    if (packList != null && packList.size() > 0) {      for (int i = 0; i < packList.size(); i++) {        Vector rowData = new Vector();        ZcEbPack pack = (ZcEbPack) packList.get(i);        rowData.add(pack.getPackCode());        rowData.add(pack.getPackName());        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {            return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(packList);    return tableModel;  }  public DefaultTableModel convertGysToTableModel(List signupList) {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PROJ_CODE));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PROJ_NAME));    names.add("中标供应商");    names.add("中标金额");    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_BID_DATE));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_PROJ_MANAGER));    //    names.add("投标保证金退付情况");    if (signupList != null && signupList.size() > 0) {      for (int i = 0; i < signupList.size(); i++) {        Vector rowData = new Vector();        Map zcEbSignup = (Map) signupList.get(i);        rowData.add(zcEbSignup.get("projCode"));        rowData.add(zcEbSignup.get("projName"));        rowData.add(zcEbSignup.get("providerName"));        rowData.add(zcEbSignup.get("bidSum"));        rowData.add(zcEbSignup.get("bidDate"));        rowData.add(zcEbSignup.get("attnName"));        //        rowData.add(AsValDataCache.getName(ZcValSetConstants.VS_ZC_EB_GUARANTEE_STATUS, (String)zcEbSignup.get("isPayGuarantee")));        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {            return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(signupList);    return tableModel;  }  public TableModel convertProjWithPlan(List projLst) {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add("项目编号");    names.add("项目名称");    names.add("采购方式");    names.add("标书发售开始时间");    names.add("标书发售截止时间");    names.add("投标截止时间");    names.add("开标地点");    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_SIGNUP_MANNER));    //names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_STATUS));    if (projLst != null && projLst.size() > 0) {      SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");      for (int i = 0; i < projLst.size(); i++) {        Vector rowData = new Vector();        ZcEbProj proj = (ZcEbProj) projLst.get(i);        rowData.add(proj.getProjCode());        rowData.add(proj.getProjName());        rowData.add(AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", proj.getPurType()));        rowData.add(proj.getPlan().getSellStartTime());        rowData.add(proj.getPlan().getSellEndTime());        rowData.add(df.format(proj.getPlan().getBidEndTime()));        rowData.add(proj.getPlan().getOpenBidAddress());        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {            return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(projLst);    return tableModel;  }  public TableModel convertProjWithNums(List projLst) {    // TCJLODO Auto-generated method stub    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add("项目编号");    names.add("项目名称");    names.add("采购方式");    names.add("报名情况");    names.add("标书发售开始时间");    names.add("标书发售截止时间");    names.add("投标截止时间");    names.add("开标地点");    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_SIGNUP_MANNER));    //names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_STATUS));    if (projLst != null && projLst.size() > 0) {      SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");      for (int i = 0; i < projLst.size(); i++) {        Vector rowData = new Vector();        ZcEbProj proj = (ZcEbProj) projLst.get(i);        rowData.add(proj.getProjCode());        rowData.add(proj.getProjName());        rowData.add(AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", proj.getPurType()));        rowData.add(proj.getRemark());        rowData.add(proj.getPlan().getSellStartTime());        rowData.add(proj.getPlan().getSellEndTime());        rowData.add(df.format(proj.getPlan().getBidEndTime()));        rowData.add(proj.getPlan().getOpenBidAddress());        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {            return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(projLst);    return tableModel;  }}
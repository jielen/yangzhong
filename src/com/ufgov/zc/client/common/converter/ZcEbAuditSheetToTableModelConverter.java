package com.ufgov.zc.client.common.converter;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.datacache.CompanyDataCache;import com.ufgov.zc.client.datacache.OrgDataCache;import com.ufgov.zc.common.commonbiz.model.BaseElement;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.model.User;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.zc.model.TreeNodeValueObject;import com.ufgov.zc.common.zc.model.ZcEbAuditSheet;import com.ufgov.zc.common.zc.model.ZcEbEntrustDetail;public class ZcEbAuditSheetToTableModelConverter {  public DefaultTableModel convertToTableModel(List<Object> ol) {    MyTableModel tableModel = null;    Vector<String> names = new Vector<String>();    Vector<Object> values = new Vector<Object>();    // 任务单编号//    names.add("任务单编号");    names.add("采购计划编号");    //项目代码    //    names.add("项目代码");    // 状态    names.add("状态");    // 审批表编号    //names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_CODE));    // 采购单位    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_NAME));    // 审批表项目名称    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_NAME));    // 采购方式    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PIFU_CGFS));    // 采购预算    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MONEY_BI_SUM));    //受理时间ZC_FIELD_ENTRUST_DATE    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ENTRUST_DATE));    // 采购单位主管业务处室    //    names.add(LangTransMeta.translate(FIELD_TRANS_ZC_ZG_CS_CODE));    // 分管副主任//    names.add("中心主任");    // 负责组//    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_TRANS_SUPERINTENDENT_ORG));    // 经办人    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_TRANS_SUPERINTENDENT_NAME));//    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_TRANS_ATTN_NAME));    if (ol != null && ol.size() > 0) {      for (int i = 0; i < ol.size(); i++) {        Vector<Object> rowData = new Vector<Object>();        ZcEbAuditSheet o = (ZcEbAuditSheet) ol.get(i);//        rowData.add(o.getSnCode());        if (o.getZcEbEntrust().getZcMakeCode() != null) {          rowData.add(o.getZcEbEntrust().getZcMakeCode());        } else {          rowData.add(o.getSn());        }        //        rowData.add(o.getZcEbEntrust().getZcMakeCode());        rowData.add(AsValDataCache.getName("ZC_VS_AUDIT_SHEET_STATUS", o.getStatus()));        //rowData.add(o.getZcEbEntrust().getZcMakeCode());        rowData.add(CompanyDataCache.getName(o.getZcEbEntrust().getCoCode()));        rowData.add(o.getZcEbEntrust().getZcMakeName());        rowData.add(AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", o.getZcEbEntrust().getZcPifuCgfs()));        rowData.add(o.getZcEbEntrust().getZcMoneyBiSum());        rowData.add(o.getExecuteDate());        //        rowData.add(OrgDataCache.getName(o.getZcEbEntrust().getOrgCode()));//        rowData.add(o.getZcFzrUserName());//        rowData.add(OrgDataCache.getName(o.getSuperintendentOrg()));        rowData.add(o.getSuperintendentName());//        rowData.add(o.getAttnName());        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      private static final long serialVersionUID = -939387425559050066L;      @SuppressWarnings("unchecked")      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(ol);    return tableModel;  }  public static TableModel convertZcEbAuditSheetDetailToTableMode(List<ZcEbEntrustDetail> ol) {    BeanTableModel<ZcEbEntrustDetail> tm = new BeanTableModel<ZcEbEntrustDetail>() {      private static final long serialVersionUID = 7491845032261012782L;      @Override      public boolean isCellEditable(int row, int column) {        String columnId = this.getColumnIdentifier(column);        if ("ZC_FIELD_ZC_CATALOGUE_NAME".equals(columnId) || "ZC_FIELD_ZC_PITEM_ATTACH_BLOBID".equals(columnId)) {          return false;        }        return super.isCellEditable(row, column);      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcEbEntrustDetail bean = dataBeanList.get(rowIndex);        if (aValue instanceof BaseElement) {          BeanUtil.set(columnBeanPropertyPairList.get(columnIndex).getBeanPropertyName(), ((BaseElement) aValue).getName(), bean);          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else if (ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE.equals(this.getColumnIdentifier(columnIndex))) {          Object obj = getValueAt(rowIndex, columnIndex);          if (aValue == null) {            this.getBean(rowIndex).setZcCatalogueCode(null);            this.getBean(rowIndex).setZcCatalogueName(null);          } else {            this.getBean(rowIndex).setZcCatalogueCode(((TreeNodeValueObject) aValue).getCode());            this.getBean(rowIndex).setZcCatalogueName(((TreeNodeValueObject) aValue).getName());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else if (ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH.equals(this.getColumnIdentifier(columnIndex))) {          if (aValue == null) {            this.getBean(rowIndex).setZcPitemAttach(null);            this.getBean(rowIndex).setZcPitemAttachBlobid(null);          } else {            this.getBean(rowIndex).setZcPitemAttach(((AsFile) aValue).getFileName());            this.getBean(rowIndex).setZcPitemAttachBlobid(((AsFile) aValue).getFileId());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempId");    if (ol != null) {      for (ZcEbEntrustDetail o : ol) {        o.setTempId(Guid.genID());      }    }    tm.setDataBean(ol, ZcEbEntrustToTableModelConverter.getItemInfo());    return tm;  }  //协办人  public static TableModel convertZcXbEbAuditSheetDetailToTableMode(List<com.ufgov.zc.common.system.model.User> ol) {    BeanTableModel<com.ufgov.zc.common.system.model.User> tm = new BeanTableModel<com.ufgov.zc.common.system.model.User>() {      private static final long serialVersionUID = 7491845032261012782L;      @Override      public boolean isCellEditable(int row, int column) {        String columnId = this.getColumnIdentifier(column);        return super.isCellEditable(row, column);      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        com.ufgov.zc.common.system.model.User usrBean = dataBeanList.get(rowIndex);        if (aValue instanceof BaseElement) {          BeanUtil.set(columnBeanPropertyPairList.get(columnIndex).getBeanPropertyName(), ((BaseElement) aValue).getName(), usrBean);          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else if ("XZ_OPERATOR_NAME".equals(this.getColumnIdentifier(columnIndex))) {          Object obj = getValueAt(rowIndex, columnIndex);          if (aValue != null) {            this.getBean(rowIndex).setUserId(aValue.toString());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempId");    if (ol != null) {      for (User o : ol) {        o.setTempId(Guid.genID());      }    }    tm.setDataBean(ol, ZcEbEntrustToTableModelConverter.getXbItemInfo());    return tm;  }}
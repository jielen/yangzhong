package com.ufgov.zc.client.common.converter;import java.util.List;import java.util.Vector;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.util.CodeNameHandler;import com.ufgov.zc.common.bi.model.BiAdjustTrack;import com.ufgov.zc.common.system.constants.BiElementConstants;import com.ufgov.zc.common.system.constants.BillTypeConstants;public class BiAdjustTrackToTableModelConverter {  /**   * @param biBalanceList   * @return   */  public static MyTableModel convertBiAdjustTrackForListPage(List biAdjustTrackList, BillElementMeta bem) {    CodeNameHandler.handleNames(biAdjustTrackList);    BillElementMeta curbem = null;    if (bem == null) {      curbem = BillElementMeta.getBillElementMeta(BillTypeConstants.BILL_TYPE_CODE_BI_ADJUST53);    } else {      curbem = bem;    }    MyTableModel biTrackTableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_BI_TRACK_ID));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_ND));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_BI_ADJUST_CODE));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_CUR_MONEY));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_ORG_MONEY));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_CO_CODE));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_CO_NAME));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_B_ACC_CODE));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_B_ACC_NAME));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_FUND_NAME));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_PROC_DATE));    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_INCEPTDOC_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_SENDDOC_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_SENDDOC_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_ORG_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_ORG_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_ORIGIN_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_ORIGIN_NAME));    }    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_PAYTYPE_NAME));    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_MANAGE_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_MANAGE_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_PROJECT_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_PROJECT_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_PAYOUT_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_PAYOUT_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_OUTLAY_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_OUTLAY_CODE));      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_OUTLAY_NAME));    }    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_RECE_BANKACCCODE));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_RECE_ACCNAME));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_RECE_BANKNODENAME));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_REMARK));    for (int i = 0; i < biAdjustTrackList.size(); i++) {      Vector eachRowData = new Vector();      BiAdjustTrack biAdjustTrack = (BiAdjustTrack) biAdjustTrackList.get(i);      eachRowData.add(biAdjustTrack.getBiTrackId());      eachRowData.add(biAdjustTrack.getNd());      eachRowData.add(biAdjustTrack.getBiAdjustCode());      eachRowData.add(biAdjustTrack.getCurMoney());      eachRowData.add(biAdjustTrack.getOrgMoney());      eachRowData.add(biAdjustTrack.getCoCode());      eachRowData.add(biAdjustTrack.getCoName());      eachRowData.add(biAdjustTrack.getBaccCode());      eachRowData.add(biAdjustTrack.getBaccName());      eachRowData.add(biAdjustTrack.getFundName());      eachRowData.add(biAdjustTrack.getProcDate());      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {        eachRowData.add(biAdjustTrack.getInceptDocName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_SENDDOC_CODE)) {        eachRowData.add(biAdjustTrack.getSendDocName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_ORG_CODE)) {        eachRowData.add(biAdjustTrack.getOrgName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_ORIGIN_CODE)) {        eachRowData.add(biAdjustTrack.getOriginName());      }      eachRowData.add(biAdjustTrack.getPaytypeName());      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_MANAGE_CODE)) {        eachRowData.add(biAdjustTrack.getManageName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_PROJECT_CODE)) {        eachRowData.add(biAdjustTrack.getProjectName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_PAYOUT_CODE)) {        eachRowData.add(biAdjustTrack.getPayoutName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_OUTLAY_CODE)) {        eachRowData.add(biAdjustTrack.getOutlayCode());        eachRowData.add(biAdjustTrack.getOutlayName());      }      eachRowData.add(biAdjustTrack.getReceBankAccCode());      eachRowData.add(biAdjustTrack.getReceAccName());      eachRowData.add(biAdjustTrack.getReceBankNodeName());      eachRowData.add(biAdjustTrack.getRemark());      values.add(eachRowData);    }    biTrackTableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    biTrackTableModel.setList(biAdjustTrackList);    return biTrackTableModel;  }}
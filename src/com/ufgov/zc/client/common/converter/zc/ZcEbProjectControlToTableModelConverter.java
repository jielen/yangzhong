package com.ufgov.zc.client.common.converter.zc;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.zc.model.ZcEbEcbjItem;import com.ufgov.zc.common.zc.model.ZcEbEcbjPlan;import com.ufgov.zc.common.zc.model.ZcEbExpertEvalResult;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbPackReq;import com.ufgov.zc.common.zc.model.ZcEbProjPackVO;import com.ufgov.zc.common.zc.model.ZcEbSupplierPack;@SuppressWarnings("unchecked")public class ZcEbProjectControlToTableModelConverter {  public static boolean allowToModidy = false;  public static DefaultTableModel convertToTableModel(List voList) {    MyTableModel tableModel = null;    Vector<String> names = new Vector<String>();    Vector values = new Vector();    prepareColumnHeader(names);    if (voList != null && voList.size() > 0) {      SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");      for (int i = 0; i < voList.size(); i++) {        ZcEbProjPackVO vo = (ZcEbProjPackVO) voList.get(i);        Vector rowData = new Vector();        rowData.add(vo.getZcEbPack().getEntrust().getSnCode());        rowData.add(vo.getProjCode());        rowData.add(vo.getProjName());        rowData.add(vo.getZcEbPack().getPackName());        rowData.add(vo.getZcEbPack().getPackDesc());        rowData.add(vo.getZcEbPlan().getOpenBidTime() == null ? "" : sdf.format(vo.getZcEbPlan().getOpenBidTime()));        rowData.add(AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", vo.getZcEbPack().getPurType()));        rowData.add(AsValDataCache.getName("VS_ZC_PACK_STATUS", vo.getZcEbPack().getStatus()));        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      private static final long serialVersionUID = 3123244681117334262L;      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(voList);    return tableModel;  }  private static void prepareColumnHeader(Vector<String> names) {    names.add("任务单号");    names.add(LangTransMeta.translate("ZC_EB_FIELD_PROJ_CODE"));    names.add(LangTransMeta.translate("ZC_EB_FIELD_PROJ_NAME"));    names.add(LangTransMeta.translate("ZC_EB_PACK_CODE"));    names.add(LangTransMeta.translate("ZC_EB_PACK_NAME"));    names.add("开标时间");    names.add(LangTransMeta.translate("ZC_EB_FIELD_PROJ_PUR_TYPE"));    names.add(LangTransMeta.translate("ZC_EB_FIELD_PACK_STATUS"));  }  private static List<ColumnBeanPropertyPair> packTableColumnInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    packTableColumnInfo.add(new ColumnBeanPropertyPair("PACK_CODE", "packCode", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE)));//在双击时获得分包编号需要使用，该列不可去除    packTableColumnInfo.add(new ColumnBeanPropertyPair("PROJ_CODE", "projCode", "项目编号"));//在双击时获得标段对应的项目编号需要使用，该列不可去除    packTableColumnInfo.add(new ColumnBeanPropertyPair("ZC_MAKE_NAME", "entrust.zcMakeName", "项目名称"));    packTableColumnInfo.add(new ColumnBeanPropertyPair("ZC_CO_CODE", "entrust.coCode", "采购人名称"));    packTableColumnInfo.add(new ColumnBeanPropertyPair("PUR_CONTENT", "purContent", "采购内容"));    packTableColumnInfo.add(new ColumnBeanPropertyPair("PACK_NAME", "packName", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME)));    packTableColumnInfo.add(new ColumnBeanPropertyPair("PACK_DESC", "packDesc", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME)));    packTableColumnInfo.add(new ColumnBeanPropertyPair("PACK_BUDGET", "packBudget", LangTransMeta      .translate(ZcElementConstants.FIELD_TRANS_ZC_EB_FIELD_PACK_BUDGET)));    packTableColumnInfo.add(new ColumnBeanPropertyPair("STATUS", "status", "标段状态"));  }  public static List<ColumnBeanPropertyPair> getPackTableColumnInfo() {    return packTableColumnInfo;  }  public static TableModel convertPackToTableModel(List<ZcEbPack> packList) {    BeanTableModel<ZcEbPack> tm = new BeanTableModel<ZcEbPack>() {      private static final long serialVersionUID = 6888363838628062064L;      public boolean isCellEditable(int row, int column) {        return false;      }    };    tm.setOidFieldName("tempId");    for (ZcEbPack data : packList) {      data.setTempId(Guid.genID());    }    tm.setDataBean(packList, packTableColumnInfo);    return tm;  }  private static List<ColumnBeanPropertyPair> packReqTableColumnInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    packReqTableColumnInfo.add(new ColumnBeanPropertyPair("ZC_CATALOGUE_CODE", "requirementDetail.zcCatalogueCode", "品目代码"));    packReqTableColumnInfo.add(new ColumnBeanPropertyPair("ZC_CATALOGUE_NAME", "requirementDetail.zcCatalogueName", "品目名称"));    packReqTableColumnInfo.add(new ColumnBeanPropertyPair("NAME", "requirementDetail.name", "明细需求名称"));    packReqTableColumnInfo.add(new ColumnBeanPropertyPair("ARR_DATE", "requirementDetail.arrDate", "要求到货日期"));    packReqTableColumnInfo.add(new ColumnBeanPropertyPair("BASE_REQ", "requirementDetail.baseReq", "基本规格要求"));    packReqTableColumnInfo.add(new ColumnBeanPropertyPair("ITEM_ATTACH", "requirementDetail.itemAttach", "采购明细附件"));    packReqTableColumnInfo.add(new ColumnBeanPropertyPair("NUM", "requirementDetail.num", "数量"));    packReqTableColumnInfo.add(new ColumnBeanPropertyPair("ITEM_SUM", "requirementDetail.itemSum", "单项预算金额"));    packReqTableColumnInfo.add(new ColumnBeanPropertyPair("MER_PRICE", "requirementDetail.merPrice", "单价"));    packReqTableColumnInfo.add(new ColumnBeanPropertyPair("PAY_COND", "requirementDetail.payCond", "付款条件"));    packReqTableColumnInfo.add(new ColumnBeanPropertyPair("SERVICE_PROMISES", "requirementDetail.servicePromises", "服务承诺"));    packReqTableColumnInfo.add(new ColumnBeanPropertyPair("TYPE", "requirementDetail.type", "需求类型"));    packReqTableColumnInfo.add(new ColumnBeanPropertyPair("DESCRIPTION", "requirementDetail.description", "描述"));  }  public static List<ColumnBeanPropertyPair> getPackReqTableColumnInfo() {    return packReqTableColumnInfo;  }  public static TableModel convertPackReqToTableModel(List<ZcEbPackReq> packReqList) {    BeanTableModel<ZcEbPackReq> tm = new BeanTableModel<ZcEbPackReq>() {      private static final long serialVersionUID = 6888363838628062064L;      public boolean isCellEditable(int row, int column) {        return false;      }    };    tm.setOidFieldName("tempId");    for (ZcEbPackReq data : packReqList) {      data.setTempId(Guid.genID());    }    tm.setDataBean(packReqList, packReqTableColumnInfo);    return tm;  }  /**   * 二次报价汇总信息   */  private static List<ColumnBeanPropertyPair> ecbjSummaryColumnInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    ecbjSummaryColumnInfo.add(new ColumnBeanPropertyPair("BJNO", "bjNo", "报价编号"));    ecbjSummaryColumnInfo.add(new ColumnBeanPropertyPair("FILE_NAME", "fileName", "报价文件"));    ecbjSummaryColumnInfo.add(new ColumnBeanPropertyPair("BJSUM", "bjSum", "报价金额"));    ecbjSummaryColumnInfo.add(new ColumnBeanPropertyPair("BJ_TIME", "bjTime", "报价时间"));    ecbjSummaryColumnInfo.add(new ColumnBeanPropertyPair("PROVIDER_NAME", "providerName", "供应商"));  }  public static List<ColumnBeanPropertyPair> getEcbjSummaryColumnInfo() {    return ecbjSummaryColumnInfo;  }  public static TableModel convertEcbjSummaryToTableModel(List<ZcEbEcbjItem> itemList) {    BeanTableModel<ZcEbEcbjItem> tm = new BeanTableModel<ZcEbEcbjItem>() {      private static final long serialVersionUID = 6888363838628062064L;      public boolean isCellEditable(int row, int column) {        return false;      }    };    tm.setOidFieldName("tempId");    for (ZcEbEcbjItem data : itemList) {      data.setTempId(Guid.genID());    }    tm.setDataBean(itemList, ecbjSummaryColumnInfo);    return tm;  }  /**   * 二次报价计划管理   */  private static List<ColumnBeanPropertyPair> ecbjPlanColumnInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    ecbjPlanColumnInfo.add(new ColumnBeanPropertyPair("START_TIME", "startTime", "开始时间"));    ecbjPlanColumnInfo.add(new ColumnBeanPropertyPair("END_TIME", "endTime", "截止时间"));    ecbjPlanColumnInfo.add(new ColumnBeanPropertyPair("BJ_COUNT", "bjCount", "当前报价轮次"));    ecbjPlanColumnInfo.add(new ColumnBeanPropertyPair("OPEN_BID_TIME", "openBidTime", "开标时间"));    ecbjPlanColumnInfo.add(new ColumnBeanPropertyPair("OPEN_BID_ADDRRESS", "openBidAddress", "开标地点"));    ecbjPlanColumnInfo.add(new ColumnBeanPropertyPair("REMARK", "remark", "备注"));  }  public static List<ColumnBeanPropertyPair> getEcbjPlanColumnInfo() {    return ecbjPlanColumnInfo;  }  public static TableModel convertEcbjPlanToTableModel(List<ZcEbEcbjPlan> itemList) {    BeanTableModel<ZcEbEcbjPlan> tm = new BeanTableModel<ZcEbEcbjPlan>() {      private static final long serialVersionUID = 6888363838628062064L;      public boolean isCellEditable(int row, int column) {        return false;      }    };    tm.setOidFieldName("tempId");    for (ZcEbEcbjPlan data : itemList) {      data.setTempId(Guid.genID());    }    tm.setDataBean(itemList, ecbjPlanColumnInfo);    return tm;  }  /**   * 投标供应商信息   */  private static List<ColumnBeanPropertyPair> packSupplierTableColumnInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    packSupplierTableColumnInfo.add(new ColumnBeanPropertyPair("SUPPLIER_CODE", "supplierCode", "供应商编号"));    packSupplierTableColumnInfo.add(new ColumnBeanPropertyPair("SUPPLIER_NAME", "supplierName", "供应商名称"));    packSupplierTableColumnInfo.add(new ColumnBeanPropertyPair("IS_SUBMIT_BID_DOC", "isSubmitBidDoc", "是否已提交标书"));    packSupplierTableColumnInfo.add(new ColumnBeanPropertyPair("OPEN_BID_STATUS", "openBidStatus", "投标状态"));//    packSupplierTableColumnInfo.add(new ColumnBeanPropertyPair("IS_PAY_GUARANTEE", "isPayGuarantee", "是否已交纳保证金"));//    packSupplierTableColumnInfo.add(new ColumnBeanPropertyPair("IS_SITE", "isSite", "是否到现场"));    packSupplierTableColumnInfo.add(new ColumnBeanPropertyPair("PROVIDER_TOTAL_PRICE", "providerTotalPrice", "供应商投标报价"));    packSupplierTableColumnInfo.add(new ColumnBeanPropertyPair("COMPLIANCE_EVAL_RESULT", "complianceEvalResult", "符合性评审是否通过"));    packSupplierTableColumnInfo.add(new ColumnBeanPropertyPair("EXPERT_EVAL_RATE", "expertEvalRate", "专家打分汇总得分"));    packSupplierTableColumnInfo.add(new ColumnBeanPropertyPair("EXPERT_EVAL_RESULT", "expertEvalResult", "评标结果"));    packSupplierTableColumnInfo.add(new ColumnBeanPropertyPair("IS_BID", "isBid", "是否中标"));  }  public static List<ColumnBeanPropertyPair> getPackSupplierTableColumnInfo() {    return packSupplierTableColumnInfo;  }  public static TableModel convertPackSupplierToTableModel(List<ZcEbSupplierPack> spList) {    BeanTableModel<ZcEbSupplierPack> tm = new BeanTableModel<ZcEbSupplierPack>() {      private static final long serialVersionUID = 6888363838628062064L;      public boolean isCellEditable(int row, int column) {        if (("IS_SUBMIT_BID_DOC".equals(this.getColumnIdentifier(column))            ||"IS_SITE".equals(this.getColumnIdentifier(column))            ||"PROVIDER_TOTAL_PRICE".equals(this.getColumnIdentifier(column))            ||"OPEN_BID_STATUS".equals(this.getColumnIdentifier(column))            ) && ZcEbProjectControlToTableModelConverter.allowToModidy) {          return true;        }        return false;      }    };    tm.setOidFieldName("tempId");    for (ZcEbSupplierPack data : spList) {      data.setTempId(Guid.genID());    }    tm.setDataBean(spList, packSupplierTableColumnInfo);    return tm;  }  /**   * 专家评标信息   */  private static List<ColumnBeanPropertyPair> expertEvalTableColumnInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    expertEvalTableColumnInfo.add(new ColumnBeanPropertyPair("EVAL_EXPERT_CODE", "expertCode", "专家编号"));    expertEvalTableColumnInfo.add(new ColumnBeanPropertyPair("EVAL_EXPERT", "expertName", "专家名称"));    expertEvalTableColumnInfo.add(new ColumnBeanPropertyPair("COMPLIANCE_EVAL_VALUE", "complianceValue", "符合性指标评审结果"));    expertEvalTableColumnInfo.add(new ColumnBeanPropertyPair("SCORE_EVAL_RESULT", "scoreEvalResult", "评审分值"));  }  public static List<ColumnBeanPropertyPair> getSupplierExpertEvalTableColumnInfo() {    return expertEvalTableColumnInfo;  }  public static TableModel convertSupplierExpertEvalToTableModel(List<ZcEbExpertEvalResult> spList) {    BeanTableModel<ZcEbExpertEvalResult> tm = new BeanTableModel<ZcEbExpertEvalResult>() {      private static final long serialVersionUID = 6888363838628062064L;      public boolean isCellEditable(int row, int column) {        return false;      }    };    tm.setOidFieldName("tempId");    for (ZcEbExpertEvalResult data : spList) {      data.setTempId(Guid.genID());    }    tm.setDataBean(spList, expertEvalTableColumnInfo);    return tm;  }  /**   * 从行中取部分关键数据，到ZcEbProjectControlEditSubDialog中根据这里提供的关键数据重新进行查询   * @param table   * @return   */  public static List<ZcEbPack> convertPackToModel(TableModel table) {    List<ZcEbPack> list = new ArrayList<ZcEbPack>();    int projCodeIndex = getColumnIndexCode(table, "PROJ_CODE");    int packCodeIndex = getColumnIndexCode(table, "PACK_CODE");    for (int i = 0; i < table.getRowCount(); i++) {      ZcEbPack zep = new ZcEbPack();      for (int j = 0; j < table.getColumnCount(); j++) {        zep.setProjCode(table.getValueAt(i, projCodeIndex).toString());        zep.setPackCode(table.getValueAt(i, packCodeIndex).toString());      }      list.add(zep);    }    return list;  }  private static int getColumnIndexCode(TableModel table, String tarCol) {    for (int i = 0; i < table.getColumnCount(); i++) {      if (tarCol.equals(table.getColumnName(i))) {        return i;      }    }    //实际上是不可能执行到这里的，因为单击列表时肯定可以获得至少一条数据，而数据中肯定有需要的列的值；    return 0;  }}
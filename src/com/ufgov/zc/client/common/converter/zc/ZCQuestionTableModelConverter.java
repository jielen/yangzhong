package com.ufgov.zc.client.common.converter.zc;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.common.commonbiz.model.BaseElement;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.zc.model.ZcEbQuestion;import com.ufgov.zc.common.zc.model.ZcEbQuestionPack;public class ZCQuestionTableModelConverter {  public static DefaultTableModel convertToTableModel(List zcQuestionList) {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add(LangTransMeta.translate(ZcEbQuestion.COL_ZY_CODE));    names.add(LangTransMeta.translate(ZcEbQuestion.COL_ZY_TYPE));    names.add(LangTransMeta.translate(ZcEbQuestion.COL_PROJ_CODE));    names.add(LangTransMeta.translate(ZcEbQuestion.COL_PROJ_NAME));    names.add(LangTransMeta.translate(ZcEbQuestion.COL_ZY_UNIT_NAME));    names.add(LangTransMeta.translate(ZcEbQuestion.COL_ZY_DATE));    names.add(LangTransMeta.translate(ZcEbQuestion.COL_HY_DATE));    if (zcQuestionList != null) {      SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");      for (int i = 0; i < zcQuestionList.size(); i++) {        Vector rowData = new Vector();        ZcEbQuestion zcQuestion = (ZcEbQuestion) zcQuestionList.get(i);        rowData.add(zcQuestion.getZyCode());        rowData.add(AsValDataCache.getName("ZC_VS_QUES_TYPE", zcQuestion.getZyType()));        rowData.add(zcQuestion.getProjCode());        rowData.add(zcQuestion.getProjName());        rowData.add(zcQuestion.getZyUnitName());        rowData.add(zcQuestion.getZyDate() == null ? "" : df.format(zcQuestion.getZyDate()));        rowData.add(zcQuestion.getHyDate() == null ? "" : df.format(zcQuestion.getHyDate()));        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) { return getValueAt(row, column).getClass(); }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(zcQuestionList);    return tableModel;  }  @SuppressWarnings("unchecked")  public static TableModel convertPackDeToTableModel(List deList) {    BeanTableModel tm = createModel(deList);    String[] colums = new String[] { "PACK_CODE", "PACK_NAME" };    String[] names = new String[] { "zcEbPack.packCode", "zcEbPack.packName" };    tm.setDataBean(deList, createColumnBeanPropertyPairs(colums, names));    return tm;  }  private static BeanTableModel createModel(List deList) {    BeanTableModel tm = new BeanTableModel() {      public boolean isCellEditable(int row, int column) {        String identifier = this.getColumnIdentifier(column);        if (identifier.equals("PACK_NAME")) {        return true;        }        return false;      }    };    tm.setOidFieldName("ques_id");    return tm;  }  private static List<ColumnBeanPropertyPair> createColumnBeanPropertyPairs(String[] colums, String[] names) {    List<ColumnBeanPropertyPair> pairList = new ArrayList<ColumnBeanPropertyPair>();    for (int i = 0; i < colums.length; i++) {      ColumnBeanPropertyPair pair = new ColumnBeanPropertyPair();      pair.setColumnIdentifier(colums[i]);      pair.setBeanPropertyName(names[i]);      pairList.add(pair);    }    return pairList;  }  private static List<ColumnBeanPropertyPair> itemInfo = new ArrayList<ColumnBeanPropertyPair>();  public static List<ColumnBeanPropertyPair> getItemInfo() {    return itemInfo;  }  static {    itemInfo.add(new ColumnBeanPropertyPair("PACK_NAME", "packName", LangTransMeta.translate("ZC_EB_PACK_CODE")));    itemInfo.add(new ColumnBeanPropertyPair("PACK_CONTENT", "packContent", LangTransMeta.translate("ZC_EB_PACK_NAME")));  }  public static TableModel convertDetailToTableModel(List itemList) {    BeanTableModel<ZcEbQuestionPack> tm = new BeanTableModel<ZcEbQuestionPack>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        return false;      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcEbQuestionPack bean = dataBeanList.get(rowIndex);        if (aValue instanceof BaseElement) {          BeanUtil.set(columnBeanPropertyPairList.get(columnIndex).getBeanPropertyName(), ((BaseElement) aValue).getName(), bean);          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("packCode");    tm.setDataBean(itemList, itemInfo);    return tm;  }}
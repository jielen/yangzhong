/**   * @(#) project: GK* @(#) file: ZcSupplementPProMakeToTableModelConverter.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.common.converter.zc;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.client.datacache.CompanyDataCache;import com.ufgov.zc.common.commonbiz.model.BaseElement;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.zc.model.TreeNodeValueObject;import com.ufgov.zc.common.zc.model.ZcPProMake;import com.ufgov.zc.common.zc.model.ZcPProMitem;import com.ufgov.zc.common.zc.model.ZcPProMitemBi;import com.ufgov.zc.common.zc.model.ZcSuppleMentBi;import com.ufgov.zc.common.zc.model.ZcSupplementPProMake;import java.util.ArrayList;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;/*** @ClassName: ZcSupplementPProMakeToTableModelConverter* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2010-7-27 下午05:36:27* @version: V1.0 * @since: 1.0* @author: Administrator* @modify: */public class ZcSupplementPProMakeToTableModelConverter {  @SuppressWarnings({ "unchecked", "serial" })  public static DefaultTableModel convertToTableModel(List entrustList) {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_SUPPLE_MENT_BUDGE_CODE));//追加资金编号    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_CODE));//项目编码    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_NAME));//项目名称    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_BI_JHUA_SUM));//项目预算金额    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_NAME));//单位名称    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_CODE_ND));//财政年度    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_FIELD_ADD_MONEY));//本次追加金额    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_SUPPLE_MENT_BUDGE_STATUS));//追加资金状态    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_YEP_FLAG));//处理标记    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MONEY_BI_YZX));//项目执行金额    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MONEY_HT_YBA));//合同备案金额    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_BI_YJJS_SUM));//已经结算金额    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_YEP_SUM));//项目处理金额    if (entrustList != null && entrustList.size() > 0) {      for (int i = 0; i < entrustList.size(); i++) {        Vector rowData = new Vector();        ZcSupplementPProMake bean = (ZcSupplementPProMake) entrustList.get(i);        ZcPProMake zcPProMake = bean.getZcPProMake();        rowData.add(bean.getZcSuppleMentCode());        rowData.add(zcPProMake.getZcMakeCode());        rowData.add(zcPProMake.getZcMakeName());        rowData.add(zcPProMake.getZcMoneyBiSum());        rowData.add(CompanyDataCache.getName(zcPProMake.getCoCode()));        rowData.add(zcPProMake.getNd());        rowData.add(bean.getAddMoney());        //        rowData.add(AsValDataCache.getName("ZC_VS_MAKE_STATUS", zcPProMake.getZcMakeStatus()));        //        rowData.add(zcPProMake.getZcYepFlag());        //        rowData.add(zcPProMake.getZcMoneyBiYzx());        //        rowData.add(zcPProMake.getZcMoneyHtYba());        //        rowData.add(zcPProMake.getZcYepSum());        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(entrustList);    return tableModel;  }  private static List<ColumnBeanPropertyPair> itemInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    //    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_MAKE_CODE   , "zcMakeCode"         , LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_CODE   )));    //    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_PITEM_CODE    , "zcPitemCode"          , LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PITEM_CODE    )));    //    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_YEAR      , "zcYear"              , LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_YEAR      )));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_PITEM_NAME, "zcPitemName",    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PITEM_NAME)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE,    "zcCatalogueCode", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_NAME,    "zcCatalogueName", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_NAME)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_PITEM_ARR_DATE,    "zcPitemArrDate", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PITEM_ARR_DATE)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_BASE_GGYQ, "zcBaseGgyq",    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_BASE_GGYQ)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH, "zcPitemAttach",    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH)));    //itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH_BLOBID, "zcPitemAttachBlobid", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH_BLOBID)));    //    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_PINMU_CTLG    , "zcPinmuCtlg"         , LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PINMU_CTLG    )));    //    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_MAKE_NEW_CODE   , "zcMakeNewCode"       , LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_NEW_CODE   )));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_CAIG_NUM, "zcCaigNum",    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CAIG_NUM)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_MER_PRICE, "zcMerPrice",    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MER_PRICE)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_ITEM_SUM, "zcItemSum",    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_ITEM_SUM)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_BUDGET_BI_MONEY, "budgetBiMoney",    LangTransMeta.translate("ZC_" + ZcElementConstants.FIELD_TRANS_BUDGET_BI_MONEY)));    itemInfo    .add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_BUDGET_OTHER_MONEY, "budgetOtherMoney",    LangTransMeta.translate("ZC_" + ZcElementConstants.FIELD_TRANS_BUDGET_OTHER_MONEY)));  }  /**   * @return the itemInfo   */  public static List<ColumnBeanPropertyPair> getItemInfo() {    return itemInfo;  }  /**   * @param itemInfo the itemInfo to set   */  public static void setItemInfo(List<ColumnBeanPropertyPair> itemInfo) {    ZcSupplementPProMakeToTableModelConverter.itemInfo = itemInfo;  }  /**   * @return the biInfo   */  public static List<ColumnBeanPropertyPair> getBiInfo() {    return biInfo;  }  /**   * @param biInfo the biInfo to set   */  public static void setBiInfo(List<ColumnBeanPropertyPair> biInfo) {    ZcSupplementPProMakeToTableModelConverter.biInfo = biInfo;  }  private static List<ColumnBeanPropertyPair> biInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_BI_JHUA_SUM, "zcBiJhuaSum",    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_BI_JHUA_SUM)));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_BI_YJBA_SUM, "zcBiYjbaSum",    "合同备案金额"));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_FUND_CODE, "fundCode", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_FUND_CODE)));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ORIGIN_CODE, "originCode",    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ORIGIN_CODE)));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_PAYTYPE_CODE, "paytypeCode",    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PAYTYPE_CODE)));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_SENDDOC_CODE, "senddocCode",    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_SENDDOC_NAME)));    biInfo.add(new ColumnBeanPropertyPair("ZC_FUND_REMARK", "zcFundRemark", LangTransMeta    .translate("ZC_FUND_REMARK")));    biInfo.add(new ColumnBeanPropertyPair("ZC_FUND_FILE", "zcFundFile", LangTransMeta    .translate("ZC_FUND_FILE")));    //biInfo.add(new ColumnBeanPropertyPair("ZC_FUND_FILE_BLOBID", "zcFundFileBlobid", LangTransMeta.translate("ZC_FUND_FILE_BLOBID")));  }  public static List<ColumnBeanPropertyPair> getSuppleMentBudgeInfo() {    return suppleMentBudgeInfo;  }  public static void setSuppleMentBudgeInfo(List<ColumnBeanPropertyPair> suppleMentBudgeInfo) {    ZcSupplementPProMakeToTableModelConverter.suppleMentBudgeInfo = suppleMentBudgeInfo;  }  private static List<ColumnBeanPropertyPair> suppleMentBudgeInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    suppleMentBudgeInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_SUPPLE_MENT_BUDGE,    "suppleMentAmount", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_SUPPLE_MENT_BUDGE)));    suppleMentBudgeInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_BI_JHUA_SUM,    "zcBiJhuaSum", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_BI_JHUA_SUM)));    suppleMentBudgeInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_FUND_CODE, "fundCode",    LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_FUND_CODE)));    suppleMentBudgeInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ORIGIN_CODE,    "originCode", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ORIGIN_CODE)));    suppleMentBudgeInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_PAYTYPE_CODE,    "paytypeCode", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PAYTYPE_CODE)));    suppleMentBudgeInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_SENDDOC_CODE,    "senddocCode", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_SENDDOC_NAME)));    suppleMentBudgeInfo.add(new ColumnBeanPropertyPair("ZC_FUND_REMARK", "zcFundRemark", LangTransMeta    .translate("ZC_FUND_REMARK")));    suppleMentBudgeInfo.add(new ColumnBeanPropertyPair("ZC_FUND_FILE", "zcFundFile", LangTransMeta    .translate("ZC_FUND_FILE")));  }  @SuppressWarnings("unchecked")  public static TableModel convertSubItemTableData(List itemList) {    BeanTableModel<ZcPProMitem> tm = new BeanTableModel<ZcPProMitem>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        return false;      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcPProMitem bean = dataBeanList.get(rowIndex);        if (aValue instanceof BaseElement) {          BeanUtil.set(columnBeanPropertyPairList.get(columnIndex).getBeanPropertyName(),          ((BaseElement) aValue).getName(), bean);          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else if (ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE.equals(this        .getColumnIdentifier(columnIndex))) {          if (aValue == null) {            this.getBean(rowIndex).setZcCatalogueCode(null);            this.getBean(rowIndex).setZcCatalogueName(null);          } else {            this.getBean(rowIndex).setZcCatalogueCode(((TreeNodeValueObject) aValue).getCode());            this.getBean(rowIndex).setZcCatalogueName(((TreeNodeValueObject) aValue).getName());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else if (ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH.equals(this        .getColumnIdentifier(columnIndex))) {          if (aValue == null) {            this.getBean(rowIndex).setZcPitemAttach(null);            this.getBean(rowIndex).setZcPitemAttachBlobid(null);          } else {            this.getBean(rowIndex).setZcPitemAttach(((AsFile) aValue).getFileName());            this.getBean(rowIndex).setZcPitemAttachBlobid(((AsFile) aValue).getFileId());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempId");    for (Object o : itemList) {      ((ZcPProMitem) o).setTempId(Guid.genID());    }    tm.setDataBean(itemList, itemInfo);    return tm;  }  public static TableModel convertSubBiTableData(List<ZcPProMitemBi> biList) {    BeanTableModel<ZcPProMitemBi> tm = new BeanTableModel<ZcPProMitemBi>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        String columnId = this.getColumnIdentifier(column);        return false;        //        if ("ZC_BI_YJBA_SUM".equals(columnId) || "ZC_FUND_FILE_BLOBID".equals(columnId)) {        //          return false;        //        }        //        return super.isCellEditable(row, column);      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcPProMitemBi bean = dataBeanList.get(rowIndex);        if ("ZC_FUND_FILE".equals(this.getColumnIdentifier(columnIndex))) {          if (aValue == null) {            this.getBean(rowIndex).setZcFundFile(null);            this.getBean(rowIndex).setZcFundFileBlobid(null);          } else {            this.getBean(rowIndex).setZcFundFile(((AsFile) aValue).getFileName());            this.getBean(rowIndex).setZcFundFileBlobid(((AsFile) aValue).getFileId());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(bean);        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempId");    for (ZcPProMitemBi o : biList) {      o.setTempId(Guid.genID());    }    //    tm.setOidFieldName("detailCode");    tm.setDataBean(biList, biInfo);    return tm;  }  public static TableModel convertSubSuppleMentBudgeTableData(List<ZcSuppleMentBi> biList,  final boolean isEdit) {    BeanTableModel<ZcSuppleMentBi> tm = new BeanTableModel<ZcSuppleMentBi>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        String columnId = this.getColumnIdentifier(column);        if (isEdit && "ZC_FIELD_SUPPLE_MENT_BUDGE".equals(columnId)) {          return true;        } else {          return false;        }      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcSuppleMentBi bean = dataBeanList.get(rowIndex);        if ("ZC_FUND_FILE".equals(this.getColumnIdentifier(columnIndex))) {          if (aValue == null) {            this.getBean(rowIndex).setZcFundFile(null);            this.getBean(rowIndex).setZcFundFileBlobid(null);          } else {            this.getBean(rowIndex).setZcFundFile(((AsFile) aValue).getFileName());            this.getBean(rowIndex).setZcFundFileBlobid(((AsFile) aValue).getFileId());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(bean);        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempId");    for (ZcSuppleMentBi o : biList) {      o.setTempId(Guid.genID());    }    //    tm.setOidFieldName("detailCode");    tm.setDataBean(biList, suppleMentBudgeInfo);    return tm;  }}
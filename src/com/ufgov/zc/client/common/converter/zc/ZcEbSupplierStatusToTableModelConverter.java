/** * ZcEbSupplierToTableModelConverter.java * com.ufgov.gk.client.common.converter.zc * Administrator * 2010-4-29 */package com.ufgov.zc.client.common.converter.zc;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.common.commonbiz.model.BaseElement;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.zc.model.TreeNodeValueObject;import com.ufgov.zc.common.zc.model.ZcEbPtPack;/** * @author Administrator * */public class ZcEbSupplierStatusToTableModelConverter {  private static String pageStatus = "NOTEDITABLE";  public static DefaultTableModel convertToTableModel(List supplierList,  ElementConditionDto elementConditionDto) throws ParseException {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    String openBidStatus = "";    String date = "";    names.add("项目编号");    names.add("项目名称");    //names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME));    names.add("采购单位");    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME));    //names.add("供应商");    names.add("开标时间");    if ("wait".equals(elementConditionDto.getStatus())) {      names.add("等待时间");    }    //    else if ("doing".equals(elementConditionDto.getStatus())) {    //      names.add("目前状态");    //    } else if ("fail".equals(elementConditionDto.getStatus())) {    //      names.add("失败原因");    //    } else if ("tender".equals(elementConditionDto.getStatus())) {    //      names.add("废标原因");    //    } else {    //      names.add("状态");    //    }    if (supplierList != null && supplierList.size() > 0) {      for (int i = 0; i < supplierList.size(); i++) {        Vector rowData = new Vector();        ZcEbPtPack supplier = (ZcEbPtPack) supplierList.get(i);        java.util.Date dt = null;        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");        DateFormat df = DateFormat.getDateInstance();        dt = df.parse(sdf.format(new Date()));        rowData.add(supplier.getProjCode());        rowData.add(supplier.getProjName());        //rowData.add(supplier.getPackName());        rowData.add(supplier.getZcAgeyName());        rowData.add(supplier.getPackName());        //rowData.add(supplier.getProviderName());        if (supplier.getOpenBidTime() != null) {          rowData.add(supplier.getOpenBidTime().toString());        }        if ("wait".equals(elementConditionDto.getStatus())) {          if (supplier.getOpenBidTime() != null) {            java.util.Date now = df.parse(sdf.format(new Date()));            java.util.Date OpenBidTime = sdf.parse(supplier.getOpenBidTime());            if (OpenBidTime.getTime() - now.getTime() > 0) {              long l = OpenBidTime.getTime() - now.getTime();              long day = l / (24 * 60 * 60 * 1000);              long hour = (l / (60 * 60 * 1000) - day * 24);              long min = ((l / (60 * 1000)) - day * 24 * 60 - hour * 60);              long s = (l / 1000 - day * 24 * 60 * 60 - hour * 60 * 60 - min * 60);              System.out.println("" + day + "天" + hour + "小时" + min + "分" + s + "秒");              date = day + "天" + hour + "小时" + min + "分" + s + "秒";            }          }        } else if ("doing".equals(elementConditionDto.getStatus())) {          date = "正在评标";        } else if ("fail".equals(elementConditionDto.getStatus())) {          date = supplier.getFailedReason();        } else if ("tender".equals(elementConditionDto.getStatus())) {          date = supplier.getFailedReason();        } else if ("all".equals(elementConditionDto.getStatus()))          //开标状态, 0：等待开标，1：开标成功，2：开标失败，3：中标，4：未中标，5：废标          if ("0".equals(supplier.getStatus())) {            date = "等待开标";          } else if ("1".equals(supplier.getStatus())) {            date = "开标成功";          } else if ("2".equals(supplier.getStatus())) {            date = "开标失败";          } else if ("3".equals(supplier.getStatus())) {            date = "中标";          } else if ("4".equals(supplier.getStatus())) {            date = "未中标";          } else if ("5".equals(supplier.getStatus())) {            date = "废标";          }        rowData.add(date);        date = "";        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(supplierList);    return tableModel;  }  @SuppressWarnings("unchecked")  public static TableModel convertSubItemTableData(List itemList, List info) {    BeanTableModel<ZcEbPtPack> tm = new BeanTableModel<ZcEbPtPack>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        String columnId = this.getColumnIdentifier(column);        if ("ZC_FIELD_ZC_CATALOGUE_NAME".equals(columnId)        || "ZC_FIELD_ZC_PITEM_ATTACH_BLOBID".equals(columnId) || "ZC_FIELD_ZC_ITEM_SUM".equals(columnId)) {          return false;        }        return super.isCellEditable(row, column);      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcEbPtPack bean = dataBeanList.get(rowIndex);        if (aValue instanceof BaseElement) {          BeanUtil.set(columnBeanPropertyPairList.get(columnIndex).getBeanPropertyName(),          ((BaseElement) aValue).getName(), bean);          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else if (ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE.equals(this        .getColumnIdentifier(columnIndex))) {          Object obj = getValueAt(rowIndex, columnIndex);          if (obj != null) {            if (aValue == null || !obj.equals(((TreeNodeValueObject) aValue).getCode())) {              this.getBean(rowIndex).setProviderName(null);              this.getBean(rowIndex).setIsPayGuarantee(null);            }          }          if (aValue == null) {            this.getBean(rowIndex).setProviderName(null);            this.getBean(rowIndex).setIsPayGuarantee(null);          } else {            this.getBean(rowIndex).setProviderName(((TreeNodeValueObject) aValue).getCode());            this.getBean(rowIndex).setIsPayGuarantee(((TreeNodeValueObject) aValue).getName());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else if (ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH.equals(this        .getColumnIdentifier(columnIndex))) {          if (aValue == null) {            this.getBean(rowIndex).setProviderName(null);            this.getBean(rowIndex).setIsPayGuarantee(null);          } else {            this.getBean(rowIndex).setProviderName(((AsFile) aValue).getFileName());            this.getBean(rowIndex).setIsPayGuarantee(((AsFile) aValue).getFileId());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempId");    for (Object o : itemList) {      ((ZcEbPtPack) o).setTempId(Guid.genID());    }    tm.setDataBean(itemList, info);    return tm;  }  @SuppressWarnings("unchecked")  public static TableModel convertSubItemTableDataForJJ(List itemList, List info) {    BeanTableModel<ZcEbPtPack> tm = new BeanTableModel<ZcEbPtPack>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        return false;      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcEbPtPack bean = dataBeanList.get(rowIndex);        if (aValue instanceof BaseElement) {          BeanUtil.set(columnBeanPropertyPairList.get(columnIndex).getBeanPropertyName(),          ((BaseElement) aValue).getName(), bean);          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else if (ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE.equals(this        .getColumnIdentifier(columnIndex))) {          Object obj = getValueAt(rowIndex, columnIndex);          if (obj != null) {            if (aValue == null || !obj.equals(((TreeNodeValueObject) aValue).getCode())) {              this.getBean(rowIndex).setProviderName(null);              this.getBean(rowIndex).setIsPayGuarantee(null);            }          }          if (aValue == null) {            this.getBean(rowIndex).setProviderName(null);            this.getBean(rowIndex).setIsPayGuarantee(null);          } else {            this.getBean(rowIndex).setProviderName(((TreeNodeValueObject) aValue).getCode());            this.getBean(rowIndex).setIsPayGuarantee(((TreeNodeValueObject) aValue).getName());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else if (ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH.equals(this        .getColumnIdentifier(columnIndex))) {          if (aValue == null) {            this.getBean(rowIndex).setProviderName(null);            this.getBean(rowIndex).setIsPayGuarantee(null);          } else {            this.getBean(rowIndex).setProviderName(((AsFile) aValue).getFileName());            this.getBean(rowIndex).setIsPayGuarantee(((AsFile) aValue).getFileId());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempId");    for (Object o : itemList) {      ((ZcEbPtPack) o).setTempId(Guid.genID());    }    tm.setDataBean(itemList, info);    return tm;  }  //标段一览  public static DefaultTableModel convertTbToTableModel(List supplierList,  ElementConditionDto elementConditionDto) throws ParseException {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    String openBidStatus = "";    String date = "";    names.add("供应商");    //    names.add("资质");    names.add("是否交纳保证金");    names.add("报价");    names.add("是否提交投标文件");    names.add("投标方式");    names.add("备注");    //names.add("供应商");    //names.add("开标时间");    if (supplierList != null && supplierList.size() > 0) {      String isPayGuarantee = "";      String isSubmitBidDoc = "";      String submitBidDocType = "";      for (int i = 0; i < supplierList.size(); i++) {        Vector rowData = new Vector();        ZcEbPtPack supplier = (ZcEbPtPack) supplierList.get(i);        java.util.Date dt = null;        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:MM:SS");        DateFormat df = DateFormat.getDateInstance();        dt = df.parse(sdf.format(new Date()));        rowData.add(supplier.getProviderName());        //        rowData.add(supplier.getPackName());        if ("1".equals(supplier.getIsPayGuarantee())) {          isPayGuarantee = "已缴纳";        } else {          isPayGuarantee = "未缴纳";        }        rowData.add(isPayGuarantee);        rowData.add(supplier.getBjsum());        if ("Y".equals(supplier.getIsSubmitBidDoc())) {          isSubmitBidDoc = "是";        } else {          isSubmitBidDoc = "否";        }        rowData.add(isSubmitBidDoc);        if ("1".equals(supplier.getSubmitBidDocType())) {          submitBidDocType = "网络";        } else if ("2".equals(supplier.getSubmitBidDocType())) {          submitBidDocType = "现场";        }        rowData.add(submitBidDocType);        rowData.add(supplier.getRemark());        rowData.add(date);        date = "";        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(supplierList);    return tableModel;  }  //评标信息标段一览  public static DefaultTableModel convertTbToPbTableModel(List supplierList,  ElementConditionDto elementConditionDto) throws ParseException {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    String openBidStatus = "";    String date = "";    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_NAME));    //names.add("投标供应商");    names.add("采购方式");    names.add("投标保正金");    //names.add("报价");    //names.add("评标状态");    //names.add("开标时间");    if (supplierList != null && supplierList.size() > 0) {      for (int i = 0; i < supplierList.size(); i++) {        Vector rowData = new Vector();        ZcEbPtPack supplier = (ZcEbPtPack) supplierList.get(i);        java.util.Date dt = null;        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:MM:SS");        DateFormat df = DateFormat.getDateInstance();        dt = df.parse(sdf.format(new Date()));        rowData.add(supplier.getPackCode());        rowData.add(supplier.getPackName());        //rowData.add(supplier.getPurContent());        rowData.add(supplier.getVal());        rowData.add(supplier.getBidDeposit());        rowData.add(date);        date = "";        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(supplierList);    return tableModel;  }}
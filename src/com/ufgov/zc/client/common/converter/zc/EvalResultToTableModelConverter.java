/**   * @(#) project: ZC* @(#) file: EvalResultToTableModelConverter.java* * Copyright 2010 UFGOV, Inc. All rights reserved.* UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.* */package com.ufgov.zc.client.common.converter.zc;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Vector;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.zc.model.EvalExpert;import com.ufgov.zc.common.zc.model.EvalPackProvider;import com.ufgov.zc.common.zc.model.ZcEbEvalItemResult;import com.ufgov.zc.common.zc.model.ZcEbExpertEvalResult;import com.ufgov.zc.common.zc.model.ZcEbPackEvalResult;/*** @ClassName: EvalResultToTableModelConverter* @Description: TODO(这里用一句话描述这个类的作用)* @date: 2010-11-14 下午05:45:25* @version: V1.0 * @since: 1.0* @author: fanpl* @modify: */public class EvalResultToTableModelConverter {  private List<EvalExpert> evalExpertList;  private boolean isScoreResultSum;  private Map<String, ZcEbPackEvalResult> sumResultMap;  public DefaultTableModel convertToSumTableModel(List<EvalPackProvider> providerList, List<EvalExpert> evalExpertList, boolean isScoreResultSum,  Map<String, ZcEbPackEvalResult> sumResultMap) {    this.evalExpertList = evalExpertList;    this.isScoreResultSum = isScoreResultSum;    this.sumResultMap = sumResultMap;    MyTableModel tableModel = null;    tableModel = new MyTableModel(getValue(providerList), getColumnName()) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(providerList);    return tableModel;  }  protected Vector<Object> getValue(List<EvalPackProvider> providerList) {    Vector<Object> values = new Vector<Object>();    if (null != providerList) {      for (int i = 0; i < providerList.size(); i++) {        values.add(toRowData((EvalPackProvider) providerList.get(i)));      }    }    return values;  }  private Vector<Object> toRowData(EvalPackProvider provider) {    Vector<Object> rowData = new Vector<Object>();    //供应商名称    rowData.add(provider.getProviderName());    if (isScoreResultSum) {      BigDecimal sum = new BigDecimal("0");      for (int i = 0; i < evalExpertList.size(); i++) {        BigDecimal evalScore = ((ZcEbExpertEvalResult) provider.getExpertEvalMap().get(evalExpertList.get(i).getExpertCode())).getScoreEvalResult();        rowData.add(evalScore);        sum = sum.add(evalScore);      }      //      rowData.add(sum);      rowData.add(sumResultMap.get(provider.getProviderCode()).getSumWay());      rowData.add(sumResultMap.get(provider.getProviderCode()).getEvalScore());      //      rowData.add(sumResultMap.get(provider.getProviderCode()).getIndx());    } else {      for (int i = 0; i < evalExpertList.size(); i++) {        rowData        .add(((ZcEbExpertEvalResult) provider.getExpertEvalMap().get(evalExpertList.get(i).getExpertCode())).getComplianceValue().equals("1") ? "通过"        : "不通过");      }      rowData.add(sumResultMap.get(provider.getProviderCode()).getSumWay());      rowData.add(sumResultMap.get(provider.getProviderCode()).getComplianceEvalValue().equals("1") ? "通过" : "不通过");    }    return rowData;  }  private Vector<String> getColumnName() {    Vector<String> names = new Vector<String>();    names.add("供应商");    //添加所有专家评审分值    for (int i = 0; i < evalExpertList.size(); i++) {      names.add(evalExpertList.get(i).getExpertName());    }    if (isScoreResultSum) {      //      names.add("总分");      names.add("汇总方式");      names.add("汇总得分");      //      names.add("排序");    } else {      names.add("汇总方式");      names.add("符合性评审结果");    }    return names;  }  private static List<ColumnBeanPropertyPair> expertScoreDetailResultInfo = new ArrayList<ColumnBeanPropertyPair>();  private static List<ColumnBeanPropertyPair> expertScoreSumResultInfo = new ArrayList<ColumnBeanPropertyPair>();  private static List<ColumnBeanPropertyPair> finallscoreResultInfo = new ArrayList<ColumnBeanPropertyPair>();  private static List<ColumnBeanPropertyPair> expertComplDetailResultInfo = new ArrayList<ColumnBeanPropertyPair>();  private static List<ColumnBeanPropertyPair> expertComplSumResultInfo = new ArrayList<ColumnBeanPropertyPair>();  private static List<ColumnBeanPropertyPair> finallComplResultInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    expertScoreDetailResultInfo.add(new ColumnBeanPropertyPair("PROVIDER_NAME", "providerName", "供应商"));    expertScoreDetailResultInfo.add(new ColumnBeanPropertyPair("ITEM_NAME", "itemName", "评审指标描述"));    expertScoreDetailResultInfo.add(new ColumnBeanPropertyPair("STANDARD_SCORE", "standardScore", "指标分值"));    expertScoreDetailResultInfo.add(new ColumnBeanPropertyPair("EXPERT_EVAL_SCORE", "expertEvalScore", "专家评审分值"));    expertScoreDetailResultInfo.add(new ColumnBeanPropertyPair("EVAL_DATE", "evalDate", "评审时间"));    expertScoreDetailResultInfo.add(new ColumnBeanPropertyPair("EXPERT_NAME", "evalExpert", "评审专家"));    expertScoreDetailResultInfo.add(new ColumnBeanPropertyPair("REMARK", "remark", "备注"));  }  static {    expertComplDetailResultInfo.add(new ColumnBeanPropertyPair("PROVIDER_NAME", "providerName", "供应商"));    expertComplDetailResultInfo.add(new ColumnBeanPropertyPair("ITEM_NAME", "itemName", "评审指标描述"));    expertComplDetailResultInfo.add(new ColumnBeanPropertyPair("COMPLIANCE_EVAL_VALUE", "complianceEvalValue", "评审结果"));    expertComplDetailResultInfo.add(new ColumnBeanPropertyPair("UNPASS_REASON", "complianceUnpassReason", "不通过原因"));    expertComplDetailResultInfo.add(new ColumnBeanPropertyPair("EVAL_DATE", "evalDate", "评审时间"));    expertComplDetailResultInfo.add(new ColumnBeanPropertyPair("EXPERT_NAME", "evalExpert", "评审专家"));    expertComplDetailResultInfo.add(new ColumnBeanPropertyPair("REMARK", "remark", "备注"));  }  static {    expertScoreSumResultInfo.add(new ColumnBeanPropertyPair("PROVIDER_NAME", "providerName", "供应商"));    expertScoreSumResultInfo.add(new ColumnBeanPropertyPair("SCORE_EVAL_RESULT", "scoreEvalResult", "专家评审分值"));    expertScoreSumResultInfo.add(new ColumnBeanPropertyPair("EXPERT_NAME", "expertName", "评审专家"));  }  static {    expertComplSumResultInfo.add(new ColumnBeanPropertyPair("PROVIDER_NAME", "providerName", "供应商"));    expertComplSumResultInfo.add(new ColumnBeanPropertyPair("COMPLIANCE_EVAL_VALUE", "complianceValue", "符合性评审结果"));    expertComplSumResultInfo.add(new ColumnBeanPropertyPair("EXPERT_NAME", "expertName", "评审专家"));  }  static {    finallscoreResultInfo.add(new ColumnBeanPropertyPair("PROVIDER_NAME", "providerName", "供应商"));    finallscoreResultInfo.add(new ColumnBeanPropertyPair("PROVIDER_TOTAL_PRICE", "providerTotalPrice", "供应商投标报价"));    finallscoreResultInfo.add(new ColumnBeanPropertyPair("SCORE_EVAL_RESULT", "evalScore", "专家评审分值"));    finallscoreResultInfo.add(new ColumnBeanPropertyPair("REMARK", "remark", "意见"));    finallscoreResultInfo.add(new ColumnBeanPropertyPair("EVAL_RESULT", "evalResult", "评审结果"));  }  static {    finallComplResultInfo.add(new ColumnBeanPropertyPair("PROVIDER_NAME", "providerName", "供应商"));    finallComplResultInfo.add(new ColumnBeanPropertyPair("COMPLIANCE_EVAL_VALUE", "complianceEvalValue", "符合性评审结果"));    //    finallComplResultInfo.add(new ColumnBeanPropertyPair("COMPLIANCE_EVAL_RESULT", "complianceEvalResult", "是否进入技术打分评审"));    finallComplResultInfo.add(new ColumnBeanPropertyPair("COMPLIANCE_UPPASS_REASON", "complianceUnpassReason", "评审不通过原因"));    //    finallComplResultInfo.add(new ColumnBeanPropertyPair("EXPERT_NAME", "expertName", "评审专家"));    finallComplResultInfo.add(new ColumnBeanPropertyPair("REMARK", "remark", "备注"));  }  public static TableModel convertScoreDetailTableData(List<ZcEbEvalItemResult> biList, final boolean isEditable) {    BeanTableModel<ZcEbEvalItemResult> tm = new BeanTableModel<ZcEbEvalItemResult>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        String columnId = this.getColumnIdentifier(column);        if (isEditable && ("EXPERT_EVAL_SCORE".equals(columnId) || "REMARK".equals(columnId) )) {          return true;        }        return false;      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        super.setValueAt(aValue, rowIndex, columnIndex);      }    };    tm.setOidFieldName("tempId");    for (ZcEbEvalItemResult o : biList) {      o.setTempId(Guid.genID());    }    //    tm.setOidFieldName("detailCode");    tm.setDataBean(biList, expertScoreDetailResultInfo);    return tm;  }  public static TableModel convertComplDetailTableData(List<ZcEbEvalItemResult> biList, final boolean isEditable) {    BeanTableModel<ZcEbEvalItemResult> tm = new BeanTableModel<ZcEbEvalItemResult>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        String columnId = this.getColumnIdentifier(column);        if (isEditable && ("COMPLIANCE_EVAL_VALUE".equals(columnId) || "UNPASS_REASON".equals(columnId) || "REMARK".equals(columnId))) {          return true;        }        return false;           }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        super.setValueAt(aValue, rowIndex, columnIndex);      }    };    tm.setOidFieldName("tempId");    for (ZcEbEvalItemResult o : biList) {      o.setTempId(Guid.genID());    }    //    tm.setOidFieldName("detailCode");    tm.setDataBean(biList, expertComplDetailResultInfo);    return tm;  }  public static TableModel convertScoreResultTableData(List<ZcEbExpertEvalResult> biList, final boolean isEditable) {    BeanTableModel<ZcEbExpertEvalResult> tm = new BeanTableModel<ZcEbExpertEvalResult>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        if (!isEditable) {          return false;        }        return false;      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcEbExpertEvalResult bean = dataBeanList.get(rowIndex);        super.setValueAt(aValue, rowIndex, columnIndex);      }    };    tm.setOidFieldName("tempId");    for (ZcEbExpertEvalResult o : biList) {      o.setTempId(Guid.genID());    }    //    tm.setOidFieldName("detailCode");    tm.setDataBean(biList, expertScoreSumResultInfo);    return tm;  }  public static TableModel convertComplResultTableData(List<ZcEbExpertEvalResult> biList, final boolean isEditable) {    BeanTableModel<ZcEbExpertEvalResult> tm = new BeanTableModel<ZcEbExpertEvalResult>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        if (!isEditable) {          return false;        }        return false;      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcEbExpertEvalResult bean = dataBeanList.get(rowIndex);        super.setValueAt(aValue, rowIndex, columnIndex);      }    };    tm.setOidFieldName("tempId");    for (ZcEbExpertEvalResult o : biList) {      o.setTempId(Guid.genID());    }    //    tm.setOidFieldName("detailCode");    tm.setDataBean(biList, expertComplSumResultInfo);    return tm;  }  public static TableModel convertComplFinalResultTableData(List<ZcEbPackEvalResult> biList, final boolean isEditable) {    BeanTableModel<ZcEbPackEvalResult> tm = new BeanTableModel<ZcEbPackEvalResult>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        if (!isEditable) {          return false;        }        String columnId = this.getColumnIdentifier(column);        if ("PROVIDER_NAME".equals(columnId) || "COMPLIANCE_EVAL_VALUE".equals(columnId) || "EXPERT_NAME".equals(columnId)) {          return false;        }        return true;      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcEbPackEvalResult bean = dataBeanList.get(rowIndex);        super.setValueAt(aValue, rowIndex, columnIndex);      }    };    tm.setOidFieldName("tempId");    for (ZcEbPackEvalResult o : biList) {      o.setTempId(Guid.genID());    }    //    tm.setOidFieldName("detailCode");    tm.setDataBean(biList, finallComplResultInfo);    return tm;  }  public static TableModel convertScoreFinalResultTableData(List<ZcEbPackEvalResult> biList, final boolean isEditable) {    BeanTableModel<ZcEbPackEvalResult> tm = new BeanTableModel<ZcEbPackEvalResult>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        if (!isEditable) {          return false;        }        String columnId = this.getColumnIdentifier(column);        if ("PROVIDER_NAME".equals(columnId) || "PROVIDER_TOTAL_PRICE".equals(columnId) || "SCORE_EVAL_RESULT".equals(columnId)        || "EVAL_RESULT".equals(columnId)) {          return false;        }        return true;      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcEbPackEvalResult bean = dataBeanList.get(rowIndex);        super.setValueAt(aValue, rowIndex, columnIndex);      }    };    tm.setOidFieldName("tempId");    for (ZcEbPackEvalResult o : biList) {      o.setTempId(Guid.genID());    }    tm.setDataBean(biList, finallscoreResultInfo);    return tm;  }  public static List<ColumnBeanPropertyPair> getExpertScoreSumResultInfo() {    return expertScoreSumResultInfo;  }  public static void setExpertScoreSumResultInfo(List<ColumnBeanPropertyPair> expertScoreSumResultInfo) {    EvalResultToTableModelConverter.expertScoreSumResultInfo = expertScoreSumResultInfo;  }  public static List<ColumnBeanPropertyPair> getExpertScoreDetailResultInfo() {    return expertScoreDetailResultInfo;  }  public static void setExpertScoreDetailResultInfo(List<ColumnBeanPropertyPair> expertScoreDetailResultInfo) {    EvalResultToTableModelConverter.expertScoreDetailResultInfo = expertScoreDetailResultInfo;  }  public static List<ColumnBeanPropertyPair> getFinallscoreResultInfo() {    return finallscoreResultInfo;  }  public static void setFinallscoreResultInfo(List<ColumnBeanPropertyPair> finallscoreResultInfo) {    EvalResultToTableModelConverter.finallscoreResultInfo = finallscoreResultInfo;  }  public static List<ColumnBeanPropertyPair> getExpertComplDetailResultInfo() {    return expertComplDetailResultInfo;  }  public static void setExpertComplDetailResultInfo(List<ColumnBeanPropertyPair> expertComplDetailResultInfo) {    EvalResultToTableModelConverter.expertComplDetailResultInfo = expertComplDetailResultInfo;  }  public static List<ColumnBeanPropertyPair> getExpertComplSumResultInfo() {    return expertComplSumResultInfo;  }  public static void setExpertComplSumResultInfo(List<ColumnBeanPropertyPair> expertComplSumResultInfo) {    EvalResultToTableModelConverter.expertComplSumResultInfo = expertComplSumResultInfo;  }  public static List<ColumnBeanPropertyPair> getFinallComplResultInfo() {    return finallComplResultInfo;  }  public static void setFinallComplResultInfo(List<ColumnBeanPropertyPair> finallComplResultInfo) {    EvalResultToTableModelConverter.finallComplResultInfo = finallComplResultInfo;  }}
package com.ufgov.zc.client.common.converter.zc;import java.math.BigDecimal;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Vector;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.client.component.ui.conditionitem.ConditionFieldConstants;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.datacache.CompanyDataCache;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.zc.model.TreeNodeValueObject;import com.ufgov.zc.common.zc.model.ZcEbRequirement;import com.ufgov.zc.common.zc.model.ZcEbRequirementDetail;@SuppressWarnings("unchecked")public class ZcEbRequirementToTableModelConverter {  public static DefaultTableModel convertToTableModel(List requirementList) {    MyTableModel tableModel = null;    Vector<String> names = new Vector<String>();    Vector values = new Vector();    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_REQ_CODE));    // names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_CODE));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_NAME));    // names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_CODE));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_NAME));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_CODE_ND));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PIFU_CGFS));    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_IS_IMP));    // names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_REQ_CODE));    // names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_TRANS_SN));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_REQ_DATE));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_STATUS));    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_REMARK));    // names.add(LangTransMeta.translate(ZcElementConstants.FIELD_PROCESS_INST_ID));    if (requirementList != null && requirementList.size() > 0) {      for (int i = 0; i < requirementList.size(); i++) {        Vector rowData = new Vector();        ZcEbRequirement zcEbRequirement = (ZcEbRequirement) requirementList.get(i);        rowData.add(zcEbRequirement.getReqCode());        rowData.add(zcEbRequirement.getZcEbEntrust().getZcMakeName());        // rowData.add(zcEbRequirement.getZcEbEntrust().getZcCoCode());        rowData.add(CompanyDataCache.getName(zcEbRequirement.getZcEbEntrust().getCoCode()));        rowData.add(zcEbRequirement.getZcEbEntrust().getNd());        rowData.add(AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", zcEbRequirement.getZcEbEntrust().getZcPifuCgfs()));        //        rowData.add(AsValDataCache.getName("VS_Y/N", zcEbRequirement.getZcEbEntrust().getZcIsImp()));        // rowData.add(zcEbRequirement.getReqCode());        // rowData.add(zcEbRequirement.getSn());        rowData.add(zcEbRequirement.getReqDate());        rowData.add(AsValDataCache.getName(ConditionFieldConstants.ZC_VS_REQUIREMENT_STATUS, zcEbRequirement.getStatus()));        //        rowData.add(zcEbRequirement.getRemark());        // rowData.add(zcEbRequirement.getProcessInstId());        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      private static final long serialVersionUID = 3123244681117334262L;      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(requirementList);    return tableModel;  }  public static void getTableColumnBean() {  }  private static List<ColumnBeanPropertyPair> detailTableColumnInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    // detailTableColumnInfo.add(new    // ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_DETAIL_CODE,    // "detailCode",    // LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_DETAIL_CODE)));    // detailTableColumnInfo.add(new    // ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_REQ_CODE,    // "reqCode",    // LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_REQ_CODE)));    // detailTableColumnInfo.add(new    // ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_SND, "snd",    // LangTransMeta    // .translate(ZcElementConstants.FIELD_TRANS_SND)));    // detailTableColumnInfo.add(new    // ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_SN, "sn",    // LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_SN)));    detailTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE, "zcCatalogueCode", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE)));    detailTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_NAME, "zcCatalogueName", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_NAME)));    detailTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_REQUIREMENT_NAME, "name", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_REQUIREMENT_NAME)));    detailTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ARR_DATE, "arrDate", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ARR_DATE)));    detailTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_BASE_REQ, "baseReq", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_BASE_REQ)));    detailTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ITEM_ATTACH, "itemAttach", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ITEM_ATTACH)));    // detailTableColumnInfo.add(new    // ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ITEM_ATTACH_BLOBID,    // "itemAttachBlobid",    // LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ITEM_ATTACH_BLOBID)));    detailTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_NUM, "num", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_NUM)));    detailTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ITEM_SUM, "itemSum", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ITEM_SUM)));    detailTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_MER_PRICE, "merPrice", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_MER_PRICE)));    detailTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_PAY_COND, "payCond", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_PAY_COND)));    detailTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_SERVICE_PROMISES, "servicePromises", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_SERVICE_PROMISES)));    detailTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_REQUIREMENT_TYPE, "type", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_REQUIREMENT_TYPE)));    detailTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_DESCRIPTION, "description", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_DESCRIPTION)));  }  private static List<ColumnBeanPropertyPair> detailOtherTableColumnInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    // detailOtherTableColumnInfo.add(new    // ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_DETAIL_CODE,    // "detailCode",    // LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_DETAIL_CODE)));    // detailOtherTableColumnInfo.add(new    // ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_REQ_CODE,    // "reqCode",    // LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_REQ_CODE)));    detailOtherTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_SND, "snd", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_SND)));    // detailOtherTableColumnInfo.add(new    // ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_SN, "sn",    // LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_SN)));    detailOtherTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_REQUIREMENT_NAME, "name", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_REQUIREMENT_NAME)));    detailOtherTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ITEM_ATTACH, "itemAttach", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ITEM_ATTACH)));    // detailOtherTableColumnInfo.add(new    // ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ITEM_ATTACH_BLOBID,    // "itemAttachBlobid",    // LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ITEM_ATTACH_BLOBID)));    detailOtherTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_REQUIREMENT_TYPE, "type", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_REQUIREMENT_TYPE)));    detailOtherTableColumnInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_DESCRIPTION, "description", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_DESCRIPTION)));  }  public static List<ColumnBeanPropertyPair> getDetailTableColumnInfo() {    return detailTableColumnInfo;  }  public static List<ColumnBeanPropertyPair> getDetailOtherTableColumnInfo() {    return detailOtherTableColumnInfo;  }  public static TableModel convertRequirementDeToTableModel(List<ZcEbRequirementDetail> reqList, final Map wfCanEditFieldMap) {    BeanTableModel<ZcEbRequirementDetail> tm = new BeanTableModel<ZcEbRequirementDetail>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        if (ZcElementConstants.        FIELD_TRANS_REQUIREMENT_TYPE.equals(this.getColumnIdentifier(column))        || ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_NAME.equals(this.getColumnIdentifier(column))        || ZcElementConstants.FIELD_TRANS_SN.equals(this.getColumnIdentifier(column))        || ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_DETAIL_CODE.equals(this.getColumnIdentifier(column))        || ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_REQ_CODE.equals(this.getColumnIdentifier(column))        || ZcElementConstants.FIELD_TRANS_ITEM_SUM.equals(this.getColumnIdentifier(column))        || ZcElementConstants.FIELD_TRANS_MER_PRICE.equals(this.getColumnIdentifier(column))        || ZcElementConstants.FIELD_TRANS_NUM.equals(this.getColumnIdentifier(column))) {          return false;        }        String columnId = this.getColumnIdentifier(column);        String newColum = null;        if (columnId.startsWith("ZC_FIELD_")) {          newColum = columnId.substring("ZC_FIELD_".length());        } else if (columnId.startsWith("ZC_REQUIREMENT_")) {          newColum = columnId.substring("ZC_REQUIREMENT_".length());        } else if (columnId.startsWith("ZC_")) {          newColum = columnId.substring("ZC_".length());        }        if (wfCanEditFieldMap != null && !wfCanEditFieldMap.containsKey(newColum)) {          return false;        }        return true;      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcEbRequirementDetail bean = dataBeanList.get(rowIndex);        String currentColName = this.getColumnIdentifier(columnIndex);        if (ZcElementConstants.FIELD_TRANS_ITEM_ATTACH.equals(currentColName)) {          if (aValue == null) {            this.getBean(rowIndex).setItemAttach(null);            this.getBean(rowIndex).setItemAttachBlobid(null);          } else {            this.getBean(rowIndex).setItemAttach(((AsFile) aValue).getFileName());            this.getBean(rowIndex).setItemAttachBlobid(((AsFile) aValue).getFileId());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(bean);        } else if (ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE.equals(currentColName)) {          if (aValue == null) {            this.getBean(rowIndex).setZcCatalogueCode(null);            this.getBean(rowIndex).setZcCatalogueName(null);          } else {            this.getBean(rowIndex).setZcCatalogueCode(((TreeNodeValueObject) aValue).getCode());            this.getBean(rowIndex).setZcCatalogueName(((TreeNodeValueObject) aValue).getName());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(bean);        } else if (ZcElementConstants.FIELD_TRANS_NUM.equals(currentColName) || ZcElementConstants.FIELD_TRANS_MER_PRICE.equals(currentColName)) {          if (ZcElementConstants.FIELD_TRANS_NUM.equals(currentColName)) {            bean.setNum(new Integer(aValue.toString()));          }          if (ZcElementConstants.FIELD_TRANS_MER_PRICE.equals(currentColName)) {            bean.setMerPrice(new BigDecimal(aValue.toString()));          }          Integer sl = bean.getNum() == null ? 0 : bean.getNum();          BigDecimal price = bean.getMerPrice() == null ? BigDecimal.ZERO : bean.getMerPrice();          bean.setItemSum(new BigDecimal(sl).multiply(price));          putEditedData(bean);          fireTableCellUpdated(rowIndex, columnIndex);        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempId");    for (ZcEbRequirementDetail data : reqList) {      data.setTempId(Guid.genID());    }    tm.setDataBean(reqList, detailTableColumnInfo);    return tm;  }  public static TableModel convertRequirementDeOtherToTableModel(List<ZcEbRequirementDetail> reqOtherList) {    BeanTableModel<ZcEbRequirementDetail> tm = new BeanTableModel<ZcEbRequirementDetail>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        if (ZcElementConstants.FIELD_TRANS_REQUIREMENT_TYPE.equals(this.getColumnIdentifier(column))        || ZcElementConstants.FIELD_TRANS_SN.equals(this.getColumnIdentifier(column))        || ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_DETAIL_CODE.equals(this.getColumnIdentifier(column))        || ZcElementConstants.FIELD_TRANS_ZC_REQUIREMENT_REQ_CODE.equals(this.getColumnIdentifier(column))) {          return false;        }        return true;      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcEbRequirementDetail bean = dataBeanList.get(rowIndex);        if (ZcElementConstants.FIELD_TRANS_ITEM_ATTACH.equals(this.getColumnIdentifier(columnIndex))) {          if (aValue == null) {            this.getBean(rowIndex).setItemAttach(null);            this.getBean(rowIndex).setItemAttachBlobid(null);          } else {            this.getBean(rowIndex).setItemAttach(((AsFile) aValue).getFileName());            this.getBean(rowIndex).setItemAttachBlobid(((AsFile) aValue).getFileId());          }          putEditedData(bean);          fireTableCellUpdated(rowIndex, columnIndex);        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempId");    for (ZcEbRequirementDetail data : reqOtherList) {      data.setTempId(Guid.genID());    }    tm.setDataBean(reqOtherList, detailOtherTableColumnInfo);    return tm;  }}
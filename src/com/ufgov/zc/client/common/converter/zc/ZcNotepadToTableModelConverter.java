package com.ufgov.zc.client.common.converter.zc;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.common.system.util.DateUtil;import com.ufgov.zc.common.zc.model.ZcNotepad;@SuppressWarnings("unchecked")public class ZcNotepadToTableModelConverter {  public static DefaultTableModel convertToTableModel(List projectList) {    MyTableModel tableModel = null;    Vector<String> names = new Vector<String>();    Vector values = new Vector();    prepareColumnHeader(names);    if (projectList != null && projectList.size() > 0) {      for (int i = 0; i < projectList.size(); i++) {        Vector rowData = new Vector();        ZcNotepad zcNotepad = (ZcNotepad) projectList.get(i);        rowData.add(zcNotepad.getSnCode());        rowData.add(zcNotepad.getEntrustName());        rowData.add(subContent(zcNotepad.getContent()));        rowData.add(zcNotepad.getEditUserName());        rowData.add(DateUtil.dateToSsString(zcNotepad.getEditDate()));        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      private static final long serialVersionUID = 3123244681117334262L;      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(projectList);    return tableModel;  }  private static String subContent(String content) {    if (content == null) {      return "";    }    if (content.length() > 30) {      return content.substring(0, 30) + "...";    }    return content;  }  private static void prepareColumnHeader(Vector<String> names) {    names.add("任务编号");    names.add("任务名称");    names.add("内  容");    names.add("记录人");    names.add("记录时间");  }}
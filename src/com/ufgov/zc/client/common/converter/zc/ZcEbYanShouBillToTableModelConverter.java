/** *  */package com.ufgov.zc.client.common.converter.zc;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.Vector;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.zc.model.ZcEbYanShouBill;import com.ufgov.zc.common.zc.model.ZcEbYanShouBillItem;/** * @author Administrator * */public class ZcEbYanShouBillToTableModelConverter {  @SuppressWarnings( { "unchecked", "serial" })  public static DefaultTableModel convertToTableModel(List billList) {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    //    names.add("验收单号");    //    names.add("验收单名称");    names.add("采购计划编号");    names.add("预算单位");    names.add("供应商");    names.add("状态");    names.add("采购项目");    names.add("预算单位联系人");    names.add("供应商负责人");    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE));    names.add("验收内容");    if (billList != null && billList.size() > 0) {      for (int i = 0; i < billList.size(); i++) {        Vector rowData = new Vector();        ZcEbYanShouBill bill = (ZcEbYanShouBill) billList.get(i);        //        rowData.add(bill.getBillCode());        //        rowData.add(bill.getBillName());        rowData.add(bill.getProjCode());        rowData.add(bill.getCoName());        rowData.add(bill.getZcSuName());        rowData.add(AsValDataCache.getName(ZcElementConstants.VS_ZC_EB_YANSHOU, bill.getStatus()));        rowData.add(bill.getProjName());        //        rowData.add(bill.getPackCode());        rowData.add(bill.getZcMakeLinkMan());        rowData.add(bill.getZcSuLinkMan());        rowData.add(bill.getPackName());        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      @Override      public Class getColumnClass(int column) {        if (column >= 0 && column < getColumnCount() && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      @Override      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(billList);    return tableModel;  }  private static List<ColumnBeanPropertyPair> BillDetailInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    //    BillDetailInfo.add(new ColumnBeanPropertyPair("ITEM_CODE", "item_code", "明细编号"));    BillDetailInfo.add(new ColumnBeanPropertyPair("PRODUCT_NAME", "productName", "产品名称"));    BillDetailInfo.add(new ColumnBeanPropertyPair("PRODUCT_PARAM", "productParam", "规格型号及配置"));    BillDetailInfo.add(new ColumnBeanPropertyPair("HT_AMOUNT", "htAmount", "合同金额"));    BillDetailInfo.add(new ColumnBeanPropertyPair("HT_NUM", "htNum", "合同数量"));//    BillDetailInfo.add(new ColumnBeanPropertyPair("ZHIFU_AMOUNT", "zhifuAmount", "实际支付金额"));    BillDetailInfo.add(new ColumnBeanPropertyPair("SHISHOU_NUM", "shiShouNum", "实收数量"));//    BillDetailInfo.add(new ColumnBeanPropertyPair("PIANCHA_AMOUNT", "pianChaAmount", "与合同偏差金额"));    BillDetailInfo.add(new ColumnBeanPropertyPair("PIANCHA_NUM", "pianChaNum", "与合同偏差数量"));  }  public static TableModel convertSubBiTableData(List<ZcEbYanShouBillItem> biList, final Map wfCanEditFieldMap) {    BeanTableModel<ZcEbYanShouBillItem> tm = new BeanTableModel<ZcEbYanShouBillItem>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        String columnId = this.getColumnIdentifier(column);        if ("HT_AMOUNT".equals(columnId) || "HT_NUM".equals(columnId) || "PRODUCT_NAME".equals(columnId) || "PRODUCT_PARAM".equals(columnId)        || "PIANCHA_NUM".equals(columnId) || "PIANCHA_AMOUNT".equals(columnId)) {          return false;        } else {          if (wfCanEditFieldMap != null && wfCanEditFieldMap.size() > 0) {            System.out.println(wfCanEditFieldMap);            if (wfCanEditFieldMap.containsKey(columnId)) {              return true;            }          } else {            return true;          }        }        return super.isCellEditable(row, column);      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        super.setValueAt(aValue, rowIndex, columnIndex);      }    };    tm.setOidFieldName("tempId");    for (ZcEbYanShouBillItem o : biList) {      o.setTempId(Guid.genID());    }    //    tm.setOidFieldName("detailCode");    tm.setDataBean(biList, BillDetailInfo);    return tm;  }  public static List<ColumnBeanPropertyPair> getBillDetailInfo() {    return BillDetailInfo;  }  public static void setBillDetailInfo(List<ColumnBeanPropertyPair> billDetailInfo) {    BillDetailInfo = billDetailInfo;  }}
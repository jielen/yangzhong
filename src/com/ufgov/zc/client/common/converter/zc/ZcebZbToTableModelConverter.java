package com.ufgov.zc.client.common.converter.zc;import java.util.ArrayList;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.common.zc.model.TreeNodeValueObject;import com.ufgov.zc.common.zc.model.ZcebZb;import com.ufgov.zc.common.zc.model.ZcebZbItem;/*** @ClassName: ZcEbSignupToTableModelConverter* @Description: TODO(这里用一句话描述这个类的作用)* @date: Apr 21, 2010 5:04:26 PM* @version: V1.0 * @since: 1.0* @author: * @modify: */public class ZcebZbToTableModelConverter {  public DefaultTableModel convertToTableModel(List zbList) {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add("采购项目");    names.add("采购单位");    names.add("中标供应商");    names.add("中标内容");    names.add("中标金额");    names.add("状态");    if (zbList != null && zbList.size() > 0) {      for (int i = 0; i < zbList.size(); i++) {        Vector rowData = new Vector();        ZcebZb zb = (ZcebZb) zbList.get(i);        rowData.add(zb.getMakeName());        rowData.add(zb.getCoName());        rowData.add(zb.getSuName());        rowData.add(zb.getBidContent());        rowData.add(zb.getBidSum());        rowData.add(AsValDataCache.getName("ZC_VS_BID_STATUS", zb.getStatus()));        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(zbList);    return tableModel;  }  public TableModel convertZbItemToTableModel(List deList) {    BeanTableModel tm = new BeanTableModel() {      public boolean isCellEditable(int row, int column) {        String identifier = this.getColumnIdentifier(column);        if (identifier.equals("CATALOGUE_NAME")) {          return false;        }        return true;      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcebZbItem bean = (ZcebZbItem) getDataBeanList().get(rowIndex);        //        BeanUtil.set(((ColumnBeanPropertyPair) columnBeanPropertyPairList.get(columnIndex)).getBeanPropertyName(), aValue, bean);        //        this.putEditedData(bean);        //        fireTableCellUpdated(rowIndex, columnIndex);        if ("CATALOGUE_CODE".equals(this.getColumnIdentifier(columnIndex))) {          if (aValue == null) {            bean.setCatalogueCode(null);            bean.setCatalogueName(null);          } else {            bean.setCatalogueCode(((TreeNodeValueObject) aValue).getCode());            bean.setCatalogueName(((TreeNodeValueObject) aValue).getName());          }          putEditedData(bean);          fireTableCellUpdated(rowIndex, columnIndex);        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempGuid");    String[] colums = new String[] { "CATALOGUE_CODE", "CATALOGUE_NAME", "SP_NAME", "SP_SPEC", "AMOUNT", "PRICE", "SUMS", "IS_JNJS", "IS_ZZCX",    "IS_LSHB" };    String[] names = new String[] { "catalogueCode", "catalogueName", "spName", "spSpec", "amount", "price", "sums", "isJnjs", "isZzcx", "isLshb" };    tm.setDataBean(deList, createColumnBeanPropertyPairs(colums, names));    return tm;  }  private List<ColumnBeanPropertyPair> createColumnBeanPropertyPairs(String[] colums, String[] names) {    List<ColumnBeanPropertyPair> pairList = new ArrayList<ColumnBeanPropertyPair>();    for (int i = 0; i < colums.length; i++) {      ColumnBeanPropertyPair pair = new ColumnBeanPropertyPair();      pair.setColumnIdentifier(colums[i]);      pair.setBeanPropertyName(names[i]);      pairList.add(pair);    }    return pairList;  }}
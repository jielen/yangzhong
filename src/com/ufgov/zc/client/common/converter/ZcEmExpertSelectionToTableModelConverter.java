package com.ufgov.zc.client.common.converter;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.zc.model.EmCallExpertRecord;import com.ufgov.zc.common.zc.model.EmEvaluationCondition;import com.ufgov.zc.common.zc.model.EmExpertBillFilter;import com.ufgov.zc.common.zc.model.EmExpertEvaluation;import com.ufgov.zc.common.zc.model.EmExpertSelectionBill;import com.ufgov.zc.common.zc.model.EmExpertTypeSelection;import com.ufgov.zc.common.zc.model.ZcEbPack;public class ZcEmExpertSelectionToTableModelConverter {  public static String EM_EXPERT_CODE = "EM_EXPERT_CODE";  public static String EM_EXPERT_NAME = "EM_EXPERT_NAME";  public static String EM_EXPERT_UNIT_NAME = "EM_UNIT_NAME";  public static String EM_EXPERT_TPYE_CODE = "EM_TPYE_CODE";  public static String EM_EXPERT_TPYE_NAME = "EM_TPYE_NAME";  public static String EM_YEAR = "EM_YEAR";  public static String CALL_NUM = "CALL_NUM";  public static String CALL_TIME = "CALL_TIME";  public static String CALL_STATE = "CALL_STATE";  public static String DOCTOR_NUM = "DOCTOR_NUM";  public static String EM_MOBILE = "EM_MOBILE";  public static List<ColumnBeanPropertyPair> ppcColumns;  public static List<ColumnBeanPropertyPair> escColumns;  public static List<ColumnBeanPropertyPair> eelColumns;  public static List<ColumnBeanPropertyPair> esrColumns;  public static List<ColumnBeanPropertyPair> crColumns;  public static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  public DefaultTableModel convertToTableModel(List<Object> ol) {    MyTableModel tableModel = null;    Vector<String> names = new Vector<String>();    Vector<Object> values = new Vector<Object>();    names.add("抽取登记代码");    names.add("采购项目名称");    names.add("采购单位名称");    names.add("开标时间");    names.add("联系人");    names.add("联系人电话");    names.add("监抽人名称");    names.add("评标地点");    names.add("状态");    names.add("抽取时间");    if (ol != null && ol.size() > 0) {      for (int i = 0; i < ol.size(); i++) {        Vector<Object> rowData = new Vector<Object>();        EmExpertSelectionBill o = (EmExpertSelectionBill) ol.get(i);        rowData.add(o.getBillCode());        rowData.add(o.getMakeName());        rowData.add(o.getContactCompany());        if (o.getTendersTime() != null) {          rowData.add(sdf.format(o.getTendersTime()));        } else {          rowData.add("");        }        rowData.add(o.getContactPerson());        rowData.add(o.getContactPhone());        rowData.add(o.getGuarderCode());        rowData.add(o.getBillPlace());        rowData.add(AsValDataCache.getName("EM_VS_BILL_STATUS", o.getBillStatus()));        rowData.add(o.getInputorDate());        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      private static final long serialVersionUID = -939387425559050066L;      @SuppressWarnings("unchecked")      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {            return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(ol);    return tableModel;  }  public static TableModel convertEmCallExpertRecordToTableMode(List<EmCallExpertRecord> ol, boolean showInfo) {    BeanTableModel<EmCallExpertRecord> tm = new BeanTableModel<EmCallExpertRecord>() {      private static final long serialVersionUID = 7491845032261012782L;      @Override      public boolean isCellEditable(int row, int column) {        return false;      }    };    tm.setOidFieldName("tempId");    if (ol != null) {      for (EmCallExpertRecord o : ol) {        o.setTempId(Guid.genID());      }    }    crColumns = new ArrayList<ColumnBeanPropertyPair>();    if (showInfo) {      crColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_CODE, "emExpert.emExpertCode", "专家代码"));      crColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_NAME, "emExpert.emExpertName", "姓名"));      crColumns.add(new ColumnBeanPropertyPair(EM_MOBILE, "emExpert.emMobile", "电话"));    } else {      crColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_CODE, "emExpert.hideInfo", "专家代码"));      crColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_NAME, "emExpert.hideInfo", "姓名"));      crColumns.add(new ColumnBeanPropertyPair(EM_MOBILE, "emExpert.hideInfo", "电话"));    }    crColumns.add(new ColumnBeanPropertyPair(CALL_NUM, "callNum", "呼叫次序"));    crColumns.add(new ColumnBeanPropertyPair(CALL_TIME, "callTime", "呼叫时间"));    crColumns.add(new ColumnBeanPropertyPair(CALL_STATE, "callState", "呼叫情况"));    tm.setDataBean(ol, crColumns);    return tm;  }  public static TableModel convertEmExpertEvaluationToTableMode(List<EmExpertEvaluation> ol, boolean showInfo) {    BeanTableModel<EmExpertEvaluation> tm = new BeanTableModel<EmExpertEvaluation>() {      private static final long serialVersionUID = 5844039329387565537L;      @Override      public boolean isCellEditable(int row, int column) {        String columnId = this.getColumnIdentifier(column);        if (columnId.equals(EM_EXPERT_NAME) || columnId.equals(EM_MOBILE) || columnId.equals(EM_EXPERT_CODE)) { return true; }        return true;      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        if (EM_EXPERT_TPYE_CODE.equals(this.getColumnIdentifier(columnIndex))) {          if (aValue == null) {            this.getBean(rowIndex).setEmExpertType(null);          } else {            this.getBean(rowIndex).setEmExpertType(((EmExpertTypeSelection) aValue).getEmExpertType());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempId");    if (ol != null) {      for (EmExpertEvaluation o : ol) {        o.setTempId(Guid.genID());      }    }    esrColumns = new ArrayList<ColumnBeanPropertyPair>();    esrColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_TPYE_CODE, "emExpertType.emTypeCode", "专家类型代码"));    esrColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_TPYE_NAME, "emExpertType.emTypeName", "专家类型名称"));    //esrColumns.add(new ColumnBeanPropertyPair(EM_YEAR, "emYear", "品目年度"));    if (showInfo) {      esrColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_CODE, "emExpert.emExpertCode", "专家代码"));      esrColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_NAME, "emExpert.emExpertName", "姓名"));      esrColumns.add(new ColumnBeanPropertyPair(EM_MOBILE, "emExpert.emMobile", "电话"));    } else {      esrColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_CODE, "emExpert.hideInfo", "专家代码"));      esrColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_NAME, "emExpert.hideInfo", "姓名"));      esrColumns.add(new ColumnBeanPropertyPair(EM_MOBILE, "emExpert.hideInfo", "电话"));    }    tm.setDataBean(ol, esrColumns);    return tm;  }  public static TableModel convertEmEvaluationConditionToTableMode(List<EmEvaluationCondition> ol) {    BeanTableModel<EmEvaluationCondition> tm = new BeanTableModel<EmEvaluationCondition>() {      private static final long serialVersionUID = -956154342022052499L;      @Override      public boolean isCellEditable(int row, int column) {        String columnId = this.getColumnIdentifier(column);        if (EM_EXPERT_TPYE_CODE.equals(columnId) || EM_EXPERT_TPYE_NAME.equals(columnId)) {          return true;        } else {          return super.isCellEditable(row, column);        }      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        if (EM_EXPERT_TPYE_CODE.equals(this.getColumnIdentifier(columnIndex))) {          if (aValue == null) {            this.getBean(rowIndex).setEmExpertType(null);          } else {            this.getBean(rowIndex).setEmExpertType(((EmExpertTypeSelection) aValue).getEmExpertType());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempId");    if (ol != null) {      for (EmEvaluationCondition o : ol) {        o.setTempId(Guid.genID());      }    }    escColumns = new ArrayList<ColumnBeanPropertyPair>();    escColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_TPYE_CODE, "emExpertType.emTypeCode", "专家类型代码"));    escColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_TPYE_NAME, "emExpertType.emTypeName", "专家类型名称"));    escColumns.add(new ColumnBeanPropertyPair(DOCTOR_NUM, "expertNum", "抽取人数"));    tm.setDataBean(ol, escColumns);    return tm;  }  public static TableModel convertEmExpertBillFilterToTableMode(List<EmExpertBillFilter> ol) {    BeanTableModel<EmExpertBillFilter> tm = new BeanTableModel<EmExpertBillFilter>() {      private static final long serialVersionUID = -5110609608434794710L;      @Override      public boolean isCellEditable(int row, int column) {        String columnId = this.getColumnIdentifier(column);        if (ZcEmExpertSelectionToTableModelConverter.EM_EXPERT_CODE.equals(columnId)) {          return true;        } else {          return false;        }      }    };    tm.setOidFieldName("tempId");    if (ol != null) {      for (EmExpertBillFilter o : ol) {        o.setTempId(Guid.genID());      }    }    eelColumns = new ArrayList<ColumnBeanPropertyPair>();    eelColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_CODE, "emExpert.emExpertCode", "专家代码"));    eelColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_NAME, "emExpert.emExpertName", "姓名"));    eelColumns.add(new ColumnBeanPropertyPair(EM_EXPERT_UNIT_NAME, "emExpert.emUnitName", "单位"));    tm.setDataBean(ol, eelColumns);    return tm;  }  //专家抽取项目标段  public static TableModel convertEmExpertBillPackageToTableMode(List<ZcEbPack> ol) {    BeanTableModel<ZcEbPack> tm = new BeanTableModel<ZcEbPack>() {      private static final long serialVersionUID = -956154342022052499L;      @Override      public boolean isCellEditable(int row, int column) {        return false;      }    };    tm.setOidFieldName("tempId");    if (ol != null) {      for (ZcEbPack o : ol) {        o.setTempId(Guid.genID());      }    }    ppcColumns = new ArrayList<ColumnBeanPropertyPair>();    ppcColumns.add(new ColumnBeanPropertyPair("PROJ_CODE", "projCode", "项目编号"));    ppcColumns.add(new ColumnBeanPropertyPair("PACK_NAME", "packName", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_PACK_CODE)));    ppcColumns.add(new ColumnBeanPropertyPair("PUR_CONTENT", "purContent", "采购内容"));    //    ppcColumns.add(new ColumnBeanPropertyPair("PUR_CONTENT", "purContent", "标段内容"));    tm.setDataBean(ol, ppcColumns);    return tm;  }}
package com.ufgov.zc.client.common.converter;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import com.ufgov.zc.client.common.BillElementMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.util.CodeNameHandler;import com.ufgov.zc.common.bi.model.BiTrack;import com.ufgov.zc.common.system.constants.BiElementConstants;import com.ufgov.zc.common.system.constants.BillTypeConstants;import com.ufgov.zc.common.system.constants.DpElementConstants;public class BiTrackToTableModelConverter {  /**   * @param biBalanceList   * @return   */  public static Vector getBiTrackListColumns(BillElementMeta curbem) {    return getBiTrackListColumns(curbem, false);  }  public static Vector getBiTrackListColumns(BillElementMeta curbem, boolean showAdjustCode) {    DefaultTableModel biTrackTableModel = null;    Vector names = new Vector();    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_BI_TRACK_ID));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_ND));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_CUR_MONEY));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_ORG_MONEY));    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_CO_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_CO_CODE));      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_CO_NAME));    }    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_B_ACC_CODE));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_B_ACC_NAME));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_FUND_NAME));    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_PROC_DATE));    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_INCEPTDOC_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_SENDDOC_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_SENDDOC_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_ORG_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_ORG_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_ORIGIN_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_ORIGIN_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_PAYTYPE_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_PAYTYPE_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_MANAGE_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_MANAGE_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_PROJECT_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_PROJECT_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_PAYOUT_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_PAYOUT_NAME));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_OUTLAY_CODE)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_OUTLAY_CODE));      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_OUTLAY_NAME));    }    if (curbem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR1)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_D_ATTR1_NAME));    }    if (curbem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR2)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_D_ATTR2_NAME));    }    if (curbem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR3)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_D_ATTR3_NAME));    }    if (curbem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR4)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_D_ATTR4_NAME));    }    if (curbem.isElementInclude(DpElementConstants.FIELD_NAME_D_ATTR5)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_D_ATTR5_NAME));    }    if (showAdjustCode) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_BI_ADJUST_CODE));    }    if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_FILENAME)) {      names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_FILENAME));    }    names.add(LangTransMeta.translate(BiElementConstants.FIELD_TRANS_REMARK));    return names;  }  public static Vector getBiTrackListRecords(List biTrackList, BillElementMeta curbem) {    return getBiTrackListRecords(biTrackList, curbem, false);  }  public static Vector getBiTrackListRecords(List biTrackList, BillElementMeta curbem, boolean showAdjustCode) {    Vector values = new Vector();    CodeNameHandler.handleNames(biTrackList);    for (int i = 0; i < biTrackList.size(); i++) {      Vector eachRowData = new Vector();      BiTrack biTrack = (BiTrack) biTrackList.get(i);      eachRowData.add(biTrack.getBiTrackId());      eachRowData.add(biTrack.getNd());      eachRowData.add(biTrack.getCurMoney());      eachRowData.add(biTrack.getOrgMoney());      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_CO_CODE)) {        eachRowData.add(biTrack.getCoCode());        eachRowData.add(biTrack.getCoName());      }      eachRowData.add(biTrack.getBaccCode());      eachRowData.add(biTrack.getBaccName());      eachRowData.add(biTrack.getFundName());      eachRowData.add(biTrack.getProcDate());      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_INCEPTDOC_CODE)) {        eachRowData.add(biTrack.getInceptDocName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_SENDDOC_CODE)) {        eachRowData.add(biTrack.getSendDocName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_ORG_CODE)) {        eachRowData.add(biTrack.getOrgName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_ORIGIN_CODE)) {        eachRowData.add(biTrack.getOriginName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_PAYTYPE_CODE)) {        eachRowData.add(biTrack.getPaytypeName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_MANAGE_CODE)) {        eachRowData.add(biTrack.getManageName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_PROJECT_CODE)) {        eachRowData.add(biTrack.getProjectName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_PAYOUT_CODE)) {        eachRowData.add(biTrack.getPayoutName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_OUTLAY_CODE)) {        eachRowData.add(biTrack.getOutlayCode());        eachRowData.add(biTrack.getOutlayName());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_D_ATTR1)) {        eachRowData.add(biTrack.getDattr1Name());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_D_ATTR2)) {        eachRowData.add(biTrack.getDattr2Name());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_D_ATTR3)) {        eachRowData.add(biTrack.getDattr3Name());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_D_ATTR4)) {        eachRowData.add(biTrack.getDattr4Name());      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_D_ATTR5)) {        eachRowData.add(biTrack.getDattr5Name());      }      if (showAdjustCode) {        eachRowData.add(AsValDataCache.getName("VS_BI_ADJUST_CODE", biTrack.getBiAdjustCode()));      }      if (curbem.isElementInclude(BiElementConstants.FIELD_NAME_FILENAME)) {        eachRowData.add(biTrack.getFileName());      }      eachRowData.add(biTrack.getRemark());      values.add(eachRowData);    }    return values;  }  public static DefaultTableModel convertBiTrackForListPage(List biTrackList, BillElementMeta bem) {    return convertBiTrackForListPage(biTrackList, bem, false);  }  public static DefaultTableModel convertBiTrackForListPage(List biTrackList, BillElementMeta bem, boolean showAdjustCode) {    BillElementMeta curbem = null;    if (bem == null) {      curbem = BillElementMeta.getBillElementMeta(BillTypeConstants.BILL_TYPE_CODE_BI_DBI_EDIT);    } else {      curbem = bem;    }    Vector names = getBiTrackListColumns(curbem, showAdjustCode);    Vector values = getBiTrackListRecords(biTrackList, curbem, showAdjustCode);    MyTableModel biTrackTableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    biTrackTableModel.setList(biTrackList);    return biTrackTableModel;  }}
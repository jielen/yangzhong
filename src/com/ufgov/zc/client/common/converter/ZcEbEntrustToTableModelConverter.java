package com.ufgov.zc.client.common.converter;import java.util.ArrayList;import java.util.List;import java.util.Vector;import javax.swing.table.DefaultTableModel;import javax.swing.table.TableModel;import com.ufgov.zc.client.common.AsOptionMeta;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.component.table.BeanTableModel;import com.ufgov.zc.client.component.table.ColumnBeanPropertyPair;import com.ufgov.zc.client.datacache.AsValDataCache;import com.ufgov.zc.client.datacache.CompanyDataCache;import com.ufgov.zc.common.commonbiz.model.BaseElement;import com.ufgov.zc.common.commonbiz.publish.IBaseDataServiceDelegate;import com.ufgov.zc.common.system.Guid;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.ZcElementConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.util.BeanUtil;import com.ufgov.zc.common.zc.model.TreeNodeValueObject;import com.ufgov.zc.common.zc.model.ZcEbEntrust;import com.ufgov.zc.common.zc.model.ZcEbEntrustDetail;import com.ufgov.zc.common.zc.model.ZcPProMitemBi;public class ZcEbEntrustToTableModelConverter {  private static RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();//  private static boolean isUseBi = true;  public static DefaultTableModel convertToTableModel(List entrustList) {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    //names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_SN));    names.add("任务单编号");    names.add("通知书编号");    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_NAME));    names.add("项目名称");    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PIFU_CGFS));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MONEY_BI_SUM));    names.add("任务下达时间");    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CO_CODE));    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_LEADER_ID));    //    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_STATUS));    if (entrustList != null && entrustList.size() > 0) {      for (int i = 0; i < entrustList.size(); i++) {        Vector rowData = new Vector();        ZcEbEntrust zcEbEntrust = (ZcEbEntrust) entrustList.get(i);        rowData.add(zcEbEntrust.getSnCode());        if (zcEbEntrust.getZcMakeCode() != null) {          rowData.add(zcEbEntrust.getZcMakeCode());        } else {          rowData.add(zcEbEntrust.getSn());        }        rowData.add(CompanyDataCache.getName(zcEbEntrust.getCoCode()));        rowData.add(zcEbEntrust.getZcMakeName());        rowData.add(AsValDataCache.getName("ZC_VS_PITEM_OPIWAY", zcEbEntrust.getZcPifuCgfs()));        rowData.add(zcEbEntrust.getZcMoneyBiSum());        //        rowData.add(zcEbEntrust.getZcCoCode());        rowData.add(zcEbEntrust.getZcWeitoDate());        //rowData.add(zcEbEntrust.getLeaderId());        //        rowData.add(AsValDataCache.getName("ZC_VS_ENTRUST_STATUS", zcEbEntrust.getStatus()));        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(entrustList);    return tableModel;  }  public static DefaultTableModel convertEntrustDeToTableModel(List entrustDeList) {    MyTableModel tableModel = null;    Vector names = new Vector();    Vector values = new Vector();    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PITEM_NAME));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_NAME));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_BASE_GGYQ));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_CAIG_NUM));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_ITEM_SUM));    names.add(LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH));    if (entrustDeList != null && entrustDeList.size() > 0) {      for (int i = 0; i < entrustDeList.size(); i++) {        Vector rowData = new Vector();        ZcEbEntrustDetail bean = (ZcEbEntrustDetail) entrustDeList.get(i);        rowData.add(bean.getZcPitemName());        rowData.add(bean.getZcCatalogueName());        rowData.add(bean.getZcBaseGgyq());        rowData.add(bean.getZcCaigNum());        rowData.add(bean.getZcItemSum());        rowData.add(bean.getZcPitemAttach());        values.add(rowData);      }    }    tableModel = new MyTableModel(values, names) {      public Class getColumnClass(int column) {        if ((column >= 0) && (column < getColumnCount()) && this.getRowCount() > 0) {          for (int row = 0; row < this.getRowCount(); row++) {            if (getValueAt(row, column) != null) {              return getValueAt(row, column).getClass();            }          }        }        return Object.class;      }      public boolean isCellEditable(int row, int colum) {        return false;      }    };    tableModel.setList(entrustDeList);    return tableModel;  }  @SuppressWarnings("unchecked")  public static TableModel convertDetailToTableModel(List itemList) {    BeanTableModel<ZcEbEntrustDetail> tm = new BeanTableModel<ZcEbEntrustDetail>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        String columnId = this.getColumnIdentifier(column);        if ("ZC_FIELD_ZC_CATALOGUE_NAME".equals(columnId) || "ZC_FIELD_ZC_PITEM_ATTACH_BLOBID".equals(columnId)) {          return false;        }        return super.isCellEditable(row, column);      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        ZcEbEntrustDetail bean = dataBeanList.get(rowIndex);        if (aValue instanceof BaseElement) {          BeanUtil.set(columnBeanPropertyPairList.get(columnIndex).getBeanPropertyName(), ((BaseElement) aValue).getName(), bean);          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else if (ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE.equals(this.getColumnIdentifier(columnIndex))) {          Object obj = getValueAt(rowIndex, columnIndex);          if (obj != null) {            if (aValue == null || !obj.equals(((TreeNodeValueObject) aValue).getCode())) {              //              this.getBean(rowIndex).setZcItemSum(null);              //              this.getBean(rowIndex).setBudgetBiMoney(null);              //              this.getBean(rowIndex).setBudgetOtherMoney(null);            }          }          if (aValue == null) {            this.getBean(rowIndex).setZcCatalogueCode(null);            this.getBean(rowIndex).setZcCatalogueName(null);          } else {            this.getBean(rowIndex).setZcCatalogueCode(((TreeNodeValueObject) aValue).getCode());            this.getBean(rowIndex).setZcCatalogueName(((TreeNodeValueObject) aValue).getName());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else if (ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH.equals(this.getColumnIdentifier(columnIndex))) {          if (aValue == null) {            this.getBean(rowIndex).setZcPitemAttach(null);            this.getBean(rowIndex).setZcPitemAttachBlobid(null);          } else {            this.getBean(rowIndex).setZcPitemAttach(((AsFile) aValue).getFileName());            this.getBean(rowIndex).setZcPitemAttachBlobid(((AsFile) aValue).getFileId());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempId");    for (Object o : itemList) {      ((ZcEbEntrustDetail) o).setTempId(Guid.genID());    }    tm.setDataBean(itemList, itemInfo);    return tm;  }  private static List<ColumnBeanPropertyPair> itemInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_PITEM_NAME, "zcPitemName", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_PITEM_NAME)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE, "zcCatalogueCode", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_CODE)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_NAME, "zcCatalogueName", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_CATALOGUE_NAME)));    //    itemInfo.add(new ColumnBeanPropertyPair("ZC_BRA_NAME", "zcBraName", "品牌"));    //    itemInfo.add(new ColumnBeanPropertyPair("ZC_MER_NAME", "zcMerName", "商品"));    //    itemInfo.add(new ColumnBeanPropertyPair("ZC_SU_NAME", "zcSuName", "供应商"));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_PITEM_ARR_DATE, "zcPitemArrDate", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_PITEM_ARR_DATE)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_BASE_GGYQ, "zcBaseGgyq", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_BASE_GGYQ)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH, "zcPitemAttach", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH)));    //itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH_BLOBID, "zcPitemAttachBlobid", LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PITEM_ATTACH_BLOBID)));    //    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_PINMU_CTLG    , "zcPinmuCtlg"         , LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_PINMU_CTLG    )));    //    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_MAKE_NEW_CODE   , "zcMakeNewCode"       , LangTransMeta.translate(ZcElementConstants.FIELD_TRANS_ZC_MAKE_NEW_CODE   )));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_CAIG_NUM, "zcCaigNum", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_CAIG_NUM)));//    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_CAIG_UNIT, "zcCaigUnit", LangTransMeta////    .translate(ZcElementConstants.FIELD_TRANS_ZC_CAIG_UNIT)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_MER_PRICE, "zcMerPrice", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_MER_PRICE)));    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_ITEM_SUM, "zcItemSum", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_ITEM_SUM)));    //    itemInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_BUDGET_BI_MONEY, "budgetBiMoney",    //      LangTransMeta.translate("ZC_" + ZcElementConstants.FIELD_TRANS_BUDGET_BI_MONEY)));    //    itemInfo    //      .add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_BUDGET_OTHER_MONEY, "budgetOtherMoney",    //        LangTransMeta.translate("ZC_" + ZcElementConstants.FIELD_TRANS_BUDGET_OTHER_MONEY)));  }  /**   * 资金构成   */  public static List<ColumnBeanPropertyPair> biInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    IBaseDataServiceDelegate baseDataServiceDelegate = (IBaseDataServiceDelegate) ServiceFactory.create(IBaseDataServiceDelegate.class,    "baseDataServiceDelegate");//    if (isUseBi) {////      biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_BI_NO, "zcBiNo", LangTransMeta////      .translate(ZcElementConstants.FIELD_TRANS_ZC_BI_NO)));////    }////    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_BI_JHUA_SUM, "zcBiJhuaSum", LangTransMeta////    .translate(ZcElementConstants.FIELD_TRANS_ZC_BI_JHUA_SUM)));////    //    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_BI_YJBA_SUM, "zcBiYjbaSum", "合同备案金额"));////    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_FUND_CODE, "fundCode", LangTransMeta////    .translate(ZcElementConstants.FIELD_TRANS_FUND_CODE)));////    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ORIGIN_CODE, "originCode", LangTransMeta////    .translate(ZcElementConstants.FIELD_TRANS_ORIGIN_CODE)));////    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_PAYTYPE_CODE, "paytypeCode", LangTransMeta////    .translate(ZcElementConstants.FIELD_TRANS_PAYTYPE_CODE)));////    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_SENDDOC_CODE, "senddocName", LangTransMeta////    .translate(ZcElementConstants.FIELD_TRANS_SENDDOC_NAME)));////    biInfo.add(new ColumnBeanPropertyPair("ZC_FUND_REMARK", "zcFundRemark", LangTransMeta.translate("ZC_FUND_REMARK")));    //    biInfo.add(new ColumnBeanPropertyPair("ZC_FUND_FILE", "zcFundFile", LangTransMeta.translate("ZC_FUND_FILE")));        biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_BI_NO, "zcBiNo", "指标编号"));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ORIGIN_CODE, "originName", LangTransMeta      .translate(ZcElementConstants.FIELD_TRANS_ORIGIN_CODE)));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_SENDDOC_NAME, "senddocName", LangTransMeta      .translate(ZcElementConstants.FIELD_TRANS_SENDDOC_NAME)));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_FUND_CODE, "fundName", LangTransMeta      .translate(ZcElementConstants.FIELD_TRANS_FUND_CODE)));//    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ORIGIN_NAME, "originName", LangTransMeta//      .translate(ZcElementConstants.FIELD_TRANS_ORIGIN_NAME)));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_PROJ_NAME, "projectName", LangTransMeta      .translate(ZcElementConstants.FIELD_TRANS_PROJ_NAME)));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_B_ACC_NAME, "bAccName", LangTransMeta      .translate(ZcElementConstants.FIELD_TRANS_B_ACC_NAME)));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_OUTLAY_NAME, "outlayName", LangTransMeta      .translate(ZcElementConstants.FIELD_TRANS_OUTLAY_NAME)));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_BI_SUM, "zcBiSum", "指标总金额"));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_BI_DO_SUM, "zcBiDoSum", "指标可用金额"));    biInfo.add(new ColumnBeanPropertyPair(ZcElementConstants.FIELD_TRANS_ZC_BI_JHUA_SUM, "zcBiJhuaSum", LangTransMeta    .translate(ZcElementConstants.FIELD_TRANS_ZC_BI_JHUA_SUM)));    biInfo.add(new ColumnBeanPropertyPair("ZC_FUND_REMARK", "zcFundRemark", LangTransMeta.translate("ZC_FUND_REMARK")));  }  /**   * 转换采购合同中的资金表格   * @param biList   * @return   */  public static TableModel convertSubBiTableData(List<ZcPProMitemBi> biList) {    BeanTableModel<ZcPProMitemBi> tm = new BeanTableModel<ZcPProMitemBi>() {      private static final long serialVersionUID = 6888363838628062064L;      @Override      public boolean isCellEditable(int row, int column) {        String columnId = this.getColumnIdentifier(column);        if ("ZC_FUND_FILE".equals(columnId)) {          return true;        }        return super.isCellEditable(row, column);      }      @Override      public void setValueAt(Object aValue, int rowIndex, int columnIndex) {        if ("ZC_FUND_FILE".equals(this.getColumnIdentifier(columnIndex))) {          if (aValue == null) {            this.getBean(rowIndex).setZcFundFile(null);            this.getBean(rowIndex).setZcFundFileBlobid(null);          } else {            this.getBean(rowIndex).setZcFundFile(((AsFile) aValue).getFileName());            this.getBean(rowIndex).setZcFundFileBlobid(((AsFile) aValue).getFileId());          }          fireTableCellUpdated(rowIndex, columnIndex);          putEditedData(dataBeanList.get(rowIndex));        } else {          super.setValueAt(aValue, rowIndex, columnIndex);        }      }    };    tm.setOidFieldName("tempId");    for (ZcPProMitemBi o : biList) {      o.setTempId(Guid.genID());    }    tm.setDataBean(biList, biInfo);    return tm;  }  private static List<ColumnBeanPropertyPair> xbitemInfo = new ArrayList<ColumnBeanPropertyPair>();  static {    xbitemInfo.add(new ColumnBeanPropertyPair("XZ_OPERATOR_NAME", "userId", "开标经办人"));  }  /**   * @return the itemInfo   */  public static List<ColumnBeanPropertyPair> getItemInfo() {    return itemInfo;  }  /**   * @return the itemInfo   */  public static List<ColumnBeanPropertyPair> getXbItemInfo() {    return xbitemInfo;  }}
package com.ufgov.zc.client.component.zc.dataexchange;import java.awt.Color;import java.awt.Container;import java.awt.Font;import java.awt.Window;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import javax.swing.BorderFactory;import javax.swing.JFrame;import javax.swing.JOptionPane;import javax.swing.SwingUtilities;import javax.swing.UIManager;import javax.swing.border.TitledBorder;import javax.swing.table.TableModel;import com.ufgov.smartclient.common.DefaultInvokeHandler;import com.ufgov.smartclient.common.UIUtilities;import com.ufgov.smartclient.component.table.JGroupableTable;import com.ufgov.smartclient.plaf.BlueLookAndFeel;import com.ufgov.zc.client.common.LangTransMeta;import com.ufgov.zc.client.common.MyTableModel;import com.ufgov.zc.client.common.ParentWindowAware;import com.ufgov.zc.client.common.ServiceFactory;import com.ufgov.zc.client.common.WorkEnv;import com.ufgov.zc.client.common.converter.DelegDepAndJCNetWorkToTableModelConverter;import com.ufgov.zc.client.component.JFuncToolBar;import com.ufgov.zc.client.component.button.DljgDataExpButton;import com.ufgov.zc.client.component.button.DljgDataImpButton;import com.ufgov.zc.client.component.button.FuncButton;import com.ufgov.zc.client.component.button.HelpButton;import com.ufgov.zc.client.component.button.JczwDataExpButton;import com.ufgov.zc.client.component.button.JczwDataImpButton;import com.ufgov.zc.client.component.ui.AbstractDataDisplay;import com.ufgov.zc.client.component.ui.AbstractEditListBill;import com.ufgov.zc.client.component.ui.AbstractSearchConditionArea;import com.ufgov.zc.client.component.ui.MultiDataDisplay;import com.ufgov.zc.client.component.ui.SaveableSearchConditionArea;import com.ufgov.zc.client.component.ui.TableDisplay;import com.ufgov.zc.client.component.ui.conditionitem.AbstractSearchConditionItem;import com.ufgov.zc.client.component.ui.conditionitem.SearchConditionUtil;import com.ufgov.zc.client.zc.dljgAndjczw.DljgJczwDataExpDialog;import com.ufgov.zc.client.zc.dljgAndjczw.DljgJczwDataImpDialog;import com.ufgov.zc.common.commonbiz.model.SearchCondition;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.WFConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.zc.model.ZcDelegJczwDataExchange;import com.ufgov.zc.common.zc.publish.IZcDelegJczwDataExchangeDelegate;/** * @ClassName: DelegDepAndJCNetWorkDataExchangeListPanel * @Description: 代理机构与金财专网数据交换 * @date: 2010-10-27 下午03:00:50 * @version: V1.0 * @since: 1.0 * @author: wangwei * @modify: */@SuppressWarnings({ "serial", "unchecked" })public class DelegDepAndJCNetWorkDataExchangeListPanel extends AbstractEditListBill implements ParentWindowAware {  public static final String compoId = "ZC_DELEG_JCZW_DATA_EXCHANGE";  public static final String tabId = "ZcDelegJczwDataExchange_Tab";  private Window parentWindow = null;  private DelegDepAndJCNetWorkDataExchangeListPanel self = this;  private RequestMeta requestMeta = WorkEnv.getInstance().getRequestMeta();  private ElementConditionDto elementConditionDto = new ElementConditionDto();  private HelpButton helpButton = new HelpButton();  private FuncButton dljgExportButton = new DljgDataExpButton();  private FuncButton import2DljgButton = new DljgDataImpButton();  private FuncButton jczwExportButton = new JczwDataExpButton();  private FuncButton import2JczwButton = new JczwDataImpButton();  public IZcDelegJczwDataExchangeDelegate zcDelegJczwDataExchangeDelegate = (IZcDelegJczwDataExchangeDelegate) ServiceFactory.create(  IZcDelegJczwDataExchangeDelegate.class, "zcDelegJczwDataExchangeDelegate");  public DelegDepAndJCNetWorkDataExchangeListPanel() {    UIUtilities.asyncInvoke(new DefaultInvokeHandler<List<SearchCondition>>() {      @Override      public List<SearchCondition> execute() throws Exception {        List<SearchCondition> needDisplaySearchConditonList = SearchConditionUtil.getNeedDisplaySearchConditonList(WorkEnv.getInstance()        .getCurrUserId(), tabId);        return needDisplaySearchConditonList;      }      @Override      public void success(List<SearchCondition> needDisplaySearchConditonList) {        List<TableDisplay> showingDisplays = SearchConditionUtil.getNeedDisplayTableDisplay(needDisplaySearchConditonList);        init(createDataDisplay(showingDisplays), null);        revalidate();        repaint();      }    });    requestMeta.setCompoId(DelegDepAndJCNetWorkDataExchangeListPanel.compoId);  }  private final class DataDisplay extends MultiDataDisplay {    private DataDisplay(List<TableDisplay> displays, List<TableDisplay> showingDisplays, AbstractSearchConditionArea conditionArea,    boolean showConditionArea) {      super(displays, showingDisplays, conditionArea, showConditionArea, DelegDepAndJCNetWorkDataExchangeListPanel.tabId);      setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "数据导入/导出记录", TitledBorder.CENTER, TitledBorder.TOP, new Font(      "宋体", Font.BOLD, 15), Color.BLUE));    }    protected void preprocessShowingTableDisplay(List<TableDisplay> showingTableDisplays) {      for (final TableDisplay d : showingTableDisplays) {        final JGroupableTable table = d.getTable();        table.addMouseListener(new MouseAdapter() {          public void mouseClicked(MouseEvent e) {            if (e.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(e)) {            }          }        });      }    }    protected void handleTableDisplayActived(AbstractSearchConditionItem[] searchConditionItems, final TableDisplay tableDisplay) {      elementConditionDto.setWfcompoId(DelegDepAndJCNetWorkDataExchangeListPanel.compoId);      elementConditionDto.setExecutor(WorkEnv.getInstance().getCurrUserId());      elementConditionDto.setNd(WorkEnv.getInstance().getTransNd());      elementConditionDto.setOperationTypeCode(tableDisplay.getStatus());      for (AbstractSearchConditionItem item : searchConditionItems) {        item.putToElementConditionDto(elementConditionDto);      }      final Container c = tableDisplay.getTable().getParent();      UIUtilities.asyncInvoke(new DefaultInvokeHandler<TableModel>() {        public void before() {          assert c != null;          installLoadingComponent(c);        }        public void after() {          assert c != null;          unInstallLoadingComponent(c);          c.add(tableDisplay.getTable());        }        public TableModel execute() throws Exception {          if (ZcDelegJczwDataExchange.OP_TYPE_DLJG_OUT.equals(elementConditionDto.getOperationTypeCode())) {            return DelegDepAndJCNetWorkToTableModelConverter.convertToTableModel(zcDelegJczwDataExchangeDelegate.getDljgWillExpDataList(            elementConditionDto, requestMeta));          } else if (ZcDelegJczwDataExchange.OP_TYPE_JCZW_OUT.equals(elementConditionDto.getOperationTypeCode())) {            return DelegDepAndJCNetWorkToTableModelConverter.convertToTableModel(zcDelegJczwDataExchangeDelegate.getJczwWillExpDataList(            elementConditionDto, requestMeta));          } else {            return DelegDepAndJCNetWorkToTableModelConverter.convertToTableModel(zcDelegJczwDataExchangeDelegate.getDataExchangeList(            elementConditionDto, requestMeta));          }        }        public void success(TableModel model) {          tableDisplay.setTableModel(model);          setButtonsVisiable();        }      });    }  }  static {    LangTransMeta.init("ZC%");  }  private AbstractSearchConditionArea topSearchConditionArea;  private AbstractSearchConditionArea createTopConditionArea() {    topSearchConditionArea = new SaveableSearchConditionArea("ZcDelegJczwDataExchangeSearch", null, true, new HashMap<String, String>(), null);    return topSearchConditionArea;  }  private AbstractDataDisplay createDataDisplay(List<TableDisplay> showingDisplays) {    return new DataDisplay(SearchConditionUtil.getAllTableDisplay(tabId), showingDisplays, createTopConditionArea(), true);// true:显示收索条件区    // false：不显示收索条件区  }  protected void addToolBarComponent(JFuncToolBar toolBar) {    toolBar.setModuleCode("ZC");    toolBar.setCompoId(DelegDepAndJCNetWorkDataExchangeListPanel.compoId);    toolBar.add(dljgExportButton);    toolBar.add(import2DljgButton);    toolBar.add(jczwExportButton);    toolBar.add(import2JczwButton);    toolBar.add(helpButton);    dljgExportButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doDljgExportData();      }    });    import2DljgButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doImport2DljgData();      }    });    jczwExportButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doJczwExportData();      }    });    import2JczwButton.addActionListener(new ActionListener() {      public void actionPerformed(ActionEvent e) {        doImport2JczwData();      }    });  }  public void setButtonsVisiable() {    String panelId = WFConstants.AUDIT_TAB_STATUS_TODO;    if (topDataDisplay != null && topDataDisplay.getActiveTableDisplay() != null) {      panelId = topDataDisplay.getActiveTableDisplay().getStatus();    }    if (ZcDelegJczwDataExchange.OP_TYPE_JCZW_OUT.equalsIgnoreCase(panelId)) {//采购办待导出数据      dljgExportButton.setVisible(false);      import2DljgButton.setVisible(false);      jczwExportButton.setVisible(true);      import2JczwButton.setVisible(false);    }    if (ZcDelegJczwDataExchange.OP_TYPE_JCZW_OUT_LOG.equalsIgnoreCase(panelId)) {//采购办导出日志      dljgExportButton.setVisible(false);      import2DljgButton.setVisible(false);      jczwExportButton.setVisible(true);      import2JczwButton.setVisible(false);    }    if (ZcDelegJczwDataExchange.OP_TYPE_JCZW_IN_LOG.equalsIgnoreCase(panelId)) {//采购中心导入日志      dljgExportButton.setVisible(false);      import2DljgButton.setVisible(false);      jczwExportButton.setVisible(false);      import2JczwButton.setVisible(true);    }  }  private void doDljgExportData() {    List list = getCheckedList();    if (list.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    DljgJczwDataExpDialog i = new DljgJczwDataExpDialog(self, this.getCheckedList(), ZcDelegJczwDataExchange.OP_TYPE_DLJG_OUT);    i.showDialog("数据导出", 620, 560);  }  private void doImport2DljgData() {    DljgJczwDataImpDialog t = new DljgJczwDataImpDialog(self, ZcDelegJczwDataExchange.OP_TYPE_DLJG_IN_LOG);    t.showDialog("数据导入", 620, 560);  }  private void doJczwExportData() {    List list = getCheckedList();    if (list.size() == 0) {      JOptionPane.showMessageDialog(this, "没有选择数据！", " 提示", JOptionPane.INFORMATION_MESSAGE);      return;    }    DljgJczwDataExpDialog i = new DljgJczwDataExpDialog(self, this.getCheckedList(), ZcDelegJczwDataExchange.OP_TYPE_JCZW_OUT);    i.showDialog("数据导出", 620, 560);  }  private void doImport2JczwData() {    DljgJczwDataImpDialog t = new DljgJczwDataImpDialog(self, ZcDelegJczwDataExchange.OP_TYPE_JCZW_IN_LOG);    t.showDialog("数据导入", 620, 560);  }  public List getCheckedList() {    List<ZcDelegJczwDataExchange> beanList = new ArrayList<ZcDelegJczwDataExchange>();    JGroupableTable table = topDataDisplay.getActiveTableDisplay().getTable();    MyTableModel model = (MyTableModel) table.getModel();    // Modal的数据    List list = model.getList();    Integer[] checkedRows = table.getCheckedRows();    for (Integer checkedRow : checkedRows) {      int accordDataRow = table.convertRowIndexToModel(checkedRow);      ZcDelegJczwDataExchange bean = (ZcDelegJczwDataExchange) list.get(accordDataRow);      beanList.add(bean);    }    return beanList;  }  public void refreshCurrentTabData() {    topSearchConditionArea.doSearch();  }  public Window getParentWindow() {    return parentWindow;  }  public void setParentWindow(Window parentWindow) {    this.parentWindow = parentWindow;  }  public RequestMeta getRequestMeta() {    return requestMeta;  }  public static void main(String[] args) {    SwingUtilities.invokeLater(new Runnable() {      public void run() {        try {          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());          UIManager.setLookAndFeel(new BlueLookAndFeel());        } catch (Exception e) {          e.printStackTrace();        }        DelegDepAndJCNetWorkDataExchangeListPanel bill = new DelegDepAndJCNetWorkDataExchangeListPanel();        JFrame frame = new JFrame("采购办与采购中心数据交换");        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        frame.setSize(800, 600);        frame.setLocationRelativeTo(null);        frame.getContentPane().add(bill);        frame.setVisible(true);      }    });  }}
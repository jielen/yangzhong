/** * @(#) project: ZC * @(#) file: ZcEbRfqOpenBidService.java Copyright 2010 UFGOV, Inc. All rights *      reserved. UFGOV PROPRIETARY/CONFIDENTIAL. Use is subject to license *      terms. */package com.ufgov.zc.server.zc.service.impl;import java.math.BigDecimal;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import com.kingdrive.workflow.context.WorkflowContext;import com.ufgov.zc.common.system.RequestMeta;import com.ufgov.zc.common.system.constants.NumLimConstants;import com.ufgov.zc.common.system.constants.ZcSettingConstants;import com.ufgov.zc.common.system.dto.ElementConditionDto;import com.ufgov.zc.common.system.dto.MainSubBill;import com.ufgov.zc.common.system.dto.PrintObject;import com.ufgov.zc.common.system.model.AsFile;import com.ufgov.zc.common.system.model.AsWfDraft;import com.ufgov.zc.common.system.util.UUID;import com.ufgov.zc.common.zc.ZcEbBulletinConstants;import com.ufgov.zc.common.zc.model.ZcBulWModel;import com.ufgov.zc.common.zc.model.ZcEbBulletin;import com.ufgov.zc.common.zc.model.ZcEbBulletinWordMold;import com.ufgov.zc.common.zc.model.ZcEbEvalReport;import com.ufgov.zc.common.zc.model.ZcEbPack;import com.ufgov.zc.common.zc.model.ZcEbPackEvalResult;import com.ufgov.zc.common.zc.model.ZcEbPlan;import com.ufgov.zc.common.zc.model.ZcEbProj;import com.ufgov.zc.common.zc.model.ZcEbRfqPack;import com.ufgov.zc.common.zc.model.ZcEbXunJiaBaoJia;import com.ufgov.zc.common.zc.model.ZcHtModel;import com.ufgov.zc.common.zc.model.ZcReportModel;import com.ufgov.zc.common.zc.model.ZcTBchtItem;import com.ufgov.zc.common.zc.model.ZcXmcgHt;import com.ufgov.zc.common.zc.model.ZcXunJiaDetail;import com.ufgov.zc.common.zc.model.ZcXunJiaSummary;import com.ufgov.zc.server.system.dao.IWorkflowDao;import com.ufgov.zc.server.system.print.PrintManager;import com.ufgov.zc.server.system.util.NumLimUtil;import com.ufgov.zc.server.system.util.NumUtil;import com.ufgov.zc.server.system.workflow.WFEngineAdapter;import com.ufgov.zc.server.zc.ZcSUtil;import com.ufgov.zc.server.zc.dao.ibatis.BaseDao;import com.ufgov.zc.server.zc.service.IZcEbRfqService;/** * @ClassName: ZcEbRfqOpenBidService * @Description: TODO(这里用一句话描述这个类的作用) * @date: 2010-9-10 下午04:07:22 * @version: V1.0 * @since: 1.0 * @author: fanpeile * @modify: */public class ZcEbRfqService implements IZcEbRfqService {  private BaseDao baseDao;  private WFEngineAdapter wfEngineAdapter;  private IWorkflowDao workflowDao;  public BaseDao getBaseDao() {    return baseDao;  }  public void setBaseDao(BaseDao baseDao) {    this.baseDao = baseDao;  }  public WFEngineAdapter getWfEngineAdapter() {    return wfEngineAdapter;  }  public void setWfEngineAdapter(WFEngineAdapter wfEngineAdapter) {    this.wfEngineAdapter = wfEngineAdapter;  }  public IWorkflowDao getWorkflowDao() {    return workflowDao;  }  public void setWorkflowDao(IWorkflowDao workflowDao) {    this.workflowDao = workflowDao;  }  public List getZcEbRfqProjList(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    elementConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementConditionDto.getWfcompoId(), NumLimConstants.FWATCH));    return baseDao.query("ZcEbRfq.getZcEbProjList", elementConditionDto);  }  public ZcEbRfqPack saveZcEbRfqPack(ZcEbRfqPack zcEbRfqPack, RequestMeta requestMeta) {    String creator = requestMeta.getSvUserName();    String userId = requestMeta.getSvUserID();    String compoId = requestMeta.getCompoId();    int nd = requestMeta.getSvNd();    boolean isDraft = false;    if (zcEbRfqPack.getProcessInstId() == null || zcEbRfqPack.getProcessInstId().longValue() == -1) {      Long draftid = workflowDao.createDraftId();      zcEbRfqPack.setProcessInstId(draftid);      isDraft = true;    }    if ("".equals(ZcSUtil.safeString(zcEbRfqPack.getRfqCode())) || zcEbRfqPack.getRfqCode().equals("自动编号")) {      String code = (String) baseDao.read(ZcSettingConstants.SEQUENCE_XUNJIA_OPEN_BID_RFQ, null);      zcEbRfqPack.setRfqCode(code);      zcEbRfqPack.setExecuteDate(requestMeta.getSysDate());      zcEbRfqPack.setCreator(creator);      zcEbRfqPack.setNd(new Integer(nd));      baseDao.insert("ZcEbRfq.insertZcEbRfqPack", zcEbRfqPack);      updatePakeStatus(zcEbRfqPack);    } else {      updateZcEbRfqPack(zcEbRfqPack, requestMeta);    }    if (isDraft) {      AsWfDraft asWfDraft = new AsWfDraft();      asWfDraft.setCompoId(compoId);      asWfDraft.setWfDraftName(zcEbRfqPack.getRfqCode());      asWfDraft.setUserId(userId);      asWfDraft.setMasterTabId(compoId);      asWfDraft.setWfDraftId(BigDecimal.valueOf(zcEbRfqPack.getProcessInstId().longValue()));      workflowDao.insertAsWfdraft(asWfDraft);    }    // //需要送审的状态，启动工作流    // if    // (ZcSettingConstants.XUNJIA_STATUS_OPEN_BID_AUDIT_CONSTRAINT.equals(zcEbRfqPack.getOpenBidStatus())    // && zcEbRfqPack.getProcessInstId().compareTo(0L) < 0) {    // this.newCommit(zcEbRfqPack, requestMeta);    // }    //    // //领导审核    // if    // ((ZcSettingConstants.XUNJIA_STATUS_OPEN_BID_SUCCESS.equals(zcEbRfqPack.getOpenBidStatus())    // || ZcSettingConstants.XUNJIA_STATUS_OPEN_BID_CRAP    // .equals(zcEbRfqPack.getOpenBidStatus())) &&    // zcEbRfqPack.getProcessInstId().compareTo(0L) > 0) {    // this.audit(zcEbRfqPack, requestMeta);    // }    return (ZcEbRfqPack) baseDao.read("ZcEbRfq.getZcEbRfqPack1", zcEbRfqPack);  }  public List getRfqSinupPack(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    return baseDao.query("ZcEbRfq.getRfqSinupPack", elementConditionDto);  }  public ZcEbRfqPack audit(ZcEbRfqPack zcEbRfqPack, RequestMeta requestMeta) {    wfEngineAdapter.commit(zcEbRfqPack.getComment(), zcEbRfqPack, requestMeta);    return zcEbRfqPack;  }  public ZcEbRfqPack callbackFN(ZcEbRfqPack zcEbRfqPack, RequestMeta requestMeta) {    wfEngineAdapter.callback(zcEbRfqPack.getComment(), zcEbRfqPack, requestMeta);    return zcEbRfqPack;  }  public ZcEbRfqPack newCommit(ZcEbRfqPack zcEbRfqPack, RequestMeta requestMeta) {    wfEngineAdapter.newCommit(zcEbRfqPack.getComment(), zcEbRfqPack, requestMeta);    return zcEbRfqPack;  }  public ZcEbRfqPack unaudit(ZcEbRfqPack zcEbRfqPack, RequestMeta requestMeta) {    wfEngineAdapter.unAudit(zcEbRfqPack.getComment(), zcEbRfqPack, requestMeta);    return zcEbRfqPack;  }  public ZcEbRfqPack untread(ZcEbRfqPack zcEbRfqPack, RequestMeta requestMeta) {    wfEngineAdapter.untread(zcEbRfqPack.getComment(), zcEbRfqPack, requestMeta);    return zcEbRfqPack;  }  public ZcEbRfqPack getZcEbRfqPack(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    return (ZcEbRfqPack) baseDao.read("ZcEbRfq.getZcEbRfqPack", elementConditionDto);  }  public int deleteZcEbRfqPack(ZcEbRfqPack zcEbRfqPack, RequestMeta requestMeta) {    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText0(zcEbRfqPack.getRfqCode());    int rtn = baseDao.delete("ZcEbRfq.deleteZcEbRfqPack", dto);    return rtn;  }  public List getZcEbRfqPackList(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    elementConditionDto.setNumLimitStr(NumLimUtil.getInstance().getNumLimCondByCoType(elementConditionDto.getWfcompoId(), NumLimConstants.FWATCH));    return baseDao.query("ZcEbRfq.getZcEbRfqPackList", elementConditionDto);  }  public ZcEbRfqPack updateZcEbRfqPack(ZcEbRfqPack zcEbRfqPack, RequestMeta requestMeta) {    baseDao.update("ZcEbRfq.updateZcEbRfqPack", zcEbRfqPack);    updatePakeStatus(zcEbRfqPack);    return zcEbRfqPack;  }  private void updatePakeStatus(ZcEbRfqPack zcEbRfqPack) {    if (ZcSettingConstants.XUNJIA_STATUS_OPEN_BID_SUCCESS.equals(zcEbRfqPack.getOpenBidStatus()) || ZcSettingConstants.XUNJIA_STATUS_OPEN_BID_CRAP.equals(zcEbRfqPack.getOpenBidStatus())) {// 成功开标，废标都需要修改分包表状态      baseDao.update("ZcEbRfq.updateZcEbPackStatus", zcEbRfqPack);    }  }  public ZcEbRfqPack updateZcEbRfqPackStatus(ZcEbRfqPack zcEbRfqPack, RequestMeta requestMeta) {    baseDao.update("ZcEbRfq.updateZcEbRfqPack", zcEbRfqPack);    return zcEbRfqPack;  }  public List getXunjiaDetaiList(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    return baseDao.query("ZcEbRfq.getXunjiaDetaiList", elementConditionDto);  }  public ZcXunJiaDetail getLowPriceXunJiaDetail(ElementConditionDto elementConditionDto, RequestMeta requestMeta) {    return (ZcXunJiaDetail) baseDao.read("ZcEbRfq.getLowPriceXunJiaDetail", elementConditionDto);  }  public ZcEbRfqPack updateZcEbRfqPackForDelay(ZcEbRfqPack rp, RequestMeta requestMeta) {    if ("".equals(ZcSUtil.safeString(rp.getRfqCode())) || rp.getRfqCode().equals("自动编号")) {      saveZcEbRfqPack(rp, requestMeta);    } else {      baseDao.update("ZcEbRfq.updateZcEbRfqPack", rp);    }    ElementConditionDto dto = new ElementConditionDto();    dto.setProjCode(rp.getProjCode());    ZcEbPlan plan = (ZcEbPlan) baseDao.read("ZcEbPlan.getZcEbPlan", dto);    plan.setOpenBidTime(rp.getBidEndTime());    plan.setBidEndTime(rp.getBidEndTime());    baseDao.update("ZcEbPlan.updateZcEbPlan", plan);    return rp;  }  public List getZcEbRfqProjListWithPackes(ElementConditionDto dto, RequestMeta requestMeta) {    List list = this.getZcEbRfqProjList(dto, requestMeta);    for (int i = 0; i < list.size(); i++) {      ZcEbProj proj = (ZcEbProj) list.get(i);      if (proj == null) {        continue;      }      List packList = this.baseDao.query("ZcEbProj.getZcEbPackListByProjCode", proj.getProjCode());      proj.setPackList(packList);    }    return list;  }  public ZcReportModel findEvalModel(String projCode, String packCode, RequestMeta requestMeta) {    // TCJLODO Auto-generated method stub    Map param = new HashMap();    param.put("proj_code", projCode);    param.put("pack_code", packCode);    ZcReportModel model = (ZcReportModel) baseDao.read("ZcEbRfq.findEvalById", param);    if (model == null) { return null; }    ElementConditionDto dto = new ElementConditionDto();    if (model.getZcSuName() == null || "".equals(model.getZcSuName())) {      dto.setZcText0(ZcSettingConstants.ZC_JB_EVAL_CANCEL_MODEL_CODE);    } else {      dto.setZcText0(ZcSettingConstants.ZC_JB_EVAL_MODEL_CODE);    }    List list = baseDao.query("ZcEbBulletinWordMold.getZcEbWordMoldByType", dto);    if (list != null && list.size() > 0) {      String fileId = ((ZcEbBulletinWordMold) list.get(0)).getFileID();      if (fileId != null && fileId.length() > 0) {        model.setFile((AsFile) baseDao.read("ZC_XMCG_HT.getContractTemplateContent", fileId));      }    }    return model;  }  public void createEval(String projCode, String packCode, String fileId, List xjSummaryList, RequestMeta requestMeta) {    // TCJLODO Auto-generated method stub    Map param = new HashMap();    param.put("proj_code", projCode);    param.put("pack_code", packCode);    ZcEbEvalReport bean = (ZcEbEvalReport) baseDao.read("ZcEbRfq.findEvalInfoById", param);    bean.setReportCode(UUID.randomUUID().toString());    bean.setStatus("0");    bean.setExecutor(requestMeta.getSvUserName());    bean.setExecuteDate(requestMeta.getSysDate());    bean.setNd(new Integer(requestMeta.getSvNd()));    bean.setReportAttachBlobid(fileId);    baseDao.insert("ZcEbEval.insertZcEbEvalReport", bean);    if (xjSummaryList != null) {      for (int i = 0; i < xjSummaryList.size(); i++) {        ZcXunJiaSummary xjs = (ZcXunJiaSummary) xjSummaryList.get(i);        ZcEbPackEvalResult rt = new ZcEbPackEvalResult();        rt.setResultCode(String.valueOf(UUID.randomUUID()));        rt.setProjCode(projCode);        rt.setPackCode(packCode);        rt.setProviderCode(xjs.getProviderCode());        rt.setProviderName(xjs.getProviderName());        rt.setProviderTotalPrice(xjs.getTotalPrice());        rt.setIsComplianceResult("Y");        if ("Y".equals(xjs.getIsClosedDeal())) {          rt.setEvalResult("4");        } else {          rt.setEvalResult("2");        }        baseDao.insert("ZcEbEval.insertZcEbPackEvalFinalSumResult", rt);      }    }  }  public ZcBulWModel findBulWModel(String projCode, String packCode, RequestMeta requestMeta) {    // TCJLODO Auto-generated method stub    Map param = new HashMap();    param.put("proj_code", projCode);    param.put("pack_code", packCode);    param.put("bulletin_type", ZcEbBulletin.ZHAOBIAO_XJ);    ZcBulWModel model = (ZcBulWModel) baseDao.read("ZcEbRfq.findBulWById", param);    if (model == null || model.getZcSuName() == null || "".equals(model.getZcSuName())) { return null; }    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText0(ZcSettingConstants.ZC_JB_BUL_W_MODEL_CODE);    List list = baseDao.query("ZcEbBulletinWordMold.getZcEbWordMoldByType", dto);    if (list != null && list.size() > 0) {      ZcEbBulletinWordMold bm = (ZcEbBulletinWordMold) list.get(0);      String fileId = bm.getFileID();      if (fileId != null && fileId.length() > 0) {        model.setFile((AsFile) baseDao.read("ZC_XMCG_HT.getContractTemplateContent", fileId));        model.setModCode(bm.getBulletinMoldCode());        model.setModName(bm.getBulletinMoldName());      }    }    return model;  }  public void createBulW(Map map, String fileId, RequestMeta requestMeta) {    // TCJLODO Auto-generated method stub    ZcEbBulletin bean = new ZcEbBulletin();    Long draftid = workflowDao.createDraftId();    bean.setProcessInstId(draftid);    bean.setProjCode(map.get("projCode").toString());    String id = NumUtil.getInstance().getNo(ZcEbBulletinConstants.COMPO_ZC_EB_BULLETIN_WID, "BULLETIN_ID", bean);    bean.setBulletinID(id);    AsWfDraft asWfDraft = new AsWfDraft();    asWfDraft.setCompoId(ZcEbBulletinConstants.COMPO_ZC_EB_BULLETIN_WID);    asWfDraft.setWfDraftName(bean.getTitleField());// zcEbBulletin.getTitleField());    asWfDraft.setUserId(requestMeta.getSvUserID());    asWfDraft.setMasterTabId(ZcEbBulletinConstants.COMPO_ZC_EB_BULLETIN_WID);    asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));    workflowDao.insertAsWfdraft(asWfDraft);    bean.setBulletinType(ZcEbBulletinConstants.TYPE_BULLETIN_WID);    bean.setBulletinStatus("0");    bean.setExecuteDate(requestMeta.getSysDate());    bean.setExecutor(requestMeta.getEmpName());    bean.setNd(new Integer(requestMeta.getSvNd()));    bean.setFileID(fileId);    bean.setIsExported(0);    bean.setOrgCode(requestMeta.getSvOrgCode());    bean.setAgency("900");    bean.setProjectCode(map.get("packCode") == null ? null : map.get("packCode").toString());    bean.setProjName(map.get("projName") == null ? null : map.get("projName").toString());    bean.setCoCode(map.get("coCode") == null ? null : map.get("coCode").toString());    bean.setMoldCode(map.get("modCode") == null ? null : map.get("modCode").toString());    bean.setMoldName(map.get("modName") == null ? null : map.get("modName").toString());    baseDao.insert("ZcEbBulletin.insert", bean);    WorkflowContext w = wfEngineAdapter.genCommonWFC(bean.getComment(), bean, ZcEbBulletinConstants.COMPO_ZC_EB_BULLETIN_WID, requestMeta);    wfEngineAdapter.newCommit(w, bean);  }  public ZcHtModel findHtModel(String projCode, String packCode, RequestMeta requestMeta) {    // TCJLODO Auto-generated method stub    Map param = new HashMap();    param.put("proj_code", projCode);    param.put("pack_code", packCode);    ZcHtModel model = (ZcHtModel) baseDao.read("ZcEbRfq.findHtById", param);    if (model == null || model.getZcSuName() == null || "".equals(model.getZcSuName())) { return null; }    ElementConditionDto dto = new ElementConditionDto();    dto.setZcText0(ZcSettingConstants.ZC_JB_HT_MODEL_CODE);    List list = baseDao.query("ZcEbBulletinWordMold.getZcEbWordMoldByType", dto);    if (list != null && list.size() > 0) {      String fileId = ((ZcEbBulletinWordMold) list.get(0)).getFileID();      if (fileId != null && fileId.length() > 0) {        model.setFile((AsFile) baseDao.read("ZC_XMCG_HT.getContractTemplateContent", fileId));        ZcXmcgHt ht = new ZcXmcgHt();        ht.setZcMakeCode(projCode);        ht.setZcBidCode(packCode);        String code = NumUtil.getInstance().getNo("ZC_XMCG_HT", "ZC_HT_CODE", ht);        model.setZcHtCode(code);      }    }    return model;  }  public void createHt(ZcXmcgHt ht, RequestMeta requestMeta) {    // TCJLODO Auto-generated method stub    Long draftid = workflowDao.createDraftId();    ht.setProcessInstId(draftid);    AsWfDraft asWfDraft = new AsWfDraft();    asWfDraft.setCompoId("ZC_XMCG_HT");    asWfDraft.setWfDraftName(ht.getTitleField());    asWfDraft.setUserId(requestMeta.getSvUserID());    asWfDraft.setMasterTabId("ZC_XMCG_HT");    asWfDraft.setWfDraftId(BigDecimal.valueOf(draftid.longValue()));    workflowDao.insertAsWfdraft(asWfDraft);    baseDao.insert("ZC_XMCG_HT.ibatorgenerated_insert", ht);    Map map = new HashMap();    map.put("purType", ZcSettingConstants.PITEM_OPIWAY_XJ);    map.put("packCode", ht.getZcBidCode());    List its = baseDao.query("ZC_T_BCHT_ITEM.selectItemForZxHt", map);    for (int i = 0; i < its.size(); i++) {      ZcTBchtItem it = (ZcTBchtItem) its.get(i);      it.setZcHtCode(ht.getZcHtCode());      it.setZcCtgryId(new BigDecimal(i));      baseDao.insert("ZC_T_BCHT_ITEM.ibatorgenerated_insert", its.get(i));    }    WorkflowContext w = wfEngineAdapter.genCommonWFC(ht.getComment(), ht, "ZC_XMCG_HT", requestMeta);    wfEngineAdapter.newCommit(w, ht);  }  public List queryExportsDatas(List reportIdLst, RequestMeta meta) {    // TCJLODO Auto-generated method stub    List rtn = new ArrayList();    for (int i = 0; i < reportIdLst.size(); i++) {      HashMap h = (HashMap) reportIdLst.get(i);      ElementConditionDto dto = new ElementConditionDto();      dto.setPackCode((String) h.get("PACK_CODE"));      dto.setProjCode((String) h.get("PROJ_CODE"));      Object obj = baseDao.read("ZcEbRfq.getZcEbRfqPack", dto);      if (obj != null) {        rtn.add(obj);      }    }    return rtn;  }  public String importRfqDataFN(ZcEbRfqPack bill, RequestMeta meta) {    // TCJLODO Auto-generated method stub    deleteZcEbRfqPack(bill, meta);    baseDao.insert("ZcEbRfq.insertZcEbRfqPack", bill);    return "成功导入询价开标数据";  }  /**   * 开标成功以后的废标，这里的废标，用于生产评标报告以后，有可能已经发了中标公告、通知书等，所以要将这些都删除，如果已经有了合同，则提示先作废合同，   * 再进行作废   * @param zcEbRfqPack   * @param requestMeta   */  public void crapBidFN(ZcEbRfqPack zcEbRfqPack, RequestMeta requestMeta) {    // TCJLODO Auto-generated method stub    //删除中标通知书    baseDao.delete("ZcEbNotice.deleteByPackCode", zcEbRfqPack.getPackCode());    //删除中标公告,暂不实现，因为公告是以项目为单位发布的，不是以分包发布的    //baseDao.delete("", zcEbRfqPack.getPackCode());    //删除评标 报告    baseDao.delete("ZcEbEval.deleteZcEbEvalReportByPackCode", zcEbRfqPack.getPackCode());    //更新开标结果        saveZcEbRfqPack(zcEbRfqPack, requestMeta);  }  public MainSubBill getExcelPrintObject(ZcEbRfqPack bill, int gysSum, RequestMeta meta) {    return getMainSubBill(bill, gysSum, meta);  }  private MainSubBill getMainSubBill(ZcEbRfqPack bill, int maxGyss, RequestMeta meta) {    MainSubBill mainSubBill = new MainSubBill();    //    mainSubBill.setMainBill(currentBill);    HashMap mainMap = new HashMap();    SimpleDateFormat sf = new SimpleDateFormat(ZcSettingConstants.SIMPLE_DATE_FORMAT_FULL);    ElementConditionDto dto = new ElementConditionDto();    dto.setDattr1(bill.getProjCode());    ZcEbPack pack = (ZcEbPack) baseDao.read("ZcEbProj.getZcEbPack", dto);    mainMap.put("OPEN_BID_TIME", sf.format(bill.getOpenBidDate()));    mainMap.put("PROJ_CODE", bill.getProjCode());    mainMap.put("PROJ_NAME", bill.getProjName());    mainMap.put("CO_NAME", pack == null ? "" : pack.getCoName());    mainMap.put("MAKE_CODE", pack == null ? "" : pack.getEntrust().getSn());    dto.setZcText0(bill.getProjCode());    dto.setPackCode(bill.getPackCode());    dto.setStatus("done");    List xjbjList = baseDao.query("ZC_EB_XUNJIA_BAOJIA.getXunJiaBaoJiaByCondition", dto);    /**     * 获取询价报价的明细     */    dto.setProjCode(bill.getProjCode());    List xjdList = baseDao.query("ZcEbRfq.getXunjiaDetaiList", dto);    if (xjdList == null) {      xjdList = new ArrayList<ZcXunJiaDetail>();    }    List xjSummaryList = collectSameProviderPrice(bill, xjbjList, xjdList);    int gysSum = xjSummaryList.size();    dto = new ElementConditionDto();    //    dto.setNd(bill.getNd());    //    dto.setCoCode(coCode)    //    Company company=baseDao.read("", obj)    //获取供应商信息 从@GYS_1 到@GYS_10    //默认的行数量 10    int maxGys = 10;    if (maxGyss > 0) {      maxGys = maxGyss;    }    String gys = "GYS_";    for (int i = 1; i <= maxGys; i++) {      if (i > gysSum) {        mainMap.put(gys + i, "");      } else {        ZcXunJiaSummary sm = (ZcXunJiaSummary) xjSummaryList.get(i - 1);        mainMap.put(gys + i, sm.getProviderName());      }    }    List subLst = new ArrayList();    ZcXunJiaSummary sm = (ZcXunJiaSummary) xjSummaryList.get(0);    for (int i = 1; i <= sm.getXunJiaDetailList().size(); i++) {      HashMap subRow = new HashMap();      subRow.put("INDX", "" + i);      ZcXunJiaDetail xd = (ZcXunJiaDetail) sm.getXunJiaDetailList().get(i - 1);      subRow.put("MER_NAME", xd.getSpName());      subRow.put("MER_SPEC", xd.getTech());      subRow.put("UNIT", xd.getUnit());      subRow.put("NUM", "" + xd.getSpNum());      for (int j = 1; j <= maxGys; j++) {        if (j > gysSum) {          subRow.put("GYS_SUM_" + j, "");        } else {          ZcXunJiaSummary smm = (ZcXunJiaSummary) xjSummaryList.get(j - 1);          String providerName = (String) mainMap.get(gys + j);          if (smm.getProviderName().equals(providerName)) {            for (int k = 0; k < smm.getXunJiaDetailList().size(); k++) {              ZcXunJiaDetail xjdetail = (ZcXunJiaDetail) smm.getXunJiaDetailList().get(k);              if (xjdetail.getXjCode().equals(xd.getXjCode())) {                subRow.put("GYS_SUM_" + j, "" + xjdetail.getSpTotalSum() == null ? "" : xjdetail.getSpTotalSum().doubleValue());              }            }          }        }      }      subRow.put("WIN_SUM", "");      subRow.put("WIN_GYS", "");      subLst.add(subRow);    }    //加上合计行    HashMap totalRow = new HashMap();    totalRow.put("INDX", "" + (subLst.size() + 1));    totalRow.put("MER_NAME", "合计");    totalRow.put("MER_SPEC", "");    totalRow.put("UNIT", "");    totalRow.put("NUM", "");    for (int j = 1; j <= maxGys; j++) {      if (j > gysSum) {        totalRow.put("GYS_SUM_" + j, "");      } else {        ZcXunJiaSummary smm = (ZcXunJiaSummary) xjSummaryList.get(j - 1);        String providerName = (String) mainMap.get(gys + j);        if (smm.getProviderName().equals(providerName)) {          totalRow.put("GYS_SUM_" + j, "" + (smm.getTotalPrice() == null ? "" : smm.getTotalPrice().doubleValue()));        }      }    }    totalRow.put("WIN_GYS", bill.getWinBidProviderName());    totalRow.put("WIN_SUM", "" + (bill.getWinBidSum() == null ? "" : bill.getWinBidSum().doubleValue()));    subLst.add(totalRow);    //奇怪的几个文本在打印时不显示，在这里用变量代替好了    mainMap.put("@TITLE_1", "报价单位 商品报价（元）品牌");    mainMap.put("@TITLE_2", "成交结果");    mainSubBill.setMainBill(mainMap);    mainSubBill.setSubBillList(subLst);    return mainSubBill;  }  public PrintObject getOpenBidPrintObject(ZcEbRfqPack bill, RequestMeta meta) {    return PrintManager.genMainSubPrintObject(getExcelPrintObject(bill, -1, meta));  }  /**   * @Description: 根据供应商的报价明细，按每个供应商汇总生成汇总结果。   * @return void 返回类型   * @since 1.0   */  private List collectSameProviderPrice(ZcEbRfqPack zcEbRfqPack, List xjbjList, List xjdList) {    ZcXunJiaSummary sum = null;    List xjSummaryList = new ArrayList();    //如果没有中标人，那么暂时将暂时中标人设置为一个不可能存在的值    String winnerCode = zcEbRfqPack.getWinBidProviderCode() == null ? "##@##" : zcEbRfqPack.getWinBidProviderCode();    /**     * 先按供应商进行分组，同一个供应商的报价明细分到一组，然后汇总每个供应商报价的总和。     */    for (int n = 0; n < xjbjList.size(); n++) {      ZcEbXunJiaBaoJia bj = (ZcEbXunJiaBaoJia) xjbjList.get(n);      sum = new ZcXunJiaSummary();      List<ZcXunJiaDetail> xunJiaDetailList = new ArrayList<ZcXunJiaDetail>();      for (int m = 0; m < xjdList.size(); m++) {        ZcXunJiaDetail xj1 = (ZcXunJiaDetail) xjdList.get(m);        if (bj.getProjCode().equals(xj1.getProjCode()) && bj.getSupplierCode().equals(xj1.getProviderCode())) {          xunJiaDetailList.add(xj1);        }      }      sum.setXunJiaDetailList(xunJiaDetailList);      //询价报价存在多个明细的话：只要有一个明细有现货，汇总结果就是有现货；供货时间取最早的供货时间      String haveXianhuo = "N";      Date gonghuoDate = xunJiaDetailList.get(0).getGongHuoDate();      BigDecimal totalPrice = new BigDecimal(0.0);      for (ZcXunJiaDetail detail : xunJiaDetailList) {        if ("Y".equals(detail.getHaveXianHuo())) {          haveXianhuo = "Y";        }        if (gonghuoDate != null) {          if (detail.getGongHuoDate() != null && gonghuoDate.after(detail.getGongHuoDate())) {            gonghuoDate = detail.getGongHuoDate();          }        }        totalPrice = totalPrice.add(detail.getSpTotalSum());      }      sum.setHaveXianHuo(haveXianhuo);      sum.setGongHuoDate(gonghuoDate);      sum.setIsClosedDeal(winnerCode.equals(bj.getSupplierCode()) ? "Y" : "N");      sum.setProviderCode(bj.getSupplierCode());      sum.setProviderName(bj.getSupplierName());      sum.setTotalPrice(totalPrice);      sum.setLinkMan(bj.getManager());      sum.setLinkTel(bj.getPhone());      sum.setRemark(bj.getRemark());      sum.setBjDate(bj.getBjDate());      xjSummaryList.add(sum);    }    return xjSummaryList;  }}